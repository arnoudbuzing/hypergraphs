(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Wolfram 14.1' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       154,          7]
NotebookDataLength[   2347281,      43697]
NotebookOptionsPosition[   2338706,      43542]
NotebookOutlinePosition[   2339372,      43564]
CellTagsIndexPosition[   2339264,      43559]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell[BoxData[
 RowBox[{
  RowBox[{"PacletDirectoryLoad", "[", "\"\<~/hypergraphs\>\"", "]"}], 
  ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.9227953275058317`*^9, 3.9227953388123493`*^9}, 
   3.922801156956365*^9, {3.922867048217514*^9, 3.922867050123761*^9}},
 CellLabel->"In[21]:=",ExpressionUUID->"259332d2-4b14-4c3e-a9db-b355c9453396"],

Cell[BoxData[
 RowBox[{"Get", "[", "\"\<hypergraphs`\>\"", "]"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.922795340708645*^9, 3.922795351304397*^9}, {
  3.922795429297056*^9, 3.92279542967712*^9}, {3.9228670552334013`*^9, 
  3.922867056366378*^9}},
 CellLabel->"In[22]:=",ExpressionUUID->"3dd7fc1d-8355-4c10-95ee-3695ce06211f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Names", "[", "\"\<hypergraphs`*\>\"", "]"}], "//", 
  "Length"}]], "Input",
 CellChangeTimes->{{3.9229613441014347`*^9, 3.922961364004706*^9}},
 CellLabel->"In[23]:=",ExpressionUUID->"0a607e33-422a-4ee2-9a4a-66e96fda3f5c"],

Cell[BoxData["70"], "Output",
 CellChangeTimes->{3.922961364455208*^9, 3.922969836922104*^9},
 CellLabel->"Out[23]=",ExpressionUUID->"bd1d3545-c73e-45c9-a1ca-3e31637982fb"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "hypergraphs`*"}]], "Input",
 CellChangeTimes->{{3.922795352907256*^9, 3.922795357739148*^9}, {
  3.922867079365137*^9, 3.922867080538315*^9}},
 CellLabel->"In[24]:=",ExpressionUUID->"61978bf5-4672-4f2b-9700-62c7bb0413eb"],

Cell[BoxData[
 StyleBox[
  FrameBox[GridBox[{
     {
      DynamicModuleBox[{Typeset`open$$ = True}, 
       PaneSelectorBox[{False->
        ButtonBox[
         RowBox[{
          
          DynamicBox[FEPrivate`FrontEndResource[
           "FEBitmaps", "RightPointerOpener"]], " ", 
          StyleBox["hypergraphs`", "InformationGridGroupHeader"]}],
         Appearance->None,
         BaseStyle->"InformationGridLink",
         ButtonFunction:>FEPrivate`Set[Typeset`open$$, True],
         Evaluator->Automatic,
         Method->"Preemptive"], True->
        PaneBox[GridBox[{
           {
            ButtonBox[
             RowBox[{
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{10., {2.134033203125, 7.865966796875}}], " ", 
              
              StyleBox["hypergraphs`", "InformationGridGroupHeader"]}],
             Appearance->None,
             BaseStyle->"InformationGridLink",
             ButtonFunction:>FEPrivate`Set[Typeset`open$$, False],
             Evaluator->Automatic,
             Method->"Preemptive"]},
           {
            PaneBox[GridBox[{
               {
                ButtonBox[
                 StyleBox["CreateHypergraph", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-53b4489c-34b6-4385-86cc-4d2858b31383", {
                   "CreateHypergraph", "hypergraphs`"}, False},
                 ButtonNote->"hypergraphs`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HypergraphDistance", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-53b4489c-34b6-4385-86cc-4d2858b31383", {
                   "HypergraphDistance", "hypergraphs`"}, False},
                 ButtonNote->"hypergraphs`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HypergraphFromNumpyArray", "InformationGridButton"],
                 
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-53b4489c-34b6-4385-86cc-4d2858b31383", {
                   "HypergraphFromNumpyArray", "hypergraphs`"}, False},
                 ButtonNote->"hypergraphs`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HypergraphNodeDiameters", "InformationGridButton"],
                 
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-53b4489c-34b6-4385-86cc-4d2858b31383", {
                   "HypergraphNodeDiameters", "hypergraphs`"}, False},
                 ButtonNote->"hypergraphs`",
                 Evaluator->Automatic], 
                ButtonBox[
                 
                 StyleBox["HypergraphRestrictToEdges", 
                  "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-53b4489c-34b6-4385-86cc-4d2858b31383", {
                   "HypergraphRestrictToEdges", "hypergraphs`"}, False},
                 ButtonNote->"hypergraphs`",
                 Evaluator->Automatic]},
               {
                ButtonBox[
                 
                 StyleBox["HypergraphAdjacencyMatrix", 
                  "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-53b4489c-34b6-4385-86cc-4d2858b31383", {
                   "HypergraphAdjacencyMatrix", "hypergraphs`"}, False},
                 ButtonNote->"hypergraphs`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HypergraphDual", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-53b4489c-34b6-4385-86cc-4d2858b31383", {
                   "HypergraphDual", "hypergraphs`"}, False},
                 ButtonNote->"hypergraphs`",
                 Evaluator->Automatic], 
                ButtonBox[
                 
                 StyleBox["HypergraphGetCellProperties", 
                  "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-53b4489c-34b6-4385-86cc-4d2858b31383", {
                   "HypergraphGetCellProperties", "hypergraphs`"}, False},
                 ButtonNote->"hypergraphs`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HypergraphNodeProperties", "InformationGridButton"],
                 
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-53b4489c-34b6-4385-86cc-4d2858b31383", {
                   "HypergraphNodeProperties", "hypergraphs`"}, False},
                 ButtonNote->"hypergraphs`",
                 Evaluator->Automatic], 
                ButtonBox[
                 
                 StyleBox["HypergraphRestrictToNodes", 
                  "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-53b4489c-34b6-4385-86cc-4d2858b31383", {
                   "HypergraphRestrictToNodes", "hypergraphs`"}, False},
                 ButtonNote->"hypergraphs`",
                 Evaluator->Automatic]},
               {
                ButtonBox[
                 
                 StyleBox["HypergraphAuxiliaryMatrix", 
                  "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-53b4489c-34b6-4385-86cc-4d2858b31383", {
                   "HypergraphAuxiliaryMatrix", "hypergraphs`"}, False},
                 ButtonNote->"hypergraphs`",
                 Evaluator->Automatic], 
                ButtonBox[
                 
                 StyleBox["HypergraphEdgeAdjacencyMatrix", 
                  "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-53b4489c-34b6-4385-86cc-4d2858b31383", {
                   "HypergraphEdgeAdjacencyMatrix", "hypergraphs`"}, False},
                 ButtonNote->"hypergraphs`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HypergraphGetLineGraph", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-53b4489c-34b6-4385-86cc-4d2858b31383", {
                   "HypergraphGetLineGraph", "hypergraphs`"}, False},
                 ButtonNote->"hypergraphs`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HypergraphNodeProps", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-53b4489c-34b6-4385-86cc-4d2858b31383", {
                   "HypergraphNodeProps", "hypergraphs`"}, False},
                 ButtonNote->"hypergraphs`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HypergraphSComponents", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-53b4489c-34b6-4385-86cc-4d2858b31383", {
                   "HypergraphSComponents", "hypergraphs`"}, False},
                 ButtonNote->"hypergraphs`",
                 Evaluator->Automatic]},
               {
                ButtonBox[
                 StyleBox["HypergraphBipartite", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-53b4489c-34b6-4385-86cc-4d2858b31383", {
                   "HypergraphBipartite", "hypergraphs`"}, False},
                 ButtonNote->"hypergraphs`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HypergraphEdgeCol", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-53b4489c-34b6-4385-86cc-4d2858b31383", {
                   "HypergraphEdgeCol", "hypergraphs`"}, False},
                 ButtonNote->"hypergraphs`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HypergraphGetProperties", "InformationGridButton"],
                 
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-53b4489c-34b6-4385-86cc-4d2858b31383", {
                   "HypergraphGetProperties", "hypergraphs`"}, False},
                 ButtonNote->"hypergraphs`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HypergraphNodes", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-53b4489c-34b6-4385-86cc-4d2858b31383", {
                   "HypergraphNodes", "hypergraphs`"}, False},
                 ButtonNote->"hypergraphs`",
                 Evaluator->Automatic], 
                ButtonBox[
                 
                 StyleBox["HypergraphSComponentSubgraphs", 
                  "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-53b4489c-34b6-4385-86cc-4d2858b31383", {
                   "HypergraphSComponentSubgraphs", "hypergraphs`"}, False},
                 ButtonNote->"hypergraphs`",
                 Evaluator->Automatic]},
               {
                ButtonBox[
                 StyleBox["HypergraphCollapseEdges", "InformationGridButton"],
                 
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-53b4489c-34b6-4385-86cc-4d2858b31383", {
                   "HypergraphCollapseEdges", "hypergraphs`"}, False},
                 ButtonNote->"hypergraphs`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HypergraphEdgeDiameter", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-53b4489c-34b6-4385-86cc-4d2858b31383", {
                   "HypergraphEdgeDiameter", "hypergraphs`"}, False},
                 ButtonNote->"hypergraphs`",
                 Evaluator->Automatic], 
                ButtonBox[
                 
                 StyleBox["HypergraphIncidenceDataFrame", 
                  "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-53b4489c-34b6-4385-86cc-4d2858b31383", {
                   "HypergraphIncidenceDataFrame", "hypergraphs`"}, False},
                 ButtonNote->"hypergraphs`",
                 Evaluator->Automatic], 
                ButtonBox[
                 
                 StyleBox["HypergraphNodeWeightPropCol", 
                  "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-53b4489c-34b6-4385-86cc-4d2858b31383", {
                   "HypergraphNodeWeightPropCol", "hypergraphs`"}, False},
                 ButtonNote->"hypergraphs`",
                 Evaluator->Automatic], 
                ButtonBox[
                 
                 StyleBox["HypergraphSConnectedComponents", 
                  "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-53b4489c-34b6-4385-86cc-4d2858b31383", {
                   "HypergraphSConnectedComponents", "hypergraphs`"}, False},
                 ButtonNote->"hypergraphs`",
                 Evaluator->Automatic]},
               {
                ButtonBox[
                 StyleBox["HypergraphCollapseNodes", "InformationGridButton"],
                 
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-53b4489c-34b6-4385-86cc-4d2858b31383", {
                   "HypergraphCollapseNodes", "hypergraphs`"}, False},
                 ButtonNote->"hypergraphs`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HypergraphEdgeDistance", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-53b4489c-34b6-4385-86cc-4d2858b31383", {
                   "HypergraphEdgeDistance", "hypergraphs`"}, False},
                 ButtonNote->"hypergraphs`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HypergraphIncidenceDict", "InformationGridButton"],
                 
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-53b4489c-34b6-4385-86cc-4d2858b31383", {
                   "HypergraphIncidenceDict", "hypergraphs`"}, False},
                 ButtonNote->"hypergraphs`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HypergraphNumberOfEdges", "InformationGridButton"],
                 
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-53b4489c-34b6-4385-86cc-4d2858b31383", {
                   "HypergraphNumberOfEdges", "hypergraphs`"}, False},
                 ButtonNote->"hypergraphs`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HypergraphSelf", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-53b4489c-34b6-4385-86cc-4d2858b31383", {
                   "HypergraphSelf", "hypergraphs`"}, False},
                 ButtonNote->"hypergraphs`",
                 Evaluator->Automatic]},
               {
                ButtonBox[
                 
                 StyleBox["HypergraphCollapseNodesAndEdges", 
                  "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-53b4489c-34b6-4385-86cc-4d2858b31383", {
                   "HypergraphCollapseNodesAndEdges", "hypergraphs`"}, False},
                 
                 ButtonNote->"hypergraphs`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HypergraphEdgeNeighbors", "InformationGridButton"],
                 
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-53b4489c-34b6-4385-86cc-4d2858b31383", {
                   "HypergraphEdgeNeighbors", "hypergraphs`"}, False},
                 ButtonNote->"hypergraphs`",
                 Evaluator->Automatic], 
                ButtonBox[
                 
                 StyleBox["HypergraphIncidenceMatrix", 
                  "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-53b4489c-34b6-4385-86cc-4d2858b31383", {
                   "HypergraphIncidenceMatrix", "hypergraphs`"}, False},
                 ButtonNote->"hypergraphs`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HypergraphNumberOfNodes", "InformationGridButton"],
                 
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-53b4489c-34b6-4385-86cc-4d2858b31383", {
                   "HypergraphNumberOfNodes", "hypergraphs`"}, False},
                 ButtonNote->"hypergraphs`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HypergraphSetState", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-53b4489c-34b6-4385-86cc-4d2858b31383", {
                   "HypergraphSetState", "hypergraphs`"}, False},
                 ButtonNote->"hypergraphs`",
                 Evaluator->Automatic]},
               {
                ButtonBox[
                 StyleBox["HypergraphComponents", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-53b4489c-34b6-4385-86cc-4d2858b31383", {
                   "HypergraphComponents", "hypergraphs`"}, False},
                 ButtonNote->"hypergraphs`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HypergraphEdgeProperties", "InformationGridButton"],
                 
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-53b4489c-34b6-4385-86cc-4d2858b31383", {
                   "HypergraphEdgeProperties", "hypergraphs`"}, False},
                 ButtonNote->"hypergraphs`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HypergraphIsConnected", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-53b4489c-34b6-4385-86cc-4d2858b31383", {
                   "HypergraphIsConnected", "hypergraphs`"}, False},
                 ButtonNote->"hypergraphs`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HypergraphOrder", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-53b4489c-34b6-4385-86cc-4d2858b31383", {
                   "HypergraphOrder", "hypergraphs`"}, False},
                 ButtonNote->"hypergraphs`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HypergraphSetSystem", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-53b4489c-34b6-4385-86cc-4d2858b31383", {
                   "HypergraphSetSystem", "hypergraphs`"}, False},
                 ButtonNote->"hypergraphs`",
                 Evaluator->Automatic]},
               {
                ButtonBox[
                 
                 StyleBox["HypergraphComponentSubGraphs", 
                  "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-53b4489c-34b6-4385-86cc-4d2858b31383", {
                   "HypergraphComponentSubGraphs", "hypergraphs`"}, False},
                 ButtonNote->"hypergraphs`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HypergraphEdgeProps", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-53b4489c-34b6-4385-86cc-4d2858b31383", {
                   "HypergraphEdgeProps", "hypergraphs`"}, False},
                 ButtonNote->"hypergraphs`",
                 Evaluator->Automatic], 
                ButtonBox[
                 
                 StyleBox["HypergraphMiscCellProperties", 
                  "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-53b4489c-34b6-4385-86cc-4d2858b31383", {
                   "HypergraphMiscCellProperties", "hypergraphs`"}, False},
                 ButtonNote->"hypergraphs`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HypergraphProperties", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-53b4489c-34b6-4385-86cc-4d2858b31383", {
                   "HypergraphProperties", "hypergraphs`"}, False},
                 ButtonNote->"hypergraphs`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HypergraphShape", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-53b4489c-34b6-4385-86cc-4d2858b31383", {
                   "HypergraphShape", "hypergraphs`"}, False},
                 ButtonNote->"hypergraphs`",
                 Evaluator->Automatic]},
               {
                ButtonBox[
                 
                 StyleBox["HypergraphConnectedComponents", 
                  "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-53b4489c-34b6-4385-86cc-4d2858b31383", {
                   "HypergraphConnectedComponents", "hypergraphs`"}, False},
                 ButtonNote->"hypergraphs`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HypergraphEdges", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-53b4489c-34b6-4385-86cc-4d2858b31383", {
                   "HypergraphEdges", "hypergraphs`"}, False},
                 ButtonNote->"hypergraphs`",
                 Evaluator->Automatic], 
                ButtonBox[
                 
                 StyleBox["HypergraphMiscCellPropertiesCol", 
                  "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-53b4489c-34b6-4385-86cc-4d2858b31383", {
                   "HypergraphMiscCellPropertiesCol", "hypergraphs`"}, False},
                 
                 ButtonNote->"hypergraphs`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HypergraphProps2Dict", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-53b4489c-34b6-4385-86cc-4d2858b31383", {
                   "HypergraphProps2Dict", "hypergraphs`"}, False},
                 ButtonNote->"hypergraphs`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HypergraphSingletons", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-53b4489c-34b6-4385-86cc-4d2858b31383", {
                   "HypergraphSingletons", "hypergraphs`"}, False},
                 ButtonNote->"hypergraphs`",
                 Evaluator->Automatic]},
               {
                ButtonBox[
                 StyleBox["HypergraphDataset", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-53b4489c-34b6-4385-86cc-4d2858b31383", {
                   "HypergraphDataset", "hypergraphs`"}, False},
                 ButtonNote->"hypergraphs`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HypergraphEdgeSizeDist", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-53b4489c-34b6-4385-86cc-4d2858b31383", {
                   "HypergraphEdgeSizeDist", "hypergraphs`"}, False},
                 ButtonNote->"hypergraphs`",
                 Evaluator->Automatic], 
                ButtonBox[
                 
                 StyleBox["HypergraphMiscPropertiesCol", 
                  "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-53b4489c-34b6-4385-86cc-4d2858b31383", {
                   "HypergraphMiscPropertiesCol", "hypergraphs`"}, False},
                 ButtonNote->"hypergraphs`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HypergraphRemove", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-53b4489c-34b6-4385-86cc-4d2858b31383", {
                   "HypergraphRemove", "hypergraphs`"}, False},
                 ButtonNote->"hypergraphs`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HypergraphSize", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-53b4489c-34b6-4385-86cc-4d2858b31383", {
                   "HypergraphSize", "hypergraphs`"}, False},
                 ButtonNote->"hypergraphs`",
                 Evaluator->Automatic]},
               {
                ButtonBox[
                 StyleBox["HypergraphDegree", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-53b4489c-34b6-4385-86cc-4d2858b31383", {
                   "HypergraphDegree", "hypergraphs`"}, False},
                 ButtonNote->"hypergraphs`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HypergraphFromBipartite", "InformationGridButton"],
                 
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-53b4489c-34b6-4385-86cc-4d2858b31383", {
                   "HypergraphFromBipartite", "hypergraphs`"}, False},
                 ButtonNote->"hypergraphs`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HypergraphName", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-53b4489c-34b6-4385-86cc-4d2858b31383", {
                   "HypergraphName", "hypergraphs`"}, False},
                 ButtonNote->"hypergraphs`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HypergraphRemoveEdges", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-53b4489c-34b6-4385-86cc-4d2858b31383", {
                   "HypergraphRemoveEdges", "hypergraphs`"}, False},
                 ButtonNote->"hypergraphs`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HypergraphSubGraphs", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-53b4489c-34b6-4385-86cc-4d2858b31383", {
                   "HypergraphSubGraphs", "hypergraphs`"}, False},
                 ButtonNote->"hypergraphs`",
                 Evaluator->Automatic]},
               {
                ButtonBox[
                 StyleBox["HypergraphDiameter", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-53b4489c-34b6-4385-86cc-4d2858b31383", {
                   "HypergraphDiameter", "hypergraphs`"}, False},
                 ButtonNote->"hypergraphs`",
                 Evaluator->Automatic], 
                ButtonBox[
                 
                 StyleBox["HypergraphFromIncidenceDataFrame", 
                  "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-53b4489c-34b6-4385-86cc-4d2858b31383", {
                   "HypergraphFromIncidenceDataFrame", "hypergraphs`"}, False},
                 ButtonNote->"hypergraphs`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HypergraphNeighbors", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-53b4489c-34b6-4385-86cc-4d2858b31383", {
                   "HypergraphNeighbors", "hypergraphs`"}, False},
                 ButtonNote->"hypergraphs`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HypergraphRemoveNodes", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-53b4489c-34b6-4385-86cc-4d2858b31383", {
                   "HypergraphRemoveNodes", "hypergraphs`"}, False},
                 ButtonNote->"hypergraphs`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HypergraphToplexes", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-53b4489c-34b6-4385-86cc-4d2858b31383", {
                   "HypergraphToplexes", "hypergraphs`"}, False},
                 ButtonNote->"hypergraphs`",
                 Evaluator->Automatic]},
               {
                ButtonBox[
                 StyleBox["HypergraphDim", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-53b4489c-34b6-4385-86cc-4d2858b31383", {
                   "HypergraphDim", "hypergraphs`"}, False},
                 ButtonNote->"hypergraphs`",
                 Evaluator->Automatic], 
                ButtonBox[
                 
                 StyleBox["HypergraphFromIncidenceMatrix", 
                  "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-53b4489c-34b6-4385-86cc-4d2858b31383", {
                   "HypergraphFromIncidenceMatrix", "hypergraphs`"}, False},
                 ButtonNote->"hypergraphs`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HypergraphNodeCol", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-53b4489c-34b6-4385-86cc-4d2858b31383", {
                   "HypergraphNodeCol", "hypergraphs`"}, False},
                 ButtonNote->"hypergraphs`",
                 Evaluator->Automatic], 
                ButtonBox[
                 
                 StyleBox["HypergraphRemoveSingletons", 
                  "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-53b4489c-34b6-4385-86cc-4d2858b31383", {
                   "HypergraphRemoveSingletons", "hypergraphs`"}, False},
                 ButtonNote->"hypergraphs`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HypergraphWeightPropCol", "InformationGridButton"],
                 
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-53b4489c-34b6-4385-86cc-4d2858b31383", {
                   "HypergraphWeightPropCol", "hypergraphs`"}, False},
                 ButtonNote->"hypergraphs`",
                 Evaluator->Automatic]}
              },
              DefaultBaseStyle->"Text",
              
              GridBoxAlignment->{
               "Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
              GridBoxItemSize->{"Columns" -> {{
                   Scaled[0.19]}}}],
             ImageMargins->{{10, 0}, {0, 2}}]}
          },
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}}],
         FrameMargins->{{0, 0}, {8, 0}}]}, Dynamic[Typeset`open$$],
        ImageSize->Automatic]]}
    },
    GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
    GridBoxDividers->{"ColumnsIndexed" -> {{False}}, "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.5599999999999999]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.8]}, 
        Offset[0.2]}}],
   BaseStyle->"InformationTitleFrame"], "InformationGridPlain"]], "Output",
 CellChangeTimes->{
  3.9227953580801563`*^9, 3.922795432277608*^9, {3.922795585248816*^9, 
   3.922795614815357*^9}, 3.922795655242449*^9, 3.922795783183618*^9, 
   3.922796016272254*^9, 3.922796053683248*^9, 3.9227961062093573`*^9, {
   3.922796143226222*^9, 3.922796162247787*^9}, 3.922796979242429*^9, 
   3.9227971055644493`*^9, 3.922797284435854*^9, 3.922797781485618*^9, 
   3.92280115913234*^9, 3.922867081102633*^9, 3.9228672996318283`*^9, 
   3.922868043687945*^9, 3.922868122776121*^9, 3.9229698378299627`*^9},
 CellLabel->"Out[24]=",ExpressionUUID->"ad451e9e-dc05-4990-8552-72397da34862"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$2329043$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox[
             TagBox[
              TooltipBox[
               StyleBox["\<\" Symbol\"\>", "InformationRowLabel",
                StripOnInput->False],
               "\"Symbol\"",
               TooltipStyle->"TextStyling"],
              Annotation[#, "Symbol", "Tooltip"]& ], "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"HypergraphEdges[hg] returns the edges of the \
Hypergraph hg.\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[
           TagBox[GridBox[{
              {
               StyleBox[
                TagBox[
                 TooltipBox[
                  StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                   StripOnInput->False],
                  "\"Definitions\"",
                  TooltipStyle->"TextStyling"],
                 Annotation[#, "Definitions", "Tooltip"]& ], "DialogStyle",
                StripOnInput->False]},
              {
               TemplateBox[{"\"\[ThinSpace]\"", 
                 GridBox[{{
                    RowBox[{
                    
                    RowBox[{
                    "HypergraphEdges", "[", 
                    "hypergraphs`Private`hg_ExternalObject", "]"}], ":=", 
                    
                    RowBox[{
                    "hypergraphs`Private`executePythonEntrypoint", "[", 
                    
                    RowBox[{
                    "\"hypergraph\"", ",", "\"hypergraph.edges\"", ",", 
                    RowBox[{"Function", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    
                    RowBox[{"hypergraphs`Private`session", ",", 
                    "hypergraphs`Private`func"}], "}"}], ",", 
                    RowBox[{"hypergraphs`Private`func", "[", 
                    RowBox[{"\"Call\"", ",", "hypergraphs`Private`hg"}], 
                    "]"}]}], "]"}]}], "]"}]}]}, {" "}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  DefaultBaseStyle -> "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                "RowDefault"]}
             },
             DefaultBaseStyle->"Column",
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Column"],
           FrameMargins->{{6, 0}, {3, 6}}], "\<\"\"\>"},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"hypergraphs`HypergraphEdges\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->{{6, 6}, {6, 3}}], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$2329043$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox[
             TagBox[
              TooltipBox[
               StyleBox["\<\" Symbol\"\>", "InformationRowLabel",
                StripOnInput->False],
               "\"Symbol\"",
               TooltipStyle->"TextStyling"],
              Annotation[#, "Symbol", "Tooltip"]& ], "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"HypergraphEdges[hg] returns the edges of the \
Hypergraph hg.\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{10., {1.143798828125, 8.856201171875}}], True->
              
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{10., {1.143798828125, 8.856201171875}}]}, 
              Dynamic[System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$2329043$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$2329043$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[<|
   "ObjectType" -> "Symbol", "Usage" -> 
    "HypergraphEdges[hg] returns the edges of the Hypergraph hg.", 
    "Documentation" -> None, "OwnValues" -> None, "UpValues" -> None, 
    "DownValues" -> 
    Information`InformationValueForm[
     DownValues, hypergraphs`HypergraphEdges, {hypergraphs`HypergraphEdges[
         Pattern[hypergraphs`Private`hg, 
          Blank[ExternalObject]]] :> 
       hypergraphs`Private`executePythonEntrypoint[
        "hypergraph", "hypergraph.edges", 
         Function[{hypergraphs`Private`session, hypergraphs`Private`func}, 
          hypergraphs`Private`func["Call", hypergraphs`Private`hg]]]}], 
    "SubValues" -> None, "DefaultValues" -> None, "NValues" -> None, 
    "FormatValues" -> None, "Options" -> None, "Attributes" -> {}, "FullName" -> 
    "hypergraphs`HypergraphEdges"|>, False]]], "Print",
 CellTags->
  "Info-53b4489c-34b6-4385-86cc-4d2858b31383",ExpressionUUID->"0826cb2f-f598-\
4470-b45e-c0c370d30f81"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"EdgeList", "[", "hg", "]"}]], "Input",
 CellChangeTimes->{{3.922970663028651*^9, 3.922970678115376*^9}},
 CellLabel->"In[32]:=",ExpressionUUID->"1232c132-5495-459e-89ff-f0ce4429a081"],

Cell[BoxData[
 TemplateBox[{
  "EdgeList", "graph", 
   "\"A graph object is expected at position \\!\\(\\*RowBox[{\\\"1\\\"}]\\) \
in \\!\\(\\*RowBox[{\\\"EdgeList\\\", \\\"[\\\", RowBox[{\\\"ExternalObject\\\
\", \\\"[\\\", \
RowBox[{InterpretationBox[RowBox[{TagBox[\\\"ExternalSessionObject\\\", \
\\\"SummaryHead\\\"], \\\"[\\\", DynamicModuleBox[{Typeset`open$$ = False, \
Set[Typeset`embedState$$, \\\"Ready\\\"]}, \
TemplateBox[List[PaneSelectorBox[List[Rule[False, \
GridBox[List[List[PaneBox[ButtonBox[DynamicBox[FEPrivate`FrontEndResource[\\\"\
FEBitmaps\\\", \\\"SummaryBoxOpener\\\"]], RuleDelayed[ButtonFunction, \
Set[Typeset`open$$, True]], Rule[Appearance, None], Rule[BaseStyle, List[]], \
Rule[Evaluator, Automatic], Rule[Method, \\\"Preemptive\\\"]], \
Rule[Alignment, List[Center, Center]], Rule[ImageSize, \
Dynamic[List[Automatic, Times[3.5`, \
Times[CurrentValue[\\\"FontCapHeight\\\"], \
Power[AbsoluteCurrentValue[Magnification], -1]]]]]]], \
GraphicsBox[List[Thickness[0.05`], List[FaceForm[List[RGBColor[1.`, 1.`, \
1.`], Opacity[1.`]]], FilledCurveBox[List[List[List[1, 4, 3], List[1, 3, 3], \
List[1, 3, 3], List[1, 3, 3]], List[List[1, 4, 3], List[1, 3, 3], List[1, 3, \
3], List[0, 1, 0], List[0, 1, 0], List[0, 1, 0], List[0, 1, 0], List[1, 3, \
3], List[1, 3, 3], List[0, 1, 0], List[1, 3, 3], List[1, 3, 3], List[0, 1, \
0], List[1, 3, 3], List[0, 1, 0], List[1, 3, 3], List[0, 1, 0]], List[List[1, \
4, 3], List[1, 3, 3], List[1, 3, 3], List[1, 3, 3]], List[List[1, 4, 3], \
List[1, 3, 3], List[0, 1, 0], List[1, 3, 3], List[0, 1, 0], List[1, 3, 3], \
List[0, 1, 0], List[0, 1, 0], List[1, 3, 3], List[1, 3, 3], List[1, 3, 3], \
List[0, 1, 0], List[0, 1, 0], List[0, 1, 0], List[0, 1, 0], List[1, 3, 3], \
List[1, 3, 3]]], List[List[List[7.5718000000000005`, 17.7334`], List[7.0998`, \
17.7334`], List[6.7168`, 17.342399999999998`], List[6.7168`, 16.8624`], \
List[6.7168`, 16.3854`], List[7.0998`, 15.997399999999999`], \
List[7.5718000000000005`, 15.997399999999999`], List[8.043800000000001`, \
15.997399999999999`], List[8.4268`, 16.3854`], List[8.4268`, 16.8624`], \
List[8.4268`, 17.342399999999998`], List[8.043800000000001`, 17.7334`], \
List[7.5718000000000005`, 17.7334`]], List[List[3.6828000000000007`, \
5.741399999999999`], List[2.5738000000000003`, 5.741399999999999`], \
List[1.7808000000000002`, 6.5014`], List[1.4488000000000012`, \
7.880399999999998`], List[1.0488000000000008`, 9.5434`], \
List[1.0488000000000008`, 10.5574`], List[1.4488000000000012`, 12.2214`], \
List[1.764800000000001`, 13.5404`], List[2.774800000000001`, 14.3604`], \
List[4.082800000000001`, 14.3604`], List[9.988800000000001`, 14.3604`], \
List[10.0388`, 14.956399999999999`], List[5.694800000000001`, 15.0054`], \
List[5.744800000000001`, 16.592399999999998`], List[5.744800000000001`, \
17.819399999999998`], List[6.059800000000001`, 18.4594`], \
List[7.8508000000000004`, 18.7754`], List[8.4788`, 18.8864`], List[9.1858`, \
18.9464`], List[9.8938`, 18.9504`], List[9.8978`, 18.9504`], List[10.6978`, \
18.9504`], List[11.4258`, 18.8914`], List[12.122800000000002`, 18.7754`], \
List[13.3428`, 18.5714`], List[14.2288`, 17.6534`], List[14.2288`, \
16.592399999999998`], List[14.2288`, 12.5034`], List[14.2288`, \
11.327399999999999`], List[13.2878`, 10.371400000000001`], List[12.1318`, \
10.371400000000001`], List[7.841800000000001`, 10.371400000000001`], \
List[6.360800000000001`, 10.371400000000001`], List[5.109800000000001`, \
9.1264`], List[5.109800000000001`, 7.6533999999999995`], \
List[5.109800000000001`, 5.741399999999999`]], List[List[12.401800000000001`, \
4.1044`], List[11.9298`, 4.1044`], List[11.5458`, 3.7164`], List[11.5458`, \
3.2394`], List[11.5458`, 2.7593999999999994`], List[11.9298`, \
2.369399999999999`], List[12.401800000000001`, 2.369399999999999`], \
List[12.872800000000002`, 2.369399999999999`], List[13.2568`, \
2.7593999999999994`], List[13.2568`, 3.2394`], List[13.2568`, 3.7164`], \
List[12.872800000000002`, 4.1044`], List[12.401800000000001`, 4.1044`]], \
List[List[9.9728`, 1.0493999999999986`], List[9.283800000000001`, \
1.0493999999999986`], List[8.610800000000001`, 1.1534000000000013`], \
List[7.8558`, 1.375399999999999`], List[7.0678`, 1.6073999999999984`], \
List[5.744800000000001`, 2.1934000000000005`], List[5.744800000000001`, \
3.509400000000001`], List[5.744800000000001`, 7.5984`], \
List[5.744800000000001`, 8.754399999999999`], List[6.7048000000000005`, \
9.731399999999999`], List[7.841800000000001`, 9.731399999999999`], \
List[12.1318`, 9.731399999999999`], List[13.6128`, 9.731399999999999`], \
List[14.863800000000001`, 11.000399999999999`], List[14.863800000000001`, \
12.5034`], List[14.863800000000001`, 14.4104`], List[16.425800000000002`, \
14.3604`], List[17.4948`, 14.3604`], List[18.1618`, 13.680399999999999`], \
List[18.524800000000003`, 12.2214`], List[18.963800000000003`, \
10.456399999999999`], List[18.963800000000003`, 9.1994`], List[18.5258`, \
7.884399999999999`], List[18.0638`, 6.495400000000002`], List[17.5918`, \
5.741399999999999`], List[16.425800000000002`, 5.741399999999999`], \
List[9.988800000000001`, 5.741399999999999`], List[9.9398`, 5.1464`], \
List[14.2788`, 5.096400000000001`], List[14.2288`, 3.509400000000001`], \
List[14.2288`, 2.2513999999999985`], List[13.0808`, 1.654399999999999`], \
List[12.116800000000001`, 1.375399999999999`], List[11.3628`, \
1.1563999999999979`], List[10.6608`, 1.0493999999999986`], List[9.9728`, \
1.0493999999999986`]]]]], List[FaceForm[List[RGBColor[0.20800000000000002`, \
0.514`, 0.6859999999999999`], Opacity[1.`]]], \
FilledCurveBox[List[List[List[1, 4, 3], List[1, 3, 3], List[1, 3, 3], List[1, \
3, 3]], List[List[1, 4, 3], List[1, 3, 3], List[0, 1, 0], List[0, 1, 0], \
List[0, 1, 0], List[0, 1, 0], List[0, 1, 0], List[1, 3, 3], List[1, 3, 3], \
List[1, 3, 3], List[0, 1, 0], List[0, 1, 0], List[1, 3, 3], List[0, 1, 0], \
List[1, 3, 3], List[0, 1, 0], List[1, 3, 3], List[1, 3, 3]]], \
List[List[List[7.5718000000000005`, 17.6836`], List[8.014800000000001`, \
17.6836`], List[8.3778`, 17.3156`], List[8.3778`, 16.862599999999997`], \
List[8.3778`, 16.4116`], List[8.014800000000001`, 16.046599999999998`], \
List[7.5718000000000005`, 16.046599999999998`], List[7.1268`, \
16.046599999999998`], List[6.7658000000000005`, 16.4116`], \
List[6.7658000000000005`, 16.862599999999997`], List[6.7658000000000005`, \
17.3156`], List[7.1268`, 17.6836`], List[7.5718000000000005`, 17.6836`]], \
List[List[9.8938`, 18.999599999999997`], List[9.1598`, 18.996599999999997`], \
List[8.4588`, 18.9336`], List[7.841800000000001`, 18.824599999999997`], \
List[6.024800000000001`, 18.5036`], List[5.694800000000001`, \
17.831599999999998`], List[5.694800000000001`, 16.592599999999997`], \
List[5.694800000000001`, 14.955599999999999`], List[9.988800000000001`, \
14.955599999999999`], List[9.988800000000001`, 14.410599999999999`], \
List[5.694800000000001`, 14.410599999999999`], List[4.0838`, \
14.410599999999999`], List[2.8358`, 14.410599999999999`], \
List[1.7418000000000005`, 13.660599999999999`], List[1.4008000000000003`, \
12.2336`], List[1.006800000000001`, 10.597599999999998`], \
List[0.9888000000000003`, 9.5766`], List[1.4008000000000003`, \
7.868599999999997`], List[1.7058000000000009`, 6.597599999999998`], \
List[2.434800000000001`, 5.6915999999999976`], List[3.6828000000000007`, \
5.6915999999999976`], List[5.158800000000001`, 5.6915999999999976`], \
List[5.158800000000001`, 7.653599999999999`], List[5.158800000000001`, \
9.070599999999999`], List[6.385800000000001`, 10.3216`], \
List[7.841800000000001`, 10.3216`], List[12.1318`, 10.3216`], List[13.3248`, \
10.3216`], List[14.2788`, 11.304599999999997`], List[14.2788`, \
12.503599999999999`], List[14.2788`, 16.592599999999997`], List[14.2788`, \
17.7566`], List[13.296800000000001`, 18.630599999999998`], List[12.1318`, \
18.824599999999997`], List[11.3938`, 18.947599999999998`], List[10.6278`, \
19.0036`], List[9.8938`, 18.999599999999997`]]]]], \
List[FaceForm[List[RGBColor[0.976`, 0.8430000000000001`, 0.353`], \
Opacity[1.`]]], FilledCurveBox[List[List[List[1, 4, 3], List[1, 3, 3], \
List[1, 3, 3], List[1, 3, 3]], List[List[0, 2, 0], List[1, 3, 3], List[0, 1, \
0], List[1, 3, 3], List[0, 1, 0], List[1, 3, 3], List[1, 3, 3], List[1, 3, \
3], List[0, 1, 0], List[0, 1, 0], List[0, 1, 0], List[0, 1, 0], List[0, 1, \
0], List[1, 3, 3], List[1, 3, 3], List[1, 3, 3]]], List[List[List[12.4014`, \
4.0552`], List[12.846400000000001`, 4.0552`], List[13.2074`, 3.6902`], \
List[13.2074`, 3.2392000000000003`], List[13.2074`, 2.7862`], \
List[12.846400000000001`, 2.4182`], List[12.4014`, 2.4182`], \
List[11.958400000000001`, 2.4182`], List[11.595400000000001`, 2.7862`], \
List[11.595400000000001`, 3.2392000000000003`], List[11.595400000000001`, \
3.6902`], List[11.958400000000001`, 4.0552`], List[12.4014`, 4.0552`]], \
List[List[14.814400000000001`, 14.410200000000003`], \
List[14.814400000000001`, 12.5032`], List[14.814400000000001`, \
11.025200000000002`], List[13.560400000000001`, 9.7812`], \
List[12.131400000000001`, 9.7812`], List[7.841400000000001`, 9.7812`], \
List[6.667400000000001`, 9.7812`], List[5.694400000000001`, 8.7752`], \
List[5.694400000000001`, 7.5982`], List[5.694400000000001`, 3.5102`], \
List[5.694400000000001`, 2.3462000000000005`], List[6.707400000000002`, \
1.6612000000000005`], List[7.841400000000001`, 1.3272`], List[9.2014`, \
0.9281999999999999`], List[10.5054`, 0.8552`], List[12.131400000000001`, \
1.3272`], List[13.2124`, 1.6402000000000005`], List[14.278400000000001`, \
2.2702`], List[14.278400000000001`, 3.5102`], List[14.278400000000001`, \
5.1462`], List[9.989400000000002`, 5.1462`], List[9.989400000000002`, \
5.6922`], List[14.278400000000001`, 5.6922`], List[16.4254`, 5.6922`], \
List[17.6734`, 5.6922`], List[18.1384`, 6.562200000000001`], \
List[18.572400000000002`, 7.8682`], List[19.0214`, 9.2142`], List[19.0024`, \
10.5082`], List[18.572400000000002`, 12.2332`], List[18.264400000000002`, \
13.475200000000001`], List[17.6754`, 14.410200000000003`], List[16.4254`, \
14.410200000000003`]]]]]], List[Rule[ImageSize, Dynamic[List[Automatic, \
Times[3.5`, Times[CurrentValue[\\\"FontCapHeight\\\"], \
Power[AbsoluteCurrentValue[Magnification], -1]]]]]], Rule[AspectRatio, \
Automatic], Rule[ImageSize, List[20.`, 20.`]], Rule[PlotRange, List[List[0.`, \
20.`], List[0.`, 20.`]]]]], \
GridBox[List[List[RowBox[List[TagBox[\\\"\\\\\\\"System: \\\\\\\"\\\", \
\\\"SummaryItemAnnotation\\\"], \\\"\\\\[InvisibleSpace]\\\", TagBox[\\\"\\\\\
\\\"Python\\\\\\\"\\\", \\\"SummaryItem\\\"]]], RowBox[List[TagBox[\\\"\\\\\\\
\"Name: \\\\\\\"\\\", \\\"SummaryItemAnnotation\\\"], \
\\\"\\\\[InvisibleSpace]\\\", TagBox[\\\"None\\\", \\\"SummaryItem\\\"]]]], \
List[RowBox[List[TagBox[\\\"\\\\\\\"Evaluator: \\\\\\\"\\\", \
\\\"SummaryItemAnnotation\\\"], \\\"\\\\[InvisibleSpace]\\\", TagBox[PaneBox[\
\\\"\\\\\\\"/Users/arnoudb/Library/Wolfram/ApplicationData/ExternalEvaluate/\
Python/Venv/Wolfram-hypergraph/bin/python\\\\\\\"\\\", Rule[BaselinePosition, \
Baseline]], \\\"SummaryItem\\\"]]], \\\"\\\\[SpanFromLeft]\\\"]], \
Rule[GridBoxAlignment, List[Rule[\\\"Columns\\\", List[List[Left]]], \
Rule[\\\"Rows\\\", List[List[Automatic]]]]], Rule[AutoDelete, False], \
Rule[GridBoxItemSize, List[Rule[\\\"Columns\\\", List[List[Automatic]]], \
Rule[\\\"Rows\\\", List[List[Automatic]]]]], Rule[GridBoxSpacings, List[Rule[\
\\\"Columns\\\", List[List[2]]], Rule[\\\"Rows\\\", List[List[Automatic]]]]], \
Rule[BaseStyle, List[Rule[ShowStringCharacters, False], Rule[NumberMarks, \
False], Rule[PrintPrecision, 3], Rule[ShowSyntaxStyles, False]]]]]], \
Rule[GridBoxAlignment, List[Rule[\\\"Columns\\\", List[List[Left]]], \
Rule[\\\"Rows\\\", List[List[Top]]]]], Rule[AutoDelete, False], \
Rule[GridBoxItemSize, List[Rule[\\\"Columns\\\", List[List[Automatic]]], \
Rule[\\\"Rows\\\", List[List[Automatic]]]]], Rule[BaselinePosition, List[1, \
1]]]], Rule[True, \
GridBox[List[List[PaneBox[ButtonBox[DynamicBox[FEPrivate`FrontEndResource[\\\"\
FEBitmaps\\\", \\\"SummaryBoxCloser\\\"]], RuleDelayed[ButtonFunction, \
Set[Typeset`open$$, False]], Rule[Appearance, None], Rule[BaseStyle, List[]], \
Rule[Evaluator, Automatic], Rule[Method, \\\"Preemptive\\\"]], \
Rule[Alignment, List[Center, Center]], Rule[ImageSize, \
Dynamic[List[Automatic, Times[3.5`, \
Times[CurrentValue[\\\"FontCapHeight\\\"], \
Power[AbsoluteCurrentValue[Magnification], -1]]]]]]], \
GraphicsBox[List[Thickness[0.05`], List[FaceForm[List[RGBColor[1.`, 1.`, \
1.`], Opacity[1.`]]], FilledCurveBox[List[List[List[1, 4, 3], List[1, 3, 3], \
List[1, 3, 3], List[1, 3, 3]], List[List[1, 4, 3], List[1, 3, 3], List[1, 3, \
3], List[0, 1, 0], List[0, 1, 0], List[0, 1, 0], List[0, 1, 0], List[1, 3, \
3], List[1, 3, 3], List[0, 1, 0], List[1, 3, 3], List[1, 3, 3], List[0, 1, \
0], List[1, 3, 3], List[0, 1, 0], List[1, 3, 3], List[0, 1, 0]], List[List[1, \
4, 3], List[1, 3, 3], List[1, 3, 3], List[1, 3, 3]], List[List[1, 4, 3], \
List[1, 3, 3], List[0, 1, 0], List[1, 3, 3], List[0, 1, 0], List[1, 3, 3], \
List[0, 1, 0], List[0, 1, 0], List[1, 3, 3], List[1, 3, 3], List[1, 3, 3], \
List[0, 1, 0], List[0, 1, 0], List[0, 1, 0], List[0, 1, 0], List[1, 3, 3], \
List[1, 3, 3]]], List[List[List[7.5718000000000005`, 17.7334`], List[7.0998`, \
17.7334`], List[6.7168`, 17.342399999999998`], List[6.7168`, 16.8624`], \
List[6.7168`, 16.3854`], List[7.0998`, 15.997399999999999`], \
List[7.5718000000000005`, 15.997399999999999`], List[8.043800000000001`, \
15.997399999999999`], List[8.4268`, 16.3854`], List[8.4268`, 16.8624`], \
List[8.4268`, 17.342399999999998`], List[8.043800000000001`, 17.7334`], \
List[7.5718000000000005`, 17.7334`]], List[List[3.6828000000000007`, \
5.741399999999999`], List[2.5738000000000003`, 5.741399999999999`], \
List[1.7808000000000002`, 6.5014`], List[1.4488000000000012`, \
7.880399999999998`], List[1.0488000000000008`, 9.5434`], \
List[1.0488000000000008`, 10.5574`], List[1.4488000000000012`, 12.2214`], \
List[1.764800000000001`, 13.5404`], List[2.774800000000001`, 14.3604`], \
List[4.082800000000001`, 14.3604`], List[9.988800000000001`, 14.3604`], \
List[10.0388`, 14.956399999999999`], List[5.694800000000001`, 15.0054`], \
List[5.744800000000001`, 16.592399999999998`], List[5.744800000000001`, \
17.819399999999998`], List[6.059800000000001`, 18.4594`], \
List[7.8508000000000004`, 18.7754`], List[8.4788`, 18.8864`], List[9.1858`, \
18.9464`], List[9.8938`, 18.9504`], List[9.8978`, 18.9504`], List[10.6978`, \
18.9504`], List[11.4258`, 18.8914`], List[12.122800000000002`, 18.7754`], \
List[13.3428`, 18.5714`], List[14.2288`, 17.6534`], List[14.2288`, \
16.592399999999998`], List[14.2288`, 12.5034`], List[14.2288`, \
11.327399999999999`], List[13.2878`, 10.371400000000001`], List[12.1318`, \
10.371400000000001`], List[7.841800000000001`, 10.371400000000001`], \
List[6.360800000000001`, 10.371400000000001`], List[5.109800000000001`, \
9.1264`], List[5.109800000000001`, 7.6533999999999995`], \
List[5.109800000000001`, 5.741399999999999`]], List[List[12.401800000000001`, \
4.1044`], List[11.9298`, 4.1044`], List[11.5458`, 3.7164`], List[11.5458`, \
3.2394`], List[11.5458`, 2.7593999999999994`], List[11.9298`, \
2.369399999999999`], List[12.401800000000001`, 2.369399999999999`], \
List[12.872800000000002`, 2.369399999999999`], List[13.2568`, \
2.7593999999999994`], List[13.2568`, 3.2394`], List[13.2568`, 3.7164`], \
List[12.872800000000002`, 4.1044`], List[12.401800000000001`, 4.1044`]], \
List[List[9.9728`, 1.0493999999999986`], List[9.283800000000001`, \
1.0493999999999986`], List[8.610800000000001`, 1.1534000000000013`], \
List[7.8558`, 1.375399999999999`], List[7.0678`, 1.6073999999999984`], \
List[5.744800000000001`, 2.1934000000000005`], List[5.744800000000001`, \
3.509400000000001`], List[5.744800000000001`, 7.5984`], \
List[5.744800000000001`, 8.754399999999999`], List[6.7048000000000005`, \
9.731399999999999`], List[7.841800000000001`, 9.731399999999999`], \
List[12.1318`, 9.731399999999999`], List[13.6128`, 9.731399999999999`], \
List[14.863800000000001`, 11.000399999999999`], List[14.863800000000001`, \
12.5034`], List[14.863800000000001`, 14.4104`], List[16.425800000000002`, \
14.3604`], List[17.4948`, 14.3604`], List[18.1618`, 13.680399999999999`], \
List[18.524800000000003`, 12.2214`], List[18.963800000000003`, \
10.456399999999999`], List[18.963800000000003`, 9.1994`], List[18.5258`, \
7.884399999999999`], List[18.0638`, 6.495400000000002`], List[17.5918`, \
5.741399999999999`], List[16.425800000000002`, 5.741399999999999`], \
List[9.988800000000001`, 5.741399999999999`], List[9.9398`, 5.1464`], \
List[14.2788`, 5.096400000000001`], List[14.2288`, 3.509400000000001`], \
List[14.2288`, 2.2513999999999985`], List[13.0808`, 1.654399999999999`], \
List[12.116800000000001`, 1.375399999999999`], List[11.3628`, \
1.1563999999999979`], List[10.6608`, 1.0493999999999986`], List[9.9728`, \
1.0493999999999986`]]]]], List[FaceForm[List[RGBColor[0.20800000000000002`, \
0.514`, 0.6859999999999999`], Opacity[1.`]]], \
FilledCurveBox[List[List[List[1, 4, 3], List[1, 3, 3], List[1, 3, 3], List[1, \
3, 3]], List[List[1, 4, 3], List[1, 3, 3], List[0, 1, 0], List[0, 1, 0], \
List[0, 1, 0], List[0, 1, 0], List[0, 1, 0], List[1, 3, 3], List[1, 3, 3], \
List[1, 3, 3], List[0, 1, 0], List[0, 1, 0], List[1, 3, 3], List[0, 1, 0], \
List[1, 3, 3], List[0, 1, 0], List[1, 3, 3], List[1, 3, 3]]], \
List[List[List[7.5718000000000005`, 17.6836`], List[8.014800000000001`, \
17.6836`], List[8.3778`, 17.3156`], List[8.3778`, 16.862599999999997`], \
List[8.3778`, 16.4116`], List[8.014800000000001`, 16.046599999999998`], \
List[7.5718000000000005`, 16.046599999999998`], List[7.1268`, \
16.046599999999998`], List[6.7658000000000005`, 16.4116`], \
List[6.7658000000000005`, 16.862599999999997`], List[6.7658000000000005`, \
17.3156`], List[7.1268`, 17.6836`], List[7.5718000000000005`, 17.6836`]], \
List[List[9.8938`, 18.999599999999997`], List[9.1598`, 18.996599999999997`], \
List[8.4588`, 18.9336`], List[7.841800000000001`, 18.824599999999997`], \
List[6.024800000000001`, 18.5036`], List[5.694800000000001`, \
17.831599999999998`], List[5.694800000000001`, 16.592599999999997`], \
List[5.694800000000001`, 14.955599999999999`], List[9.988800000000001`, \
14.955599999999999`], List[9.988800000000001`, 14.410599999999999`], \
List[5.694800000000001`, 14.410599999999999`], List[4.0838`, \
14.410599999999999`], List[2.8358`, 14.410599999999999`], \
List[1.7418000000000005`, 13.660599999999999`], List[1.4008000000000003`, \
12.2336`], List[1.006800000000001`, 10.597599999999998`], \
List[0.9888000000000003`, 9.5766`], List[1.4008000000000003`, \
7.868599999999997`], List[1.7058000000000009`, 6.597599999999998`], \
List[2.434800000000001`, 5.6915999999999976`], List[3.6828000000000007`, \
5.6915999999999976`], List[5.158800000000001`, 5.6915999999999976`], \
List[5.158800000000001`, 7.653599999999999`], List[5.158800000000001`, \
9.070599999999999`], List[6.385800000000001`, 10.3216`], \
List[7.841800000000001`, 10.3216`], List[12.1318`, 10.3216`], List[13.3248`, \
10.3216`], List[14.2788`, 11.304599999999997`], List[14.2788`, \
12.503599999999999`], List[14.2788`, 16.592599999999997`], List[14.2788`, \
17.7566`], List[13.296800000000001`, 18.630599999999998`], List[12.1318`, \
18.824599999999997`], List[11.3938`, 18.947599999999998`], List[10.6278`, \
19.0036`], List[9.8938`, 18.999599999999997`]]]]], \
List[FaceForm[List[RGBColor[0.976`, 0.8430000000000001`, 0.353`], \
Opacity[1.`]]], FilledCurveBox[List[List[List[1, 4, 3], List[1, 3, 3], \
List[1, 3, 3], List[1, 3, 3]], List[List[0, 2, 0], List[1, 3, 3], List[0, 1, \
0], List[1, 3, 3], List[0, 1, 0], List[1, 3, 3], List[1, 3, 3], List[1, 3, \
3], List[0, 1, 0], List[0, 1, 0], List[0, 1, 0], List[0, 1, 0], List[0, 1, \
0], List[1, 3, 3], List[1, 3, 3], List[1, 3, 3]]], List[List[List[12.4014`, \
4.0552`], List[12.846400000000001`, 4.0552`], List[13.2074`, 3.6902`], \
List[13.2074`, 3.2392000000000003`], List[13.2074`, 2.7862`], \
List[12.846400000000001`, 2.4182`], List[12.4014`, 2.4182`], \
List[11.958400000000001`, 2.4182`], List[11.595400000000001`, 2.7862`], \
List[11.595400000000001`, 3.2392000000000003`], List[11.595400000000001`, \
3.6902`], List[11.958400000000001`, 4.0552`], List[12.4014`, 4.0552`]], \
List[List[14.814400000000001`, 14.410200000000003`], \
List[14.814400000000001`, 12.5032`], List[14.814400000000001`, \
11.025200000000002`], List[13.560400000000001`, 9.7812`], \
List[12.131400000000001`, 9.7812`], List[7.841400000000001`, 9.7812`], \
List[6.667400000000001`, 9.7812`], List[5.694400000000001`, 8.7752`], \
List[5.694400000000001`, 7.5982`], List[5.694400000000001`, 3.5102`], \
List[5.694400000000001`, 2.3462000000000005`], List[6.707400000000002`, \
1.6612000000000005`], List[7.841400000000001`, 1.3272`], List[9.2014`, \
0.9281999999999999`], List[10.5054`, 0.8552`], List[12.131400000000001`, \
1.3272`], List[13.2124`, 1.6402000000000005`], List[14.278400000000001`, \
2.2702`], List[14.278400000000001`, 3.5102`], List[14.278400000000001`, \
5.1462`], List[9.989400000000002`, 5.1462`], List[9.989400000000002`, \
5.6922`], List[14.278400000000001`, 5.6922`], List[16.4254`, 5.6922`], \
List[17.6734`, 5.6922`], List[18.1384`, 6.562200000000001`], \
List[18.572400000000002`, 7.8682`], List[19.0214`, 9.2142`], List[19.0024`, \
10.5082`], List[18.572400000000002`, 12.2332`], List[18.264400000000002`, \
13.475200000000001`], List[17.6754`, 14.410200000000003`], List[16.4254`, \
14.410200000000003`]]]]]], List[Rule[ImageSize, Dynamic[List[Automatic, \
Times[3.5`, Times[CurrentValue[\\\"FontCapHeight\\\"], \
Power[AbsoluteCurrentValue[Magnification], -1]]]]]], Rule[AspectRatio, \
Automatic], Rule[ImageSize, List[20.`, 20.`]], Rule[PlotRange, List[List[0.`, \
20.`], List[0.`, 20.`]]]]], \
GridBox[List[List[RowBox[List[TagBox[\\\"\\\\\\\"System: \\\\\\\"\\\", \
\\\"SummaryItemAnnotation\\\"], \\\"\\\\[InvisibleSpace]\\\", TagBox[\\\"\\\\\
\\\"Python\\\\\\\"\\\", \\\"SummaryItem\\\"]]]], List[RowBox[List[TagBox[\\\"\
\\\\\\\"Name: \\\\\\\"\\\", \\\"SummaryItemAnnotation\\\"], \
\\\"\\\\[InvisibleSpace]\\\", TagBox[\\\"None\\\", \\\"SummaryItem\\\"]]]], \
List[RowBox[List[TagBox[\\\"\\\\\\\"Evaluator: \\\\\\\"\\\", \
\\\"SummaryItemAnnotation\\\"], \\\"\\\\[InvisibleSpace]\\\", TagBox[PaneBox[\
\\\"\\\\\\\"/Users/arnoudb/Library/Wolfram/ApplicationData/ExternalEvaluate/\
Python/Venv/Wolfram-hypergraph/bin/python\\\\\\\"\\\", Rule[BaselinePosition, \
Baseline]], \\\"SummaryItem\\\"]]]], \
List[RowBox[List[TagBox[\\\"\\\\\\\"Active: \\\\\\\"\\\", \
\\\"SummaryItemAnnotation\\\"], \\\"\\\\[InvisibleSpace]\\\", \
TagBox[DynamicBox[ToBoxes[If[TrueQ[ExternalEvaluate`Private`getSessionOpts[\\\
\"b624fb94-eedb-491e-86ae-4f511002b477\\\", \\\"Exists\\\"]], \
ExternalSessionObject[\\\"b624fb94-eedb-491e-86ae-4f511002b477\\\"][\\\"\
Active\\\"], False], StandardForm], RuleDelayed[TrackedSymbols, \
List[ExternalEvaluate`Private`$Links]]], \\\"SummaryItem\\\"]]]], \
List[RowBox[List[TagBox[\\\"\\\\\\\"Evaluator: \\\\\\\"\\\", \
\\\"SummaryItemAnnotation\\\"], \\\"\\\\[InvisibleSpace]\\\", TagBox[\\\"\\\\\
\\\"/Users/arnoudb/Library/Wolfram/ApplicationData/ExternalEvaluate/Python/\
Venv/Wolfram-hypergraph/bin/python\\\\\\\"\\\", \\\"SummaryItem\\\"]]]], \
List[RowBox[List[TagBox[\\\"\\\\\\\"ID: \\\\\\\"\\\", \
\\\"SummaryItemAnnotation\\\"], \\\"\\\\[InvisibleSpace]\\\", TagBox[\\\"\\\\\
\\\"b624fb94-eedb-491e-86ae-4f511002b477\\\\\\\"\\\", \
\\\"SummaryItem\\\"]]]], List[RowBox[List[TagBox[\\\"\\\\\\\"Epilog: \\\\\\\"\
\\\", \\\"SummaryItemAnnotation\\\"], \\\"\\\\[InvisibleSpace]\\\", TagBox[\\\
\"Automatic\\\", \\\"SummaryItem\\\"]]]], \
List[RowBox[List[TagBox[\\\"\\\\\\\"Process: \\\\\\\"\\\", \
\\\"SummaryItemAnnotation\\\"], \\\"\\\\[InvisibleSpace]\\\", \
TagBox[InterpretationBox[RowBox[List[TagBox[\\\"ProcessObject\\\", \
\\\"SummaryHead\\\"], \\\"[\\\", DynamicModuleBox[List[Set[Typeset`open$$, \
False], Set[Typeset`embedState$$, \\\"Ready\\\"]], \
TemplateBox[List[PaneSelectorBox[List[Rule[False, \
GridBox[List[List[PaneBox[ButtonBox[DynamicBox[FEPrivate`FrontEndResource[\\\"\
FEBitmaps\\\", \\\"SummaryBoxOpener\\\"]], RuleDelayed[ButtonFunction, \
Set[Typeset`open$$, True]], Rule[Appearance, None], Rule[BaseStyle, List[]], \
Rule[Evaluator, Automatic], Rule[Method, \\\"Preemptive\\\"]], \
Rule[Alignment, List[Center, Center]], Rule[ImageSize, \
Dynamic[List[Automatic, Times[3.5`, \
Times[CurrentValue[\\\"FontCapHeight\\\"], \
Power[AbsoluteCurrentValue[Magnification], -1]]]]]]], \
GridBox[List[List[RowBox[List[TagBox[\\\"\\\\\\\"Program: \\\\\\\"\\\", \
\\\"SummaryItemAnnotation\\\"], \\\"\\\\[InvisibleSpace]\\\", TagBox[\\\"\\\\\
\\\"python3.11\\\\\\\"\\\", \\\"SummaryItem\\\"]]]], List[RowBox[List[TagBox[\
\\\"\\\\\\\"PID: \\\\\\\"\\\", \\\"SummaryItemAnnotation\\\"], \
\\\"\\\\[InvisibleSpace]\\\", TagBox[\\\"20432\\\", \\\"SummaryItem\\\"]]]]], \
Rule[GridBoxAlignment, List[Rule[\\\"Columns\\\", List[List[Left]]], \
Rule[\\\"Rows\\\", List[List[Automatic]]]]], Rule[AutoDelete, False], \
Rule[GridBoxItemSize, List[Rule[\\\"Columns\\\", List[List[Automatic]]], \
Rule[\\\"Rows\\\", List[List[Automatic]]]]], Rule[GridBoxSpacings, List[Rule[\
\\\"Columns\\\", List[List[2]]], Rule[\\\"Rows\\\", List[List[Automatic]]]]], \
Rule[BaseStyle, List[Rule[ShowStringCharacters, False], Rule[NumberMarks, \
False], Rule[PrintPrecision, 3], Rule[ShowSyntaxStyles, False]]]]]], \
Rule[GridBoxAlignment, List[Rule[\\\"Columns\\\", List[List[Left]]], \
Rule[\\\"Rows\\\", List[List[Top]]]]], Rule[AutoDelete, False], \
Rule[GridBoxItemSize, List[Rule[\\\"Columns\\\", List[List[Automatic]]], \
Rule[\\\"Rows\\\", List[List[Automatic]]]]], Rule[BaselinePosition, List[1, \
1]]]], Rule[True, \
GridBox[List[List[PaneBox[ButtonBox[DynamicBox[FEPrivate`FrontEndResource[\\\"\
FEBitmaps\\\", \\\"SummaryBoxCloser\\\"]], RuleDelayed[ButtonFunction, \
Set[Typeset`open$$, False]], Rule[Appearance, None], Rule[BaseStyle, List[]], \
Rule[Evaluator, Automatic], Rule[Method, \\\"Preemptive\\\"]], \
Rule[Alignment, List[Center, Center]], Rule[ImageSize, \
Dynamic[List[Automatic, Times[3.5`, \
Times[CurrentValue[\\\"FontCapHeight\\\"], \
Power[AbsoluteCurrentValue[Magnification], -1]]]]]]], \
GridBox[List[List[RowBox[List[TagBox[\\\"\\\\\\\"Program: \\\\\\\"\\\", \
\\\"SummaryItemAnnotation\\\"], \\\"\\\\[InvisibleSpace]\\\", TagBox[\\\"\\\\\
\\\"python3.11\\\\\\\"\\\", \\\"SummaryItem\\\"]]]], List[RowBox[List[TagBox[\
\\\"\\\\\\\"PID: \\\\\\\"\\\", \\\"SummaryItemAnnotation\\\"], \
\\\"\\\\[InvisibleSpace]\\\", TagBox[\\\"20432\\\", \\\"SummaryItem\\\"]]]], \
List[RowBox[List[TagBox[\\\"\\\\\\\"Parent PID: \\\\\\\"\\\", \
\\\"SummaryItemAnnotation\\\"], \\\"\\\\[InvisibleSpace]\\\", \
TagBox[\\\"19768\\\", \\\"SummaryItem\\\"]]]], List[RowBox[List[TagBox[\\\"\\\
\\\\\"User: \\\\\\\"\\\", \\\"SummaryItemAnnotation\\\"], \
\\\"\\\\[InvisibleSpace]\\\", TagBox[\\\"\\\\\\\"arnoudb\\\\\\\"\\\", \
\\\"SummaryItem\\\"]]]], List[RowBox[List[TagBox[\\\"\\\\\\\"Path: \\\\\\\"\\\
\", \\\"SummaryItemAnnotation\\\"], \\\"\\\\[InvisibleSpace]\\\", TagBox[\\\"\
\\\\\\\"/Users/arnoudb/Library/Wolfram/ApplicationData/ExternalEvaluate/\
Python/Main/3.11/bin/python3.11\\\\\\\"\\\", \\\"SummaryItem\\\"]]]], \
List[RowBox[List[TagBox[\\\"\\\\\\\"Memory:\\\\\\\"\\\", \
\\\"SummaryItemAnnotation\\\"], \\\"\\\\[InvisibleSpace]\\\", \
TagBox[TemplateBox[List[\\\"184.89344`\\\", \\\"\\\\\\\"MB\\\\\\\"\\\", \
\\\"megabytes\\\", \\\"\\\\\\\"Megabytes\\\\\\\"\\\"], \\\"Quantity\\\", \
Rule[SyntaxForm, Mod]], \\\"SummaryItem\\\"]]]], List[RowBox[List[TagBox[\\\"\
\\\\\\\"Threads: \\\\\\\"\\\", \\\"SummaryItemAnnotation\\\"], \
\\\"\\\\[InvisibleSpace]\\\", TagBox[\\\"17\\\", \\\"SummaryItem\\\"]]]], \
List[RowBox[List[TagBox[\\\"\\\\\\\"Start Time: \\\\\\\"\\\", \
\\\"SummaryItemAnnotation\\\"], \\\"\\\\[InvisibleSpace]\\\", \
TagBox[TemplateBox[List[RowBox[List[\\\"\\\\\\\"Wed 24 Apr 2024 \
12:51:26\\\\\\\"\\\", StyleBox[RowBox[List[\\\"\\\\\\\"GMT\\\\\\\"\\\", \
\\\"\\\\[InvisibleSpace]\\\", StyleBox[RowBox[List[\\\"-\\\", \\\"5\\\"]], \
Rule[NumberMarks, False], Rule[StripOnInput, False]]]], Rule[FontColor, \
GrayLevel[0.5`]], Rule[FontSize, Plus[-4, Inherited]]]]], \
RowBox[List[\\\"DateObject\\\", \\\"[\\\", RowBox[List[RowBox[List[\\\"{\\\", \
RowBox[List[\\\"2024\\\", \\\",\\\", \\\"4\\\", \\\",\\\", \\\"24\\\", \
\\\",\\\", \\\"12\\\", \\\",\\\", \\\"51\\\", \\\",\\\", \\\"26\\\"]], \
\\\"}\\\"]], \\\",\\\", \\\"\\\\\\\"Instant\\\\\\\"\\\", \\\",\\\", \
\\\"\\\\\\\"Gregorian\\\\\\\"\\\", \\\",\\\", RowBox[List[\\\"-\\\", \
\\\"5.`\\\"]]]], \\\"]\\\"]]], \\\"DateObject\\\", Rule[Editable, False]], \\\
\"SummaryItem\\\"]]]], List[RowBox[List[TagBox[\\\"\\\\\\\"System Time: \
\\\\\\\"\\\", \\\"SummaryItemAnnotation\\\"], \\\"\\\\[InvisibleSpace]\\\", \
TagBox[TemplateBox[List[\\\"0.0679410000000000014`5.\\\", \\\"\\\\\\\"s\\\\\\\
\"\\\", \\\"seconds\\\", \\\"\\\\\\\"Seconds\\\\\\\"\\\"], \\\"Quantity\\\", \
Rule[SyntaxForm, Mod]], \\\"SummaryItem\\\"]]]], List[RowBox[List[TagBox[\\\"\
\\\\\\\"User Time: \\\\\\\"\\\", \\\"SummaryItemAnnotation\\\"], \
\\\"\\\\[InvisibleSpace]\\\", \
TagBox[TemplateBox[List[\\\"0.0453280000000000002`5.\\\", \\\"\\\\\\\"s\\\\\\\
\"\\\", \\\"seconds\\\", \\\"\\\\\\\"Seconds\\\\\\\"\\\"], \\\"Quantity\\\", \
Rule[SyntaxForm, Mod]], \\\"SummaryItem\\\"]]]], List[RowBox[List[TagBox[\\\"\
\\\\\\\"Real Time: \\\\\\\"\\\", \\\"SummaryItemAnnotation\\\"], \
\\\"\\\\[InvisibleSpace]\\\", TagBox[TemplateBox[List[\\\"13\\\", \
\\\"13.`5.\\\", RowBox[List[\\\"\\\\[ThinSpace]\\\", \
\\\"\\\\\\\"min\\\\\\\"\\\"]], RowBox[List[\\\"\\\\[ThinSpace]\\\", \
\\\"\\\\\\\"s\\\\\\\"\\\"]], \\\"minutes,seconds\\\", RowBox[List[\\\"{\\\", \
RowBox[List[\\\"\\\\\\\"Minutes\\\\\\\"\\\", \\\",\\\", \\\"\\\\\\\"Seconds\\\
\\\\\"\\\"]], \\\"}\\\"]]], \\\"QuantityMixedUnit2\\\"], \
\\\"SummaryItem\\\"]]]]], Rule[GridBoxAlignment, List[Rule[\\\"Columns\\\", \
List[List[Left]]], Rule[\\\"Rows\\\", List[List[Automatic]]]]], \
Rule[AutoDelete, False], Rule[GridBoxItemSize, List[Rule[\\\"Columns\\\", \
List[List[Automatic]]], Rule[\\\"Rows\\\", List[List[Automatic]]]]], \
Rule[GridBoxSpacings, List[Rule[\\\"Columns\\\", List[List[2]]], \
Rule[\\\"Rows\\\", List[List[Automatic]]]]], Rule[BaseStyle, \
List[Rule[ShowStringCharacters, False], Rule[NumberMarks, False], \
Rule[PrintPrecision, 3], Rule[ShowSyntaxStyles, False]]]]]], \
Rule[GridBoxAlignment, List[Rule[\\\"Columns\\\", List[List[Left]]], \
Rule[\\\"Rows\\\", List[List[Top]]]]], Rule[AutoDelete, False], \
Rule[GridBoxItemSize, List[Rule[\\\"Columns\\\", List[List[Automatic]]], \
Rule[\\\"Rows\\\", List[List[Automatic]]]]], Rule[BaselinePosition, List[1, \
1]]]]], Dynamic[Typeset`open$$], Rule[ImageSize, Automatic]]], \
\\\"SummaryPanel\\\"], RuleDelayed[DynamicModuleValues, List[]]], \
\\\"]\\\"]], ProcessObject[Association[Rule[\\\"ManagedProcess\\\", True], \
Rule[\\\"UID\\\", 0], Rule[\\\"PID\\\", 20432], Rule[\\\"PPID\\\", 19768], \
Rule[\\\"Program\\\", \\\"python3.11\\\"], Rule[\\\"Path\\\", \
\\\"/Users/arnoudb/Library/Wolfram/ApplicationData/ExternalEvaluate/Python/\
Main/3.11/bin/python3.11\\\"], Rule[\\\"User\\\", \\\"arnoudb\\\"], \
Rule[\\\"StartTime\\\", DateObject[List[2024, 4, 24, 12, 51, 26], \\\"Instant\
\\\", \\\"Gregorian\\\", -5.`]]]], Rule[Selectable, False], Rule[Editable, \
False], Rule[SelectWithContents, True]], \\\"SummaryItem\\\"]]]], \
List[RowBox[List[TagBox[\\\"\\\\\\\"Prolog: \\\\\\\"\\\", \
\\\"SummaryItemAnnotation\\\"], \\\"\\\\[InvisibleSpace]\\\", \
TagBox[\\\"Automatic\\\", \\\"SummaryItem\\\"]]]], List[RowBox[List[TagBox[\\\
\"\\\\\\\"ReturnType: \\\\\\\"\\\", \\\"SummaryItemAnnotation\\\"], \
\\\"\\\\[InvisibleSpace]\\\", TagBox[\\\"\\\\\\\"Expression\\\\\\\"\\\", \
\\\"SummaryItem\\\"]]]], List[RowBox[List[TagBox[\\\"\\\\\\\"SessionEpilog: \
\\\\\\\"\\\", \\\"SummaryItemAnnotation\\\"], \\\"\\\\[InvisibleSpace]\\\", \
TagBox[\\\"Automatic\\\", \\\"SummaryItem\\\"]]]], List[RowBox[List[TagBox[\\\
\"\\\\\\\"SessionProlog: \\\\\\\"\\\", \\\"SummaryItemAnnotation\\\"], \\\"\\\
\\[InvisibleSpace]\\\", TagBox[\\\"\\\\\\\"from \
wolframclient.utils.importutils import import_string as wolfram_import_string\
\\\\\\\"\\\", \\\"SummaryItem\\\"]]]], \
List[RowBox[List[TagBox[\\\"\\\\\\\"Socket: \\\\\\\"\\\", \
\\\"SummaryItemAnnotation\\\"], \\\"\\\\[InvisibleSpace]\\\", \
TagBox[InterpretationBox[RowBox[List[TagBox[\\\"SocketObject\\\", \
\\\"SummaryHead\\\"], \\\"[\\\", DynamicModuleBox[List[Set[Typeset`open$$, \
False], Set[Typeset`embedState$$, \\\"Ready\\\"]], \
TemplateBox[List[PaneSelectorBox[List[Rule[False, \
GridBox[List[List[PaneBox[ButtonBox[DynamicBox[FEPrivate`FrontEndResource[\\\"\
FEBitmaps\\\", \\\"SummaryBoxOpener\\\"]], RuleDelayed[ButtonFunction, \
Set[Typeset`open$$, True]], Rule[Appearance, None], Rule[BaseStyle, List[]], \
Rule[Evaluator, Automatic], Rule[Method, \\\"Preemptive\\\"]], \
Rule[Alignment, List[Center, Center]], Rule[ImageSize, \
Dynamic[List[Automatic, Times[3.5`, \
Times[CurrentValue[\\\"FontCapHeight\\\"], \
Power[AbsoluteCurrentValue[Magnification], -1]]]]]]], \
GraphicsBox[GeometricTransformationBox[List[List[List[FilledCurveBox[List[\
List[Line[List[List[36.558`, 8.569`], List[40.947`, 8.569`], List[40.947`, \
43.684000000000005`], List[36.558`, 43.684000000000005`], List[36.558`, \
8.569`]]]]]]], List[FilledCurveBox[List[List[Line[List[List[59.053`, 8.569`], \
List[63.443`, 8.569`], List[63.443`, 43.684000000000005`], List[59.053`, \
43.684000000000005`], List[59.053`, 8.569`]]]]]]], \
List[List[FilledCurveBox[List[List[Line[List[List[55.487`, 8.569`], \
List[56.95`, 8.569`], List[56.95`, 21.188000000000002`], List[55.487`, \
21.188000000000002`], List[55.487`, 8.569`]]]]]]], \
List[FilledCurveBox[List[List[Line[List[List[52.562`, 8.569`], List[54.025`, \
8.569`], List[54.025`, 21.188000000000002`], List[52.562`, \
21.188000000000002`], List[52.562`, 8.569`]]]]]]], \
List[FilledCurveBox[List[List[Line[List[List[49.636`, 8.569`], \
List[51.099000000000004`, 8.569`], List[51.099000000000004`, \
21.188000000000002`], List[49.636`, 21.188000000000002`], List[49.636`, \
8.569`]]]]]]], List[FilledCurveBox[List[List[Line[List[List[46.709`, 8.569`], \
List[48.172000000000004`, 8.569`], List[48.172000000000004`, \
21.188000000000002`], List[46.709`, 21.188000000000002`], List[46.709`, \
8.569`]]]]]]], List[FilledCurveBox[List[List[Line[List[List[43.783`, 8.569`], \
List[45.246`, 8.569`], List[45.246`, 21.188000000000002`], List[43.783`, \
21.188000000000002`], List[43.783`, 8.569`]]]]]]]], \
List[FilledCurveBox[List[List[Line[List[List[40.947`, 4.911`], \
List[59.787000000000006`, 4.911`], List[59.787000000000006`, 6.922`], \
List[40.947`, 6.922`], List[40.947`, 4.911`]]]]]]], \
List[FilledCurveBox[List[List[Line[List[List[44.057`, 31.675`], \
List[56.678000000000004`, 31.675`], List[56.678000000000004`, 39.051`], \
List[44.057`, 39.051`], List[44.057`, 31.675`]]]]]]], \
List[FilledCurveBox[List[List[Line[List[List[44.057`, 43.685`], \
List[56.678000000000004`, 43.685`], List[56.678000000000004`, 65.089`], \
List[44.057`, 65.089`], List[44.057`, 43.685`]]]]]]]]], List[List[List[1, 0], \
List[0, -1]], Center]], List[Rule[ImageSize, List[Automatic, \
Dynamic[Times[3.5`, Times[CurrentValue[\\\"FontCapHeight\\\"], \
Power[AbsoluteCurrentValue[Magnification], -1]]]]]], Rule[PlotRange, \
List[List[20, 80], List[0, 70]]], Rule[BaseStyle, List[Rule[CacheGraphics, \
False]]], Rule[ImageSize, 30]]], \
GridBox[List[List[RowBox[List[TagBox[\\\"\\\\\\\"IPAddress: \\\\\\\"\\\", \
\\\"SummaryItemAnnotation\\\"], \\\"\\\\[InvisibleSpace]\\\", TagBox[\\\"\\\\\
\\\"127.0.0.1\\\\\\\"\\\", \\\"SummaryItem\\\"]]], \
RowBox[List[TagBox[\\\"\\\\\\\"Port: \\\\\\\"\\\", \
\\\"SummaryItemAnnotation\\\"], \\\"\\\\[InvisibleSpace]\\\", \
TagBox[\\\"56283\\\", \\\"SummaryItem\\\"]]], \
RowBox[List[TagBox[\\\"\\\\\\\"Type: \\\\\\\"\\\", \
\\\"SummaryItemAnnotation\\\"], \\\"\\\\[InvisibleSpace]\\\", TagBox[\\\"\\\\\
\\\"ZMQ_PAIR\\\\\\\"\\\", \\\"SummaryItem\\\"]]]], List[RowBox[List[TagBox[\\\
\"\\\\\\\"UUID: \\\\\\\"\\\", \\\"SummaryItemAnnotation\\\"], \
\\\"\\\\[InvisibleSpace]\\\", \
TagBox[\\\"\\\\\\\"081c2801-a633-4a75-837d-8691db29c675\\\\\\\"\\\", \
\\\"SummaryItem\\\"]]], \\\"\\\\[SpanFromLeft]\\\", \
\\\"\\\\[SpanFromLeft]\\\"]], Rule[GridBoxAlignment, \
List[Rule[\\\"Columns\\\", List[List[Left]]], Rule[\\\"Rows\\\", \
List[List[Automatic]]]]], Rule[AutoDelete, False], Rule[GridBoxItemSize, \
List[Rule[\\\"Columns\\\", List[List[Automatic]]], Rule[\\\"Rows\\\", \
List[List[Automatic]]]]], Rule[GridBoxSpacings, List[Rule[\\\"Columns\\\", \
List[List[2]]], Rule[\\\"Rows\\\", List[List[Automatic]]]]], Rule[BaseStyle, \
List[Rule[ShowStringCharacters, False], Rule[NumberMarks, False], \
Rule[PrintPrecision, 3], Rule[ShowSyntaxStyles, False]]]]]], \
Rule[GridBoxAlignment, List[Rule[\\\"Columns\\\", List[List[Left]]], \
Rule[\\\"Rows\\\", List[List[Top]]]]], Rule[AutoDelete, False], \
Rule[GridBoxItemSize, List[Rule[\\\"Columns\\\", List[List[Automatic]]], \
Rule[\\\"Rows\\\", List[List[Automatic]]]]], Rule[BaselinePosition, List[1, \
1]]]], Rule[True, \
GridBox[List[List[PaneBox[ButtonBox[DynamicBox[FEPrivate`FrontEndResource[\\\"\
FEBitmaps\\\", \\\"SummaryBoxCloser\\\"]], RuleDelayed[ButtonFunction, \
Set[Typeset`open$$, False]], Rule[Appearance, None], Rule[BaseStyle, List[]], \
Rule[Evaluator, Automatic], Rule[Method, \\\"Preemptive\\\"]], \
Rule[Alignment, List[Center, Center]], Rule[ImageSize, \
Dynamic[List[Automatic, Times[3.5`, \
Times[CurrentValue[\\\"FontCapHeight\\\"], \
Power[AbsoluteCurrentValue[Magnification], -1]]]]]]], \
GraphicsBox[GeometricTransformationBox[List[List[List[FilledCurveBox[List[\
List[Line[List[List[36.558`, 8.569`], List[40.947`, 8.569`], List[40.947`, \
43.684000000000005`], List[36.558`, 43.684000000000005`], List[36.558`, \
8.569`]]]]]]], List[FilledCurveBox[List[List[Line[List[List[59.053`, 8.569`], \
List[63.443`, 8.569`], List[63.443`, 43.684000000000005`], List[59.053`, \
43.684000000000005`], List[59.053`, 8.569`]]]]]]], \
List[List[FilledCurveBox[List[List[Line[List[List[55.487`, 8.569`], \
List[56.95`, 8.569`], List[56.95`, 21.188000000000002`], List[55.487`, \
21.188000000000002`], List[55.487`, 8.569`]]]]]]], \
List[FilledCurveBox[List[List[Line[List[List[52.562`, 8.569`], List[54.025`, \
8.569`], List[54.025`, 21.188000000000002`], List[52.562`, \
21.188000000000002`], List[52.562`, 8.569`]]]]]]], \
List[FilledCurveBox[List[List[Line[List[List[49.636`, 8.569`], \
List[51.099000000000004`, 8.569`], List[51.099000000000004`, \
21.188000000000002`], List[49.636`, 21.188000000000002`], List[49.636`, \
8.569`]]]]]]], List[FilledCurveBox[List[List[Line[List[List[46.709`, 8.569`], \
List[48.172000000000004`, 8.569`], List[48.172000000000004`, \
21.188000000000002`], List[46.709`, 21.188000000000002`], List[46.709`, \
8.569`]]]]]]], List[FilledCurveBox[List[List[Line[List[List[43.783`, 8.569`], \
List[45.246`, 8.569`], List[45.246`, 21.188000000000002`], List[43.783`, \
21.188000000000002`], List[43.783`, 8.569`]]]]]]]], \
List[FilledCurveBox[List[List[Line[List[List[40.947`, 4.911`], \
List[59.787000000000006`, 4.911`], List[59.787000000000006`, 6.922`], \
List[40.947`, 6.922`], List[40.947`, 4.911`]]]]]]], \
List[FilledCurveBox[List[List[Line[List[List[44.057`, 31.675`], \
List[56.678000000000004`, 31.675`], List[56.678000000000004`, 39.051`], \
List[44.057`, 39.051`], List[44.057`, 31.675`]]]]]]], \
List[FilledCurveBox[List[List[Line[List[List[44.057`, 43.685`], \
List[56.678000000000004`, 43.685`], List[56.678000000000004`, 65.089`], \
List[44.057`, 65.089`], List[44.057`, 43.685`]]]]]]]]], List[List[List[1, 0], \
List[0, -1]], Center]], List[Rule[ImageSize, List[Automatic, \
Dynamic[Times[3.5`, Times[CurrentValue[\\\"FontCapHeight\\\"], \
Power[AbsoluteCurrentValue[Magnification], -1]]]]]], Rule[PlotRange, \
List[List[20, 80], List[0, 70]]], Rule[BaseStyle, List[Rule[CacheGraphics, \
False]]], Rule[ImageSize, 30]]], \
GridBox[List[List[RowBox[List[TagBox[\\\"\\\\\\\"IPAddress: \\\\\\\"\\\", \
\\\"SummaryItemAnnotation\\\"], \\\"\\\\[InvisibleSpace]\\\", TagBox[\\\"\\\\\
\\\"127.0.0.1\\\\\\\"\\\", \\\"SummaryItem\\\"]]], \
RowBox[List[TagBox[\\\"\\\\\\\"Port: \\\\\\\"\\\", \
\\\"SummaryItemAnnotation\\\"], \\\"\\\\[InvisibleSpace]\\\", \
TagBox[\\\"56283\\\", \\\"SummaryItem\\\"]]], \
RowBox[List[TagBox[\\\"\\\\\\\"Type: \\\\\\\"\\\", \
\\\"SummaryItemAnnotation\\\"], \\\"\\\\[InvisibleSpace]\\\", TagBox[\\\"\\\\\
\\\"ZMQ_PAIR\\\\\\\"\\\", \\\"SummaryItem\\\"]]]], List[RowBox[List[TagBox[\\\
\"\\\\\\\"UUID: \\\\\\\"\\\", \\\"SummaryItemAnnotation\\\"], \
\\\"\\\\[InvisibleSpace]\\\", \
TagBox[\\\"\\\\\\\"081c2801-a633-4a75-837d-8691db29c675\\\\\\\"\\\", \
\\\"SummaryItem\\\"]]], \\\"\\\\[SpanFromLeft]\\\", \
\\\"\\\\[SpanFromLeft]\\\"], List[RowBox[List[TagBox[\\\"\\\\\\\"Endpoint: \\\
\\\\\"\\\", \\\"SummaryItemAnnotation\\\"], \\\"\\\\[InvisibleSpace]\\\", \
TagBox[\\\"\\\\\\\"tcp://127.0.0.1:56283\\\\\\\"\\\", \\\"SummaryItem\\\"]]], \
\\\"\\\\[SpanFromLeft]\\\", \\\"\\\\[SpanFromLeft]\\\"]], \
Rule[GridBoxAlignment, List[Rule[\\\"Columns\\\", List[List[Left]]], \
Rule[\\\"Rows\\\", List[List[Automatic]]]]], Rule[AutoDelete, False], \
Rule[GridBoxItemSize, List[Rule[\\\"Columns\\\", List[List[Automatic]]], \
Rule[\\\"Rows\\\", List[List[Automatic]]]]], Rule[GridBoxSpacings, List[Rule[\
\\\"Columns\\\", List[List[2]]], Rule[\\\"Rows\\\", List[List[Automatic]]]]], \
Rule[BaseStyle, List[Rule[ShowStringCharacters, False], Rule[NumberMarks, \
False], Rule[PrintPrecision, 3], Rule[ShowSyntaxStyles, False]]]]]], \
Rule[GridBoxAlignment, List[Rule[\\\"Columns\\\", List[List[Left]]], \
Rule[\\\"Rows\\\", List[List[Top]]]]], Rule[AutoDelete, False], \
Rule[GridBoxItemSize, List[Rule[\\\"Columns\\\", List[List[Automatic]]], \
Rule[\\\"Rows\\\", List[List[Automatic]]]]], Rule[BaselinePosition, List[1, \
1]]]]], Dynamic[Typeset`open$$], Rule[ImageSize, Automatic]]], \
\\\"SummaryPanel\\\"], RuleDelayed[DynamicModuleValues, List[]]], \
\\\"]\\\"]], SocketObject[\\\"081c2801-a633-4a75-837d-8691db29c675\\\"], \
Rule[Selectable, False], Rule[Editable, False], Rule[SelectWithContents, \
True]], \\\"SummaryItem\\\"]]]], \
List[RowBox[List[TagBox[\\\"\\\\\\\"StandardOutputFunction: \\\\\\\"\\\", \
\\\"SummaryItemAnnotation\\\"], \\\"\\\\[InvisibleSpace]\\\", \
TagBox[\\\"Print\\\", \\\"SummaryItem\\\"]]]], List[RowBox[List[TagBox[\\\"\\\
\\\\\"EvaluationCount: \\\\\\\"\\\", \\\"SummaryItemAnnotation\\\"], \
\\\"\\\\[InvisibleSpace]\\\", \
TagBox[DynamicBox[ToBoxes[If[TrueQ[ExternalEvaluate`Private`getSessionOpts[\\\
\"b624fb94-eedb-491e-86ae-4f511002b477\\\", \\\"Exists\\\"]], \
ExternalSessionObject[\\\"b624fb94-eedb-491e-86ae-4f511002b477\\\"][\\\"\
EvaluationCount\\\"], None], StandardForm], RuleDelayed[TrackedSymbols, \
List[ExternalEvaluate`Private`$Links]]], \\\"SummaryItem\\\"]]]], \
List[RowBox[List[TagBox[\\\"\\\\\\\"ProcessMemory: \\\\\\\"\\\", \
\\\"SummaryItemAnnotation\\\"], \\\"\\\\[InvisibleSpace]\\\", \
TagBox[DynamicBox[ToBoxes[If[TrueQ[ExternalEvaluate`Private`getSessionOpts[\\\
\"b624fb94-eedb-491e-86ae-4f511002b477\\\", \\\"Exists\\\"]], \
Refresh[ExternalSessionObject[\\\"b624fb94-eedb-491e-86ae-4f511002b477\\\"][\\\
\"ProcessMemory\\\"], Rule[UpdateInterval, 5]], \
Missing[\\\"NotAvailable\\\"]], StandardForm], RuleDelayed[TrackedSymbols, \
List[ExternalEvaluate`Private`$Links]]], \\\"SummaryItem\\\"]]]], \
List[RowBox[List[TagBox[\\\"\\\\\\\"ProcessThreads: \\\\\\\"\\\", \
\\\"SummaryItemAnnotation\\\"], \\\"\\\\[InvisibleSpace]\\\", \
TagBox[DynamicBox[ToBoxes[If[TrueQ[ExternalEvaluate`Private`getSessionOpts[\\\
\"b624fb94-eedb-491e-86ae-4f511002b477\\\", \\\"Exists\\\"]], \
Refresh[ExternalSessionObject[\\\"b624fb94-eedb-491e-86ae-4f511002b477\\\"][\\\
\"ProcessThreads\\\"], Rule[UpdateInterval, 5]], \
Missing[\\\"NotAvailable\\\"]], StandardForm], RuleDelayed[TrackedSymbols, \
List[ExternalEvaluate`Private`$Links]]], \\\"SummaryItem\\\"]]]], \
List[RowBox[List[TagBox[\\\"\\\\\\\"SessionTime: \\\\\\\"\\\", \
\\\"SummaryItemAnnotation\\\"], \\\"\\\\[InvisibleSpace]\\\", \
TagBox[DynamicBox[ToBoxes[If[TrueQ[ExternalEvaluate`Private`getSessionOpts[\\\
\"b624fb94-eedb-491e-86ae-4f511002b477\\\", \\\"Exists\\\"]], \
Refresh[ExternalSessionObject[\\\"b624fb94-eedb-491e-86ae-4f511002b477\\\"][\\\
\"SessionTime\\\"], Rule[UpdateInterval, 1]], Missing[\\\"NotAvailable\\\"]], \
StandardForm], RuleDelayed[TrackedSymbols, \
List[ExternalEvaluate`Private`$Links]]], \\\"SummaryItem\\\"]]]]], \
Rule[GridBoxAlignment, List[Rule[\\\"Columns\\\", List[List[Left]]], \
Rule[\\\"Rows\\\", List[List[Automatic]]]]], Rule[AutoDelete, False], \
Rule[GridBoxItemSize, List[Rule[\\\"Columns\\\", List[List[Automatic]]], \
Rule[\\\"Rows\\\", List[List[Automatic]]]]], Rule[GridBoxSpacings, List[Rule[\
\\\"Columns\\\", List[List[2]]], Rule[\\\"Rows\\\", List[List[Automatic]]]]], \
Rule[BaseStyle, List[Rule[ShowStringCharacters, False], Rule[NumberMarks, \
False], Rule[PrintPrecision, 3], Rule[ShowSyntaxStyles, False]]]]]], \
Rule[GridBoxAlignment, List[Rule[\\\"Columns\\\", List[List[Left]]], \
Rule[\\\"Rows\\\", List[List[Top]]]]], Rule[AutoDelete, False], \
Rule[GridBoxItemSize, List[Rule[\\\"Columns\\\", List[List[Automatic]]], \
Rule[\\\"Rows\\\", List[List[Automatic]]]]], Rule[BaselinePosition, List[1, \
1]]]]], Dynamic[Typeset`open$$], Rule[ImageSize, Automatic]]], \
\\\"SummaryPanel\\\"], RuleDelayed[DynamicModuleValues, List[]]], \
\\\"]\\\"}], ExternalSessionObject[\\\"b624fb94-eedb-491e-86ae-4f511002b477\\\
\"], Rule[Selectable, False], Rule[Editable, False], Rule[SelectWithContents, \
True]], \\\",\\\", RowBox[{\\\"ExternalEvaluate`RPC\\\", \\\"[\\\", \
RowBox[{\\\"\\\\\\\"GetReference\\\\\\\"\\\", \\\",\\\", \
\\\"6067606864\\\"}], \\\"]\\\"}], \\\",\\\", \
RowBox[{\\\"\[LeftAssociation]\\\", \
RowBox[{RowBox[{\\\"\\\\\\\"IsModule\\\\\\\"\\\", \\\"\[Rule]\\\", \
\\\"False\\\"}], \\\",\\\", RowBox[{\\\"\\\\\\\"Module\\\\\\\"\\\", \\\"\
\[Rule]\\\", \\\"\\\\\\\"hypernetx.classes.hypergraph\\\\\\\"\\\"}], \
\\\",\\\", RowBox[{\\\"\\\\\\\"IsClass\\\\\\\"\\\", \\\"\[Rule]\\\", \
\\\"False\\\"}], \\\",\\\", RowBox[{\\\"\\\\\\\"IsFunction\\\\\\\"\\\", \\\"\
\[Rule]\\\", \\\"False\\\"}], \\\",\\\", RowBox[{\\\"\\\\\\\"IsMethod\\\\\\\"\
\\\", \\\"\[Rule]\\\", \\\"False\\\"}], \\\",\\\", \
RowBox[{\\\"\\\\\\\"IsCallable\\\\\\\"\\\", \\\"\[Rule]\\\", \
\\\"False\\\"}]}], \\\"\[RightAssociation]\\\"}]}], \\\"]\\\"}], \
\\\"]\\\"}]\\).\"", 2, 32, 186, 34656813220257792848, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.922970679351091*^9},
 CellLabel->
  "During evaluation of \
In[32]:=",ExpressionUUID->"88115a15-4f0e-481c-bcff-3870c02f1395"],

Cell[BoxData[
 RowBox[{"EdgeList", "[", 
  InterpretationBox[
   RowBox[{
    TagBox["ExternalObject",
     "SummaryHead"], "[", 
    DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
     TemplateBox[{
       PaneSelectorBox[{False -> GridBox[{{
             PaneBox[
              ButtonBox[
               DynamicBox[
                FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]], 
               ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
               BaseStyle -> {}, Evaluator -> Automatic, Method -> 
               "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
              Dynamic[{
                Automatic, 
                 3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                  Magnification])}]], 
             GraphicsBox[{
               Thickness[0.05], {
                FaceForm[{
                  RGBColor[1., 1., 1.], 
                  Opacity[1.]}], 
                
                FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                  3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 
                  0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {
                  1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3,
                   3}, {0, 1, 0}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                  3}}, {{1, 4, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                  0}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {
                  1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3,
                   3}, {1, 3, 3}}}, {{{7.5718000000000005`, 17.7334}, {7.0998,
                   17.7334}, {6.7168, 17.342399999999998`}, {6.7168, 
                  16.8624}, {6.7168, 16.3854}, {7.0998, 
                  15.997399999999999`}, {7.5718000000000005`, 
                  15.997399999999999`}, {8.043800000000001, 
                  15.997399999999999`}, {8.4268, 16.3854}, {8.4268, 
                  16.8624}, {8.4268, 17.342399999999998`}, {8.043800000000001,
                   17.7334}, {7.5718000000000005`, 17.7334}}, CompressedData["

1:eJxTTMoPSmViYGBQAWIQvXD12hvxZbwODSxH+w2/izl86QsuUZnOAuezVHCr
aNT9se+5ncGQzyjl8EZ2+QsPve/2X6bfndzeKu/Qst2h6dHxD/ZfvSLbLMSU
4fz1U1I7kmVV4erNVtuFRxdqOCRs3P9mns0fe98WXv/1ItoOR9qWh58yYnP4
+AVowA4dh6z8D60nQwTg/EsTY/45/1KG87O1v02/K6zi8O7kYae1L3UdBLi3
Lqs8Lubw+zRQhEnPwdnuxc01v8QcGtQOtS2fbgDng2w5ctHQgc1E0MzGVsLB
+wS77exSIwfP/bWyFunyDs2BnnMbjhk5+CzjclP9quCwVMdZ5vUjI4cJhuW6
ivFKDqbvLVzdPxk5JIYEqS84qezgLyeW5fvZyGHaJp7CNacRfAOQAamqcD63
m2op0y01h3aQA54YOZx6ar/kvp0G3D4rZa/q5vVaEPMnQe0v1XG4bgIUWG4I
58P8A+M/mCO4dC+jJpy/M5vz54Llag73gLESNVkLEm/7VBwOWgItcNaA86PE
t19kiJOH80OmKfaVFkrC+ZbpLpn5BSIOx3JNGrY7KMH5UZf3PBaZKwfnw9IH
AO506oE=
                  "], {{12.401800000000001`, 4.1044}, {11.9298, 4.1044}, {
                  11.5458, 3.7164}, {11.5458, 3.2394}, {11.5458, 
                  2.7593999999999994`}, {11.9298, 2.369399999999999}, {
                  12.401800000000001`, 2.369399999999999}, {
                  12.872800000000002`, 2.369399999999999}, {13.2568, 
                  2.7593999999999994`}, {13.2568, 3.2394}, {13.2568, 
                  3.7164}, {12.872800000000002`, 4.1044}, {
                  12.401800000000001`, 4.1044}}, CompressedData["
1:eJxTTMoPSmViYGBQAWIQ/Uei+LrQJ2UHhUNty8NPfbBfaXrW2m+iEpyvdVrg
+C4LRYcC3899wSWf7M+tOn81LEfe4cBGvbzFjN/sb635FZPrKuPgUPST/+X2
n/bOdi9urvkl5sARP8NHtIfRAcY/smKJn4MwD5y/aIv5j0MpcnB+rknDdocm
RQepRxHi2y9KOeyeNoG/qkzZIQrIY4iTh/MPWip7VTtrwPkuv96+PmCpDedf
mhjzz3mXroPFtaO5JgxqcP6DOYJL9zJqwvldfU8+yV/ScWBbPMmKMdfA4eMX
r8i2HToOE/mrzFbXGcL5GnU9O7M1jRympHYkx8ZoO9z8AJIwcjBbbRceXajh
0Pzo+Izd34wc3p087LT2pQqcL7R070HxNCWH+TY6V2YB1SeEBKkv6JR3kKlJ
NAoVAKo/APTIb0kHkDMbphs6NLAc7Tf8LgZ3D4wPdu8vZTgfSJbrPlR2WNC5
4eHLqSIOz+yX3N/Xp+OQF1a7bluSiIPPMi431VIdeHjD+CLAYLzHxOQwi0N6
XpymlsMFzgylnIpf9lURK4AxrgGPT3B47lRzWNAU6Dm34ZP94ZRVQKerwtMD
enoBAPI7A7I=
                  "]}]}, {
                FaceForm[{
                  RGBColor[0.20800000000000002`, 0.514, 0.6859999999999999], 
                  Opacity[1.]}], 
                
                FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                  3}}, {{1, 4, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                  0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                  0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1,
                   0}, {1, 3, 3}, {1, 3, 3}}}, {{{7.5718000000000005`, 
                  17.6836}, {8.014800000000001, 17.6836}, {8.3778, 17.3156}, {
                  8.3778, 16.862599999999997`}, {8.3778, 16.4116}, {
                  8.014800000000001, 16.046599999999998`}, {
                  7.5718000000000005`, 16.046599999999998`}, {7.1268, 
                  16.046599999999998`}, {6.7658000000000005`, 16.4116}, {
                  6.7658000000000005`, 16.862599999999997`}, {
                  6.7658000000000005`, 17.3156}, {7.1268, 17.6836}, {
                  7.5718000000000005`, 17.6836}}, CompressedData["
1:eJxTTMoPSmViYGBQBWIQnRgSpL7gpLLDYxHZk0//GzmYnbX2uxio5NBvWK6r
COQ7nU+7+vyVgsOa7tsZDO+NHKLEt19kiJN3EPMI+CNx2cgh6fBl7VRJCYd/
zr/evm4wchDg3rqs8riYQ2vU5T2PrxjC+XxzjBdtmW4A59fKWqS7vNR1uDQx
BqhVGYMPVKRpdUkHrh7Gb5l3dtX5UAE4v+gn/8vt69ng/DOHndZm3vttD+YH
aTt8OAkS+Gb/aUNA9qxyDQeec5KBt6Q/2N/XnbDgh6GqgwTQ2/ZL3tt77Ae6
QF0Zrv6Nhat7UaW8wxWXGx++eP223xet4PgxWcqBJ0Mpp6KK2aFlefgpoyNi
DgtXr70RX8YL5wcBbZmzSASDP2llU6DnXDk4/4fhs3WqKkoOb/V3q/N3Szq0
nQw5uGKJCjx8YfyDlspe1c4acL5XdbO+zzItOP+Z/ZL7+/p0HJR2/mn/MlsN
zgfybl9n1ITzYeEP4wNjvXPDQUOHa8+ztL9N13IARW/+QiO4fbD4haQPNYfO
DQ9fTv1k5NADUueoColvBmMH9PQDAFGHDrQ=
                  "]}]}, {
                FaceForm[{
                  RGBColor[0.976, 0.8430000000000001, 0.353], 
                  Opacity[1.]}], 
                
                FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                  3}}, {{0, 2, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                  0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {
                  0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3,
                   3}}}, {{{12.4014, 4.0552}, {12.846400000000001`, 4.0552}, {
                  13.2074, 3.6902}, {13.2074, 3.2392000000000003`}, {13.2074, 
                  2.7862}, {12.846400000000001`, 2.4182}, {12.4014, 2.4182}, {
                  11.958400000000001`, 2.4182}, {11.595400000000001`, 
                  2.7862}, {11.595400000000001`, 3.2392000000000003`}, {
                  11.595400000000001`, 3.6902}, {11.958400000000001`, 
                  4.0552}, {12.4014, 4.0552}}, CompressedData["
1:eJxTTMoPSmViYGBQBGIQ3bszm/PnAl2HgsWMe1gv6TjA+Ec26uUtZtSE819t
X8/8nEfNISJ64/43ctoOlq7uRT/7lR06k2PvuDlrwPkvs7S/TY+Vh/MvpF19
nrVaCs6fH6d5WuC4mMNLkHk9inB+1r3Crr4UOTi/LerynsciPAh5hvxGlqNM
Dr8OpaxKuCLlcO96Y7HblF/2MPtesZgImtl8tde5MuuZbLqSw52tLTUXNr+1
/3363cnDTKoOCo4fk8/EvraHuRem3j4c6KEcLQel5HdRTna/7Ndlghyi4zCL
Q3penCaTA4wPcw+Mn7H5VfHWqSIO6sGsiyf9UsbgG2itFL5wRAyuHsYH+zvH
AM6PATlsjSGcbwwKeGUjhzV2QIfZSzn8sSo41zHJyKGuBxgRlfIOGUo5FVWs
xg62s0Pnr85VcljVFOg5l8HYoX15+CkjFlW4+l23uv6mlms4/OIH2uhs5BAg
J5bl+1kLYj/QPlh8w9wD4wMA37PnHw==
                  "]}]}}, {
              ImageSize -> 
               Dynamic[{
                 Automatic, 
                  3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                   Magnification])}], AspectRatio -> Automatic, 
               ImageSize -> {20., 20.}, PlotRange -> {{0., 20.}, {0., 20.}}}], 
             GridBox[{{
                RowBox[{
                  TagBox["\"System: \"", "SummaryItemAnnotation"], 
                  "\[InvisibleSpace]", 
                  TagBox["\"Python\"", "SummaryItem"]}], 
                RowBox[{
                  TagBox["\"IsModule: \"", "SummaryItemAnnotation"], 
                  "\[InvisibleSpace]", 
                  TagBox["False", "SummaryItem"]}], ""}, {
                RowBox[{
                  TagBox["\"Module: \"", "SummaryItemAnnotation"], 
                  "\[InvisibleSpace]", 
                  TagBox["\"hypernetx.classes.hypergraph\"", "SummaryItem"]}], 
                RowBox[{
                  TagBox["\"IsClass: \"", "SummaryItemAnnotation"], 
                  "\[InvisibleSpace]", 
                  TagBox["False", "SummaryItem"]}], "\[SpanFromLeft]"}}, 
              GridBoxAlignment -> {
               "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
              False, GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              GridBoxSpacings -> {
               "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
              BaseStyle -> {
               ShowStringCharacters -> False, NumberMarks -> False, 
                PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
           AutoDelete -> False, 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
           BaselinePosition -> {1, 1}], True -> GridBox[{{
             PaneBox[
              ButtonBox[
               DynamicBox[
                FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]], 
               ButtonFunction :> (Typeset`open$$ = False), Appearance -> None,
                BaseStyle -> {}, Evaluator -> Automatic, Method -> 
               "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
              Dynamic[{
                Automatic, 
                 3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                  Magnification])}]], 
             GraphicsBox[{
               Thickness[0.05], {
                FaceForm[{
                  RGBColor[1., 1., 1.], 
                  Opacity[1.]}], 
                
                FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                  3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 
                  0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {
                  1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3,
                   3}, {0, 1, 0}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                  3}}, {{1, 4, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                  0}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {
                  1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3,
                   3}, {1, 3, 3}}}, {{{7.5718000000000005`, 17.7334}, {7.0998,
                   17.7334}, {6.7168, 17.342399999999998`}, {6.7168, 
                  16.8624}, {6.7168, 16.3854}, {7.0998, 
                  15.997399999999999`}, {7.5718000000000005`, 
                  15.997399999999999`}, {8.043800000000001, 
                  15.997399999999999`}, {8.4268, 16.3854}, {8.4268, 
                  16.8624}, {8.4268, 17.342399999999998`}, {8.043800000000001,
                   17.7334}, {7.5718000000000005`, 17.7334}}, CompressedData["

1:eJxTTMoPSmViYGBQAWIQvXD12hvxZbwODSxH+w2/izl86QsuUZnOAuezVHCr
aNT9se+5ncGQzyjl8EZ2+QsPve/2X6bfndzeKu/Qst2h6dHxD/ZfvSLbLMSU
4fz1U1I7kmVV4erNVtuFRxdqOCRs3P9mns0fe98WXv/1ItoOR9qWh58yYnP4
+AVowA4dh6z8D60nQwTg/EsTY/45/1KG87O1v02/K6zi8O7kYae1L3UdBLi3
Lqs8Lubw+zRQhEnPwdnuxc01v8QcGtQOtS2fbgDng2w5ctHQgc1E0MzGVsLB
+wS77exSIwfP/bWyFunyDs2BnnMbjhk5+CzjclP9quCwVMdZ5vUjI4cJhuW6
ivFKDqbvLVzdPxk5JIYEqS84qezgLyeW5fvZyGHaJp7CNacRfAOQAamqcD63
m2op0y01h3aQA54YOZx6ar/kvp0G3D4rZa/q5vVaEPMnQe0v1XG4bgIUWG4I
58P8A+M/mCO4dC+jJpy/M5vz54Llag73gLESNVkLEm/7VBwOWgItcNaA86PE
t19kiJOH80OmKfaVFkrC+ZbpLpn5BSIOx3JNGrY7KMH5UZf3PBaZKwfnw9IH
AO506oE=
                  "], {{12.401800000000001`, 4.1044}, {11.9298, 4.1044}, {
                  11.5458, 3.7164}, {11.5458, 3.2394}, {11.5458, 
                  2.7593999999999994`}, {11.9298, 2.369399999999999}, {
                  12.401800000000001`, 2.369399999999999}, {
                  12.872800000000002`, 2.369399999999999}, {13.2568, 
                  2.7593999999999994`}, {13.2568, 3.2394}, {13.2568, 
                  3.7164}, {12.872800000000002`, 4.1044}, {
                  12.401800000000001`, 4.1044}}, CompressedData["
1:eJxTTMoPSmViYGBQAWIQ/Uei+LrQJ2UHhUNty8NPfbBfaXrW2m+iEpyvdVrg
+C4LRYcC3899wSWf7M+tOn81LEfe4cBGvbzFjN/sb635FZPrKuPgUPST/+X2
n/bOdi9urvkl5sARP8NHtIfRAcY/smKJn4MwD5y/aIv5j0MpcnB+rknDdocm
RQepRxHi2y9KOeyeNoG/qkzZIQrIY4iTh/MPWip7VTtrwPkuv96+PmCpDedf
mhjzz3mXroPFtaO5JgxqcP6DOYJL9zJqwvldfU8+yV/ScWBbPMmKMdfA4eMX
r8i2HToOE/mrzFbXGcL5GnU9O7M1jRympHYkx8ZoO9z8AJIwcjBbbRceXajh
0Pzo+Izd34wc3p087LT2pQqcL7R070HxNCWH+TY6V2YB1SeEBKkv6JR3kKlJ
NAoVAKo/APTIb0kHkDMbphs6NLAc7Tf8LgZ3D4wPdu8vZTgfSJbrPlR2WNC5
4eHLqSIOz+yX3N/Xp+OQF1a7bluSiIPPMi431VIdeHjD+CLAYLzHxOQwi0N6
XpymlsMFzgylnIpf9lURK4AxrgGPT3B47lRzWNAU6Dm34ZP94ZRVQKerwtMD
enoBAPI7A7I=
                  "]}]}, {
                FaceForm[{
                  RGBColor[0.20800000000000002`, 0.514, 0.6859999999999999], 
                  Opacity[1.]}], 
                
                FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                  3}}, {{1, 4, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                  0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                  0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1,
                   0}, {1, 3, 3}, {1, 3, 3}}}, {{{7.5718000000000005`, 
                  17.6836}, {8.014800000000001, 17.6836}, {8.3778, 17.3156}, {
                  8.3778, 16.862599999999997`}, {8.3778, 16.4116}, {
                  8.014800000000001, 16.046599999999998`}, {
                  7.5718000000000005`, 16.046599999999998`}, {7.1268, 
                  16.046599999999998`}, {6.7658000000000005`, 16.4116}, {
                  6.7658000000000005`, 16.862599999999997`}, {
                  6.7658000000000005`, 17.3156}, {7.1268, 17.6836}, {
                  7.5718000000000005`, 17.6836}}, CompressedData["
1:eJxTTMoPSmViYGBQBWIQnRgSpL7gpLLDYxHZk0//GzmYnbX2uxio5NBvWK6r
COQ7nU+7+vyVgsOa7tsZDO+NHKLEt19kiJN3EPMI+CNx2cgh6fBl7VRJCYd/
zr/evm4wchDg3rqs8riYQ2vU5T2PrxjC+XxzjBdtmW4A59fKWqS7vNR1uDQx
BqhVGYMPVKRpdUkHrh7Gb5l3dtX5UAE4v+gn/8vt69ng/DOHndZm3vttD+YH
aTt8OAkS+Gb/aUNA9qxyDQeec5KBt6Q/2N/XnbDgh6GqgwTQ2/ZL3tt77Ae6
QF0Zrv6Nhat7UaW8wxWXGx++eP223xet4PgxWcqBJ0Mpp6KK2aFlefgpoyNi
DgtXr70RX8YL5wcBbZmzSASDP2llU6DnXDk4/4fhs3WqKkoOb/V3q/N3Szq0
nQw5uGKJCjx8YfyDlspe1c4acL5XdbO+zzItOP+Z/ZL7+/p0HJR2/mn/MlsN
zgfybl9n1ITzYeEP4wNjvXPDQUOHa8+ztL9N13IARW/+QiO4fbD4haQPNYfO
DQ9fTv1k5NADUueoColvBmMH9PQDAFGHDrQ=
                  "]}]}, {
                FaceForm[{
                  RGBColor[0.976, 0.8430000000000001, 0.353], 
                  Opacity[1.]}], 
                
                FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                  3}}, {{0, 2, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                  0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {
                  0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3,
                   3}}}, {{{12.4014, 4.0552}, {12.846400000000001`, 4.0552}, {
                  13.2074, 3.6902}, {13.2074, 3.2392000000000003`}, {13.2074, 
                  2.7862}, {12.846400000000001`, 2.4182}, {12.4014, 2.4182}, {
                  11.958400000000001`, 2.4182}, {11.595400000000001`, 
                  2.7862}, {11.595400000000001`, 3.2392000000000003`}, {
                  11.595400000000001`, 3.6902}, {11.958400000000001`, 
                  4.0552}, {12.4014, 4.0552}}, CompressedData["
1:eJxTTMoPSmViYGBQBGIQ3bszm/PnAl2HgsWMe1gv6TjA+Ec26uUtZtSE819t
X8/8nEfNISJ64/43ctoOlq7uRT/7lR06k2PvuDlrwPkvs7S/TY+Vh/MvpF19
nrVaCs6fH6d5WuC4mMNLkHk9inB+1r3Crr4UOTi/LerynsciPAh5hvxGlqNM
Dr8OpaxKuCLlcO96Y7HblF/2MPtesZgImtl8tde5MuuZbLqSw52tLTUXNr+1
/3363cnDTKoOCo4fk8/EvraHuRem3j4c6KEcLQel5HdRTna/7Ndlghyi4zCL
Q3penCaTA4wPcw+Mn7H5VfHWqSIO6sGsiyf9UsbgG2itFL5wRAyuHsYH+zvH
AM6PATlsjSGcbwwKeGUjhzV2QIfZSzn8sSo41zHJyKGuBxgRlfIOGUo5FVWs
xg62s0Pnr85VcljVFOg5l8HYoX15+CkjFlW4+l23uv6mlms4/OIH2uhs5BAg
J5bl+1kLYj/QPlh8w9wD4wMA37PnHw==
                  "]}]}}, {
              ImageSize -> 
               Dynamic[{
                 Automatic, 
                  3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                   Magnification])}], AspectRatio -> Automatic, 
               ImageSize -> {20., 20.}, PlotRange -> {{0., 20.}, {0., 20.}}}], 
             GridBox[{{
                RowBox[{
                  TagBox["\"System: \"", "SummaryItemAnnotation"], 
                  "\[InvisibleSpace]", 
                  TagBox["\"Python\"", "SummaryItem"]}]}, {
                RowBox[{
                  TagBox["\"IsModule: \"", "SummaryItemAnnotation"], 
                  "\[InvisibleSpace]", 
                  TagBox["False", "SummaryItem"]}]}, {
                RowBox[{
                  TagBox["\"Module: \"", "SummaryItemAnnotation"], 
                  "\[InvisibleSpace]", 
                  TagBox[
                  "\"hypernetx.classes.hypergraph\"", "SummaryItem"]}]}, {
                RowBox[{
                  TagBox["\"IsClass: \"", "SummaryItemAnnotation"], 
                  "\[InvisibleSpace]", 
                  TagBox["False", "SummaryItem"]}]}, {
                RowBox[{
                  TagBox["\"IsFunction: \"", "SummaryItemAnnotation"], 
                  "\[InvisibleSpace]", 
                  TagBox["False", "SummaryItem"]}]}, {
                RowBox[{
                  TagBox["\"IsMethod: \"", "SummaryItemAnnotation"], 
                  "\[InvisibleSpace]", 
                  TagBox["False", "SummaryItem"]}]}, {
                RowBox[{
                  TagBox["\"IsCallable: \"", "SummaryItemAnnotation"], 
                  "\[InvisibleSpace]", 
                  TagBox["False", "SummaryItem"]}]}, {
                RowBox[{
                  TagBox["\"Status: \"", "SummaryItemAnnotation"], 
                  "\[InvisibleSpace]", 
                  TagBox["\"Evaluated\"", "SummaryItem"]}]}}, 
              GridBoxAlignment -> {
               "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
              False, GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              GridBoxSpacings -> {
               "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
              BaseStyle -> {
               ShowStringCharacters -> False, NumberMarks -> False, 
                PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
           AutoDelete -> False, 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
           BaselinePosition -> {1, 1}]}, 
        Dynamic[Typeset`open$$], ImageSize -> Automatic]},
      "SummaryPanel"],
     DynamicModuleValues:>{}], "]"}],
   ExternalObject[
    ExternalSessionObject["b624fb94-eedb-491e-86ae-4f511002b477"], 
    ExternalEvaluate`RPC["GetReference", 6067606864], <|
    "IsModule" -> False, "Module" -> "hypernetx.classes.hypergraph", 
     "IsClass" -> False, "IsFunction" -> False, "IsMethod" -> False, 
     "IsCallable" -> False|>],
   Editable->False,
   SelectWithContents->True,
   Selectable->False], "]"}]], "Output",
 CellChangeTimes->{3.9229706793673687`*^9},
 CellLabel->"Out[32]=",ExpressionUUID->"d9cd3308-150d-47a1-8873-3e85f85ffe49"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"HypergraphDiameter", "[", "hg", "]"}]], "Input",
 CellChangeTimes->{{3.922970429317768*^9, 3.922970437764165*^9}},
 CellLabel->"In[31]:=",ExpressionUUID->"f2d79d29-dcdc-4de1-b84a-bd4a63a941f1"],

Cell[BoxData["2"], "Output",
 CellChangeTimes->{3.922970438260908*^9},
 CellLabel->"Out[31]=",ExpressionUUID->"775a7b37-61f8-472c-aa53-256bdebd3468"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"hg", "=", 
  RowBox[{"CreateHypergraph", "[", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0", ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "2"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"2", ",", "3"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"3", ",", "0"}], "}"}]}], "}"}], "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.9227955865432177`*^9, 3.922795617018423*^9}, {
  3.922795905423779*^9, 3.922795905593668*^9}, {3.922872882301714*^9, 
  3.9228729421508408`*^9}},
 CellLabel->"In[25]:=",ExpressionUUID->"0aa97b9d-d1a6-4820-b6f5-391b8e502cba"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["ExternalObject",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = True, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"], 
               ImageSizeCache -> {10.6984921875, {0., 10.6984921875}}], 
              Appearance -> None, BaseStyle -> {}, 
              ButtonFunction :> (Typeset`open$$ = True), Evaluator -> 
              Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{
              Thickness[0.05], {
               FaceForm[{
                 RGBColor[1., 1., 1.], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 
                 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {
                 1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
                 3}, {0, 1, 0}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}}, {{1, 4, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                 0}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 
                 3}, {1, 3, 3}}}, {{{7.5718000000000005`, 17.7334}, {7.0998, 
                 17.7334}, {6.7168, 17.342399999999998`}, {6.7168, 16.8624}, {
                 6.7168, 16.3854}, {7.0998, 15.997399999999999`}, {
                 7.5718000000000005`, 15.997399999999999`}, {
                 8.043800000000001, 15.997399999999999`}, {8.4268, 16.3854}, {
                 8.4268, 16.8624}, {8.4268, 17.342399999999998`}, {
                 8.043800000000001, 17.7334}, {7.5718000000000005`, 
                 17.7334}}, CompressedData["
1:eJxTTMoPSmViYGBQAWIQvXD12hvxZbwODSxH+w2/izl86QsuUZnOAuezVHCr
aNT9se+5ncGQzyjl8EZ2+QsPve/2X6bfndzeKu/Qst2h6dHxD/ZfvSLbLMSU
4fz1U1I7kmVV4erNVtuFRxdqOCRs3P9mns0fe98WXv/1ItoOR9qWh58yYnP4
+AVowA4dh6z8D60nQwTg/EsTY/45/1KG87O1v02/K6zi8O7kYae1L3UdBLi3
Lqs8Lubw+zRQhEnPwdnuxc01v8QcGtQOtS2fbgDng2w5ctHQgc1E0MzGVsLB
+wS77exSIwfP/bWyFunyDs2BnnMbjhk5+CzjclP9quCwVMdZ5vUjI4cJhuW6
ivFKDqbvLVzdPxk5JIYEqS84qezgLyeW5fvZyGHaJp7CNacRfAOQAamqcD63
m2op0y01h3aQA54YOZx6ar/kvp0G3D4rZa/q5vVaEPMnQe0v1XG4bgIUWG4I
58P8A+M/mCO4dC+jJpy/M5vz54Llag73gLESNVkLEm/7VBwOWgItcNaA86PE
t19kiJOH80OmKfaVFkrC+ZbpLpn5BSIOx3JNGrY7KMH5UZf3PBaZKwfnw9IH
AO506oE=
                 "], {{12.401800000000001`, 4.1044}, {11.9298, 4.1044}, {
                 11.5458, 3.7164}, {11.5458, 3.2394}, {11.5458, 
                 2.7593999999999994`}, {11.9298, 2.369399999999999}, {
                 12.401800000000001`, 2.369399999999999}, {
                 12.872800000000002`, 2.369399999999999}, {13.2568, 
                 2.7593999999999994`}, {13.2568, 3.2394}, {13.2568, 3.7164}, {
                 12.872800000000002`, 4.1044}, {12.401800000000001`, 
                 4.1044}}, CompressedData["
1:eJxTTMoPSmViYGBQAWIQ/Uei+LrQJ2UHhUNty8NPfbBfaXrW2m+iEpyvdVrg
+C4LRYcC3899wSWf7M+tOn81LEfe4cBGvbzFjN/sb635FZPrKuPgUPST/+X2
n/bOdi9urvkl5sARP8NHtIfRAcY/smKJn4MwD5y/aIv5j0MpcnB+rknDdocm
RQepRxHi2y9KOeyeNoG/qkzZIQrIY4iTh/MPWip7VTtrwPkuv96+PmCpDedf
mhjzz3mXroPFtaO5JgxqcP6DOYJL9zJqwvldfU8+yV/ScWBbPMmKMdfA4eMX
r8i2HToOE/mrzFbXGcL5GnU9O7M1jRympHYkx8ZoO9z8AJIwcjBbbRceXajh
0Pzo+Izd34wc3p087LT2pQqcL7R070HxNCWH+TY6V2YB1SeEBKkv6JR3kKlJ
NAoVAKo/APTIb0kHkDMbphs6NLAc7Tf8LgZ3D4wPdu8vZTgfSJbrPlR2WNC5
4eHLqSIOz+yX3N/Xp+OQF1a7bluSiIPPMi431VIdeHjD+CLAYLzHxOQwi0N6
XpymlsMFzgylnIpf9lURK4AxrgGPT3B47lRzWNAU6Dm34ZP94ZRVQKerwtMD
enoBAPI7A7I=
                 "]}]}, {
               FaceForm[{
                 RGBColor[0.20800000000000002`, 0.514, 0.6859999999999999], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}}, {{1, 4, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                 0}, {1, 3, 3}, {1, 3, 3}}}, {{{7.5718000000000005`, 
                 17.6836}, {8.014800000000001, 17.6836}, {8.3778, 17.3156}, {
                 8.3778, 16.862599999999997`}, {8.3778, 16.4116}, {
                 8.014800000000001, 16.046599999999998`}, {
                 7.5718000000000005`, 16.046599999999998`}, {7.1268, 
                 16.046599999999998`}, {6.7658000000000005`, 16.4116}, {
                 6.7658000000000005`, 16.862599999999997`}, {
                 6.7658000000000005`, 17.3156}, {7.1268, 17.6836}, {
                 7.5718000000000005`, 17.6836}}, CompressedData["
1:eJxTTMoPSmViYGBQBWIQnRgSpL7gpLLDYxHZk0//GzmYnbX2uxio5NBvWK6r
COQ7nU+7+vyVgsOa7tsZDO+NHKLEt19kiJN3EPMI+CNx2cgh6fBl7VRJCYd/
zr/evm4wchDg3rqs8riYQ2vU5T2PrxjC+XxzjBdtmW4A59fKWqS7vNR1uDQx
BqhVGYMPVKRpdUkHrh7Gb5l3dtX5UAE4v+gn/8vt69ng/DOHndZm3vttD+YH
aTt8OAkS+Gb/aUNA9qxyDQeec5KBt6Q/2N/XnbDgh6GqgwTQ2/ZL3tt77Ae6
QF0Zrv6Nhat7UaW8wxWXGx++eP223xet4PgxWcqBJ0Mpp6KK2aFlefgpoyNi
DgtXr70RX8YL5wcBbZmzSASDP2llU6DnXDk4/4fhs3WqKkoOb/V3q/N3Szq0
nQw5uGKJCjx8YfyDlspe1c4acL5XdbO+zzItOP+Z/ZL7+/p0HJR2/mn/MlsN
zgfybl9n1ITzYeEP4wNjvXPDQUOHa8+ztL9N13IARW/+QiO4fbD4haQPNYfO
DQ9fTv1k5NADUueoColvBmMH9PQDAFGHDrQ=
                 "]}]}, {
               FaceForm[{
                 RGBColor[0.976, 0.8430000000000001, 0.353], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}}, {{0, 2, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {
                 0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}}}, {{{12.4014, 4.0552}, {12.846400000000001`, 4.0552}, {
                 13.2074, 3.6902}, {13.2074, 3.2392000000000003`}, {13.2074, 
                 2.7862}, {12.846400000000001`, 2.4182}, {12.4014, 2.4182}, {
                 11.958400000000001`, 2.4182}, {11.595400000000001`, 
                 2.7862}, {11.595400000000001`, 3.2392000000000003`}, {
                 11.595400000000001`, 3.6902}, {11.958400000000001`, 
                 4.0552}, {12.4014, 4.0552}}, CompressedData["
1:eJxTTMoPSmViYGBQBGIQ3bszm/PnAl2HgsWMe1gv6TjA+Ec26uUtZtSE819t
X8/8nEfNISJ64/43ctoOlq7uRT/7lR06k2PvuDlrwPkvs7S/TY+Vh/MvpF19
nrVaCs6fH6d5WuC4mMNLkHk9inB+1r3Crr4UOTi/LerynsciPAh5hvxGlqNM
Dr8OpaxKuCLlcO96Y7HblF/2MPtesZgImtl8tde5MuuZbLqSw52tLTUXNr+1
/3363cnDTKoOCo4fk8/EvraHuRem3j4c6KEcLQel5HdRTna/7Ndlghyi4zCL
Q3penCaTA4wPcw+Mn7H5VfHWqSIO6sGsiyf9UsbgG2itFL5wRAyuHsYH+zvH
AM6PATlsjSGcbwwKeGUjhzV2QIfZSzn8sSo41zHJyKGuBxgRlfIOGUo5FVWs
xg62s0Pnr85VcljVFOg5l8HYoX15+CkjFlW4+l23uv6mlms4/OIH2uhs5BAg
J5bl+1kLYj/QPlh8w9wD4wMA37PnHw==
                 "]}]}}, AspectRatio -> Automatic, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], PlotRange -> {{0., 20.}, {0., 20.}}], 
            GridBox[{{
               RowBox[{
                 TagBox["\"System: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Python\"", "SummaryItem"]}], 
               RowBox[{
                 TagBox["\"IsModule: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["False", "SummaryItem"]}], ""}, {
               RowBox[{
                 TagBox["\"Module: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"hypernetx.classes.hypergraph\"", "SummaryItem"]}], 
               
               RowBox[{
                 TagBox["\"IsClass: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["False", "SummaryItem"]}], "\[SpanFromLeft]"}}, 
             AutoDelete -> False, 
             BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {
              "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, AutoDelete -> 
          False, BaselinePosition -> {1, 1}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], True -> 
        GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"], 
               ImageSizeCache -> {10.6984921875, {0., 10.6984921875}}], 
              Appearance -> None, BaseStyle -> {}, 
              ButtonFunction :> (Typeset`open$$ = False), Evaluator -> 
              Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{
              Thickness[0.05], {
               FaceForm[{
                 RGBColor[1., 1., 1.], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 
                 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {
                 1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
                 3}, {0, 1, 0}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}}, {{1, 4, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                 0}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 
                 3}, {1, 3, 3}}}, {{{7.5718000000000005`, 17.7334}, {7.0998, 
                 17.7334}, {6.7168, 17.342399999999998`}, {6.7168, 16.8624}, {
                 6.7168, 16.3854}, {7.0998, 15.997399999999999`}, {
                 7.5718000000000005`, 15.997399999999999`}, {
                 8.043800000000001, 15.997399999999999`}, {8.4268, 16.3854}, {
                 8.4268, 16.8624}, {8.4268, 17.342399999999998`}, {
                 8.043800000000001, 17.7334}, {7.5718000000000005`, 
                 17.7334}}, CompressedData["
1:eJxTTMoPSmViYGBQAWIQvXD12hvxZbwODSxH+w2/izl86QsuUZnOAuezVHCr
aNT9se+5ncGQzyjl8EZ2+QsPve/2X6bfndzeKu/Qst2h6dHxD/ZfvSLbLMSU
4fz1U1I7kmVV4erNVtuFRxdqOCRs3P9mns0fe98WXv/1ItoOR9qWh58yYnP4
+AVowA4dh6z8D60nQwTg/EsTY/45/1KG87O1v02/K6zi8O7kYae1L3UdBLi3
Lqs8Lubw+zRQhEnPwdnuxc01v8QcGtQOtS2fbgDng2w5ctHQgc1E0MzGVsLB
+wS77exSIwfP/bWyFunyDs2BnnMbjhk5+CzjclP9quCwVMdZ5vUjI4cJhuW6
ivFKDqbvLVzdPxk5JIYEqS84qezgLyeW5fvZyGHaJp7CNacRfAOQAamqcD63
m2op0y01h3aQA54YOZx6ar/kvp0G3D4rZa/q5vVaEPMnQe0v1XG4bgIUWG4I
58P8A+M/mCO4dC+jJpy/M5vz54Llag73gLESNVkLEm/7VBwOWgItcNaA86PE
t19kiJOH80OmKfaVFkrC+ZbpLpn5BSIOx3JNGrY7KMH5UZf3PBaZKwfnw9IH
AO506oE=
                 "], {{12.401800000000001`, 4.1044}, {11.9298, 4.1044}, {
                 11.5458, 3.7164}, {11.5458, 3.2394}, {11.5458, 
                 2.7593999999999994`}, {11.9298, 2.369399999999999}, {
                 12.401800000000001`, 2.369399999999999}, {
                 12.872800000000002`, 2.369399999999999}, {13.2568, 
                 2.7593999999999994`}, {13.2568, 3.2394}, {13.2568, 3.7164}, {
                 12.872800000000002`, 4.1044}, {12.401800000000001`, 
                 4.1044}}, CompressedData["
1:eJxTTMoPSmViYGBQAWIQ/Uei+LrQJ2UHhUNty8NPfbBfaXrW2m+iEpyvdVrg
+C4LRYcC3899wSWf7M+tOn81LEfe4cBGvbzFjN/sb635FZPrKuPgUPST/+X2
n/bOdi9urvkl5sARP8NHtIfRAcY/smKJn4MwD5y/aIv5j0MpcnB+rknDdocm
RQepRxHi2y9KOeyeNoG/qkzZIQrIY4iTh/MPWip7VTtrwPkuv96+PmCpDedf
mhjzz3mXroPFtaO5JgxqcP6DOYJL9zJqwvldfU8+yV/ScWBbPMmKMdfA4eMX
r8i2HToOE/mrzFbXGcL5GnU9O7M1jRympHYkx8ZoO9z8AJIwcjBbbRceXajh
0Pzo+Izd34wc3p087LT2pQqcL7R070HxNCWH+TY6V2YB1SeEBKkv6JR3kKlJ
NAoVAKo/APTIb0kHkDMbphs6NLAc7Tf8LgZ3D4wPdu8vZTgfSJbrPlR2WNC5
4eHLqSIOz+yX3N/Xp+OQF1a7bluSiIPPMi431VIdeHjD+CLAYLzHxOQwi0N6
XpymlsMFzgylnIpf9lURK4AxrgGPT3B47lRzWNAU6Dm34ZP94ZRVQKerwtMD
enoBAPI7A7I=
                 "]}]}, {
               FaceForm[{
                 RGBColor[0.20800000000000002`, 0.514, 0.6859999999999999], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}}, {{1, 4, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                 0}, {1, 3, 3}, {1, 3, 3}}}, {{{7.5718000000000005`, 
                 17.6836}, {8.014800000000001, 17.6836}, {8.3778, 17.3156}, {
                 8.3778, 16.862599999999997`}, {8.3778, 16.4116}, {
                 8.014800000000001, 16.046599999999998`}, {
                 7.5718000000000005`, 16.046599999999998`}, {7.1268, 
                 16.046599999999998`}, {6.7658000000000005`, 16.4116}, {
                 6.7658000000000005`, 16.862599999999997`}, {
                 6.7658000000000005`, 17.3156}, {7.1268, 17.6836}, {
                 7.5718000000000005`, 17.6836}}, CompressedData["
1:eJxTTMoPSmViYGBQBWIQnRgSpL7gpLLDYxHZk0//GzmYnbX2uxio5NBvWK6r
COQ7nU+7+vyVgsOa7tsZDO+NHKLEt19kiJN3EPMI+CNx2cgh6fBl7VRJCYd/
zr/evm4wchDg3rqs8riYQ2vU5T2PrxjC+XxzjBdtmW4A59fKWqS7vNR1uDQx
BqhVGYMPVKRpdUkHrh7Gb5l3dtX5UAE4v+gn/8vt69ng/DOHndZm3vttD+YH
aTt8OAkS+Gb/aUNA9qxyDQeec5KBt6Q/2N/XnbDgh6GqgwTQ2/ZL3tt77Ae6
QF0Zrv6Nhat7UaW8wxWXGx++eP223xet4PgxWcqBJ0Mpp6KK2aFlefgpoyNi
DgtXr70RX8YL5wcBbZmzSASDP2llU6DnXDk4/4fhs3WqKkoOb/V3q/N3Szq0
nQw5uGKJCjx8YfyDlspe1c4acL5XdbO+zzItOP+Z/ZL7+/p0HJR2/mn/MlsN
zgfybl9n1ITzYeEP4wNjvXPDQUOHa8+ztL9N13IARW/+QiO4fbD4haQPNYfO
DQ9fTv1k5NADUueoColvBmMH9PQDAFGHDrQ=
                 "]}]}, {
               FaceForm[{
                 RGBColor[0.976, 0.8430000000000001, 0.353], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}}, {{0, 2, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {
                 0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}}}, {{{12.4014, 4.0552}, {12.846400000000001`, 4.0552}, {
                 13.2074, 3.6902}, {13.2074, 3.2392000000000003`}, {13.2074, 
                 2.7862}, {12.846400000000001`, 2.4182}, {12.4014, 2.4182}, {
                 11.958400000000001`, 2.4182}, {11.595400000000001`, 
                 2.7862}, {11.595400000000001`, 3.2392000000000003`}, {
                 11.595400000000001`, 3.6902}, {11.958400000000001`, 
                 4.0552}, {12.4014, 4.0552}}, CompressedData["
1:eJxTTMoPSmViYGBQBGIQ3bszm/PnAl2HgsWMe1gv6TjA+Ec26uUtZtSE819t
X8/8nEfNISJ64/43ctoOlq7uRT/7lR06k2PvuDlrwPkvs7S/TY+Vh/MvpF19
nrVaCs6fH6d5WuC4mMNLkHk9inB+1r3Crr4UOTi/LerynsciPAh5hvxGlqNM
Dr8OpaxKuCLlcO96Y7HblF/2MPtesZgImtl8tde5MuuZbLqSw52tLTUXNr+1
/3363cnDTKoOCo4fk8/EvraHuRem3j4c6KEcLQel5HdRTna/7Ndlghyi4zCL
Q3penCaTA4wPcw+Mn7H5VfHWqSIO6sGsiyf9UsbgG2itFL5wRAyuHsYH+zvH
AM6PATlsjSGcbwwKeGUjhzV2QIfZSzn8sSo41zHJyKGuBxgRlfIOGUo5FVWs
xg62s0Pnr85VcljVFOg5l8HYoX15+CkjFlW4+l23uv6mlms4/OIH2uhs5BAg
J5bl+1kLYj/QPlh8w9wD4wMA37PnHw==
                 "]}]}}, AspectRatio -> Automatic, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], PlotRange -> {{0., 20.}, {0., 20.}}], 
            GridBox[{{
               RowBox[{
                 TagBox["\"System: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Python\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"IsModule: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["False", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Module: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                 "\"hypernetx.classes.hypergraph\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"IsClass: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["False", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"IsFunction: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["False", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"IsMethod: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["False", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"IsCallable: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["False", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Status: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Evaluated\"", "SummaryItem"]}]}}, AutoDelete -> 
             False, BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {
              "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, AutoDelete -> 
          False, BaselinePosition -> {1, 1}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  ExternalObject[
   ExternalSessionObject["b624fb94-eedb-491e-86ae-4f511002b477"], 
   ExternalEvaluate`RPC["GetReference", 6067606864], <|
   "IsModule" -> False, "Module" -> "hypernetx.classes.hypergraph", "IsClass" -> 
    False, "IsFunction" -> False, "IsMethod" -> False, "IsCallable" -> 
    False|>],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.922795596118929*^9, 3.922795617363843*^9}, 
   3.92279565724866*^9, 3.922795783923118*^9, {3.92279590092385*^9, 
   3.9227959069317007`*^9}, 3.922796018677496*^9, 3.922796056050644*^9, 
   3.922796108403057*^9, {3.922796147444788*^9, 3.9227961638710127`*^9}, 
   3.922796984745977*^9, 3.922797108508645*^9, 3.9227972860793467`*^9, 
   3.922797783154752*^9, 3.922801162592709*^9, 3.922802169291438*^9, 
   3.922811545590131*^9, 3.922867089158771*^9, 3.922867303347473*^9, 
   3.9228680451983852`*^9, 3.9228681254155283`*^9, 3.922872856602092*^9, {
   3.922872892116643*^9, 3.922872942878398*^9}, 3.922969888961095*^9},
 CellLabel->"Out[25]=",ExpressionUUID->"597fe4eb-38fd-43d8-9f3f-55409aa832d6"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"Panel", "[", "\"\<Hypergraph\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.9229700270476513`*^9, 3.92297003337281*^9}},
 CellLabel->"In[26]:=",ExpressionUUID->"1c7a09f2-ed11-4ac3-a883-73e7f6bfa461"],

Cell[BoxData[
 RowBox[{"ExtensionObject", "[", "...", "]"}]], "Input",
 CellChangeTimes->{{3.922970068958403*^9, 
  3.922970073802919*^9}},ExpressionUUID->"7c7a9e64-b257-41b7-84b4-\
eeb50cf8e5e0"],

Cell[BoxData[
 RowBox[{
  PanelBox["\<\"Hypergraph\"\>"], "[", 
  RowBox[{"\"\<bla\>\"", ",", "32", ","}], "]"}]], "Input",
 CellChangeTimes->{{3.922970035506763*^9, 
  3.922970039989126*^9}},ExpressionUUID->"d949d34d-a76a-461f-a9c2-\
634b79f580db"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"HypergraphDataset", "[", "hg", "]"}], "[", 
       RowBox[{"All", ",", 
        RowBox[{"{", 
         RowBox[{"\"\<edges\>\"", ",", "\"\<nodes\>\""}], "}"}]}], "]"}], "//",
       "Normal"}], "//", "Values"}], "//", "Values"}], "//", "Round"}], "//", 
  
  RowBox[{"ResourceFunction", "[", "\"\<HypergraphPlot\>\"", "]"}]}]], "Input",\

 CellLabel->"In[27]:=",ExpressionUUID->"f60edcf3-aa0f-4260-9176-3d165642e0af"],

Cell[BoxData[
 GraphicsBox[{{{
     {RGBColor[0.25634450000000003`, 0.36442575, 0.5148382499999999], Opacity[
      0.2], FilledCurveBox[
       BSplineCurve[{{0.37409384061003553`, 2.3288488209569196`}, {
        0.9740938406100355, 2.3288488209569196`}, {0.9740938406100355, 
        2.9288488209569192`}, {0.37409384061003553`, 2.9288488209569192`}}, 
        SplineClosed -> True]]}, 
     {RGBColor[0.277947, 0.45009699999999997`, 0.32815550000000004`], Opacity[
      0.2], FilledCurveBox[
       BSplineCurve[{{0.9740938406100355, 2.3288488209569196`}, {
        1.6640935558187884`, 2.584800851507984}, {2.322233501844897, 
        2.3764615502659554`}, {2.9222335018448966`, 2.3764615502659554`}, {
        2.9222335018448966`, 2.976461550265955}, {1.9403609829015376`, 
        3.287280906757796}, {1.3403609829015375`, 3.287280906757796}, {
        0.37409384061003553`, 2.9288488209569192`}, {0.37409384061003553`, 
        2.3288488209569196`}}, SplineClosed -> True]]}, 
     {RGBColor[0.38516275, 0.53580125, 0.24921775000000002`], Opacity[0.2], 
      FilledCurveBox[
       BSplineCurve[{{2.322233501844897, 2.3764615502659554`}, {
        2.9222335018448966`, 2.3764615502659554`}, {2.9222335018448966`, 
        2.976461550265955}, {2.322233501844897, 2.976461550265955}}, 
        SplineClosed -> True]]}, 
     {RGBColor[0.624866, 0.673302, 0.264296], Opacity[0.2], 
      FilledCurveBox[
       BSplineCurve[{{3.2811666002483486`, 1.4110529361484707`}, {
        3.2811666002483486`, 2.0110529361484706`}, {2.9222335018448966`, 
        2.976461550265955}, {2.322233501844897, 2.976461550265955}, {
        2.322233501844897, 2.3764615502659554`}, {2.5784577765431487`, 
        1.6873049273744793`}, {2.3696551535845014`, 1.0291391440365691`}, {
        2.3696551535845014`, 0.4291391440365692}, {2.969655153584501, 
        0.4291391440365692}}, SplineClosed -> True]]}, 
     {RGBColor[0.8292435, 0.75748025, 0.3093175], Opacity[0.2], 
      FilledCurveBox[
       BSplineCurve[{{2.3696551535845014`, 0.4291391440365692}, {
        2.969655153584501, 0.4291391440365692}, {2.969655153584501, 
        1.0291391440365691`}, {2.3696551535845014`, 1.0291391440365691`}}, 
        SplineClosed -> True]]}, 
     {RGBColor[0.8453409999999999, 0.6248695, 0.3151775], Opacity[0.2], 
      FilledCurveBox[
       BSplineCurve[{{1.4043849430288688`, 0.07103345353928142}, {
        2.0043849430288687`, 0.07103345353928142}, {2.969655153584501, 
        0.4291391440365692}, {2.969655153584501, 1.0291391440365691`}, {
        2.3696551535845014`, 1.0291391440365691`}, {1.6806460518916484`, 
        0.7735235895291875}, {1.0217429740694932`, 0.9821209125537373}, {
        0.4217429740694932, 0.9821209125537373}, {0.4217429740694932, 
        0.3821209125537374}}, SplineClosed -> True]]}, 
     {RGBColor[0.75060425, 0.30922275000000005`, 0.24908550000000002`], 
      Opacity[0.2], 
      FilledCurveBox[
       BSplineCurve[{{0.4217429740694932, 0.3821209125537374}, {
        1.0217429740694932`, 0.3821209125537374}, {1.0217429740694932`, 
        0.9821209125537373}, {0.4217429740694932, 0.9821209125537373}}, 
        SplineClosed -> True]]}, 
     {RGBColor[0.72987, 0.239399, 0.230961], Opacity[0.2], 
      FilledCurveBox[
       BSplineCurve[{{0.37409384061003553`, 2.9288488209569192`}, {
        0.06270272642834201, 1.9473143053750814`}, {0.06270272642834201, 
        1.3473143053750813`}, {0.4217429740694932, 0.3821209125537374}, {
        1.0217429740694932`, 0.3821209125537374}, {1.0217429740694932`, 
        0.9821209125537373}, {0.7654362065527405, 1.6711400410995145`}, {
        0.9740938406100355, 2.3288488209569196`}, {0.9740938406100355, 
        2.9288488209569192`}}, SplineClosed -> True]]}}, {
     {RGBColor[0.25634450000000003`, 0.36442575, 0.5148382499999999], 
      Thickness[0.01]}, 
     {RGBColor[0.277947, 0.45009699999999997`, 0.32815550000000004`], 
      Thickness[0.01], 
      BSplineCurveBox[{{0.6740938406100355, 2.6288488209569194`}, {
       1.6403609829015375`, 2.987280906757796}, {2.622233501844897, 
       2.6764615502659552`}},
       SplineWeights->{1, 6, 1}]}, 
     {RGBColor[0.38516275, 0.53580125, 0.24921775000000002`], Thickness[
      0.01]}, 
     {RGBColor[0.624866, 0.673302, 0.264296], Thickness[0.01], 
      BSplineCurveBox[{{2.622233501844897, 2.6764615502659552`}, {
       2.981166600248349, 1.7110529361484708`}, {2.6696551535845012`, 
       0.7291391440365692}},
       SplineWeights->{1, 6, 1}]}, 
     {RGBColor[0.8292435, 0.75748025, 0.3093175], Thickness[0.01]}, 
     {RGBColor[0.8453409999999999, 0.6248695, 0.3151775], Thickness[0.01], 
      BSplineCurveBox[{{2.6696551535845012`, 0.7291391440365692}, {
       1.704384943028869, 0.3710334535392814}, {0.7217429740694932, 
       0.6821209125537374}},
       SplineWeights->{1, 6, 1}]}, 
     {RGBColor[0.75060425, 0.30922275000000005`, 0.24908550000000002`], 
      Thickness[0.01]}, 
     {RGBColor[0.72987, 0.239399, 0.230961], Thickness[0.01], 
      BSplineCurveBox[{{0.7217429740694932, 0.6821209125537374}, {
       0.362702726428342, 1.6473143053750814`}, {0.6740938406100355, 
       2.6288488209569194`}},
       SplineWeights->{1, 6, 1}]}}}, 
   NamespaceBox[{{}, 
     {GrayLevel[1], EdgeForm[GrayLevel[0]], 
      TagBox[{
        TagBox[DiskBox[{0.6740938406100355, 2.6288488209569194`}, 0.15],
         "DynamicName",
         BoxID -> "VertexID$1"], InsetBox[
         StyleBox["0",
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontColor->GrayLevel[0]], DynamicLocation[
         "VertexID$1", None, Center],
         BaseStyle->"Graphics"]},
       "DynamicName",
       BoxID -> "VertexLabelID$1"], 
      TagBox[{
        TagBox[DiskBox[{2.622233501844897, 2.6764615502659552`}, 0.15],
         "DynamicName",
         BoxID -> "VertexID$2"], InsetBox[
         StyleBox["1",
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontColor->GrayLevel[0]], DynamicLocation[
         "VertexID$2", None, Center],
         BaseStyle->"Graphics"]},
       "DynamicName",
       BoxID -> "VertexLabelID$2"], 
      TagBox[{
        TagBox[DiskBox[{2.6696551535845012`, 0.7291391440365692}, 0.15],
         "DynamicName",
         BoxID -> "VertexID$3"], InsetBox[
         StyleBox["2",
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontColor->GrayLevel[0]], DynamicLocation[
         "VertexID$3", None, Center],
         BaseStyle->"Graphics"]},
       "DynamicName",
       BoxID -> "VertexLabelID$3"], 
      TagBox[{
        TagBox[DiskBox[{0.7217429740694932, 0.6821209125537374}, 0.15],
         "DynamicName",
         BoxID -> "VertexID$4"], InsetBox[
         StyleBox["3",
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontColor->GrayLevel[0]], DynamicLocation[
         "VertexID$4", None, Center],
         BaseStyle->"Graphics"]},
       "DynamicName",
       BoxID -> "VertexLabelID$4"]}}]}]], "Output",
 CellChangeTimes->{
  3.922797830636592*^9, 3.922801164237329*^9, 3.9228728613037863`*^9, {
   3.922872893058642*^9, 3.922872943507905*^9}, 3.9229701571590557`*^9},
 CellLabel->"Out[27]=",ExpressionUUID->"759e5ce2-21cd-463e-ae2c-3d4bd349001e"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"HypergraphAdjacencyMatrix", "[", "hg", "]"}]], "Input",
 CellChangeTimes->{{3.922795433916806*^9, 3.922795438432323*^9}, {
  3.922795907414611*^9, 3.922795907481412*^9}, {3.922796168229356*^9, 
  3.9227961695158863`*^9}, {3.9229701676986523`*^9, 3.9229701680968113`*^9}},
 CellLabel->"In[28]:=",ExpressionUUID->"e1163130-c9c3-4dff-a04c-334dcb3a4ebf"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["NumericArray",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Integer64\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Dimensions: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  RowBox[{"{", 
                    RowBox[{"4", ",", "4"}], "}"}], "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Integer64\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Dimensions: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  RowBox[{"{", 
                    RowBox[{"4", ",", "4"}], "}"}], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Data: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{
                   "0", "\", \"", "1", "\", \"", "0", "\", \"", "1", "\", \"",
                     "\"\[Ellipsis]\""}, "RowDefault"], "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  RawArray["Integer64",{{0, 1, 0, 1}, {1, 0, 1, 0}, {0, 1, 0, 1}, {1, 0, 1, 
   0}}],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.922795909208838*^9, 3.922795917202877*^9}, 
   3.922796019755248*^9, 3.92279605692837*^9, 3.9227961094402657`*^9, {
   3.9227961450902233`*^9, 3.922796169863625*^9}, 3.9227969858300037`*^9, 
   3.9227971085818653`*^9, 3.9227972861574574`*^9, 3.922797783227025*^9, 
   3.92280116753654*^9, 3.9229701685904284`*^9},
 CellLabel->"Out[28]=",ExpressionUUID->"d9b0f15a-643e-4e06-a2cc-07d3951c2247"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"HypergraphAdjacencyMatrix", "[", "hg", "]"}], "//", 
  "Normal"}]], "Input",
 CellChangeTimes->{{3.922795433916806*^9, 3.922795438432323*^9}, {
  3.922795907414611*^9, 3.922795907481412*^9}, {3.922796168229356*^9, 
  3.9227961695158863`*^9}, {3.9229701676986523`*^9, 3.9229701732594843`*^9}},
 CellLabel->"In[29]:=",ExpressionUUID->"c5d65ca1-3231-4f07-8de5-633da3cc0dd7"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"0", ",", "1", ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "1", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1", ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "1", ",", "0"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.922970173717696*^9},
 CellLabel->"Out[29]=",ExpressionUUID->"dec508fa-41a1-4646-a965-915ab606014d"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"HypergraphAuxiliaryMatrix", "[", "hg", "]"}], "//", 
  "Normal"}]], "Input",
 CellChangeTimes->{{3.922795433916806*^9, 3.922795438432323*^9}, {
  3.922795907414611*^9, 3.922795907481412*^9}, {3.922796168229356*^9, 
  3.9227961695158863`*^9}, {3.922797011066362*^9, 3.9227970170628242`*^9}},
 CellLabel->"In[8]:=",ExpressionUUID->"c31bc834-4eff-42ff-9708-663ec24afd25"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"0", ",", "1", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "1", ",", "0"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.9227970174420013`*^9, 3.922797108631464*^9, 
  3.922797286171137*^9, 3.922797783231079*^9, 3.9228011685745*^9},
 CellLabel->"Out[8]=",ExpressionUUID->"ae047ddb-8190-4df7-bf3d-43c2227e6f0b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"HypergraphBipartite", "[", "hg", "]"}]], "Input",
 CellChangeTimes->{{3.922795433916806*^9, 3.922795438432323*^9}, {
  3.922795907414611*^9, 3.922795907481412*^9}, {3.922796168229356*^9, 
  3.9227961695158863`*^9}, {3.922797011066362*^9, 3.9227970324159718`*^9}},
 CellLabel->"In[9]:=",ExpressionUUID->"f7a07880-678d-4dc2-bda8-a95a82053c48"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["ExternalObject",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{
              Thickness[0.05], {
               FaceForm[{
                 RGBColor[1., 1., 1.], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 
                 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {
                 1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
                 3}, {0, 1, 0}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}}, {{1, 4, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                 0}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 
                 3}, {1, 3, 3}}}, {{{7.5718000000000005`, 17.7334}, {7.0998, 
                 17.7334}, {6.7168, 17.342399999999998`}, {6.7168, 16.8624}, {
                 6.7168, 16.3854}, {7.0998, 15.997399999999999`}, {
                 7.5718000000000005`, 15.997399999999999`}, {
                 8.043800000000001, 15.997399999999999`}, {8.4268, 16.3854}, {
                 8.4268, 16.8624}, {8.4268, 17.342399999999998`}, {
                 8.043800000000001, 17.7334}, {7.5718000000000005`, 
                 17.7334}}, CompressedData["
1:eJxTTMoPSmViYGBQAWIQvXD12hvxZbwODSxH+w2/izl86QsuUZnOAuezVHCr
aNT9se+5ncGQzyjl8EZ2+QsPve/2X6bfndzeKu/Qst2h6dHxD/ZfvSLbLMSU
4fz1U1I7kmVV4erNVtuFRxdqOCRs3P9mns0fe98WXv/1ItoOR9qWh58yYnP4
+AVowA4dh6z8D60nQwTg/EsTY/45/1KG87O1v02/K6zi8O7kYae1L3UdBLi3
Lqs8Lubw+zRQhEnPwdnuxc01v8QcGtQOtS2fbgDng2w5ctHQgc1E0MzGVsLB
+wS77exSIwfP/bWyFunyDs2BnnMbjhk5+CzjclP9quCwVMdZ5vUjI4cJhuW6
ivFKDqbvLVzdPxk5JIYEqS84qezgLyeW5fvZyGHaJp7CNacRfAOQAamqcD63
m2op0y01h3aQA54YOZx6ar/kvp0G3D4rZa/q5vVaEPMnQe0v1XG4bgIUWG4I
58P8A+M/mCO4dC+jJpy/M5vz54Llag73gLESNVkLEm/7VBwOWgItcNaA86PE
t19kiJOH80OmKfaVFkrC+ZbpLpn5BSIOx3JNGrY7KMH5UZf3PBaZKwfnw9IH
AO506oE=
                 "], {{12.401800000000001`, 4.1044}, {11.9298, 4.1044}, {
                 11.5458, 3.7164}, {11.5458, 3.2394}, {11.5458, 
                 2.7593999999999994`}, {11.9298, 2.369399999999999}, {
                 12.401800000000001`, 2.369399999999999}, {
                 12.872800000000002`, 2.369399999999999}, {13.2568, 
                 2.7593999999999994`}, {13.2568, 3.2394}, {13.2568, 3.7164}, {
                 12.872800000000002`, 4.1044}, {12.401800000000001`, 
                 4.1044}}, CompressedData["
1:eJxTTMoPSmViYGBQAWIQ/Uei+LrQJ2UHhUNty8NPfbBfaXrW2m+iEpyvdVrg
+C4LRYcC3899wSWf7M+tOn81LEfe4cBGvbzFjN/sb635FZPrKuPgUPST/+X2
n/bOdi9urvkl5sARP8NHtIfRAcY/smKJn4MwD5y/aIv5j0MpcnB+rknDdocm
RQepRxHi2y9KOeyeNoG/qkzZIQrIY4iTh/MPWip7VTtrwPkuv96+PmCpDedf
mhjzz3mXroPFtaO5JgxqcP6DOYJL9zJqwvldfU8+yV/ScWBbPMmKMdfA4eMX
r8i2HToOE/mrzFbXGcL5GnU9O7M1jRympHYkx8ZoO9z8AJIwcjBbbRceXajh
0Pzo+Izd34wc3p087LT2pQqcL7R070HxNCWH+TY6V2YB1SeEBKkv6JR3kKlJ
NAoVAKo/APTIb0kHkDMbphs6NLAc7Tf8LgZ3D4wPdu8vZTgfSJbrPlR2WNC5
4eHLqSIOz+yX3N/Xp+OQF1a7bluSiIPPMi431VIdeHjD+CLAYLzHxOQwi0N6
XpymlsMFzgylnIpf9lURK4AxrgGPT3B47lRzWNAU6Dm34ZP94ZRVQKerwtMD
enoBAPI7A7I=
                 "]}]}, {
               FaceForm[{
                 RGBColor[0.20800000000000002`, 0.514, 0.6859999999999999], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}}, {{1, 4, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                 0}, {1, 3, 3}, {1, 3, 3}}}, {{{7.5718000000000005`, 
                 17.6836}, {8.014800000000001, 17.6836}, {8.3778, 17.3156}, {
                 8.3778, 16.862599999999997`}, {8.3778, 16.4116}, {
                 8.014800000000001, 16.046599999999998`}, {
                 7.5718000000000005`, 16.046599999999998`}, {7.1268, 
                 16.046599999999998`}, {6.7658000000000005`, 16.4116}, {
                 6.7658000000000005`, 16.862599999999997`}, {
                 6.7658000000000005`, 17.3156}, {7.1268, 17.6836}, {
                 7.5718000000000005`, 17.6836}}, CompressedData["
1:eJxTTMoPSmViYGBQBWIQnRgSpL7gpLLDYxHZk0//GzmYnbX2uxio5NBvWK6r
COQ7nU+7+vyVgsOa7tsZDO+NHKLEt19kiJN3EPMI+CNx2cgh6fBl7VRJCYd/
zr/evm4wchDg3rqs8riYQ2vU5T2PrxjC+XxzjBdtmW4A59fKWqS7vNR1uDQx
BqhVGYMPVKRpdUkHrh7Gb5l3dtX5UAE4v+gn/8vt69ng/DOHndZm3vttD+YH
aTt8OAkS+Gb/aUNA9qxyDQeec5KBt6Q/2N/XnbDgh6GqgwTQ2/ZL3tt77Ae6
QF0Zrv6Nhat7UaW8wxWXGx++eP223xet4PgxWcqBJ0Mpp6KK2aFlefgpoyNi
DgtXr70RX8YL5wcBbZmzSASDP2llU6DnXDk4/4fhs3WqKkoOb/V3q/N3Szq0
nQw5uGKJCjx8YfyDlspe1c4acL5XdbO+zzItOP+Z/ZL7+/p0HJR2/mn/MlsN
zgfybl9n1ITzYeEP4wNjvXPDQUOHa8+ztL9N13IARW/+QiO4fbD4haQPNYfO
DQ9fTv1k5NADUueoColvBmMH9PQDAFGHDrQ=
                 "]}]}, {
               FaceForm[{
                 RGBColor[0.976, 0.8430000000000001, 0.353], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}}, {{0, 2, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {
                 0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}}}, {{{12.4014, 4.0552}, {12.846400000000001`, 4.0552}, {
                 13.2074, 3.6902}, {13.2074, 3.2392000000000003`}, {13.2074, 
                 2.7862}, {12.846400000000001`, 2.4182}, {12.4014, 2.4182}, {
                 11.958400000000001`, 2.4182}, {11.595400000000001`, 
                 2.7862}, {11.595400000000001`, 3.2392000000000003`}, {
                 11.595400000000001`, 3.6902}, {11.958400000000001`, 
                 4.0552}, {12.4014, 4.0552}}, CompressedData["
1:eJxTTMoPSmViYGBQBGIQ3bszm/PnAl2HgsWMe1gv6TjA+Ec26uUtZtSE819t
X8/8nEfNISJ64/43ctoOlq7uRT/7lR06k2PvuDlrwPkvs7S/TY+Vh/MvpF19
nrVaCs6fH6d5WuC4mMNLkHk9inB+1r3Crr4UOTi/LerynsciPAh5hvxGlqNM
Dr8OpaxKuCLlcO96Y7HblF/2MPtesZgImtl8tde5MuuZbLqSw52tLTUXNr+1
/3363cnDTKoOCo4fk8/EvraHuRem3j4c6KEcLQel5HdRTna/7Ndlghyi4zCL
Q3penCaTA4wPcw+Mn7H5VfHWqSIO6sGsiyf9UsbgG2itFL5wRAyuHsYH+zvH
AM6PATlsjSGcbwwKeGUjhzV2QIfZSzn8sSo41zHJyKGuBxgRlfIOGUo5FVWs
xg62s0Pnr85VcljVFOg5l8HYoX15+CkjFlW4+l23uv6mlms4/OIH2uhs5BAg
J5bl+1kLYj/QPlh8w9wD4wMA37PnHw==
                 "]}]}}, {
             ImageSize -> 
              Dynamic[{
                Automatic, 
                 3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                  Magnification])}], AspectRatio -> Automatic, 
              ImageSize -> {20., 20.}, PlotRange -> {{0., 20.}, {0., 20.}}}], 
            
            GridBox[{{
               RowBox[{
                 TagBox["\"System: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Python\"", "SummaryItem"]}], 
               RowBox[{
                 TagBox["\"IsModule: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["False", "SummaryItem"]}], ""}, {
               RowBox[{
                 TagBox["\"Module: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"networkx.classes.graph\"", "SummaryItem"]}], 
               RowBox[{
                 TagBox["\"IsClass: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["False", "SummaryItem"]}], "\[SpanFromLeft]"}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{
              Thickness[0.05], {
               FaceForm[{
                 RGBColor[1., 1., 1.], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 
                 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {
                 1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
                 3}, {0, 1, 0}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}}, {{1, 4, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                 0}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 
                 3}, {1, 3, 3}}}, {{{7.5718000000000005`, 17.7334}, {7.0998, 
                 17.7334}, {6.7168, 17.342399999999998`}, {6.7168, 16.8624}, {
                 6.7168, 16.3854}, {7.0998, 15.997399999999999`}, {
                 7.5718000000000005`, 15.997399999999999`}, {
                 8.043800000000001, 15.997399999999999`}, {8.4268, 16.3854}, {
                 8.4268, 16.8624}, {8.4268, 17.342399999999998`}, {
                 8.043800000000001, 17.7334}, {7.5718000000000005`, 
                 17.7334}}, CompressedData["
1:eJxTTMoPSmViYGBQAWIQvXD12hvxZbwODSxH+w2/izl86QsuUZnOAuezVHCr
aNT9se+5ncGQzyjl8EZ2+QsPve/2X6bfndzeKu/Qst2h6dHxD/ZfvSLbLMSU
4fz1U1I7kmVV4erNVtuFRxdqOCRs3P9mns0fe98WXv/1ItoOR9qWh58yYnP4
+AVowA4dh6z8D60nQwTg/EsTY/45/1KG87O1v02/K6zi8O7kYae1L3UdBLi3
Lqs8Lubw+zRQhEnPwdnuxc01v8QcGtQOtS2fbgDng2w5ctHQgc1E0MzGVsLB
+wS77exSIwfP/bWyFunyDs2BnnMbjhk5+CzjclP9quCwVMdZ5vUjI4cJhuW6
ivFKDqbvLVzdPxk5JIYEqS84qezgLyeW5fvZyGHaJp7CNacRfAOQAamqcD63
m2op0y01h3aQA54YOZx6ar/kvp0G3D4rZa/q5vVaEPMnQe0v1XG4bgIUWG4I
58P8A+M/mCO4dC+jJpy/M5vz54Llag73gLESNVkLEm/7VBwOWgItcNaA86PE
t19kiJOH80OmKfaVFkrC+ZbpLpn5BSIOx3JNGrY7KMH5UZf3PBaZKwfnw9IH
AO506oE=
                 "], {{12.401800000000001`, 4.1044}, {11.9298, 4.1044}, {
                 11.5458, 3.7164}, {11.5458, 3.2394}, {11.5458, 
                 2.7593999999999994`}, {11.9298, 2.369399999999999}, {
                 12.401800000000001`, 2.369399999999999}, {
                 12.872800000000002`, 2.369399999999999}, {13.2568, 
                 2.7593999999999994`}, {13.2568, 3.2394}, {13.2568, 3.7164}, {
                 12.872800000000002`, 4.1044}, {12.401800000000001`, 
                 4.1044}}, CompressedData["
1:eJxTTMoPSmViYGBQAWIQ/Uei+LrQJ2UHhUNty8NPfbBfaXrW2m+iEpyvdVrg
+C4LRYcC3899wSWf7M+tOn81LEfe4cBGvbzFjN/sb635FZPrKuPgUPST/+X2
n/bOdi9urvkl5sARP8NHtIfRAcY/smKJn4MwD5y/aIv5j0MpcnB+rknDdocm
RQepRxHi2y9KOeyeNoG/qkzZIQrIY4iTh/MPWip7VTtrwPkuv96+PmCpDedf
mhjzz3mXroPFtaO5JgxqcP6DOYJL9zJqwvldfU8+yV/ScWBbPMmKMdfA4eMX
r8i2HToOE/mrzFbXGcL5GnU9O7M1jRympHYkx8ZoO9z8AJIwcjBbbRceXajh
0Pzo+Izd34wc3p087LT2pQqcL7R070HxNCWH+TY6V2YB1SeEBKkv6JR3kKlJ
NAoVAKo/APTIb0kHkDMbphs6NLAc7Tf8LgZ3D4wPdu8vZTgfSJbrPlR2WNC5
4eHLqSIOz+yX3N/Xp+OQF1a7bluSiIPPMi431VIdeHjD+CLAYLzHxOQwi0N6
XpymlsMFzgylnIpf9lURK4AxrgGPT3B47lRzWNAU6Dm34ZP94ZRVQKerwtMD
enoBAPI7A7I=
                 "]}]}, {
               FaceForm[{
                 RGBColor[0.20800000000000002`, 0.514, 0.6859999999999999], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}}, {{1, 4, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                 0}, {1, 3, 3}, {1, 3, 3}}}, {{{7.5718000000000005`, 
                 17.6836}, {8.014800000000001, 17.6836}, {8.3778, 17.3156}, {
                 8.3778, 16.862599999999997`}, {8.3778, 16.4116}, {
                 8.014800000000001, 16.046599999999998`}, {
                 7.5718000000000005`, 16.046599999999998`}, {7.1268, 
                 16.046599999999998`}, {6.7658000000000005`, 16.4116}, {
                 6.7658000000000005`, 16.862599999999997`}, {
                 6.7658000000000005`, 17.3156}, {7.1268, 17.6836}, {
                 7.5718000000000005`, 17.6836}}, CompressedData["
1:eJxTTMoPSmViYGBQBWIQnRgSpL7gpLLDYxHZk0//GzmYnbX2uxio5NBvWK6r
COQ7nU+7+vyVgsOa7tsZDO+NHKLEt19kiJN3EPMI+CNx2cgh6fBl7VRJCYd/
zr/evm4wchDg3rqs8riYQ2vU5T2PrxjC+XxzjBdtmW4A59fKWqS7vNR1uDQx
BqhVGYMPVKRpdUkHrh7Gb5l3dtX5UAE4v+gn/8vt69ng/DOHndZm3vttD+YH
aTt8OAkS+Gb/aUNA9qxyDQeec5KBt6Q/2N/XnbDgh6GqgwTQ2/ZL3tt77Ae6
QF0Zrv6Nhat7UaW8wxWXGx++eP223xet4PgxWcqBJ0Mpp6KK2aFlefgpoyNi
DgtXr70RX8YL5wcBbZmzSASDP2llU6DnXDk4/4fhs3WqKkoOb/V3q/N3Szq0
nQw5uGKJCjx8YfyDlspe1c4acL5XdbO+zzItOP+Z/ZL7+/p0HJR2/mn/MlsN
zgfybl9n1ITzYeEP4wNjvXPDQUOHa8+ztL9N13IARW/+QiO4fbD4haQPNYfO
DQ9fTv1k5NADUueoColvBmMH9PQDAFGHDrQ=
                 "]}]}, {
               FaceForm[{
                 RGBColor[0.976, 0.8430000000000001, 0.353], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}}, {{0, 2, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {
                 0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}}}, {{{12.4014, 4.0552}, {12.846400000000001`, 4.0552}, {
                 13.2074, 3.6902}, {13.2074, 3.2392000000000003`}, {13.2074, 
                 2.7862}, {12.846400000000001`, 2.4182}, {12.4014, 2.4182}, {
                 11.958400000000001`, 2.4182}, {11.595400000000001`, 
                 2.7862}, {11.595400000000001`, 3.2392000000000003`}, {
                 11.595400000000001`, 3.6902}, {11.958400000000001`, 
                 4.0552}, {12.4014, 4.0552}}, CompressedData["
1:eJxTTMoPSmViYGBQBGIQ3bszm/PnAl2HgsWMe1gv6TjA+Ec26uUtZtSE819t
X8/8nEfNISJ64/43ctoOlq7uRT/7lR06k2PvuDlrwPkvs7S/TY+Vh/MvpF19
nrVaCs6fH6d5WuC4mMNLkHk9inB+1r3Crr4UOTi/LerynsciPAh5hvxGlqNM
Dr8OpaxKuCLlcO96Y7HblF/2MPtesZgImtl8tde5MuuZbLqSw52tLTUXNr+1
/3363cnDTKoOCo4fk8/EvraHuRem3j4c6KEcLQel5HdRTna/7Ndlghyi4zCL
Q3penCaTA4wPcw+Mn7H5VfHWqSIO6sGsiyf9UsbgG2itFL5wRAyuHsYH+zvH
AM6PATlsjSGcbwwKeGUjhzV2QIfZSzn8sSo41zHJyKGuBxgRlfIOGUo5FVWs
xg62s0Pnr85VcljVFOg5l8HYoX15+CkjFlW4+l23uv6mlms4/OIH2uhs5BAg
J5bl+1kLYj/QPlh8w9wD4wMA37PnHw==
                 "]}]}}, {
             ImageSize -> 
              Dynamic[{
                Automatic, 
                 3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                  Magnification])}], AspectRatio -> Automatic, 
              ImageSize -> {20., 20.}, PlotRange -> {{0., 20.}, {0., 20.}}}], 
            
            GridBox[{{
               RowBox[{
                 TagBox["\"System: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Python\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"IsModule: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["False", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Module: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"networkx.classes.graph\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"IsClass: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["False", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"IsFunction: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["False", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"IsMethod: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["False", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"IsCallable: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["False", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Status: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Evaluated\"", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  ExternalObject[
   ExternalSessionObject["4412c19d-12e2-4c9a-b100-dd88d0e74d8e"], 
   ExternalEvaluate`RPC["Fetch", {4391430480}], <|
   "IsModule" -> False, "Module" -> "networkx.classes.graph", "IsClass" -> 
    False, "IsFunction" -> False, "IsMethod" -> False, "IsCallable" -> 
    False|>],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.92279702953642*^9, 3.922797032764812*^9}, 
   3.9227971097091637`*^9, 3.922797286181477*^9, 3.922797783246726*^9, 
   3.9228011697600393`*^9},
 CellLabel->"Out[9]=",ExpressionUUID->"bae7c094-a733-4529-8e02-459e4f887af0"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"HypergraphCollapseEdges", "[", "hg", "]"}], "//", 
      "HypergraphDataset"}], "//", "Normal"}], "//", "Values"}], "//", 
   "Values"}], "//", 
  RowBox[{"ResourceFunction", "[", "\"\<HypergraphPlot\>\"", "]"}]}]], "Input",\

 CellChangeTimes->{{3.922797044871284*^9, 3.922797048842415*^9}, {
  3.92280118195192*^9, 3.92280120925872*^9}, {3.92281154184721*^9, 
  3.922811542241529*^9}},
 CellLabel->"In[46]:=",ExpressionUUID->"9770261a-27b5-4c10-8e3f-2eb01657073a"],

Cell[BoxData[
 GraphicsBox[{{{
     {RGBColor[0.264425, 0.423024, 0.3849], Opacity[0.2], 
      FilledCurveBox[
       BSplineCurve[{{3.981873394061677, 1.6246884779005064`}, {
        3.2849222780792466`, 2.366855295269751}, {3.0400237855275414`, 
        3.3034384706504594`}, {2.4400237855275417`, 3.3034384706504594`}, {
        2.4400237855275417`, 2.7034384706504597`}, {2.5490985090354323`, 
        2.2862960463244932`}, {1.777178667468647, 1.82845804697916}, {
        1.777178667468647, 1.22845804697916}, {2.377178667468647, 
        1.22845804697916}, {2.899561131989242, 1.5382914384408324`}, {
        3.381873394061677, 1.0246884779005063`}, {3.981873394061677, 
        1.0246884779005063`}}, SplineClosed -> True]]}, 
     {RGBColor[0.416394, 0.555345, 0.24182], Opacity[0.2], 
      FilledCurveBox[
       BSplineCurve[{{2.6634947711172594`, -0.3}, {3.121517389672674, 
        0.4854718166038881}, {3.981873394061677, 1.0246884779005063`}, {
        3.981873394061677, 1.6246884779005064`}, {3.381873394061677, 
        1.6246884779005064`}, {2.8900954803216723`, 1.3164732235249408`}, {
        2.377178667468647, 1.82845804697916}, {1.777178667468647, 
        1.82845804697916}, {1.777178667468647, 1.22845804697916}, {
        2.3003683330656552`, 0.7062190369459438}, {2.0634947711172598`, 
        0.3}, {2.0634947711172598`, -0.3}}, SplineClosed -> True]]}, 
     {RGBColor[0.813033, 0.766292, 0.303458], Opacity[0.2], 
      FilledCurveBox[
       BSplineCurve[{{2.377178667468647, 1.82845804697916}, {
        2.3025743676689667`, 2.2897919212679554`}, {3.0400237855275414`, 
        2.7034384706504597`}, {3.0400237855275414`, 3.3034384706504594`}, {
        2.4400237855275417`, 3.3034384706504594`}, {1.6136150878790363`, 
        2.839893313675977}, {0.8089860368451955, 2.281975028194696}, {
        0.8089860368451955, 1.6819750281946961`}, {1.4089860368451956`, 
        1.6819750281946961`}, {1.674110011934053, 1.865808203782258}, {
        1.777178667468647, 1.22845804697916}, {2.377178667468647, 
        1.22845804697916}}, SplineClosed -> True]]}, 
     {RGBColor[0.812807, 0.518694, 0.303459], Opacity[0.2], 
      FilledCurveBox[
       BSplineCurve[{{2.6634947711172594`, 0.3}, {2.1902673377571844`, 
        0.8553163103711403}, {2.377178667468647, 1.22845804697916}, {
        2.377178667468647, 1.82845804697916}, {1.777178667468647, 
        1.82845804697916}, {1.7038364323685913`, 1.682040764440989}, {
        1.4089860368451956`, 2.281975028194696}, {0.8089860368451955, 
        2.281975028194696}, {0.8089860368451955, 1.6819750281946961`}, {
        1.400982320240434, 0.47743584555869373`}, {
        2.0634947711172598`, -0.3}, {2.6634947711172594`, -0.3}}, 
        SplineClosed -> True]]}, 
     {RGBColor[0.72987, 0.239399, 0.230961], Opacity[0.2], 
      FilledCurveBox[
       BSplineCurve[{{0.656713583668765, 1.1446076311275735`}, {
        1.256713583668765, 1.1446076311275735`}, {2.377178667468647, 
        1.22845804697916}, {2.377178667468647, 1.82845804697916}, {
        1.777178667468647, 1.82845804697916}, {1.4089860368451956`, 
        1.8009042163086275`}, {1.4089860368451956`, 2.281975028194696}, {
        0.8089860368451955, 2.281975028194696}, {0.6652267401178477, 
        1.774650443379165}, {0.3, 1.7932010476779006`}, {-0.3, 
        1.7932010476779006`}, {-0.3, 1.1932010476779005`}}, SplineClosed -> 
        True]]}}, {
     {RGBColor[0.264425, 0.423024, 0.3849], Thickness[0.01], 
      BSplineCurveBox[{{3.681873394061677, 1.3246884779005064`}, {
       2.984922278079247, 2.066855295269751}, {2.7400237855275416`, 
       3.0034384706504595`}},
       SplineWeights->{1, 6, 1}], 
      BSplineCurveBox[{{3.681873394061677, 1.3246884779005064`}, {
       2.984922278079247, 2.066855295269751}, {2.077178667468647, 
       1.52845804697916}},
       SplineWeights->{1, 6, 1}]}, 
     {RGBColor[0.416394, 0.555345, 0.24182], Thickness[0.01], 
      BSplineCurveBox[{{3.681873394061677, 1.3246884779005064`}, {
       2.821517389672674, 0.7854718166038881}, {2.3634947711172596`, 0.}},
       SplineWeights->{1, 6, 1}], 
      BSplineCurveBox[{{3.681873394061677, 1.3246884779005064`}, {
       2.821517389672674, 0.7854718166038881}, {2.077178667468647, 
       1.52845804697916}},
       SplineWeights->{1, 6, 1}]}, 
     {RGBColor[0.813033, 0.766292, 0.303458], Thickness[0.01], 
      BSplineCurveBox[{{1.1089860368451956`, 1.9819750281946962`}, {
       1.9136150878790363`, 2.5398933136759774`}, {2.7400237855275416`, 
       3.0034384706504595`}},
       SplineWeights->{1, 6, 1}], 
      BSplineCurveBox[{{1.1089860368451956`, 1.9819750281946962`}, {
       1.9136150878790363`, 2.5398933136759774`}, {2.077178667468647, 
       1.52845804697916}},
       SplineWeights->{1, 6, 1}]}, 
     {RGBColor[0.812807, 0.518694, 0.303459], Thickness[0.01], 
      BSplineCurveBox[{{1.1089860368451956`, 1.9819750281946962`}, {
       1.700982320240434, 0.7774358455586937}, {2.3634947711172596`, 0.}},
       SplineWeights->{1, 6, 1}], 
      BSplineCurveBox[{{1.1089860368451956`, 1.9819750281946962`}, {
       1.700982320240434, 0.7774358455586937}, {2.077178667468647, 
       1.52845804697916}},
       SplineWeights->{1, 6, 1}]}, 
     {RGBColor[0.72987, 0.239399, 0.230961], Thickness[0.01], 
      BSplineCurveBox[{{1.1089860368451956`, 1.9819750281946962`}, {
       0.956713583668765, 1.4446076311275735`}, {0., 1.4932010476779005`}},
       SplineWeights->{1, 6, 1}], 
      BSplineCurveBox[{{1.1089860368451956`, 1.9819750281946962`}, {
       0.956713583668765, 1.4446076311275735`}, {2.077178667468647, 
       1.52845804697916}},
       SplineWeights->{1, 6, 1}]}}}, 
   NamespaceBox[{{}, 
     {GrayLevel[1], EdgeForm[GrayLevel[0]], 
      TagBox[{
        TagBox[DiskBox[{2.7400237855275416`, 3.0034384706504595`}, 0.15],
         "DynamicName",
         BoxID -> "VertexID$1"], InsetBox[
         StyleBox["1",
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontColor->GrayLevel[0]], DynamicLocation[
         "VertexID$1", None, Center],
         BaseStyle->"Graphics"]},
       "DynamicName",
       BoxID -> "VertexLabelID$1"], 
      TagBox[{
        TagBox[DiskBox[{2.077178667468647, 1.52845804697916}, 0.15],
         "DynamicName",
         BoxID -> "VertexID$2"], InsetBox[
         StyleBox["1.`",
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontColor->GrayLevel[0]], DynamicLocation[
         "VertexID$2", None, Center],
         BaseStyle->"Graphics"]},
       "DynamicName",
       BoxID -> "VertexLabelID$2"], 
      TagBox[{
        TagBox[DiskBox[{2.3634947711172596`, 0.}, 0.15],
         "DynamicName",
         BoxID -> "VertexID$3"], InsetBox[
         StyleBox["2",
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontColor->GrayLevel[0]], DynamicLocation[
         "VertexID$3", None, Center],
         BaseStyle->"Graphics"]},
       "DynamicName",
       BoxID -> "VertexLabelID$3"], 
      TagBox[{
        TagBox[DiskBox[{0., 1.4932010476779005`}, 0.15],
         "DynamicName",
         BoxID -> "VertexID$4"], InsetBox[
         StyleBox["3",
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontColor->GrayLevel[0]], DynamicLocation[
         "VertexID$4", None, Center],
         BaseStyle->"Graphics"]},
       "DynamicName",
       BoxID -> "VertexLabelID$4"], 
      TagBox[{
        TagBox[DiskBox[{3.681873394061677, 1.3246884779005064`}, 0.15],
         "DynamicName",
         BoxID -> "VertexID$5"], InsetBox[
         StyleBox["\<\"0: 2\"\>",
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontColor->GrayLevel[0]], DynamicLocation[
         "VertexID$5", None, Center],
         BaseStyle->"Graphics"]},
       "DynamicName",
       BoxID -> "VertexLabelID$5"], 
      TagBox[{
        TagBox[DiskBox[{1.1089860368451956`, 1.9819750281946962`}, 0.15],
         "DynamicName",
         BoxID -> "VertexID$6"], InsetBox[
         StyleBox["\<\"2: 1\"\>",
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontColor->GrayLevel[0]], DynamicLocation[
         "VertexID$6", None, Center],
         BaseStyle->"Graphics"]},
       "DynamicName",
       BoxID -> "VertexLabelID$6"]}}]}]], "Output",
 CellChangeTimes->{
  3.922797049272482*^9, 3.9227971106512823`*^9, 3.9227972862035*^9, 
   3.922797783268017*^9, {3.922801170778264*^9, 3.922801209745586*^9}, 
   3.922811546119091*^9},
 CellLabel->"Out[46]=",ExpressionUUID->"a9fb38ce-8a1c-4106-ba21-8bf28136cf6a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"HypergraphCollapseNodes", "[", "hg", "]"}], "//", 
       "HypergraphDataset"}], "//", "Normal"}], "//", "Values"}], "//", 
    "Values"}], "//", "Round"}], "//", 
  RowBox[{"ResourceFunction", "[", "\"\<HypergraphPlot\>\"", "]"}]}]], "Input",\

 CellChangeTimes->{{3.922797044871284*^9, 3.922797048842415*^9}, {
   3.922797140682054*^9, 3.922797144225194*^9}, 3.922801231228897*^9},
 CellLabel->"In[13]:=",ExpressionUUID->"1302eafc-1d00-4c3d-aca7-12d4cbda0e82"],

Cell[BoxData[
 GraphicsBox[{{{
     {RGBColor[0.277947, 0.45009699999999997`, 0.32815550000000004`], Opacity[
      0.2], FilledCurveBox[
       BSplineCurve[{{2.8254735845220997`, -0.017235137513881227`}, {
        3.0783046954213455`, 0.6705461872207579}, {3.978650855310596, 
        0.9134559439473593}, {3.978650855310596, 1.5134559439473594`}, {
        3.3786508553105965`, 1.5134559439473594`}, {2.5964627147607064`, 
        1.3024247435046563`}, {1.9987957427491698`, 1.3419662549773057`}, {
        1.3987957427491697`, 1.3419662549773057`}, {1.3987957427491697`, 
        0.7419662549773056}, {2.2629791874137792`, 0.684792074050641}, {
        2.2254735845221, 0.5827648624861188}, {
        2.2254735845221, -0.017235137513881227`}}, SplineClosed -> True]]}, 
     {RGBColor[0.624866, 0.673302, 0.264296], Opacity[0.2], 
      FilledCurveBox[
       BSplineCurve[{{1.3987957427491697`, 0.7419662549773056}, {
        1.9937279366991623`, 0.7419662549773056}, {
        2.2254735845221, -0.017235137513881227`}, {
        2.8254735845220997`, -0.017235137513881227`}, {2.8254735845220997`, 
        0.5827648624861188}, {2.4089809283100436`, 1.9471995672109126`}, {
        1.8089809283100438`, 1.9471995672109126`}, {1.3987957427491697`, 
        1.3419662549773057`}}, SplineClosed -> True]]}, 
     {RGBColor[0.8453409999999999, 0.6248695, 0.3151775], Opacity[0.2], 
      FilledCurveBox[
       BSplineCurve[{{1.3200122188658026`, -0.3}, {
        1.9200122188658026`, -0.3}, {
        2.8254735845220997`, -0.017235137513881227`}, {2.8254735845220997`, 
        0.5827648624861188}, {2.2254735845221, 0.5827648624861188}, {
        1.9809855446040403`, 0.5064141427214802}, {1.9987957427491698`, 
        0.7419662549773056}, {1.9987957427491698`, 1.3419662549773057`}, {
        1.3987957427491697`, 1.3419662549773057`}, {1.3225670393032176`, 
        0.3337892563330091}, {0.929241073397499, 0.35603429627817534`}, {
        0.3292410733974989, 0.35603429627817534`}, {
        0.3292410733974989, -0.24396570372182463`}}, SplineClosed -> 
        True]]}, 
     {RGBColor[0.72987, 0.239399, 0.230961], Opacity[0.2], 
      FilledCurveBox[
       BSplineCurve[{{0.929241073397499, -0.24396570372182463`}, {
        1.0259339095622102`, 0.7598537446045728}, {1.3987957427491697`, 
        0.7419662549773056}, {1.9987957427491698`, 0.7419662549773056}, {
        1.9987957427491698`, 1.3419662549773057`}, {1.0286937828105391`, 
        1.3885054477862753`}, {0.3, 1.9600184709573145`}, {-0.3, 
        1.9600184709573145`}, {-0.3, 1.3600184709573144`}, {
        0.3749583968822879, 0.8306499995686006}, {0.3292410733974989, 
        0.35603429627817534`}, {0.3292410733974989, -0.24396570372182463`}}, 
        SplineClosed -> True]]}}, {
     {RGBColor[0.277947, 0.45009699999999997`, 0.32815550000000004`], 
      Thickness[0.01], 
      BSplineCurveBox[{{3.6786508553105963`, 1.2134559439473593`}, {
       2.7783046954213457`, 0.9705461872207579}, {2.5254735845221, 
       0.28276486248611876`}},
       SplineWeights->{1, 6, 1}], 
      BSplineCurveBox[{{3.6786508553105963`, 1.2134559439473593`}, {
       2.7783046954213457`, 0.9705461872207579}, {1.6987957427491698`, 
       1.0419662549773057`}},
       SplineWeights->{1, 6, 1}]}, 
     {RGBColor[0.624866, 0.673302, 0.264296], Thickness[0.01], 
      BSplineCurveBox[{{1.6987957427491698`, 1.0419662549773057`}, {
       2.108980928310044, 1.6471995672109125`}, {2.5254735845221, 
       0.28276486248611876`}},
       SplineWeights->{1, 6, 1}]}, 
     {RGBColor[0.8453409999999999, 0.6248695, 0.3151775], Thickness[0.01], 
      BSplineCurveBox[{{0.6292410733974989, 0.056034296278175355`}, {
       1.6200122188658026`, 0.}, {2.5254735845221, 0.28276486248611876`}},
       SplineWeights->{1, 6, 1}], 
      BSplineCurveBox[{{0.6292410733974989, 0.056034296278175355`}, {
       1.6200122188658026`, 0.}, {1.6987957427491698`, 1.0419662549773057`}},
       SplineWeights->{1, 6, 1}]}, 
     {RGBColor[0.72987, 0.239399, 0.230961], Thickness[0.01], 
      BSplineCurveBox[{{0.6292410733974989, 0.056034296278175355`}, {
       0.7286937828105391, 1.0885054477862752`}, {0., 1.6600184709573145`}},
       SplineWeights->{1, 6, 1}], 
      BSplineCurveBox[{{0.6292410733974989, 0.056034296278175355`}, {
       0.7286937828105391, 1.0885054477862752`}, {1.6987957427491698`, 
       1.0419662549773057`}},
       SplineWeights->{1, 6, 1}]}}}, 
   NamespaceBox[{{}, 
     {GrayLevel[1], EdgeForm[GrayLevel[0]], 
      TagBox[{
        TagBox[DiskBox[{3.6786508553105963`, 1.2134559439473593`}, 0.15],
         "DynamicName",
         BoxID -> "VertexID$1"], InsetBox[
         StyleBox["0",
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontColor->GrayLevel[0]], DynamicLocation[
         "VertexID$1", None, Center],
         BaseStyle->"Graphics"]},
       "DynamicName",
       BoxID -> "VertexLabelID$1"], 
      TagBox[{
        TagBox[DiskBox[{1.6987957427491698`, 1.0419662549773057`}, 0.15],
         "DynamicName",
         BoxID -> "VertexID$2"], InsetBox[
         StyleBox["1",
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontColor->GrayLevel[0]], DynamicLocation[
         "VertexID$2", None, Center],
         BaseStyle->"Graphics"]},
       "DynamicName",
       BoxID -> "VertexLabelID$2"], 
      TagBox[{
        TagBox[DiskBox[{0.6292410733974989, 0.056034296278175355`}, 0.15],
         "DynamicName",
         BoxID -> "VertexID$3"], InsetBox[
         StyleBox["2",
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontColor->GrayLevel[0]], DynamicLocation[
         "VertexID$3", None, Center],
         BaseStyle->"Graphics"]},
       "DynamicName",
       BoxID -> "VertexLabelID$3"], 
      TagBox[{
        TagBox[DiskBox[{2.5254735845221, 0.28276486248611876`}, 0.15],
         "DynamicName",
         BoxID -> "VertexID$4"], InsetBox[
         StyleBox[
          RowBox[{"Round", "[", "\<\"1: 2\"\>", "]"}],
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontColor->GrayLevel[0]], DynamicLocation[
         "VertexID$4", None, Center],
         BaseStyle->"Graphics"]},
       "DynamicName",
       BoxID -> "VertexLabelID$4"], 
      TagBox[{
        TagBox[DiskBox[{0., 1.6600184709573145`}, 0.15],
         "DynamicName",
         BoxID -> "VertexID$5"], InsetBox[
         StyleBox[
          RowBox[{"Round", "[", "\<\"3: 1\"\>", "]"}],
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontColor->GrayLevel[0]], DynamicLocation[
         "VertexID$5", None, Center],
         BaseStyle->"Graphics"]},
       "DynamicName",
       BoxID -> "VertexLabelID$5"]}}]}]], "Output",
 CellChangeTimes->{3.922797144598043*^9, 3.922797286239379*^9, 
  3.922797783303393*^9, 3.922801231755434*^9},
 CellLabel->"Out[13]=",ExpressionUUID->"56263802-e530-4f7a-9d18-209ba5ddd434"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"HypergraphCollapseNodesAndEdges", "[", "hg", "]"}]], "Input",
 CellChangeTimes->{{3.922797044871284*^9, 3.922797048842415*^9}, {
  3.922797140682054*^9, 3.922797157929029*^9}},
 CellLabel->"In[14]:=",ExpressionUUID->"8f665633-8c02-4078-acf0-18a236f1985a"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["ExternalObject",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{
              Thickness[0.05], {
               FaceForm[{
                 RGBColor[1., 1., 1.], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 
                 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {
                 1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
                 3}, {0, 1, 0}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}}, {{1, 4, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                 0}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 
                 3}, {1, 3, 3}}}, {{{7.5718000000000005`, 17.7334}, {7.0998, 
                 17.7334}, {6.7168, 17.342399999999998`}, {6.7168, 16.8624}, {
                 6.7168, 16.3854}, {7.0998, 15.997399999999999`}, {
                 7.5718000000000005`, 15.997399999999999`}, {
                 8.043800000000001, 15.997399999999999`}, {8.4268, 16.3854}, {
                 8.4268, 16.8624}, {8.4268, 17.342399999999998`}, {
                 8.043800000000001, 17.7334}, {7.5718000000000005`, 
                 17.7334}}, CompressedData["
1:eJxTTMoPSmViYGBQAWIQvXD12hvxZbwODSxH+w2/izl86QsuUZnOAuezVHCr
aNT9se+5ncGQzyjl8EZ2+QsPve/2X6bfndzeKu/Qst2h6dHxD/ZfvSLbLMSU
4fz1U1I7kmVV4erNVtuFRxdqOCRs3P9mns0fe98WXv/1ItoOR9qWh58yYnP4
+AVowA4dh6z8D60nQwTg/EsTY/45/1KG87O1v02/K6zi8O7kYae1L3UdBLi3
Lqs8Lubw+zRQhEnPwdnuxc01v8QcGtQOtS2fbgDng2w5ctHQgc1E0MzGVsLB
+wS77exSIwfP/bWyFunyDs2BnnMbjhk5+CzjclP9quCwVMdZ5vUjI4cJhuW6
ivFKDqbvLVzdPxk5JIYEqS84qezgLyeW5fvZyGHaJp7CNacRfAOQAamqcD63
m2op0y01h3aQA54YOZx6ar/kvp0G3D4rZa/q5vVaEPMnQe0v1XG4bgIUWG4I
58P8A+M/mCO4dC+jJpy/M5vz54Llag73gLESNVkLEm/7VBwOWgItcNaA86PE
t19kiJOH80OmKfaVFkrC+ZbpLpn5BSIOx3JNGrY7KMH5UZf3PBaZKwfnw9IH
AO506oE=
                 "], {{12.401800000000001`, 4.1044}, {11.9298, 4.1044}, {
                 11.5458, 3.7164}, {11.5458, 3.2394}, {11.5458, 
                 2.7593999999999994`}, {11.9298, 2.369399999999999}, {
                 12.401800000000001`, 2.369399999999999}, {
                 12.872800000000002`, 2.369399999999999}, {13.2568, 
                 2.7593999999999994`}, {13.2568, 3.2394}, {13.2568, 3.7164}, {
                 12.872800000000002`, 4.1044}, {12.401800000000001`, 
                 4.1044}}, CompressedData["
1:eJxTTMoPSmViYGBQAWIQ/Uei+LrQJ2UHhUNty8NPfbBfaXrW2m+iEpyvdVrg
+C4LRYcC3899wSWf7M+tOn81LEfe4cBGvbzFjN/sb635FZPrKuPgUPST/+X2
n/bOdi9urvkl5sARP8NHtIfRAcY/smKJn4MwD5y/aIv5j0MpcnB+rknDdocm
RQepRxHi2y9KOeyeNoG/qkzZIQrIY4iTh/MPWip7VTtrwPkuv96+PmCpDedf
mhjzz3mXroPFtaO5JgxqcP6DOYJL9zJqwvldfU8+yV/ScWBbPMmKMdfA4eMX
r8i2HToOE/mrzFbXGcL5GnU9O7M1jRympHYkx8ZoO9z8AJIwcjBbbRceXajh
0Pzo+Izd34wc3p087LT2pQqcL7R070HxNCWH+TY6V2YB1SeEBKkv6JR3kKlJ
NAoVAKo/APTIb0kHkDMbphs6NLAc7Tf8LgZ3D4wPdu8vZTgfSJbrPlR2WNC5
4eHLqSIOz+yX3N/Xp+OQF1a7bluSiIPPMi431VIdeHjD+CLAYLzHxOQwi0N6
XpymlsMFzgylnIpf9lURK4AxrgGPT3B47lRzWNAU6Dm34ZP94ZRVQKerwtMD
enoBAPI7A7I=
                 "]}]}, {
               FaceForm[{
                 RGBColor[0.20800000000000002`, 0.514, 0.6859999999999999], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}}, {{1, 4, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                 0}, {1, 3, 3}, {1, 3, 3}}}, {{{7.5718000000000005`, 
                 17.6836}, {8.014800000000001, 17.6836}, {8.3778, 17.3156}, {
                 8.3778, 16.862599999999997`}, {8.3778, 16.4116}, {
                 8.014800000000001, 16.046599999999998`}, {
                 7.5718000000000005`, 16.046599999999998`}, {7.1268, 
                 16.046599999999998`}, {6.7658000000000005`, 16.4116}, {
                 6.7658000000000005`, 16.862599999999997`}, {
                 6.7658000000000005`, 17.3156}, {7.1268, 17.6836}, {
                 7.5718000000000005`, 17.6836}}, CompressedData["
1:eJxTTMoPSmViYGBQBWIQnRgSpL7gpLLDYxHZk0//GzmYnbX2uxio5NBvWK6r
COQ7nU+7+vyVgsOa7tsZDO+NHKLEt19kiJN3EPMI+CNx2cgh6fBl7VRJCYd/
zr/evm4wchDg3rqs8riYQ2vU5T2PrxjC+XxzjBdtmW4A59fKWqS7vNR1uDQx
BqhVGYMPVKRpdUkHrh7Gb5l3dtX5UAE4v+gn/8vt69ng/DOHndZm3vttD+YH
aTt8OAkS+Gb/aUNA9qxyDQeec5KBt6Q/2N/XnbDgh6GqgwTQ2/ZL3tt77Ae6
QF0Zrv6Nhat7UaW8wxWXGx++eP223xet4PgxWcqBJ0Mpp6KK2aFlefgpoyNi
DgtXr70RX8YL5wcBbZmzSASDP2llU6DnXDk4/4fhs3WqKkoOb/V3q/N3Szq0
nQw5uGKJCjx8YfyDlspe1c4acL5XdbO+zzItOP+Z/ZL7+/p0HJR2/mn/MlsN
zgfybl9n1ITzYeEP4wNjvXPDQUOHa8+ztL9N13IARW/+QiO4fbD4haQPNYfO
DQ9fTv1k5NADUueoColvBmMH9PQDAFGHDrQ=
                 "]}]}, {
               FaceForm[{
                 RGBColor[0.976, 0.8430000000000001, 0.353], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}}, {{0, 2, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {
                 0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}}}, {{{12.4014, 4.0552}, {12.846400000000001`, 4.0552}, {
                 13.2074, 3.6902}, {13.2074, 3.2392000000000003`}, {13.2074, 
                 2.7862}, {12.846400000000001`, 2.4182}, {12.4014, 2.4182}, {
                 11.958400000000001`, 2.4182}, {11.595400000000001`, 
                 2.7862}, {11.595400000000001`, 3.2392000000000003`}, {
                 11.595400000000001`, 3.6902}, {11.958400000000001`, 
                 4.0552}, {12.4014, 4.0552}}, CompressedData["
1:eJxTTMoPSmViYGBQBGIQ3bszm/PnAl2HgsWMe1gv6TjA+Ec26uUtZtSE819t
X8/8nEfNISJ64/43ctoOlq7uRT/7lR06k2PvuDlrwPkvs7S/TY+Vh/MvpF19
nrVaCs6fH6d5WuC4mMNLkHk9inB+1r3Crr4UOTi/LerynsciPAh5hvxGlqNM
Dr8OpaxKuCLlcO96Y7HblF/2MPtesZgImtl8tde5MuuZbLqSw52tLTUXNr+1
/3363cnDTKoOCo4fk8/EvraHuRem3j4c6KEcLQel5HdRTna/7Ndlghyi4zCL
Q3penCaTA4wPcw+Mn7H5VfHWqSIO6sGsiyf9UsbgG2itFL5wRAyuHsYH+zvH
AM6PATlsjSGcbwwKeGUjhzV2QIfZSzn8sSo41zHJyKGuBxgRlfIOGUo5FVWs
xg62s0Pnr85VcljVFOg5l8HYoX15+CkjFlW4+l23uv6mlms4/OIH2uhs5BAg
J5bl+1kLYj/QPlh8w9wD4wMA37PnHw==
                 "]}]}}, {
             ImageSize -> 
              Dynamic[{
                Automatic, 
                 3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                  Magnification])}], AspectRatio -> Automatic, 
              ImageSize -> {20., 20.}, PlotRange -> {{0., 20.}, {0., 20.}}}], 
            
            GridBox[{{
               RowBox[{
                 TagBox["\"System: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Python\"", "SummaryItem"]}], 
               RowBox[{
                 TagBox["\"IsModule: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["False", "SummaryItem"]}], ""}, {
               RowBox[{
                 TagBox["\"Module: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"hypernetx.classes.Hypergraph\"", "SummaryItem"]}], 
               
               RowBox[{
                 TagBox["\"IsClass: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["False", "SummaryItem"]}], "\[SpanFromLeft]"}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{
              Thickness[0.05], {
               FaceForm[{
                 RGBColor[1., 1., 1.], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 
                 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {
                 1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
                 3}, {0, 1, 0}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}}, {{1, 4, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                 0}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 
                 3}, {1, 3, 3}}}, {{{7.5718000000000005`, 17.7334}, {7.0998, 
                 17.7334}, {6.7168, 17.342399999999998`}, {6.7168, 16.8624}, {
                 6.7168, 16.3854}, {7.0998, 15.997399999999999`}, {
                 7.5718000000000005`, 15.997399999999999`}, {
                 8.043800000000001, 15.997399999999999`}, {8.4268, 16.3854}, {
                 8.4268, 16.8624}, {8.4268, 17.342399999999998`}, {
                 8.043800000000001, 17.7334}, {7.5718000000000005`, 
                 17.7334}}, CompressedData["
1:eJxTTMoPSmViYGBQAWIQvXD12hvxZbwODSxH+w2/izl86QsuUZnOAuezVHCr
aNT9se+5ncGQzyjl8EZ2+QsPve/2X6bfndzeKu/Qst2h6dHxD/ZfvSLbLMSU
4fz1U1I7kmVV4erNVtuFRxdqOCRs3P9mns0fe98WXv/1ItoOR9qWh58yYnP4
+AVowA4dh6z8D60nQwTg/EsTY/45/1KG87O1v02/K6zi8O7kYae1L3UdBLi3
Lqs8Lubw+zRQhEnPwdnuxc01v8QcGtQOtS2fbgDng2w5ctHQgc1E0MzGVsLB
+wS77exSIwfP/bWyFunyDs2BnnMbjhk5+CzjclP9quCwVMdZ5vUjI4cJhuW6
ivFKDqbvLVzdPxk5JIYEqS84qezgLyeW5fvZyGHaJp7CNacRfAOQAamqcD63
m2op0y01h3aQA54YOZx6ar/kvp0G3D4rZa/q5vVaEPMnQe0v1XG4bgIUWG4I
58P8A+M/mCO4dC+jJpy/M5vz54Llag73gLESNVkLEm/7VBwOWgItcNaA86PE
t19kiJOH80OmKfaVFkrC+ZbpLpn5BSIOx3JNGrY7KMH5UZf3PBaZKwfnw9IH
AO506oE=
                 "], {{12.401800000000001`, 4.1044}, {11.9298, 4.1044}, {
                 11.5458, 3.7164}, {11.5458, 3.2394}, {11.5458, 
                 2.7593999999999994`}, {11.9298, 2.369399999999999}, {
                 12.401800000000001`, 2.369399999999999}, {
                 12.872800000000002`, 2.369399999999999}, {13.2568, 
                 2.7593999999999994`}, {13.2568, 3.2394}, {13.2568, 3.7164}, {
                 12.872800000000002`, 4.1044}, {12.401800000000001`, 
                 4.1044}}, CompressedData["
1:eJxTTMoPSmViYGBQAWIQ/Uei+LrQJ2UHhUNty8NPfbBfaXrW2m+iEpyvdVrg
+C4LRYcC3899wSWf7M+tOn81LEfe4cBGvbzFjN/sb635FZPrKuPgUPST/+X2
n/bOdi9urvkl5sARP8NHtIfRAcY/smKJn4MwD5y/aIv5j0MpcnB+rknDdocm
RQepRxHi2y9KOeyeNoG/qkzZIQrIY4iTh/MPWip7VTtrwPkuv96+PmCpDedf
mhjzz3mXroPFtaO5JgxqcP6DOYJL9zJqwvldfU8+yV/ScWBbPMmKMdfA4eMX
r8i2HToOE/mrzFbXGcL5GnU9O7M1jRympHYkx8ZoO9z8AJIwcjBbbRceXajh
0Pzo+Izd34wc3p087LT2pQqcL7R070HxNCWH+TY6V2YB1SeEBKkv6JR3kKlJ
NAoVAKo/APTIb0kHkDMbphs6NLAc7Tf8LgZ3D4wPdu8vZTgfSJbrPlR2WNC5
4eHLqSIOz+yX3N/Xp+OQF1a7bluSiIPPMi431VIdeHjD+CLAYLzHxOQwi0N6
XpymlsMFzgylnIpf9lURK4AxrgGPT3B47lRzWNAU6Dm34ZP94ZRVQKerwtMD
enoBAPI7A7I=
                 "]}]}, {
               FaceForm[{
                 RGBColor[0.20800000000000002`, 0.514, 0.6859999999999999], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}}, {{1, 4, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                 0}, {1, 3, 3}, {1, 3, 3}}}, {{{7.5718000000000005`, 
                 17.6836}, {8.014800000000001, 17.6836}, {8.3778, 17.3156}, {
                 8.3778, 16.862599999999997`}, {8.3778, 16.4116}, {
                 8.014800000000001, 16.046599999999998`}, {
                 7.5718000000000005`, 16.046599999999998`}, {7.1268, 
                 16.046599999999998`}, {6.7658000000000005`, 16.4116}, {
                 6.7658000000000005`, 16.862599999999997`}, {
                 6.7658000000000005`, 17.3156}, {7.1268, 17.6836}, {
                 7.5718000000000005`, 17.6836}}, CompressedData["
1:eJxTTMoPSmViYGBQBWIQnRgSpL7gpLLDYxHZk0//GzmYnbX2uxio5NBvWK6r
COQ7nU+7+vyVgsOa7tsZDO+NHKLEt19kiJN3EPMI+CNx2cgh6fBl7VRJCYd/
zr/evm4wchDg3rqs8riYQ2vU5T2PrxjC+XxzjBdtmW4A59fKWqS7vNR1uDQx
BqhVGYMPVKRpdUkHrh7Gb5l3dtX5UAE4v+gn/8vt69ng/DOHndZm3vttD+YH
aTt8OAkS+Gb/aUNA9qxyDQeec5KBt6Q/2N/XnbDgh6GqgwTQ2/ZL3tt77Ae6
QF0Zrv6Nhat7UaW8wxWXGx++eP223xet4PgxWcqBJ0Mpp6KK2aFlefgpoyNi
DgtXr70RX8YL5wcBbZmzSASDP2llU6DnXDk4/4fhs3WqKkoOb/V3q/N3Szq0
nQw5uGKJCjx8YfyDlspe1c4acL5XdbO+zzItOP+Z/ZL7+/p0HJR2/mn/MlsN
zgfybl9n1ITzYeEP4wNjvXPDQUOHa8+ztL9N13IARW/+QiO4fbD4haQPNYfO
DQ9fTv1k5NADUueoColvBmMH9PQDAFGHDrQ=
                 "]}]}, {
               FaceForm[{
                 RGBColor[0.976, 0.8430000000000001, 0.353], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}}, {{0, 2, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {
                 0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}}}, {{{12.4014, 4.0552}, {12.846400000000001`, 4.0552}, {
                 13.2074, 3.6902}, {13.2074, 3.2392000000000003`}, {13.2074, 
                 2.7862}, {12.846400000000001`, 2.4182}, {12.4014, 2.4182}, {
                 11.958400000000001`, 2.4182}, {11.595400000000001`, 
                 2.7862}, {11.595400000000001`, 3.2392000000000003`}, {
                 11.595400000000001`, 3.6902}, {11.958400000000001`, 
                 4.0552}, {12.4014, 4.0552}}, CompressedData["
1:eJxTTMoPSmViYGBQBGIQ3bszm/PnAl2HgsWMe1gv6TjA+Ec26uUtZtSE819t
X8/8nEfNISJ64/43ctoOlq7uRT/7lR06k2PvuDlrwPkvs7S/TY+Vh/MvpF19
nrVaCs6fH6d5WuC4mMNLkHk9inB+1r3Crr4UOTi/LerynsciPAh5hvxGlqNM
Dr8OpaxKuCLlcO96Y7HblF/2MPtesZgImtl8tde5MuuZbLqSw52tLTUXNr+1
/3363cnDTKoOCo4fk8/EvraHuRem3j4c6KEcLQel5HdRTna/7Ndlghyi4zCL
Q3penCaTA4wPcw+Mn7H5VfHWqSIO6sGsiyf9UsbgG2itFL5wRAyuHsYH+zvH
AM6PATlsjSGcbwwKeGUjhzV2QIfZSzn8sSo41zHJyKGuBxgRlfIOGUo5FVWs
xg62s0Pnr85VcljVFOg5l8HYoX15+CkjFlW4+l23uv6mlms4/OIH2uhs5BAg
J5bl+1kLYj/QPlh8w9wD4wMA37PnHw==
                 "]}]}}, {
             ImageSize -> 
              Dynamic[{
                Automatic, 
                 3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                  Magnification])}], AspectRatio -> Automatic, 
              ImageSize -> {20., 20.}, PlotRange -> {{0., 20.}, {0., 20.}}}], 
            
            GridBox[{{
               RowBox[{
                 TagBox["\"System: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Python\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"IsModule: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["False", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Module: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                 "\"hypernetx.classes.Hypergraph\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"IsClass: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["False", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"IsFunction: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["False", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"IsMethod: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["False", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"IsCallable: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["False", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Status: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Evaluated\"", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  ExternalObject[
   ExternalSessionObject["4412c19d-12e2-4c9a-b100-dd88d0e74d8e"], 
   ExternalEvaluate`RPC["Fetch", {5727215248}], <|
   "IsModule" -> False, "Module" -> "hypernetx.classes.Hypergraph", "IsClass" -> 
    False, "IsFunction" -> False, "IsMethod" -> False, "IsCallable" -> 
    False|>],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.9227971585304613`*^9, 3.922797286283536*^9, 
  3.9227977833477287`*^9, 3.922801289102622*^9},
 CellLabel->"Out[14]=",ExpressionUUID->"0082faac-0f96-4157-a60f-4649da84de1a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"HypergraphComponentSubGraphs", "[", "hg", "]"}]], "Input",
 CellChangeTimes->{{3.922797044871284*^9, 3.922797048842415*^9}, {
  3.922797140682054*^9, 3.9227971726051283`*^9}},
 CellLabel->"In[15]:=",ExpressionUUID->"d632371c-bea8-4a98-b640-1eee36774dc6"],

Cell[BoxData[
 RowBox[{"{", 
  InterpretationBox[
   RowBox[{
    TagBox["ExternalObject",
     "SummaryHead"], "[", 
    DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
     TemplateBox[{
       PaneSelectorBox[{False -> GridBox[{{
             PaneBox[
              ButtonBox[
               DynamicBox[
                FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]], 
               ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
               BaseStyle -> {}, Evaluator -> Automatic, Method -> 
               "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
              Dynamic[{
                Automatic, 
                 3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                  Magnification])}]], 
             GraphicsBox[{
               Thickness[0.05], {
                FaceForm[{
                  RGBColor[1., 1., 1.], 
                  Opacity[1.]}], 
                
                FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                  3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 
                  0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {
                  1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3,
                   3}, {0, 1, 0}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                  3}}, {{1, 4, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                  0}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {
                  1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3,
                   3}, {1, 3, 3}}}, {{{7.5718000000000005`, 17.7334}, {7.0998,
                   17.7334}, {6.7168, 17.342399999999998`}, {6.7168, 
                  16.8624}, {6.7168, 16.3854}, {7.0998, 
                  15.997399999999999`}, {7.5718000000000005`, 
                  15.997399999999999`}, {8.043800000000001, 
                  15.997399999999999`}, {8.4268, 16.3854}, {8.4268, 
                  16.8624}, {8.4268, 17.342399999999998`}, {8.043800000000001,
                   17.7334}, {7.5718000000000005`, 17.7334}}, CompressedData["

1:eJxTTMoPSmViYGBQAWIQvXD12hvxZbwODSxH+w2/izl86QsuUZnOAuezVHCr
aNT9se+5ncGQzyjl8EZ2+QsPve/2X6bfndzeKu/Qst2h6dHxD/ZfvSLbLMSU
4fz1U1I7kmVV4erNVtuFRxdqOCRs3P9mns0fe98WXv/1ItoOR9qWh58yYnP4
+AVowA4dh6z8D60nQwTg/EsTY/45/1KG87O1v02/K6zi8O7kYae1L3UdBLi3
Lqs8Lubw+zRQhEnPwdnuxc01v8QcGtQOtS2fbgDng2w5ctHQgc1E0MzGVsLB
+wS77exSIwfP/bWyFunyDs2BnnMbjhk5+CzjclP9quCwVMdZ5vUjI4cJhuW6
ivFKDqbvLVzdPxk5JIYEqS84qezgLyeW5fvZyGHaJp7CNacRfAOQAamqcD63
m2op0y01h3aQA54YOZx6ar/kvp0G3D4rZa/q5vVaEPMnQe0v1XG4bgIUWG4I
58P8A+M/mCO4dC+jJpy/M5vz54Llag73gLESNVkLEm/7VBwOWgItcNaA86PE
t19kiJOH80OmKfaVFkrC+ZbpLpn5BSIOx3JNGrY7KMH5UZf3PBaZKwfnw9IH
AO506oE=
                  "], {{12.401800000000001`, 4.1044}, {11.9298, 4.1044}, {
                  11.5458, 3.7164}, {11.5458, 3.2394}, {11.5458, 
                  2.7593999999999994`}, {11.9298, 2.369399999999999}, {
                  12.401800000000001`, 2.369399999999999}, {
                  12.872800000000002`, 2.369399999999999}, {13.2568, 
                  2.7593999999999994`}, {13.2568, 3.2394}, {13.2568, 
                  3.7164}, {12.872800000000002`, 4.1044}, {
                  12.401800000000001`, 4.1044}}, CompressedData["
1:eJxTTMoPSmViYGBQAWIQ/Uei+LrQJ2UHhUNty8NPfbBfaXrW2m+iEpyvdVrg
+C4LRYcC3899wSWf7M+tOn81LEfe4cBGvbzFjN/sb635FZPrKuPgUPST/+X2
n/bOdi9urvkl5sARP8NHtIfRAcY/smKJn4MwD5y/aIv5j0MpcnB+rknDdocm
RQepRxHi2y9KOeyeNoG/qkzZIQrIY4iTh/MPWip7VTtrwPkuv96+PmCpDedf
mhjzz3mXroPFtaO5JgxqcP6DOYJL9zJqwvldfU8+yV/ScWBbPMmKMdfA4eMX
r8i2HToOE/mrzFbXGcL5GnU9O7M1jRympHYkx8ZoO9z8AJIwcjBbbRceXajh
0Pzo+Izd34wc3p087LT2pQqcL7R070HxNCWH+TY6V2YB1SeEBKkv6JR3kKlJ
NAoVAKo/APTIb0kHkDMbphs6NLAc7Tf8LgZ3D4wPdu8vZTgfSJbrPlR2WNC5
4eHLqSIOz+yX3N/Xp+OQF1a7bluSiIPPMi431VIdeHjD+CLAYLzHxOQwi0N6
XpymlsMFzgylnIpf9lURK4AxrgGPT3B47lRzWNAU6Dm34ZP94ZRVQKerwtMD
enoBAPI7A7I=
                  "]}]}, {
                FaceForm[{
                  RGBColor[0.20800000000000002`, 0.514, 0.6859999999999999], 
                  Opacity[1.]}], 
                
                FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                  3}}, {{1, 4, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                  0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                  0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1,
                   0}, {1, 3, 3}, {1, 3, 3}}}, {{{7.5718000000000005`, 
                  17.6836}, {8.014800000000001, 17.6836}, {8.3778, 17.3156}, {
                  8.3778, 16.862599999999997`}, {8.3778, 16.4116}, {
                  8.014800000000001, 16.046599999999998`}, {
                  7.5718000000000005`, 16.046599999999998`}, {7.1268, 
                  16.046599999999998`}, {6.7658000000000005`, 16.4116}, {
                  6.7658000000000005`, 16.862599999999997`}, {
                  6.7658000000000005`, 17.3156}, {7.1268, 17.6836}, {
                  7.5718000000000005`, 17.6836}}, CompressedData["
1:eJxTTMoPSmViYGBQBWIQnRgSpL7gpLLDYxHZk0//GzmYnbX2uxio5NBvWK6r
COQ7nU+7+vyVgsOa7tsZDO+NHKLEt19kiJN3EPMI+CNx2cgh6fBl7VRJCYd/
zr/evm4wchDg3rqs8riYQ2vU5T2PrxjC+XxzjBdtmW4A59fKWqS7vNR1uDQx
BqhVGYMPVKRpdUkHrh7Gb5l3dtX5UAE4v+gn/8vt69ng/DOHndZm3vttD+YH
aTt8OAkS+Gb/aUNA9qxyDQeec5KBt6Q/2N/XnbDgh6GqgwTQ2/ZL3tt77Ae6
QF0Zrv6Nhat7UaW8wxWXGx++eP223xet4PgxWcqBJ0Mpp6KK2aFlefgpoyNi
DgtXr70RX8YL5wcBbZmzSASDP2llU6DnXDk4/4fhs3WqKkoOb/V3q/N3Szq0
nQw5uGKJCjx8YfyDlspe1c4acL5XdbO+zzItOP+Z/ZL7+/p0HJR2/mn/MlsN
zgfybl9n1ITzYeEP4wNjvXPDQUOHa8+ztL9N13IARW/+QiO4fbD4haQPNYfO
DQ9fTv1k5NADUueoColvBmMH9PQDAFGHDrQ=
                  "]}]}, {
                FaceForm[{
                  RGBColor[0.976, 0.8430000000000001, 0.353], 
                  Opacity[1.]}], 
                
                FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                  3}}, {{0, 2, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                  0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {
                  0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3,
                   3}}}, {{{12.4014, 4.0552}, {12.846400000000001`, 4.0552}, {
                  13.2074, 3.6902}, {13.2074, 3.2392000000000003`}, {13.2074, 
                  2.7862}, {12.846400000000001`, 2.4182}, {12.4014, 2.4182}, {
                  11.958400000000001`, 2.4182}, {11.595400000000001`, 
                  2.7862}, {11.595400000000001`, 3.2392000000000003`}, {
                  11.595400000000001`, 3.6902}, {11.958400000000001`, 
                  4.0552}, {12.4014, 4.0552}}, CompressedData["
1:eJxTTMoPSmViYGBQBGIQ3bszm/PnAl2HgsWMe1gv6TjA+Ec26uUtZtSE819t
X8/8nEfNISJ64/43ctoOlq7uRT/7lR06k2PvuDlrwPkvs7S/TY+Vh/MvpF19
nrVaCs6fH6d5WuC4mMNLkHk9inB+1r3Crr4UOTi/LerynsciPAh5hvxGlqNM
Dr8OpaxKuCLlcO96Y7HblF/2MPtesZgImtl8tde5MuuZbLqSw52tLTUXNr+1
/3363cnDTKoOCo4fk8/EvraHuRem3j4c6KEcLQel5HdRTna/7Ndlghyi4zCL
Q3penCaTA4wPcw+Mn7H5VfHWqSIO6sGsiyf9UsbgG2itFL5wRAyuHsYH+zvH
AM6PATlsjSGcbwwKeGUjhzV2QIfZSzn8sSo41zHJyKGuBxgRlfIOGUo5FVWs
xg62s0Pnr85VcljVFOg5l8HYoX15+CkjFlW4+l23uv6mlms4/OIH2uhs5BAg
J5bl+1kLYj/QPlh8w9wD4wMA37PnHw==
                  "]}]}}, {
              ImageSize -> 
               Dynamic[{
                 Automatic, 
                  3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                   Magnification])}], AspectRatio -> Automatic, 
               ImageSize -> {20., 20.}, PlotRange -> {{0., 20.}, {0., 20.}}}], 
             GridBox[{{
                RowBox[{
                  TagBox["\"System: \"", "SummaryItemAnnotation"], 
                  "\[InvisibleSpace]", 
                  TagBox["\"Python\"", "SummaryItem"]}], 
                RowBox[{
                  TagBox["\"IsModule: \"", "SummaryItemAnnotation"], 
                  "\[InvisibleSpace]", 
                  TagBox["False", "SummaryItem"]}], ""}, {
                RowBox[{
                  TagBox["\"Module: \"", "SummaryItemAnnotation"], 
                  "\[InvisibleSpace]", 
                  TagBox["\"hypernetx.classes.Hypergraph\"", "SummaryItem"]}], 
                RowBox[{
                  TagBox["\"IsClass: \"", "SummaryItemAnnotation"], 
                  "\[InvisibleSpace]", 
                  TagBox["False", "SummaryItem"]}], "\[SpanFromLeft]"}}, 
              GridBoxAlignment -> {
               "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
              False, GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              GridBoxSpacings -> {
               "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
              BaseStyle -> {
               ShowStringCharacters -> False, NumberMarks -> False, 
                PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
           AutoDelete -> False, 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
           BaselinePosition -> {1, 1}], True -> GridBox[{{
             PaneBox[
              ButtonBox[
               DynamicBox[
                FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]], 
               ButtonFunction :> (Typeset`open$$ = False), Appearance -> None,
                BaseStyle -> {}, Evaluator -> Automatic, Method -> 
               "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
              Dynamic[{
                Automatic, 
                 3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                  Magnification])}]], 
             GraphicsBox[{
               Thickness[0.05], {
                FaceForm[{
                  RGBColor[1., 1., 1.], 
                  Opacity[1.]}], 
                
                FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                  3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 
                  0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {
                  1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3,
                   3}, {0, 1, 0}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                  3}}, {{1, 4, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                  0}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {
                  1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3,
                   3}, {1, 3, 3}}}, {{{7.5718000000000005`, 17.7334}, {7.0998,
                   17.7334}, {6.7168, 17.342399999999998`}, {6.7168, 
                  16.8624}, {6.7168, 16.3854}, {7.0998, 
                  15.997399999999999`}, {7.5718000000000005`, 
                  15.997399999999999`}, {8.043800000000001, 
                  15.997399999999999`}, {8.4268, 16.3854}, {8.4268, 
                  16.8624}, {8.4268, 17.342399999999998`}, {8.043800000000001,
                   17.7334}, {7.5718000000000005`, 17.7334}}, CompressedData["

1:eJxTTMoPSmViYGBQAWIQvXD12hvxZbwODSxH+w2/izl86QsuUZnOAuezVHCr
aNT9se+5ncGQzyjl8EZ2+QsPve/2X6bfndzeKu/Qst2h6dHxD/ZfvSLbLMSU
4fz1U1I7kmVV4erNVtuFRxdqOCRs3P9mns0fe98WXv/1ItoOR9qWh58yYnP4
+AVowA4dh6z8D60nQwTg/EsTY/45/1KG87O1v02/K6zi8O7kYae1L3UdBLi3
Lqs8Lubw+zRQhEnPwdnuxc01v8QcGtQOtS2fbgDng2w5ctHQgc1E0MzGVsLB
+wS77exSIwfP/bWyFunyDs2BnnMbjhk5+CzjclP9quCwVMdZ5vUjI4cJhuW6
ivFKDqbvLVzdPxk5JIYEqS84qezgLyeW5fvZyGHaJp7CNacRfAOQAamqcD63
m2op0y01h3aQA54YOZx6ar/kvp0G3D4rZa/q5vVaEPMnQe0v1XG4bgIUWG4I
58P8A+M/mCO4dC+jJpy/M5vz54Llag73gLESNVkLEm/7VBwOWgItcNaA86PE
t19kiJOH80OmKfaVFkrC+ZbpLpn5BSIOx3JNGrY7KMH5UZf3PBaZKwfnw9IH
AO506oE=
                  "], {{12.401800000000001`, 4.1044}, {11.9298, 4.1044}, {
                  11.5458, 3.7164}, {11.5458, 3.2394}, {11.5458, 
                  2.7593999999999994`}, {11.9298, 2.369399999999999}, {
                  12.401800000000001`, 2.369399999999999}, {
                  12.872800000000002`, 2.369399999999999}, {13.2568, 
                  2.7593999999999994`}, {13.2568, 3.2394}, {13.2568, 
                  3.7164}, {12.872800000000002`, 4.1044}, {
                  12.401800000000001`, 4.1044}}, CompressedData["
1:eJxTTMoPSmViYGBQAWIQ/Uei+LrQJ2UHhUNty8NPfbBfaXrW2m+iEpyvdVrg
+C4LRYcC3899wSWf7M+tOn81LEfe4cBGvbzFjN/sb635FZPrKuPgUPST/+X2
n/bOdi9urvkl5sARP8NHtIfRAcY/smKJn4MwD5y/aIv5j0MpcnB+rknDdocm
RQepRxHi2y9KOeyeNoG/qkzZIQrIY4iTh/MPWip7VTtrwPkuv96+PmCpDedf
mhjzz3mXroPFtaO5JgxqcP6DOYJL9zJqwvldfU8+yV/ScWBbPMmKMdfA4eMX
r8i2HToOE/mrzFbXGcL5GnU9O7M1jRympHYkx8ZoO9z8AJIwcjBbbRceXajh
0Pzo+Izd34wc3p087LT2pQqcL7R070HxNCWH+TY6V2YB1SeEBKkv6JR3kKlJ
NAoVAKo/APTIb0kHkDMbphs6NLAc7Tf8LgZ3D4wPdu8vZTgfSJbrPlR2WNC5
4eHLqSIOz+yX3N/Xp+OQF1a7bluSiIPPMi431VIdeHjD+CLAYLzHxOQwi0N6
XpymlsMFzgylnIpf9lURK4AxrgGPT3B47lRzWNAU6Dm34ZP94ZRVQKerwtMD
enoBAPI7A7I=
                  "]}]}, {
                FaceForm[{
                  RGBColor[0.20800000000000002`, 0.514, 0.6859999999999999], 
                  Opacity[1.]}], 
                
                FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                  3}}, {{1, 4, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                  0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                  0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1,
                   0}, {1, 3, 3}, {1, 3, 3}}}, {{{7.5718000000000005`, 
                  17.6836}, {8.014800000000001, 17.6836}, {8.3778, 17.3156}, {
                  8.3778, 16.862599999999997`}, {8.3778, 16.4116}, {
                  8.014800000000001, 16.046599999999998`}, {
                  7.5718000000000005`, 16.046599999999998`}, {7.1268, 
                  16.046599999999998`}, {6.7658000000000005`, 16.4116}, {
                  6.7658000000000005`, 16.862599999999997`}, {
                  6.7658000000000005`, 17.3156}, {7.1268, 17.6836}, {
                  7.5718000000000005`, 17.6836}}, CompressedData["
1:eJxTTMoPSmViYGBQBWIQnRgSpL7gpLLDYxHZk0//GzmYnbX2uxio5NBvWK6r
COQ7nU+7+vyVgsOa7tsZDO+NHKLEt19kiJN3EPMI+CNx2cgh6fBl7VRJCYd/
zr/evm4wchDg3rqs8riYQ2vU5T2PrxjC+XxzjBdtmW4A59fKWqS7vNR1uDQx
BqhVGYMPVKRpdUkHrh7Gb5l3dtX5UAE4v+gn/8vt69ng/DOHndZm3vttD+YH
aTt8OAkS+Gb/aUNA9qxyDQeec5KBt6Q/2N/XnbDgh6GqgwTQ2/ZL3tt77Ae6
QF0Zrv6Nhat7UaW8wxWXGx++eP223xet4PgxWcqBJ0Mpp6KK2aFlefgpoyNi
DgtXr70RX8YL5wcBbZmzSASDP2llU6DnXDk4/4fhs3WqKkoOb/V3q/N3Szq0
nQw5uGKJCjx8YfyDlspe1c4acL5XdbO+zzItOP+Z/ZL7+/p0HJR2/mn/MlsN
zgfybl9n1ITzYeEP4wNjvXPDQUOHa8+ztL9N13IARW/+QiO4fbD4haQPNYfO
DQ9fTv1k5NADUueoColvBmMH9PQDAFGHDrQ=
                  "]}]}, {
                FaceForm[{
                  RGBColor[0.976, 0.8430000000000001, 0.353], 
                  Opacity[1.]}], 
                
                FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                  3}}, {{0, 2, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                  0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {
                  0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3,
                   3}}}, {{{12.4014, 4.0552}, {12.846400000000001`, 4.0552}, {
                  13.2074, 3.6902}, {13.2074, 3.2392000000000003`}, {13.2074, 
                  2.7862}, {12.846400000000001`, 2.4182}, {12.4014, 2.4182}, {
                  11.958400000000001`, 2.4182}, {11.595400000000001`, 
                  2.7862}, {11.595400000000001`, 3.2392000000000003`}, {
                  11.595400000000001`, 3.6902}, {11.958400000000001`, 
                  4.0552}, {12.4014, 4.0552}}, CompressedData["
1:eJxTTMoPSmViYGBQBGIQ3bszm/PnAl2HgsWMe1gv6TjA+Ec26uUtZtSE819t
X8/8nEfNISJ64/43ctoOlq7uRT/7lR06k2PvuDlrwPkvs7S/TY+Vh/MvpF19
nrVaCs6fH6d5WuC4mMNLkHk9inB+1r3Crr4UOTi/LerynsciPAh5hvxGlqNM
Dr8OpaxKuCLlcO96Y7HblF/2MPtesZgImtl8tde5MuuZbLqSw52tLTUXNr+1
/3363cnDTKoOCo4fk8/EvraHuRem3j4c6KEcLQel5HdRTna/7Ndlghyi4zCL
Q3penCaTA4wPcw+Mn7H5VfHWqSIO6sGsiyf9UsbgG2itFL5wRAyuHsYH+zvH
AM6PATlsjSGcbwwKeGUjhzV2QIfZSzn8sSo41zHJyKGuBxgRlfIOGUo5FVWs
xg62s0Pnr85VcljVFOg5l8HYoX15+CkjFlW4+l23uv6mlms4/OIH2uhs5BAg
J5bl+1kLYj/QPlh8w9wD4wMA37PnHw==
                  "]}]}}, {
              ImageSize -> 
               Dynamic[{
                 Automatic, 
                  3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                   Magnification])}], AspectRatio -> Automatic, 
               ImageSize -> {20., 20.}, PlotRange -> {{0., 20.}, {0., 20.}}}], 
             GridBox[{{
                RowBox[{
                  TagBox["\"System: \"", "SummaryItemAnnotation"], 
                  "\[InvisibleSpace]", 
                  TagBox["\"Python\"", "SummaryItem"]}]}, {
                RowBox[{
                  TagBox["\"IsModule: \"", "SummaryItemAnnotation"], 
                  "\[InvisibleSpace]", 
                  TagBox["False", "SummaryItem"]}]}, {
                RowBox[{
                  TagBox["\"Module: \"", "SummaryItemAnnotation"], 
                  "\[InvisibleSpace]", 
                  TagBox[
                  "\"hypernetx.classes.Hypergraph\"", "SummaryItem"]}]}, {
                RowBox[{
                  TagBox["\"IsClass: \"", "SummaryItemAnnotation"], 
                  "\[InvisibleSpace]", 
                  TagBox["False", "SummaryItem"]}]}, {
                RowBox[{
                  TagBox["\"IsFunction: \"", "SummaryItemAnnotation"], 
                  "\[InvisibleSpace]", 
                  TagBox["False", "SummaryItem"]}]}, {
                RowBox[{
                  TagBox["\"IsMethod: \"", "SummaryItemAnnotation"], 
                  "\[InvisibleSpace]", 
                  TagBox["False", "SummaryItem"]}]}, {
                RowBox[{
                  TagBox["\"IsCallable: \"", "SummaryItemAnnotation"], 
                  "\[InvisibleSpace]", 
                  TagBox["False", "SummaryItem"]}]}, {
                RowBox[{
                  TagBox["\"Status: \"", "SummaryItemAnnotation"], 
                  "\[InvisibleSpace]", 
                  TagBox["\"Evaluated\"", "SummaryItem"]}]}}, 
              GridBoxAlignment -> {
               "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
              False, GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              GridBoxSpacings -> {
               "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
              BaseStyle -> {
               ShowStringCharacters -> False, NumberMarks -> False, 
                PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
           AutoDelete -> False, 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
           BaselinePosition -> {1, 1}]}, 
        Dynamic[Typeset`open$$], ImageSize -> Automatic]},
      "SummaryPanel"],
     DynamicModuleValues:>{}], "]"}],
   ExternalObject[
    ExternalSessionObject["4412c19d-12e2-4c9a-b100-dd88d0e74d8e"], 
    ExternalEvaluate`RPC["Fetch", {5727429712}], <|
    "IsModule" -> False, "Module" -> "hypernetx.classes.Hypergraph", 
     "IsClass" -> False, "IsFunction" -> False, "IsMethod" -> False, 
     "IsCallable" -> False|>],
   Editable->False,
   SelectWithContents->True,
   Selectable->False], "}"}]], "Output",
 CellChangeTimes->{3.9227971729924307`*^9, 3.9227972863020697`*^9, 
  3.922797783367771*^9, 3.922801289790782*^9},
 CellLabel->"Out[15]=",ExpressionUUID->"d65b0afa-3a4a-4032-8b2b-c4b216730bc8"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"HypergraphComponents", "[", "hg", "]"}]], "Input",
 CellChangeTimes->{{3.922797044871284*^9, 3.922797048842415*^9}, {
  3.922797140682054*^9, 3.922797185153812*^9}},
 CellLabel->"In[16]:=",ExpressionUUID->"334b2d25-f5f8-4c57-ae14-d1617d2f17bd"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", 
   RowBox[{"1", ",", "2", ",", "3"}], "}"}], "}"}]], "Output",
 CellChangeTimes->{3.922797185458714*^9, 3.92279728631135*^9, 
  3.922797783375092*^9, 3.92280129072645*^9},
 CellLabel->"Out[16]=",ExpressionUUID->"f0ded48f-614a-4de8-8f1d-12082b74caae"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"HypergraphConnectedComponents", "[", "hg", "]"}]], "Input",
 CellChangeTimes->{{3.9227973248257427`*^9, 3.922797325878213*^9}},
 CellLabel->"In[17]:=",ExpressionUUID->"617bd72a-0dee-48b2-94da-7e536b230cd0"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", 
   RowBox[{"1", ",", "2", ",", "3"}], "}"}], "}"}]], "Output",
 CellChangeTimes->{3.922797326172504*^9, 3.9227977834657087`*^9, 
  3.922801291438533*^9},
 CellLabel->"Out[17]=",ExpressionUUID->"37030c1e-aff0-4637-8f9e-ca4fe2db7a40"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"HypergraphDataset", "[", "hg", "]"}]], "Input",
 CellChangeTimes->{{3.92279733321402*^9, 3.922797334049519*^9}},
 CellLabel->"In[30]:=",ExpressionUUID->"d24ef874-1d9e-4a6e-a8f7-fc3442ae16ed"],

Cell[BoxData[
 TagBox[
  TagBox[
   DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = <|
    "InitialData" -> <|
      0 -> <|"edges" -> 0., "nodes" -> 0., "cell_weights" -> 1.|>, 
       1 -> <|"edges" -> 0., "nodes" -> 1., "cell_weights" -> 1.|>, 
       2 -> <|"edges" -> 1., "nodes" -> 1., "cell_weights" -> 1.|>, 
       3 -> <|"edges" -> 1., "nodes" -> 2., "cell_weights" -> 1.|>, 
       4 -> <|"edges" -> 2., "nodes" -> 2., "cell_weights" -> 1.|>, 
       5 -> <|"edges" -> 2., "nodes" -> 3., "cell_weights" -> 1.|>, 
       6 -> <|"edges" -> 3., "nodes" -> 3., "cell_weights" -> 1.|>, 
       7 -> <|"edges" -> 3., "nodes" -> 0., "cell_weights" -> 1.|>|>, 
     "AllowEmbedding" -> True, "InitialShape" -> 
     TypeSystem`PackageScope`HeaderShape[<|{All, 
          TypeSystem`PackageScope`KeyDummy[0]} -> 1, {All, "edges"} -> 
        1, {All, "nodes"} -> 1, {All, "cell_weights"} -> 1|>, 
       TypeSystem`PackageScope`Limited[
        TypeSystem`PackageScope`ColumnShape[
         TypeSystem`PackageScope`KeyValueShape[
          TypeSystem`PackageScope`AtomShape[34], 
          TypeSystem`PackageScope`Limited[
           
           TypeSystem`PackageScope`RowShape[<|
            "edges" -> TypeSystem`PackageScope`AtomShape[60], "nodes" -> 
             TypeSystem`PackageScope`AtomShape[60], "cell_weights" -> 
             TypeSystem`PackageScope`AtomShape[60]|>], 
           DirectedInfinity[1], 3, {All}]]], 8, 
        DirectedInfinity[1], {}]], "InitialType" -> TypeSystem`Assoc[
       TypeSystem`Atom[Integer], 
       TypeSystem`Struct[{"edges", "nodes", "cell_weights"}, {
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real]}], 8], "Meta" -> <||>, "RowTarget" -> 20, 
     "ColumnTarget" -> 10, "Shape" -> 
     TypeSystem`PackageScope`HeaderShape[<|{All, 
          TypeSystem`PackageScope`KeyDummy[0]} -> 1, {All, "edges"} -> 
        1, {All, "nodes"} -> 1, {All, "cell_weights"} -> 1|>, 
       TypeSystem`PackageScope`Limited[
        TypeSystem`PackageScope`ColumnShape[
         TypeSystem`PackageScope`KeyValueShape[
          TypeSystem`PackageScope`AtomShape[34], 
          TypeSystem`PackageScope`Limited[
           
           TypeSystem`PackageScope`RowShape[<|
            "edges" -> TypeSystem`PackageScope`AtomShape[60], "nodes" -> 
             TypeSystem`PackageScope`AtomShape[60], "cell_weights" -> 
             TypeSystem`PackageScope`AtomShape[60]|>], 
           DirectedInfinity[1], 3, {All}]]], 8, 
        DirectedInfinity[1], {}]], "Type" -> TypeSystem`Assoc[
       TypeSystem`Atom[Integer], 
       TypeSystem`Struct[{"edges", "nodes", "cell_weights"}, {
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real]}], 8], "Path" -> {}, "DisplayedRowCount" -> 8, 
     "DisplayedColumnCount" -> 3, "DataRowCount" -> 8, "DataColumnCount" -> 3,
      "SortPaths" -> {}, "SortDirections" -> {}, "HiddenItemsMap" -> Null, 
     "UpdateType" -> 1|>, TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
    TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
    DynamicModule[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid$ = Deploy[
        Style[
         Grid[{{
            Item[
             Pane[
              Annotation[
               Mouseover[
                
                Graphics[{}, ImageSize -> 6, BaselinePosition -> 
                 Scaled[-0.15]], 
                Graphics[{
                  GrayLevel[0.6], 
                  
                  Polygon[{{2^Rational[-1, 2], -2^Rational[-1, 2]}, {
                    2^Rational[-1, 2], 2^
                    Rational[-1, 2]}, {-2^Rational[-1, 2], 2^
                    Rational[-1, 2]}, {-2^Rational[-1, 2], -2^
                    Rational[-1, 2]}}]}, ImageSize -> 6, BaselinePosition -> 
                 Scaled[-0.15]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, Keys}, "KeyDummy", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["edges", 
                  Style[
                  "edges", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "edges"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "edges"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["nodes", 
                  Style[
                  "nodes", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "nodes"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "nodes"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["cell_weights", 
                  Style[
                  "cell_weights", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "cell_weights"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "cell_weights"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  RawBoxes["0"], 
                  Style[
                   RawBoxes["0"], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key[0]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[0]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[0], 
                 Key["edges"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[0], 
                 Key["nodes"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["1.0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[0], 
                 Key["cell_weights"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  RawBoxes["1"], 
                  Style[
                   RawBoxes["1"], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key[1]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[1]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[1], 
                 Key["edges"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["1.0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[1], 
                 Key["nodes"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["1.0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[1], 
                 Key["cell_weights"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  RawBoxes["2"], 
                  Style[
                   RawBoxes["2"], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key[2]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[2]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["1.0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[2], 
                 Key["edges"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["1.0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[2], 
                 Key["nodes"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["1.0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[2], 
                 Key["cell_weights"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  RawBoxes["3"], 
                  Style[
                   RawBoxes["3"], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key[3]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[3]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["1.0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[3], 
                 Key["edges"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["2.0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[3], 
                 Key["nodes"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["1.0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[3], 
                 Key["cell_weights"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  RawBoxes["4"], 
                  Style[
                   RawBoxes["4"], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key[4]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[4]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["2.0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[4], 
                 Key["edges"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["2.0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[4], 
                 Key["nodes"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["1.0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[4], 
                 Key["cell_weights"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  RawBoxes["5"], 
                  Style[
                   RawBoxes["5"], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key[5]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[5]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["2.0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[5], 
                 Key["edges"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["3.0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[5], 
                 Key["nodes"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["1.0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[5], 
                 Key["cell_weights"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  RawBoxes["6"], 
                  Style[
                   RawBoxes["6"], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key[6]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[6]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["3.0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[6], 
                 Key["edges"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["3.0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[6], 
                 Key["nodes"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["1.0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[6], 
                 Key["cell_weights"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  RawBoxes["7"], 
                  Style[
                   RawBoxes["7"], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key[7]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[7]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["3.0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[7], 
                 Key["edges"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[7], 
                 Key["nodes"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["1.0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[7], 
                 Key["cell_weights"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}}, 
          BaseStyle -> {
           ContextMenu -> 
            Dynamic[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
              Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                 TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu, True, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger = 
                 TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                 Block[{TypeSystem`NestedGrid`PackagePrivate`$globalScrollPos = \
{TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                   
                   With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    "Show " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    "Hide " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], Nothing]}]]]]], FontFamily -> 
            "Source Sans Pro", FontSize -> 14, FontWeight -> Plain}, Dividers -> 
          All, FrameStyle -> GrayLevel[0.7490196078431373], 
          Spacings -> {0, 0}, Alignment -> Left, 
          BaseStyle -> {
           FontFamily -> "Source Sans Pro", FontSize -> 14, FontWeight -> 
            Plain}], LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> 
         False, ShowAutoStyles -> False]], 
      TypeSystem`NestedGrid`PackagePrivate`initialQ$ = True}, 
     Dynamic[
      TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
         Not[TypeSystem`NestedGrid`PackagePrivate`initialQ$], 
         Module[{
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
           TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
           TypeSystem`NestedGrid`PackagePrivate`datasetData[
            TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid$, 
             TypeSystem`NestedGrid`PackagePrivate`renderGrid[
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
              TypeSystem`NestedGrid`PackagePrivate`$path$$, 
              TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
              TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
             TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
            Not[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
            TypeSystem`NestedGrid`PackagePrivate`renderedGrid$ = 
            TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
       TypeSystem`NestedGrid`PackagePrivate`initialQ$ = False; 
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
       TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
         FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid$], 
         TypeSystem`SparseGrid[
          TypeSystem`H["(data no longer present)"]], 
         TypeSystem`NestedGrid`PackagePrivate`renderedGrid$]], 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
     DynamicModuleValues :> {}], 
    TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
     TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
      TypeSystem`PackageScope`SubViewPathbar[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, 
       TypeSystem`NestedGrid`PackagePrivate`updateState[
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$path$$, 
        TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
        TypeSystem`NestedGrid`PackagePrivate`localHold[
        TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
     TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Dynamic[
     Replace[
      Replace[
      TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
       TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
          Blank[]] -> "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
          Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
           Blank[]], 
          Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
           Blank[]], 
          Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
           Blank[]]] :> (
         Increment[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
         TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
          TypeSystem`NestedGrid`PackagePrivate`path$; 
         TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
          TypeSystem`NestedGrid`PackagePrivate`pathType$; 
         TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
          TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
         TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
          TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
         TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
          TypeSystem`NestedGrid`PackagePrivate`path$, 
           TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
        Spacer[10], Blank[] :> Spacer[10]}], 
      Pattern[TypeSystem`NestedGrid`PackagePrivate`bar, 
        Except[
         Alternatives[
          Blank[Spacer], ""]]] :> 
      TypeSystem`NestedGrid`PackagePrivate`makeFramedPathbar[
       TypeSystem`NestedGrid`PackagePrivate`bar]], 
     TrackedSymbols :> {
      TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], 
    TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
    DynamicWrapperBox[
     DynamicBox[ToBoxes[
       Dataset`DatasetContent[
       2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
        "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], "State" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], "VPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], "HPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], "TopBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], "BottomBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], "OutputID" -> 
        Hold[
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], StandardForm],
      ImageSizeCache->{
       259.83034375, {117.32431030273438`, 123.05624389648438`}},
      TrackedSymbols:>{
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
     MouseAnnotation[],
     ImageSizeCache->{
      259.83034375, {117.32431030273438`, 123.05624389648438`}}],
    BaseStyle->{LineBreakWithin -> False},
    DynamicModuleValues:>{},
    Initialization:>(TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = 
     CreateUUID[]),
    UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  Dataset`InterpretDataset[1],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.922797334355402*^9, 3.922797783493793*^9, 
  3.9228012927330027`*^9, 3.922970308838196*^9},
 CellLabel->"Out[30]=",ExpressionUUID->"63851126-43d4-46e0-9045-195d0ba1df16"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"HypergraphDataset", "[", "hg", "]"}], "[", 
       RowBox[{"All", ",", 
        RowBox[{"{", 
         RowBox[{"\"\<edges\>\"", ",", "\"\<nodes\>\""}], "}"}]}], "]"}], "//",
       "Normal"}], "//", "Values"}], "//", "Values"}], "//", "Round"}], "//", 
  
  RowBox[{"ResourceFunction", "[", "\"\<HypergraphPlot\>\"", "]"}]}]], "Input",\

 CellChangeTimes->{{3.92279733321402*^9, 3.922797334049519*^9}, {
  3.92279744260458*^9, 3.922797518559065*^9}},
 CellLabel->"In[19]:=",ExpressionUUID->"4ef14c39-ced9-4d69-98ff-7f858205ac37"],

Cell[BoxData[
 GraphicsBox[{{{
     {RGBColor[0.25826842857142857`, 0.3783777142857143, 0.4839005714285714], 
      Opacity[0.2], 
      FilledCurveBox[
       BSplineCurve[{{0.4753128261097262, 
        2.720869668280587}, {-0.19061899000542953`, 
        1.902461761341988}, {-0.19061899000542953`, 1.302461761341988}, {
        0.3447395311589508, 0.37025437360205943`}, {0.9447395311589508, 
        0.37025437360205943`}, {0.9447395311589508, 0.9702543736020595}, {
        0.6113846607196611, 1.550717485101084}, {1.0753128261097262`, 
        2.120869668280587}, {1.0753128261097262`, 2.720869668280587}}, 
        SplineClosed -> True]]}, 
     {RGBColor[0.2876055714285714, 0.46943485714285715`, 0.2876237142857143], 
      Opacity[0.2], 
      FilledCurveBox[
       BSplineCurve[{{0.4753128261097262, 2.120869668280587}, {
        1.4921109635152665`, 1.965651165547485}, {1.983972833391819, 
        0.9970232909250205}, {2.583972833391819, 0.9970232909250205}, {
        2.583972833391819, 1.5970232909250206`}, {2.0921109635152666`, 
        2.565651165547485}, {1.0753128261097262`, 2.720869668280587}, {
        0.4753128261097262, 2.720869668280587}}, SplineClosed -> True]]}, 
     {RGBColor[0.4759574285714286, 0.589047, 0.2482417142857143], Opacity[
      0.2], FilledCurveBox[
       BSplineCurve[{{0.3447395311589508, 0.37025437360205943`}, {
        0.9447395311589508, 0.37025437360205943`}, {0.9447395311589508, 
        0.9702543736020595}, {0.3447395311589508, 0.9702543736020595}}, 
        SplineClosed -> True]]}, 
     {RGBColor[0.759271, 0.7397234285714285, 0.29226885714285716`], Opacity[
      0.2], FilledCurveBox[
       BSplineCurve[{{0.9447395311589508, 0.37025437360205943`}, {
        1.7785752681298088`, 0.6822971345354607}, {2.583972833391819, 
        0.9970232909250205}, {2.583972833391819, 1.5970232909250206`}, {
        1.983972833391819, 1.5970232909250206`}, {1.1785752681298087`, 
        1.2822971345354608`}, {0.3447395311589508, 0.9702543736020595}, {
        0.3447395311589508, 0.37025437360205943`}}, SplineClosed -> True]]}, 
     {RGBColor[0.8685795714285713, 0.7007091428571428, 0.32354785714285716`], 
      Opacity[0.2], 
      FilledCurveBox[
       BSplineCurve[{{1.3607382748802146`, 0.07921477089950385}, {
        1.9607382748802147`, 0.07921477089950385}, {2.583972833391819, 
        0.9970232909250205}, {2.583972833391819, 1.5970232909250206`}, {
        1.983972833391819, 1.5970232909250206`}, {1.4584433551242846`, 
        0.82310049397613}, {0.9447395311589508, 0.9702543736020595}, {
        0.3447395311589508, 0.9702543736020595}, {0.3447395311589508, 
        0.37025437360205943`}}, SplineClosed -> True]]}, 
     {RGBColor[0.7654144285714286, 0.35909685714285716`, 0.2620315714285714], 
      Opacity[0.2], 
      FilledCurveBox[
       BSplineCurve[{{1.983972833391819, 0.9970232909250205}, {
        2.583972833391819, 0.9970232909250205}, {2.583972833391819, 
        1.5970232909250206`}, {1.983972833391819, 1.5970232909250206`}}, 
        SplineClosed -> True]]}, 
     {RGBColor[0.72987, 0.239399, 0.230961], Opacity[0.2], 
      FilledCurveBox[
       BSplineCurve[{{1.983972833391819, 0.9970232909250205}, {
        2.8270141126327855`, 0.5111735329483897}, {3.6864413682073476`, 
        0.22345208195555005`}, {4.286441368207347, 0.22345208195555005`}, {
        4.286441368207347, 0.82345208195555}, {3.427014112632785, 
        1.1111735329483898`}, {2.583972833391819, 1.5970232909250206`}, {
        1.983972833391819, 1.5970232909250206`}}, SplineClosed -> True]]}}, {
     {RGBColor[0.25826842857142857`, 0.3783777142857143, 0.4839005714285714], 
      Thickness[0.01], 
      BSplineCurveBox[{{0.7753128261097262, 2.420869668280587}, {
       0.10938100999457046`, 1.602461761341988}, {0.6447395311589508, 
       0.6702543736020594}},
       SplineWeights->{1, 6, 1}]}, 
     {RGBColor[0.2876055714285714, 0.46943485714285715`, 0.2876237142857143], 
      Thickness[0.01], 
      BSplineCurveBox[{{0.7753128261097262, 2.420869668280587}, {
       1.7921109635152666`, 2.265651165547485}, {2.283972833391819, 
       1.2970232909250206`}},
       SplineWeights->{1, 6, 1}]}, 
     {RGBColor[0.4759574285714286, 0.589047, 0.2482417142857143], Thickness[
      0.01]}, 
     {RGBColor[0.759271, 0.7397234285714285, 0.29226885714285716`], Thickness[
      0.01], 
      BSplineCurveBox[{{0.6447395311589508, 0.6702543736020594}, {
       1.4785752681298088`, 0.9822971345354607}, {2.283972833391819, 
       1.2970232909250206`}},
       SplineWeights->{1, 6, 1}]}, 
     {RGBColor[0.8685795714285713, 0.7007091428571428, 0.32354785714285716`], 
      Thickness[0.01], 
      BSplineCurveBox[{{2.283972833391819, 1.2970232909250206`}, {
       1.6607382748802146`, 0.37921477089950384`}, {0.6447395311589508, 
       0.6702543736020594}},
       SplineWeights->{1, 6, 1}]}, 
     {RGBColor[0.7654144285714286, 0.35909685714285716`, 0.2620315714285714], 
      Thickness[0.01]}, 
     {RGBColor[0.72987, 0.239399, 0.230961], Thickness[0.01], 
      BSplineCurveBox[{{2.283972833391819, 1.2970232909250206`}, {
       3.1270141126327853`, 0.8111735329483898}, {3.9864413682073474`, 
       0.52345208195555}},
       SplineWeights->{1, 6, 1}]}}}, 
   NamespaceBox[{{}, 
     {GrayLevel[1], EdgeForm[GrayLevel[0]], 
      TagBox[{
        TagBox[DiskBox[{0.7753128261097262, 2.420869668280587}, 0.15],
         "DynamicName",
         BoxID -> "VertexID$1"], InsetBox[
         StyleBox["0",
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontColor->GrayLevel[0]], DynamicLocation[
         "VertexID$1", None, Center],
         BaseStyle->"Graphics"]},
       "DynamicName",
       BoxID -> "VertexLabelID$1"], 
      TagBox[{
        TagBox[DiskBox[{0.6447395311589508, 0.6702543736020594}, 0.15],
         "DynamicName",
         BoxID -> "VertexID$2"], InsetBox[
         StyleBox["1",
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontColor->GrayLevel[0]], DynamicLocation[
         "VertexID$2", None, Center],
         BaseStyle->"Graphics"]},
       "DynamicName",
       BoxID -> "VertexLabelID$2"], 
      TagBox[{
        TagBox[DiskBox[{2.283972833391819, 1.2970232909250206`}, 0.15],
         "DynamicName",
         BoxID -> "VertexID$3"], InsetBox[
         StyleBox["2",
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontColor->GrayLevel[0]], DynamicLocation[
         "VertexID$3", None, Center],
         BaseStyle->"Graphics"]},
       "DynamicName",
       BoxID -> "VertexLabelID$3"], 
      TagBox[{
        TagBox[DiskBox[{3.9864413682073474`, 0.52345208195555}, 0.15],
         "DynamicName",
         BoxID -> "VertexID$4"], InsetBox[
         StyleBox["3",
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontColor->GrayLevel[0]], DynamicLocation[
         "VertexID$4", None, Center],
         BaseStyle->"Graphics"]},
       "DynamicName",
       BoxID -> "VertexLabelID$4"]}}]}]], "Output",
 CellChangeTimes->{{3.9227974668796387`*^9, 3.922797519712042*^9}, 
   3.9227977840333967`*^9, 3.9228012939153347`*^9},
 CellLabel->"Out[19]=",ExpressionUUID->"1fb287d7-6b96-410f-8886-5a2e10472ff5"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"HypergraphDegree", "[", "hg", "]"}]], "Input",
 CellChangeTimes->{{3.9227973419872913`*^9, 3.922797342647338*^9}},
 CellLabel->"In[20]:=",ExpressionUUID->"c897d70c-a0f1-44d4-bea5-ceecb7ce9ec4"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["Failure",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            FrameBox[
             StyleBox["\"\[WarningSign]\"", 
              Directive["Message", 35], StripOnInput -> False], 
             ContentPadding -> False, FrameStyle -> None, 
             FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
            GridBox[{{
               TagBox[
                GridBox[{{
                   TagBox["\"Message: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                   "\"Hypergraph.degree() missing 1 required positional \
argument: 'node'\"", "SummaryItem"]}}, 
                 GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                 GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                 GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}, {
               TagBox[
                GridBox[{{
                   TagBox["\"Tag: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["\"PythonError\"", "SummaryItem"]}}, 
                 GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                 GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                 GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            FrameBox[
             StyleBox["\"\[WarningSign]\"", 
              Directive["Message", 35], StripOnInput -> False], 
             ContentPadding -> False, FrameStyle -> None, 
             FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
            GridBox[{{
               TagBox[
                GridBox[{{
                   TagBox["\"Message: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                   "\"Hypergraph.degree() missing 1 required positional \
argument: 'node'\"", "SummaryItem"]}}, 
                 GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                 GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                 GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}, {
               TagBox[
                GridBox[{{
                   TagBox["\"Tag: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["\"PythonError\"", "SummaryItem"]}}, 
                 GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                 GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                 GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}, {
               RowBox[{
                 TagBox[
                  TemplateBox[{"\"FailureCode\"", "\": \""}, "RowDefault"], 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox[
                  TagBox["\"TypeError\"", HoldForm], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                  TemplateBox[{"\"Traceback\"", "\": \""}, "RowDefault"], 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   TagBox[
                    DynamicModuleBox[{Typeset`var$$ = True}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    
                    TemplateBox[{
                    "\"TypeError\"", "\" \"", 
                    "\"Hypergraph.degree() missing 1 required positional \
argument: 'node'\""}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    
                    TemplateBox[{
                    "\"TypeError\"", "\" \"", 
                    "\"Hypergraph.degree() missing 1 required positional \
argument: 'node'\""}, "RowDefault"]}, {"", 
                    PaneBox[
                    StyleBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/language/\
decorators.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/language/\
decorators.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/language/\
decorators.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"safe_wl_execute\""}, 
                    "RowDefault"]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/language/\
decorators.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/language/\
decorators.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/language/\
decorators.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"safe_wl_execute\""}, 
                    "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{
                    "\"  14.      \\\"wl\\\": \
b'Failure[\\\"PythonFailure\\\", <|\\\"MessageTemplate\\\" -> \\\"Unexpected \
error occurred.\\\"|>]',\""}, {"\"  15.  }\""}, {"\"  16.  \""}, {
                    "\"  17.  \""}, {
                    "\"  18.  def safe_wl_execute(function, args=(), opts={}, \
export_opts={}, exception_class=None):\""}, {"\"  19.  \""}, {
                    "\"  20.      try:\""}, {
                    ItemBox[
                    "\"  21.          return export(function(*args, **opts), \
**export_opts)\"", Background -> RGBColor[1, 1, 0.85], StripOnInput -> 
                    False]}, {
                    "\"  22.      except Exception as export_exception:\""}, {
                    "\"  23.          try:\""}, {
                    "\"  24.              try:\""}, {"\"  25.  \""}, {
                    "\"  26.                  # The user can provide an \
exception class, and it can be broken, in which case we are running \
another\""}, {
                    "\"  27.                  # try / except to return errors \
that are happening during class serialization\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\"function\"", 
                    "\"<function handle_message at 0x105bc8fe0>\""}, {
                    "\"args\"", 
                    "\"(<zmq.Socket(zmq.PAIR) at 0x105ba8c20>,)\""}, {
                    "\"opts\"", 
                    "\"{'consumer': <ExternalEvaluateConsumer globals=4 \
objects=20>}\""}, {"\"export_opts\"", 
                    "\"{'object_processor': <function \
start_zmq_loop.<locals>.<lambda> at 0x104e509a0>, 'target_format': \
'wxf'}\""}, {"\"exception_class\"", "\"None\""}, {"\"export_exception\"", 
                    "\"Hypergraph.degree() missing 1 required positional \
argument: 'node'\""}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {"Columns" -> {{
                    Null}}, "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"function", 
                    "<function handle_message at 0x105bc8fe0>"}, {
                    "args", "(<zmq.Socket(zmq.PAIR) at 0x105ba8c20>,)"}, {
                    "opts", 
                    "{'consumer': <ExternalEvaluateConsumer globals=4 \
objects=20>}"}, {"export_opts", 
                    "{'object_processor': <function \
start_zmq_loop.<locals>.<lambda> at 0x104e509a0>, 'target_format': 'wxf'}"}, {
                    "exception_class", "None"}, {"export_exception", 
                    "Hypergraph.degree() missing 1 required positional \
argument: 'node'"}}, Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/language/\
decorators.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/language/\
decorators.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/language/\
decorators.py"]], Appearance -> "Frameless"], " in ", "safe_wl_execute"}], 
                    Column[{
                    
                    Column[{
                    "  14.      \"wl\": b'Failure[\"PythonFailure\", \
<|\"MessageTemplate\" -> \"Unexpected error occurred.\"|>]',", "  15.  }", 
                    "  16.  ", "  17.  ", 
                    "  18.  def safe_wl_execute(function, args=(), opts={}, \
export_opts={}, exception_class=None):", "  19.  ", "  20.      try:", 
                    Item[
                    "  21.          return export(function(*args, **opts), \
**export_opts)", Background -> LightYellow], 
                    "  22.      except Exception as export_exception:", 
                    "  23.          try:", "  24.              try:", 
                    "  25.  ", 
                    "  26.                  # The user can provide an \
exception class, and it can be broken, in which case we are running another", 
                    "  27.                  # try / except to return errors \
that are happening during class serialization"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"function", 
                    "<function handle_message at 0x105bc8fe0>"}, {
                    "args", "(<zmq.Socket(zmq.PAIR) at 0x105ba8c20>,)"}, {
                    "opts", 
                    "{'consumer': <ExternalEvaluateConsumer globals=4 \
objects=20>}"}, {"export_opts", 
                    "{'object_processor': <function \
start_zmq_loop.<locals>.<lambda> at 0x104e509a0>, 'target_format': 'wxf'}"}, {
                    "exception_class", "None"}, {
                    "export_exception", 
                    "Hypergraph.degree() missing 1 required positional \
argument: 'node'"}}, Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless", Evaluator -> Automatic, 
                    Method -> "Preemptive"], "\" in \"", 
                    "\"handle_message\""}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless", Evaluator -> Automatic, 
                    Method -> "Preemptive"], "\" in \"", 
                    "\"handle_message\""}, "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{
                    "\" 350.          self.socket.send(zmq.Frame(bytes))\""}, \
{"\" 351.  \""}, {"\" 352.      def send_side_effect(self, expr):\""}, {
                    "\" 353.          \
self.write(export(self.keep_listening(expr), target_format=\\\"wxf\\\"))\""}, \
{"\" 354.  \""}, {"\" 355.  \""}, {
                    "\" 356.  def handle_message(socket, consumer):\""}, {
                    ItemBox[
                    "\" 357.      result = \
binary_deserialize(socket.recv(copy=False).buffer, consumer=consumer)\"", 
                    Background -> RGBColor[1, 1, 0.85], StripOnInput -> 
                    False]}, {"\" 358.  \""}, {
                    "\" 359.      sys.stdout.flush()\""}, {
                    "\" 360.      return result\""}, {"\" 361.  \""}, {
                    "\" 362.  \""}, {
                    "\" 363.  def start_zmq_instance(port=None, \
write_to_stdout=True, **opts):\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\"socket\"", 
                    "\"<zmq.Socket(zmq.PAIR) at 0x105ba8c20>\""}, {
                    "\"consumer\"", 
                    "\"<ExternalEvaluateConsumer globals=4 objects=20>\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Null}}, 
                    "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"socket", 
                    "<zmq.Socket(zmq.PAIR) at 0x105ba8c20>"}, {
                    "consumer", 
                    "<ExternalEvaluateConsumer globals=4 objects=20>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless"], " in ", 
                    "handle_message"}], 
                    Column[{
                    
                    Column[{
                    " 350.          self.socket.send(zmq.Frame(bytes))", 
                    " 351.  ", " 352.      def send_side_effect(self, expr):",
                     " 353.          \
self.write(export(self.keep_listening(expr), target_format=\"wxf\"))", 
                    " 354.  ", " 355.  ", 
                    " 356.  def handle_message(socket, consumer):", 
                    Item[
                    " 357.      result = \
binary_deserialize(socket.recv(copy=False).buffer, consumer=consumer)", 
                    Background -> LightYellow], " 358.  ", 
                    " 359.      sys.stdout.flush()", 
                    " 360.      return result", " 361.  ", " 362.  ", 
                    " 363.  def start_zmq_instance(port=None, \
write_to_stdout=True, **opts):"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"socket", 
                    "<zmq.Socket(zmq.PAIR) at 0x105ba8c20>"}, {
                    "consumer", 
                    "<ExternalEvaluateConsumer globals=4 objects=20>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
__init__.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
__init__.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
__init__.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"binary_deserialize\""}, 
                    "RowDefault"]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
__init__.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
__init__.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
__init__.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"binary_deserialize\""}, 
                    "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{"\"  33.  \""}, {
                    "\"  34.      \\\"\\\"\\\"\""}, {
                    "\"  35.      parser = WXFParser(wxf_input)\""}, {
                    "\"  36.      if consumer is None:\""}, {
                    "\"  37.          consumer = WXFConsumerNumpy()\""}, {
                    "\"  38.  \""}, {"\"  39.      try:\""}, {
                    ItemBox[
                    "\"  40.          o = \
consumer.next_expression(parser.tokens(), **kwargs)\"", Background -> 
                    RGBColor[1, 1, 0.85], StripOnInput -> False]}, {
                    "\"  41.      except StopIteration:\""}, {
                    "\"  42.          raise WolframParserException(\""}, {
                    "\"  43.              \\\"Input data does not represent a \
valid expression in WXF format. Expecting more input data.\\\"\""}, {
                    "\"  44.          )\""}, {
                    "\"  45.      if not \
parser.context.is_valid_final_state():\""}, {
                    "\"  46.          raise WolframParserException(\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\"wxf_input\"", 
                    "\"8:f\.02s0ExternalEvaluate`Private`\
ExternalEvaluateCommandS\\nReturnTypef\.02s\.04Listf\.02s0ExternalEvaluate`\
Private`ExternalEvaluateCommandS\.04Callf\.02s\.04Listf\.02s0ExternalEvaluate`\
Private`ExternalEvaluateCommandS\.05Fetchf\.01\.01\.01\.01\.01\.01\.01\.01s\
\.04ListL \
>U\.01\.01\.01\.01\.01\.01\.01\.01\.00\.00\.00f\.02s0ExternalEvaluate`Private`\
ExternalEvaluateCommandS\.05Fetchf\.01\.01\.01\.01\.01\.01\.01\.01s\.04ListLP-\
?U\.01\.01\.01\.01\.01\.01\.01\.01\.00\.00\.00S\\nExpression\""}, {
                    "\"consumer\"", 
                    "\"<ExternalEvaluateConsumer globals=4 objects=20>\""}, {
                    "\"kwargs\"", "\"{}\""}, {"\"parser\"", 
                    "\"<wolframclient.deserializers.wxf.wxfparser.WXFParser \
object at 0x15561ac10>\""}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {"Columns" -> {{
                    Null}}, "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"wxf_input", 
                    "8:f\.02s0ExternalEvaluate`Private`\
ExternalEvaluateCommandS\n\
ReturnTypef\.02s\.04Listf\.02s0ExternalEvaluate`Private`\
ExternalEvaluateCommandS\.04Callf\.02s\.04Listf\.02s0ExternalEvaluate`Private`\
ExternalEvaluateCommandS\.05Fetchf\.01\.01\.01\.01\.01\.01\.01\.01s\.04ListL \
>U\.01\.01\.01\.01\.01\.01\.01\.01\.00\.00\.00f\.02s0ExternalEvaluate`Private`\
ExternalEvaluateCommandS\.05Fetchf\.01\.01\.01\.01\.01\.01\.01\.01s\.04ListLP-\
?U\.01\.01\.01\.01\.01\.01\.01\.01\.00\.00\.00S\nExpression"}, {
                    "consumer", 
                    "<ExternalEvaluateConsumer globals=4 objects=20>"}, {
                    "kwargs", "{}"}, {"parser", 
                    "<wolframclient.deserializers.wxf.wxfparser.WXFParser \
object at 0x15561ac10>"}}, Background -> {Null, {LightGray}}, Alignment -> 
                    Left, Frame -> LightGray]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
__init__.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
__init__.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
__init__.py"]], Appearance -> "Frameless"], " in ", "binary_deserialize"}], 
                    Column[{
                    
                    Column[{"  33.  ", "  34.      \"\"\"", 
                    "  35.      parser = WXFParser(wxf_input)", 
                    "  36.      if consumer is None:", 
                    "  37.          consumer = WXFConsumerNumpy()", "  38.  ",
                     "  39.      try:", 
                    Item[
                    "  40.          o = \
consumer.next_expression(parser.tokens(), **kwargs)", Background -> 
                    LightYellow], "  41.      except StopIteration:", 
                    "  42.          raise WolframParserException(", 
                    "  43.              \"Input data does not represent a \
valid expression in WXF format. Expecting more input data.\"", 
                    "  44.          )", 
                    "  45.      if not \
parser.context.is_valid_final_state():", 
                    "  46.          raise WolframParserException("}, 
                    Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"wxf_input", 
                    "8:f\.02s0ExternalEvaluate`Private`\
ExternalEvaluateCommandS\n\
ReturnTypef\.02s\.04Listf\.02s0ExternalEvaluate`Private`\
ExternalEvaluateCommandS\.04Callf\.02s\.04Listf\.02s0ExternalEvaluate`Private`\
ExternalEvaluateCommandS\.05Fetchf\.01\.01\.01\.01\.01\.01\.01\.01s\.04ListL \
>U\.01\.01\.01\.01\.01\.01\.01\.01\.00\.00\.00f\.02s0ExternalEvaluate`Private`\
ExternalEvaluateCommandS\.05Fetchf\.01\.01\.01\.01\.01\.01\.01\.01s\.04ListLP-\
?U\.01\.01\.01\.01\.01\.01\.01\.01\.00\.00\.00S\nExpression"}, {
                    "consumer", 
                    "<ExternalEvaluateConsumer globals=4 objects=20>"}, {
                    "kwargs", "{}"}, {"parser", 
                    "<wolframclient.deserializers.wxf.wxfparser.WXFParser \
object at 0x15561ac10>"}}, Background -> {Null, {LightGray}}, Alignment -> 
                    Left, Frame -> LightGray]}]}]}, False]], 
                    DynamicModuleValues -> Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"next_expression\""}, 
                    "RowDefault"]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"next_expression\""}, 
                    "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{
                    "\"  69.          constants.WXF_CONSTANTS.RuleDelayed: \\\
\"consume_rule_delayed\\\",\""}, {"\"  70.      }\""}, {"\"  71.  \""}, {
                    "\"  72.      def next_expression(self, tokens, \
**kwargs):\""}, {
                    "\"  73.          \\\"\\\"\\\"Deserialize the next \
expression starting at the next token yield by `tokens`.\\\"\\\"\\\"\""}, {
                    "\"  74.          token = next(tokens)\""}, {
                    "\"  75.          consumer = \
self._consumer_from_type(token.wxf_type)\""}, {
                    ItemBox[
                    "\"  76.          return consumer(token, tokens, \
**kwargs)\"", Background -> RGBColor[1, 1, 0.85], StripOnInput -> False]}, {
                    "\"  77.  \""}, {
                    "\"  78.      def _consumer_from_type(self, \
wxf_type):\""}, {"\"  79.          try:\""}, {
                    "\"  80.              func = self._mapping[wxf_type]\""}, \
{"\"  81.          except KeyError:\""}, {
                    "\"  82.              raise WolframParserException(\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\"self\"", 
                    "\"<ExternalEvaluateConsumer globals=4 objects=20>\""}, {
                    "\"tokens\"", 
                    "\"<generator object WXFParser.tokens at \
0x1555ec100>\""}, {"\"kwargs\"", "\"{}\""}, {"\"token\"", 
                    "\"WXFToken<b'f', data=None, len=2>\""}, {"\"consumer\"", 
                    "\"<bound method \
ExternalEvaluateConsumer.consume_function of <ExternalEvaluateConsumer \
globals=4 objects=20>>\""}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {"Columns" -> {{
                    Null}}, "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<ExternalEvaluateConsumer globals=4 objects=20>"}, {
                    "tokens", 
                    "<generator object WXFParser.tokens at 0x1555ec100>"}, {
                    "kwargs", "{}"}, {"token", 
                    "WXFToken<b'f', data=None, len=2>"}, {
                    "consumer", 
                    "<bound method ExternalEvaluateConsumer.consume_function \
of <ExternalEvaluateConsumer globals=4 objects=20>>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless"], " in ", "next_expression"}], 
                    Column[{
                    
                    Column[{
                    "  69.          constants.WXF_CONSTANTS.RuleDelayed: \
\"consume_rule_delayed\",", "  70.      }", "  71.  ", 
                    "  72.      def next_expression(self, tokens, **kwargs):",
                     "  73.          \"\"\"Deserialize the next expression \
starting at the next token yield by `tokens`.\"\"\"", 
                    "  74.          token = next(tokens)", 
                    "  75.          consumer = \
self._consumer_from_type(token.wxf_type)", 
                    Item[
                    "  76.          return consumer(token, tokens, **kwargs)",
                     Background -> LightYellow], "  77.  ", 
                    "  78.      def _consumer_from_type(self, wxf_type):", 
                    "  79.          try:", 
                    "  80.              func = self._mapping[wxf_type]", 
                    "  81.          except KeyError:", 
                    "  82.              raise WolframParserException("}, 
                    Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<ExternalEvaluateConsumer globals=4 objects=20>"}, {
                    "tokens", 
                    "<generator object WXFParser.tokens at 0x1555ec100>"}, {
                    "kwargs", "{}"}, {"token", 
                    "WXFToken<b'f', data=None, len=2>"}, {
                    "consumer", 
                    "<bound method ExternalEvaluateConsumer.consume_function \
of <ExternalEvaluateConsumer globals=4 objects=20>>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless", Evaluator -> Automatic, 
                    Method -> "Preemptive"], "\" in \"", 
                    "\"consume_function\""}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless", Evaluator -> Automatic, 
                    Method -> "Preemptive"], "\" in \"", 
                    "\"consume_function\""}, "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{"\" 319.  \""}, {
                    "\" 320.      def __init__(self, routes_registry={}, \
objects_registry={}, globals_registry={}):\""}, {
                    "\" 321.          self.objects_registry = \
registry(objects_registry)\""}, {
                    "\" 322.          self.globals_registry = \
registry(globals_registry)\""}, {
                    "\" 323.          self.routes_registry = \
registry(self.builtin_routes, **routes_registry)\""}, {"\" 324.  \""}, {
                    "\" 325.      def consume_function(self, *args, \
**kwargs):\""}, {
                    ItemBox[
                    "\" 326.          expr = super().consume_function(*args, \
**kwargs)\"", Background -> RGBColor[1, 1, 0.85], StripOnInput -> False]}, {
                    "\" 327.  \""}, {
                    "\" 328.          if check_wl_symbol(expr, \
self.hook_symbol):\""}, {
                    "\" 329.              assert len(expr.args) == 2\""}, {
                    "\" 330.              return \
self.dispatch_wl_object(*expr.args)\""}, {"\" 331.  \""}, {
                    "\" 332.          return expr\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\"self\"", 
                    "\"<ExternalEvaluateConsumer globals=4 objects=20>\""}, {
                    "\"args\"", 
                    "\"(<wolframclient.deserializers.wxf.wxfparser.WXFToken \
object at 0x155652200>, <generator object WXFParser.tokens at \
0x1555ec100>)\""}, {"\"kwargs\"", "\"{}\""}, {"\"__class__\"", 
                    "\"<class \
'wolframclient.utils.externalevaluate.ExternalEvaluateConsumer'>\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Null}}, 
                    "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<ExternalEvaluateConsumer globals=4 objects=20>"}, {
                    "args", 
                    "(<wolframclient.deserializers.wxf.wxfparser.WXFToken \
object at 0x155652200>, <generator object WXFParser.tokens at \
0x1555ec100>)"}, {"kwargs", "{}"}, {"__class__", 
                    "<class \
'wolframclient.utils.externalevaluate.ExternalEvaluateConsumer'>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless"], " in ", 
                    "consume_function"}], 
                    Column[{
                    
                    Column[{" 319.  ", 
                    " 320.      def __init__(self, routes_registry={}, \
objects_registry={}, globals_registry={}):", 
                    " 321.          self.objects_registry = \
registry(objects_registry)", 
                    " 322.          self.globals_registry = \
registry(globals_registry)", 
                    " 323.          self.routes_registry = \
registry(self.builtin_routes, **routes_registry)", " 324.  ", 
                    " 325.      def consume_function(self, *args, **kwargs):", 
                    Item[
                    " 326.          expr = super().consume_function(*args, \
**kwargs)", Background -> LightYellow], " 327.  ", 
                    " 328.          if check_wl_symbol(expr, \
self.hook_symbol):", " 329.              assert len(expr.args) == 2", 
                    " 330.              return \
self.dispatch_wl_object(*expr.args)", " 331.  ", 
                    " 332.          return expr"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<ExternalEvaluateConsumer globals=4 objects=20>"}, {
                    "args", 
                    "(<wolframclient.deserializers.wxf.wxfparser.WXFToken \
object at 0x155652200>, <generator object WXFParser.tokens at \
0x1555ec100>)"}, {"kwargs", "{}"}, {"__class__", 
                    "<class \
'wolframclient.utils.externalevaluate.ExternalEvaluateConsumer'>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"consume_function\""}, 
                    "RowDefault"]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"consume_function\""}, 
                    "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{
                    "\"  94.          Return a :class:`list` if the head is \
symbol `List`, otherwise returns the result of \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`\""}, {"\"  95.          applied to the head and arguments.\""}, {
                    "\"  96.  \""}, {
                    "\"  97.          Usually custom parsing rules target \
Functions, but not List. To do so, it is recommended to override\""}, {
                    "\"  98.          \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`.\""}, {"\"  99.          \\\"\\\"\\\"\""}, {
                    "\" 100.          head = self.next_expression(tokens, \
**kwargs)\""}, {
                    ItemBox["\" 101.          args = tuple(\"", Background -> 
                    RGBColor[1, 1, 0.85], StripOnInput -> False]}, {
                    "\" 102.              self.next_expression(tokens, \
**kwargs) for i in range(current_token.length)\""}, {
                    "\" 103.          )\""}, {
                    "\" 104.          if head == self._LIST:\""}, {
                    "\" 105.              return args\""}, {
                    "\" 106.          else:\""}, {
                    "\" 107.              return self.build_function(head, \
args, **kwargs)\""}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\"self\"", 
                    "\"<ExternalEvaluateConsumer globals=4 objects=20>\""}, {
                    "\"current_token\"", 
                    "\"WXFToken<b'f', data=None, len=2>\""}, {"\"tokens\"", 
                    "\"<generator object WXFParser.tokens at \
0x1555ec100>\""}, {"\"kwargs\"", "\"{}\""}, {"\"head\"", 
                    "\"ExternalEvaluate`Private`ExternalEvaluateCommand\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Null}}, 
                    "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<ExternalEvaluateConsumer globals=4 objects=20>"}, {
                    "current_token", "WXFToken<b'f', data=None, len=2>"}, {
                    "tokens", 
                    "<generator object WXFParser.tokens at 0x1555ec100>"}, {
                    "kwargs", "{}"}, {"head", 
                    "ExternalEvaluate`Private`ExternalEvaluateCommand"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless"], " in ", "consume_function"}], 
                    Column[{
                    
                    Column[{
                    "  94.          Return a :class:`list` if the head is \
symbol `List`, otherwise returns the result of \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`", "  95.          applied to the head and arguments.", "  96.  ", 
                    "  97.          Usually custom parsing rules target \
Functions, but not List. To do so, it is recommended to override", 
                    "  98.          \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`.", "  99.          \"\"\"", 
                    " 100.          head = self.next_expression(tokens, \
**kwargs)", 
                    Item[" 101.          args = tuple(", Background -> 
                    LightYellow], 
                    " 102.              self.next_expression(tokens, \
**kwargs) for i in range(current_token.length)", " 103.          )", 
                    " 104.          if head == self._LIST:", 
                    " 105.              return args", " 106.          else:", 
                    " 107.              return self.build_function(head, \
args, **kwargs)"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<ExternalEvaluateConsumer globals=4 objects=20>"}, {
                    "current_token", "WXFToken<b'f', data=None, len=2>"}, {
                    "tokens", 
                    "<generator object WXFParser.tokens at 0x1555ec100>"}, {
                    "kwargs", "{}"}, {"head", 
                    "ExternalEvaluate`Private`ExternalEvaluateCommand"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"<genexpr>\""}, 
                    "RowDefault"]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"<genexpr>\""}, 
                    "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{
                    "\"  95.          applied to the head and arguments.\""}, \
{"\"  96.  \""}, {
                    "\"  97.          Usually custom parsing rules target \
Functions, but not List. To do so, it is recommended to override\""}, {
                    "\"  98.          \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`.\""}, {"\"  99.          \\\"\\\"\\\"\""}, {
                    "\" 100.          head = self.next_expression(tokens, \
**kwargs)\""}, {"\" 101.          args = tuple(\""}, {
                    ItemBox[
                    "\" 102.              self.next_expression(tokens, \
**kwargs) for i in range(current_token.length)\"", Background -> 
                    RGBColor[1, 1, 0.85], StripOnInput -> False]}, {
                    "\" 103.          )\""}, {
                    "\" 104.          if head == self._LIST:\""}, {
                    "\" 105.              return args\""}, {
                    "\" 106.          else:\""}, {
                    "\" 107.              return self.build_function(head, \
args, **kwargs)\""}, {"\" 108.  \""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\".0\"", 
                    "\"<range_iterator object at 0x155631f80>\""}, {
                    "\"i\"", "\"1\""}, {"\"kwargs\"", "\"{}\""}, {
                    "\"self\"", 
                    "\"<ExternalEvaluateConsumer globals=4 objects=20>\""}, {
                    "\"tokens\"", 
                    "\"<generator object WXFParser.tokens at \
0x1555ec100>\""}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Null}}, 
                    "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {".0", 
                    "<range_iterator object at 0x155631f80>"}, {"i", "1"}, {
                    "kwargs", "{}"}, {"self", 
                    "<ExternalEvaluateConsumer globals=4 objects=20>"}, {
                    "tokens", 
                    "<generator object WXFParser.tokens at 0x1555ec100>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless"], " in ", "<genexpr>"}], 
                    Column[{
                    
                    Column[{
                    "  95.          applied to the head and arguments.", 
                    "  96.  ", 
                    "  97.          Usually custom parsing rules target \
Functions, but not List. To do so, it is recommended to override", 
                    "  98.          \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`.", "  99.          \"\"\"", 
                    " 100.          head = self.next_expression(tokens, \
**kwargs)", " 101.          args = tuple(", 
                    Item[
                    " 102.              self.next_expression(tokens, \
**kwargs) for i in range(current_token.length)", Background -> LightYellow], 
                    " 103.          )", 
                    " 104.          if head == self._LIST:", 
                    " 105.              return args", " 106.          else:", 
                    " 107.              return self.build_function(head, \
args, **kwargs)", " 108.  "}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {".0", 
                    "<range_iterator object at 0x155631f80>"}, {"i", "1"}, {
                    "kwargs", "{}"}, {"self", 
                    "<ExternalEvaluateConsumer globals=4 objects=20>"}, {
                    "tokens", 
                    "<generator object WXFParser.tokens at 0x1555ec100>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"next_expression\""}, 
                    "RowDefault"]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"next_expression\""}, 
                    "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{
                    "\"  69.          constants.WXF_CONSTANTS.RuleDelayed: \\\
\"consume_rule_delayed\\\",\""}, {"\"  70.      }\""}, {"\"  71.  \""}, {
                    "\"  72.      def next_expression(self, tokens, \
**kwargs):\""}, {
                    "\"  73.          \\\"\\\"\\\"Deserialize the next \
expression starting at the next token yield by `tokens`.\\\"\\\"\\\"\""}, {
                    "\"  74.          token = next(tokens)\""}, {
                    "\"  75.          consumer = \
self._consumer_from_type(token.wxf_type)\""}, {
                    ItemBox[
                    "\"  76.          return consumer(token, tokens, \
**kwargs)\"", Background -> RGBColor[1, 1, 0.85], StripOnInput -> False]}, {
                    "\"  77.  \""}, {
                    "\"  78.      def _consumer_from_type(self, \
wxf_type):\""}, {"\"  79.          try:\""}, {
                    "\"  80.              func = self._mapping[wxf_type]\""}, \
{"\"  81.          except KeyError:\""}, {
                    "\"  82.              raise WolframParserException(\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\"self\"", 
                    "\"<ExternalEvaluateConsumer globals=4 objects=20>\""}, {
                    "\"tokens\"", 
                    "\"<generator object WXFParser.tokens at \
0x1555ec100>\""}, {"\"kwargs\"", "\"{}\""}, {"\"token\"", 
                    "\"WXFToken<b'f', data=None, len=2>\""}, {"\"consumer\"", 
                    "\"<bound method \
ExternalEvaluateConsumer.consume_function of <ExternalEvaluateConsumer \
globals=4 objects=20>>\""}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {"Columns" -> {{
                    Null}}, "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<ExternalEvaluateConsumer globals=4 objects=20>"}, {
                    "tokens", 
                    "<generator object WXFParser.tokens at 0x1555ec100>"}, {
                    "kwargs", "{}"}, {"token", 
                    "WXFToken<b'f', data=None, len=2>"}, {
                    "consumer", 
                    "<bound method ExternalEvaluateConsumer.consume_function \
of <ExternalEvaluateConsumer globals=4 objects=20>>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless"], " in ", "next_expression"}], 
                    Column[{
                    
                    Column[{
                    "  69.          constants.WXF_CONSTANTS.RuleDelayed: \
\"consume_rule_delayed\",", "  70.      }", "  71.  ", 
                    "  72.      def next_expression(self, tokens, **kwargs):",
                     "  73.          \"\"\"Deserialize the next expression \
starting at the next token yield by `tokens`.\"\"\"", 
                    "  74.          token = next(tokens)", 
                    "  75.          consumer = \
self._consumer_from_type(token.wxf_type)", 
                    Item[
                    "  76.          return consumer(token, tokens, **kwargs)",
                     Background -> LightYellow], "  77.  ", 
                    "  78.      def _consumer_from_type(self, wxf_type):", 
                    "  79.          try:", 
                    "  80.              func = self._mapping[wxf_type]", 
                    "  81.          except KeyError:", 
                    "  82.              raise WolframParserException("}, 
                    Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<ExternalEvaluateConsumer globals=4 objects=20>"}, {
                    "tokens", 
                    "<generator object WXFParser.tokens at 0x1555ec100>"}, {
                    "kwargs", "{}"}, {"token", 
                    "WXFToken<b'f', data=None, len=2>"}, {
                    "consumer", 
                    "<bound method ExternalEvaluateConsumer.consume_function \
of <ExternalEvaluateConsumer globals=4 objects=20>>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless", Evaluator -> Automatic, 
                    Method -> "Preemptive"], "\" in \"", 
                    "\"consume_function\""}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless", Evaluator -> Automatic, 
                    Method -> "Preemptive"], "\" in \"", 
                    "\"consume_function\""}, "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{"\" 319.  \""}, {
                    "\" 320.      def __init__(self, routes_registry={}, \
objects_registry={}, globals_registry={}):\""}, {
                    "\" 321.          self.objects_registry = \
registry(objects_registry)\""}, {
                    "\" 322.          self.globals_registry = \
registry(globals_registry)\""}, {
                    "\" 323.          self.routes_registry = \
registry(self.builtin_routes, **routes_registry)\""}, {"\" 324.  \""}, {
                    "\" 325.      def consume_function(self, *args, \
**kwargs):\""}, {
                    ItemBox[
                    "\" 326.          expr = super().consume_function(*args, \
**kwargs)\"", Background -> RGBColor[1, 1, 0.85], StripOnInput -> False]}, {
                    "\" 327.  \""}, {
                    "\" 328.          if check_wl_symbol(expr, \
self.hook_symbol):\""}, {
                    "\" 329.              assert len(expr.args) == 2\""}, {
                    "\" 330.              return \
self.dispatch_wl_object(*expr.args)\""}, {"\" 331.  \""}, {
                    "\" 332.          return expr\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\"self\"", 
                    "\"<ExternalEvaluateConsumer globals=4 objects=20>\""}, {
                    "\"args\"", 
                    "\"(<wolframclient.deserializers.wxf.wxfparser.WXFToken \
object at 0x155653970>, <generator object WXFParser.tokens at \
0x1555ec100>)\""}, {"\"kwargs\"", "\"{}\""}, {"\"__class__\"", 
                    "\"<class \
'wolframclient.utils.externalevaluate.ExternalEvaluateConsumer'>\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Null}}, 
                    "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<ExternalEvaluateConsumer globals=4 objects=20>"}, {
                    "args", 
                    "(<wolframclient.deserializers.wxf.wxfparser.WXFToken \
object at 0x155653970>, <generator object WXFParser.tokens at \
0x1555ec100>)"}, {"kwargs", "{}"}, {"__class__", 
                    "<class \
'wolframclient.utils.externalevaluate.ExternalEvaluateConsumer'>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless"], " in ", 
                    "consume_function"}], 
                    Column[{
                    
                    Column[{" 319.  ", 
                    " 320.      def __init__(self, routes_registry={}, \
objects_registry={}, globals_registry={}):", 
                    " 321.          self.objects_registry = \
registry(objects_registry)", 
                    " 322.          self.globals_registry = \
registry(globals_registry)", 
                    " 323.          self.routes_registry = \
registry(self.builtin_routes, **routes_registry)", " 324.  ", 
                    " 325.      def consume_function(self, *args, **kwargs):", 
                    Item[
                    " 326.          expr = super().consume_function(*args, \
**kwargs)", Background -> LightYellow], " 327.  ", 
                    " 328.          if check_wl_symbol(expr, \
self.hook_symbol):", " 329.              assert len(expr.args) == 2", 
                    " 330.              return \
self.dispatch_wl_object(*expr.args)", " 331.  ", 
                    " 332.          return expr"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<ExternalEvaluateConsumer globals=4 objects=20>"}, {
                    "args", 
                    "(<wolframclient.deserializers.wxf.wxfparser.WXFToken \
object at 0x155653970>, <generator object WXFParser.tokens at \
0x1555ec100>)"}, {"kwargs", "{}"}, {"__class__", 
                    "<class \
'wolframclient.utils.externalevaluate.ExternalEvaluateConsumer'>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"consume_function\""}, 
                    "RowDefault"]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"consume_function\""}, 
                    "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    GridBox[{{
                    "\"  94.          Return a :class:`list` if the head is \
symbol `List`, otherwise returns the result of \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`\""}, {"\"  95.          applied to the head and arguments.\""}, {
                    "\"  96.  \""}, {
                    "\"  97.          Usually custom parsing rules target \
Functions, but not List. To do so, it is recommended to override\""}, {
                    "\"  98.          \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`.\""}, {"\"  99.          \\\"\\\"\\\"\""}, {
                    "\" 100.          head = self.next_expression(tokens, \
**kwargs)\""}, {
                    ItemBox["\" 101.          args = tuple(\"", Background -> 
                    RGBColor[1, 1, 0.85], StripOnInput -> False]}, {
                    "\" 102.              self.next_expression(tokens, \
**kwargs) for i in range(current_token.length)\""}, {
                    "\" 103.          )\""}, {
                    "\" 104.          if head == self._LIST:\""}, {
                    "\" 105.              return args\""}, {
                    "\" 106.          else:\""}, {
                    "\" 107.              return self.build_function(head, \
args, **kwargs)\""}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\"self\"", 
                    "\"<ExternalEvaluateConsumer globals=4 objects=20>\""}, {
                    "\"current_token\"", 
                    "\"WXFToken<b'f', data=None, len=2>\""}, {"\"tokens\"", 
                    "\"<generator object WXFParser.tokens at \
0x1555ec100>\""}, {"\"kwargs\"", "\"{}\""}, {"\"head\"", "\"List\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Null}}, 
                    "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<ExternalEvaluateConsumer globals=4 objects=20>"}, {
                    "current_token", "WXFToken<b'f', data=None, len=2>"}, {
                    "tokens", 
                    "<generator object WXFParser.tokens at 0x1555ec100>"}, {
                    "kwargs", "{}"}, {"head", "List"}}, Background -> {
                    Null, {LightGray}}, Alignment -> Left, Frame -> 
                    LightGray]}, False]], DynamicModuleValues -> Automatic], 
                    Setting[#, {0}]& ]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless"], " in ", "consume_function"}], 
                    Column[{
                    
                    Column[{
                    "  94.          Return a :class:`list` if the head is \
symbol `List`, otherwise returns the result of \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`", "  95.          applied to the head and arguments.", "  96.  ", 
                    "  97.          Usually custom parsing rules target \
Functions, but not List. To do so, it is recommended to override", 
                    "  98.          \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`.", "  99.          \"\"\"", 
                    " 100.          head = self.next_expression(tokens, \
**kwargs)", 
                    Item[" 101.          args = tuple(", Background -> 
                    LightYellow], 
                    " 102.              self.next_expression(tokens, \
**kwargs) for i in range(current_token.length)", " 103.          )", 
                    " 104.          if head == self._LIST:", 
                    " 105.              return args", " 106.          else:", 
                    " 107.              return self.build_function(head, \
args, **kwargs)"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<ExternalEvaluateConsumer globals=4 objects=20>"}, {
                    "current_token", "WXFToken<b'f', data=None, len=2>"}, {
                    "tokens", 
                    "<generator object WXFParser.tokens at 0x1555ec100>"}, {
                    "kwargs", "{}"}, {"head", "List"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"<genexpr>\""}, 
                    "RowDefault"]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"<genexpr>\""}, 
                    "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{
                    "\"  95.          applied to the head and arguments.\""}, \
{"\"  96.  \""}, {
                    "\"  97.          Usually custom parsing rules target \
Functions, but not List. To do so, it is recommended to override\""}, {
                    "\"  98.          \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`.\""}, {"\"  99.          \\\"\\\"\\\"\""}, {
                    "\" 100.          head = self.next_expression(tokens, \
**kwargs)\""}, {"\" 101.          args = tuple(\""}, {
                    ItemBox[
                    "\" 102.              self.next_expression(tokens, \
**kwargs) for i in range(current_token.length)\"", Background -> 
                    RGBColor[1, 1, 0.85], StripOnInput -> False]}, {
                    "\" 103.          )\""}, {
                    "\" 104.          if head == self._LIST:\""}, {
                    "\" 105.              return args\""}, {
                    "\" 106.          else:\""}, {
                    "\" 107.              return self.build_function(head, \
args, **kwargs)\""}, {"\" 108.  \""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\".0\"", 
                    "\"<range_iterator object at 0x1556320d0>\""}, {
                    "\"i\"", "\"0\""}, {"\"kwargs\"", "\"{}\""}, {
                    "\"self\"", 
                    "\"<ExternalEvaluateConsumer globals=4 objects=20>\""}, {
                    "\"tokens\"", 
                    "\"<generator object WXFParser.tokens at \
0x1555ec100>\""}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Null}}, 
                    "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {".0", 
                    "<range_iterator object at 0x1556320d0>"}, {"i", "0"}, {
                    "kwargs", "{}"}, {"self", 
                    "<ExternalEvaluateConsumer globals=4 objects=20>"}, {
                    "tokens", 
                    "<generator object WXFParser.tokens at 0x1555ec100>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless"], " in ", "<genexpr>"}], 
                    Column[{
                    
                    Column[{
                    "  95.          applied to the head and arguments.", 
                    "  96.  ", 
                    "  97.          Usually custom parsing rules target \
Functions, but not List. To do so, it is recommended to override", 
                    "  98.          \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`.", "  99.          \"\"\"", 
                    " 100.          head = self.next_expression(tokens, \
**kwargs)", " 101.          args = tuple(", 
                    Item[
                    " 102.              self.next_expression(tokens, \
**kwargs) for i in range(current_token.length)", Background -> LightYellow], 
                    " 103.          )", 
                    " 104.          if head == self._LIST:", 
                    " 105.              return args", " 106.          else:", 
                    " 107.              return self.build_function(head, \
args, **kwargs)", " 108.  "}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {".0", 
                    "<range_iterator object at 0x1556320d0>"}, {"i", "0"}, {
                    "kwargs", "{}"}, {"self", 
                    "<ExternalEvaluateConsumer globals=4 objects=20>"}, {
                    "tokens", 
                    "<generator object WXFParser.tokens at 0x1555ec100>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"next_expression\""}, 
                    "RowDefault"]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"next_expression\""}, 
                    "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{
                    "\"  69.          constants.WXF_CONSTANTS.RuleDelayed: \\\
\"consume_rule_delayed\\\",\""}, {"\"  70.      }\""}, {"\"  71.  \""}, {
                    "\"  72.      def next_expression(self, tokens, \
**kwargs):\""}, {
                    "\"  73.          \\\"\\\"\\\"Deserialize the next \
expression starting at the next token yield by `tokens`.\\\"\\\"\\\"\""}, {
                    "\"  74.          token = next(tokens)\""}, {
                    "\"  75.          consumer = \
self._consumer_from_type(token.wxf_type)\""}, {
                    ItemBox[
                    "\"  76.          return consumer(token, tokens, \
**kwargs)\"", Background -> RGBColor[1, 1, 0.85], StripOnInput -> False]}, {
                    "\"  77.  \""}, {
                    "\"  78.      def _consumer_from_type(self, \
wxf_type):\""}, {"\"  79.          try:\""}, {
                    "\"  80.              func = self._mapping[wxf_type]\""}, \
{"\"  81.          except KeyError:\""}, {
                    "\"  82.              raise WolframParserException(\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\"self\"", 
                    "\"<ExternalEvaluateConsumer globals=4 objects=20>\""}, {
                    "\"tokens\"", 
                    "\"<generator object WXFParser.tokens at \
0x1555ec100>\""}, {"\"kwargs\"", "\"{}\""}, {"\"token\"", 
                    "\"WXFToken<b'f', data=None, len=2>\""}, {"\"consumer\"", 
                    "\"<bound method \
ExternalEvaluateConsumer.consume_function of <ExternalEvaluateConsumer \
globals=4 objects=20>>\""}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {"Columns" -> {{
                    Null}}, "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<ExternalEvaluateConsumer globals=4 objects=20>"}, {
                    "tokens", 
                    "<generator object WXFParser.tokens at 0x1555ec100>"}, {
                    "kwargs", "{}"}, {"token", 
                    "WXFToken<b'f', data=None, len=2>"}, {"consumer", 
                    "<bound method ExternalEvaluateConsumer.consume_function \
of <ExternalEvaluateConsumer globals=4 objects=20>>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless"], " in ", "next_expression"}], 
                    Column[{
                    
                    Column[{
                    "  69.          constants.WXF_CONSTANTS.RuleDelayed: \
\"consume_rule_delayed\",", "  70.      }", "  71.  ", 
                    "  72.      def next_expression(self, tokens, **kwargs):",
                     "  73.          \"\"\"Deserialize the next expression \
starting at the next token yield by `tokens`.\"\"\"", 
                    "  74.          token = next(tokens)", 
                    "  75.          consumer = \
self._consumer_from_type(token.wxf_type)", 
                    Item[
                    "  76.          return consumer(token, tokens, **kwargs)",
                     Background -> LightYellow], "  77.  ", 
                    "  78.      def _consumer_from_type(self, wxf_type):", 
                    "  79.          try:", 
                    "  80.              func = self._mapping[wxf_type]", 
                    "  81.          except KeyError:", 
                    "  82.              raise WolframParserException("}, 
                    Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<ExternalEvaluateConsumer globals=4 objects=20>"}, {
                    "tokens", 
                    "<generator object WXFParser.tokens at 0x1555ec100>"}, {
                    "kwargs", "{}"}, {"token", 
                    "WXFToken<b'f', data=None, len=2>"}, {
                    "consumer", 
                    "<bound method ExternalEvaluateConsumer.consume_function \
of <ExternalEvaluateConsumer globals=4 objects=20>>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless", Evaluator -> Automatic, 
                    Method -> "Preemptive"], "\" in \"", 
                    "\"consume_function\""}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless", Evaluator -> Automatic, 
                    Method -> "Preemptive"], "\" in \"", 
                    "\"consume_function\""}, "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{
                    "\" 323.          self.routes_registry = \
registry(self.builtin_routes, **routes_registry)\""}, {"\" 324.  \""}, {
                    "\" 325.      def consume_function(self, *args, \
**kwargs):\""}, {
                    "\" 326.          expr = super().consume_function(*args, \
**kwargs)\""}, {"\" 327.  \""}, {
                    "\" 328.          if check_wl_symbol(expr, \
self.hook_symbol):\""}, {
                    "\" 329.              assert len(expr.args) == 2\""}, {
                    ItemBox[
                    "\" 330.              return \
self.dispatch_wl_object(*expr.args)\"", Background -> RGBColor[1, 1, 0.85], 
                    StripOnInput -> False]}, {"\" 331.  \""}, {
                    "\" 332.          return expr\""}, {"\" 333.  \""}, {
                    "\" 334.      def dispatch_wl_object(self, route, \
args):\""}, {
                    "\" 335.          return \
self.routes_registry[route](self, *args)\""}, {"\" 336.  \""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\"self\"", 
                    "\"<ExternalEvaluateConsumer globals=4 objects=20>\""}, {
                    "\"args\"", 
                    "\"(<wolframclient.deserializers.wxf.wxfparser.WXFToken \
object at 0x155653560>, <generator object WXFParser.tokens at \
0x1555ec100>)\""}, {"\"kwargs\"", "\"{}\""}, {"\"expr\"", 
                    "\"ExternalEvaluate`Private`ExternalEvaluateCommand['Call'\
, (<function degree at 0x1553ee520>, None, \
hypernetx.classes.Hypergraph.Hypergraph)]\""}, {"\"__class__\"", 
                    "\"<class \
'wolframclient.utils.externalevaluate.ExternalEvaluateConsumer'>\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Null}}, 
                    "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<ExternalEvaluateConsumer globals=4 objects=20>"}, {
                    "args", 
                    "(<wolframclient.deserializers.wxf.wxfparser.WXFToken \
object at 0x155653560>, <generator object WXFParser.tokens at \
0x1555ec100>)"}, {"kwargs", "{}"}, {"expr", 
                    "ExternalEvaluate`Private`ExternalEvaluateCommand['Call', \
(<function degree at 0x1553ee520>, None, \
hypernetx.classes.Hypergraph.Hypergraph)]"}, {"__class__", 
                    "<class \
'wolframclient.utils.externalevaluate.ExternalEvaluateConsumer'>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless"], " in ", 
                    "consume_function"}], 
                    Column[{
                    
                    Column[{
                    " 323.          self.routes_registry = \
registry(self.builtin_routes, **routes_registry)", " 324.  ", 
                    " 325.      def consume_function(self, *args, **kwargs):",
                     " 326.          expr = super().consume_function(*args, \
**kwargs)", " 327.  ", 
                    " 328.          if check_wl_symbol(expr, \
self.hook_symbol):", " 329.              assert len(expr.args) == 2", 
                    Item[
                    " 330.              return \
self.dispatch_wl_object(*expr.args)", Background -> LightYellow], " 331.  ", 
                    " 332.          return expr", " 333.  ", 
                    " 334.      def dispatch_wl_object(self, route, args):", 
                    " 335.          return self.routes_registry[route](self, \
*args)", " 336.  "}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<ExternalEvaluateConsumer globals=4 objects=20>"}, {
                    "args", 
                    "(<wolframclient.deserializers.wxf.wxfparser.WXFToken \
object at 0x155653560>, <generator object WXFParser.tokens at \
0x1555ec100>)"}, {"kwargs", "{}"}, {"expr", 
                    "ExternalEvaluate`Private`ExternalEvaluateCommand['Call', \
(<function degree at 0x1553ee520>, None, \
hypernetx.classes.Hypergraph.Hypergraph)]"}, {
                    "__class__", 
                    "<class \
'wolframclient.utils.externalevaluate.ExternalEvaluateConsumer'>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless", Evaluator -> Automatic, 
                    Method -> "Preemptive"], "\" in \"", 
                    "\"dispatch_wl_object\""}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless", Evaluator -> Automatic, 
                    Method -> "Preemptive"], "\" in \"", 
                    "\"dispatch_wl_object\""}, "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{
                    "\" 328.          if check_wl_symbol(expr, \
self.hook_symbol):\""}, {
                    "\" 329.              assert len(expr.args) == 2\""}, {
                    "\" 330.              return \
self.dispatch_wl_object(*expr.args)\""}, {"\" 331.  \""}, {
                    "\" 332.          return expr\""}, {"\" 333.  \""}, {
                    "\" 334.      def dispatch_wl_object(self, route, \
args):\""}, {
                    ItemBox[
                    "\" 335.          return \
self.routes_registry[route](self, *args)\"", Background -> 
                    RGBColor[1, 1, 0.85], StripOnInput -> False]}, {
                    "\" 336.  \""}, {"\" 337.      def __repr__(self):\""}, {
                    "\" 338.          return \\\"<{} globals={} objects={}>\\\
\".format(\""}, {
                    "\" 339.              self.__class__.__name__, \
len(self.globals_registry), len(self.objects_registry)\""}, {
                    "\" 340.          )\""}, {"\" 341.  \""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\"self\"", 
                    "\"<ExternalEvaluateConsumer globals=4 objects=20>\""}, {
                    "\"route\"", "\"Call\""}, {"\"args\"", 
                    "\"(<function degree at 0x1553ee520>, None, \
hypernetx.classes.Hypergraph.Hypergraph)\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Null}}, "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<ExternalEvaluateConsumer globals=4 objects=20>"}, {
                    "route", "Call"}, {"args", 
                    "(<function degree at 0x1553ee520>, None, \
hypernetx.classes.Hypergraph.Hypergraph)"}}, Background -> {
                    Null, {LightGray}}, Alignment -> Left, Frame -> 
                    LightGray]}, False]], DynamicModuleValues -> Automatic], 
                    Setting[#, {0}]& ]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless"], " in ", 
                    "dispatch_wl_object"}], 
                    Column[{
                    
                    Column[{
                    " 328.          if check_wl_symbol(expr, \
self.hook_symbol):", " 329.              assert len(expr.args) == 2", 
                    " 330.              return \
self.dispatch_wl_object(*expr.args)", " 331.  ", " 332.          return expr",
                     " 333.  ", 
                    " 334.      def dispatch_wl_object(self, route, args):", 
                    Item[
                    " 335.          return self.routes_registry[route](self, \
*args)", Background -> LightYellow], " 336.  ", 
                    " 337.      def __repr__(self):", 
                    " 338.          return \"<{} globals={} \
objects={}>\".format(", 
                    " 339.              self.__class__.__name__, \
len(self.globals_registry), len(self.objects_registry)", " 340.          )", 
                    " 341.  "}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<ExternalEvaluateConsumer globals=4 objects=20>"}, {
                    "route", "Call"}, {"args", 
                    "(<function degree at 0x1553ee520>, None, \
hypernetx.classes.Hypergraph.Hypergraph)"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = True}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless", Evaluator -> Automatic, 
                    Method -> "Preemptive"], "\" in \"", "\"Call\""}, 
                    "RowDefault"]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless", Evaluator -> Automatic, 
                    Method -> "Preemptive"], "\" in \"", "\"Call\""}, 
                    "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{"\" 245.  \""}, {"\" 246.  \""}, {
                    "\" 247.  @routes.register_function\""}, {
                    "\" 248.  def Call(consumer, result, *args):\""}, {
                    "\" 249.  \""}, {
                    "\" 250.      pos, kwargs = unpack_optionals(args)\""}, {
                    "\" 251.  \""}, {
                    ItemBox[
                    "\" 252.      return result(*pos, **kwargs)\"", 
                    Background -> RGBColor[1, 1, 0.85], StripOnInput -> 
                    False]}, {"\" 253.  \""}, {"\" 254.  \""}, {
                    "\" 255.  @routes.register_function\""}, {
                    "\" 256.  def MethodCall(consumer, result, names, *args):\
\""}, {"\" 257.      return Call(consumer, GetAttribute(consumer, result, \
names), *args)\""}, {"\" 258.  \""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{"\"Key\"", "\"Value\""}, {
                    "\"consumer\"", 
                    "\"<ExternalEvaluateConsumer globals=4 objects=20>\""}, {
                    "\"result\"", "\"<function degree at 0x1553ee520>\""}, {
                    "\"args\"", 
                    "\"(None, hypernetx.classes.Hypergraph.Hypergraph,)\""}, {
                    "\"pos\"", 
                    "\"[None, hypernetx.classes.Hypergraph.Hypergraph]\""}, {
                    "\"kwargs\"", "\"{}\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Null}}, "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"consumer", 
                    "<ExternalEvaluateConsumer globals=4 objects=20>"}, {
                    "result", "<function degree at 0x1553ee520>"}, {
                    "args", 
                    "(None, hypernetx.classes.Hypergraph.Hypergraph,)"}, {
                    "pos", "[None, \
hypernetx.classes.Hypergraph.Hypergraph]"}, {"kwargs", "{}"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless"], " in ", "Call"}], 
                    Column[{
                    
                    Column[{" 245.  ", " 246.  ", 
                    " 247.  @routes.register_function", 
                    " 248.  def Call(consumer, result, *args):", " 249.  ", 
                    " 250.      pos, kwargs = unpack_optionals(args)", 
                    " 251.  ", 
                    Item[
                    " 252.      return result(*pos, **kwargs)", Background -> 
                    LightYellow], " 253.  ", " 254.  ", 
                    " 255.  @routes.register_function", 
                    " 256.  def MethodCall(consumer, result, names, *args):", 
                    " 257.      return Call(consumer, GetAttribute(consumer, \
result, names), *args)", " 258.  "}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"consumer", 
                    "<ExternalEvaluateConsumer globals=4 objects=20>"}, {
                    "result", "<function degree at 0x1553ee520>"}, {
                    "args", 
                    "(None, hypernetx.classes.Hypergraph.Hypergraph,)"}, {
                    "pos", "[None, \
hypernetx.classes.Hypergraph.Hypergraph]"}, {"kwargs", "{}"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, True]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = True}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Users/arnoudb/hypernetx/Python/Hypergraph/Hypergraph.\
py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Users/arnoudb/hypernetx/Python/Hypergraph/Hypergraph.\
py"], 
                    SystemOpen[
                    "/Users/arnoudb/hypernetx/Python/Hypergraph/Hypergraph.\
py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"degree\""}, "RowDefault"]}},
                     GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Users/arnoudb/hypernetx/Python/Hypergraph/Hypergraph.\
py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Users/arnoudb/hypernetx/Python/Hypergraph/Hypergraph.\
py"], 
                    SystemOpen[
                    "/Users/arnoudb/hypernetx/Python/Hypergraph/Hypergraph.\
py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"degree\""}, 
                    "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{"\"  39.  def connected_components(hg):\""}, {
                    "\"  40.      return hg.connected_components()\""}, {
                    "\"  41.  \""}, {"\"  42.  def dataframe(hg):\""}, {
                    "\"  43.      return hg.dataframe\""}, {"\"  44.  \""}, {
                    "\"  45.  def degree(hg):\""}, {
                    ItemBox[
                    "\"  46.      return hg.degree()\"", Background -> 
                    RGBColor[1, 1, 0.85], StripOnInput -> False]}, {
                    "\"  47.  \""}, {"\"  48.  def diameter(hg):\""}, {
                    "\"  49.      return hg.diameter()\""}, {"\"  50.  \""}, {
                    "\"  51.  def dim(hg):\""}, {
                    "\"  52.      return hg.dim()\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\"hg\"", 
                    "\"None, <class \
'hypernetx.classes.Hypergraph.Hypergraph'>\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Null}}, "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"hg", 
                    "None, <class \
'hypernetx.classes.Hypergraph.Hypergraph'>"}}, Background -> {
                    Null, {LightGray}}, Alignment -> Left, Frame -> 
                    LightGray]}, False]], DynamicModuleValues -> Automatic], 
                    Setting[#, {0}]& ]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Users/arnoudb/hypernetx/Python/Hypergraph/Hypergraph.\
py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Users/arnoudb/hypernetx/Python/Hypergraph/Hypergraph.\
py"], 
                    SystemOpen[
                    "/Users/arnoudb/hypernetx/Python/Hypergraph/Hypergraph.\
py"]], Appearance -> "Frameless"], " in ", "degree"}], 
                    Column[{
                    
                    Column[{"  39.  def connected_components(hg):", 
                    "  40.      return hg.connected_components()", "  41.  ", 
                    "  42.  def dataframe(hg):", 
                    "  43.      return hg.dataframe", "  44.  ", 
                    "  45.  def degree(hg):", 
                    Item[
                    "  46.      return hg.degree()", Background -> 
                    LightYellow], "  47.  ", "  48.  def diameter(hg):", 
                    "  49.      return hg.diameter()", "  50.  ", 
                    "  51.  def dim(hg):", "  52.      return hg.dim()"}, 
                    Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"hg", 
                    "None, <class \
'hypernetx.classes.Hypergraph.Hypergraph'>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, True]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], FontFamily -> "Courier", StripOnInput -> 
                    False], ImageMargins -> 0]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    
                    Row[{"TypeError", " ", 
                    "Hypergraph.degree() missing 1 required positional \
argument: 'node'"}], 
                    Style[
                    Column[{
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/language/\
decorators.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/language/\
decorators.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/language/\
decorators.py"]], Appearance -> "Frameless"], " in ", "safe_wl_execute"}], 
                    Column[{
                    
                    Column[{
                    "  14.      \"wl\": b'Failure[\"PythonFailure\", \
<|\"MessageTemplate\" -> \"Unexpected error occurred.\"|>]',", "  15.  }", 
                    "  16.  ", "  17.  ", 
                    "  18.  def safe_wl_execute(function, args=(), opts={}, \
export_opts={}, exception_class=None):", "  19.  ", "  20.      try:", 
                    Item[
                    "  21.          return export(function(*args, **opts), \
**export_opts)", Background -> LightYellow], 
                    "  22.      except Exception as export_exception:", 
                    "  23.          try:", "  24.              try:", 
                    "  25.  ", 
                    "  26.                  # The user can provide an \
exception class, and it can be broken, in which case we are running another", 
                    "  27.                  # try / except to return errors \
that are happening during class serialization"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "function", "<function handle_message at 0x105bc8fe0>"}, {
                    "args", "(<zmq.Socket(zmq.PAIR) at 0x105ba8c20>,)"}, {
                    "opts", 
                    "{'consumer': <ExternalEvaluateConsumer globals=4 \
objects=20>}"}, {"export_opts", 
                    "{'object_processor': <function \
start_zmq_loop.<locals>.<lambda> at 0x104e509a0>, 'target_format': 'wxf'}"}, {
                    "exception_class", "None"}, {
                    "export_exception", 
                    "Hypergraph.degree() missing 1 required positional \
argument: 'node'"}}, Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless"], " in ", 
                    "handle_message"}], 
                    Column[{
                    
                    Column[{
                    " 350.          self.socket.send(zmq.Frame(bytes))", 
                    " 351.  ", " 352.      def send_side_effect(self, expr):",
                     " 353.          \
self.write(export(self.keep_listening(expr), target_format=\"wxf\"))", 
                    " 354.  ", " 355.  ", 
                    " 356.  def handle_message(socket, consumer):", 
                    Item[
                    " 357.      result = \
binary_deserialize(socket.recv(copy=False).buffer, consumer=consumer)", 
                    Background -> LightYellow], " 358.  ", 
                    " 359.      sys.stdout.flush()", 
                    " 360.      return result", " 361.  ", " 362.  ", 
                    " 363.  def start_zmq_instance(port=None, \
write_to_stdout=True, **opts):"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "socket", "<zmq.Socket(zmq.PAIR) at 0x105ba8c20>"}, {
                    "consumer", 
                    "<ExternalEvaluateConsumer globals=4 objects=20>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
__init__.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
__init__.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
__init__.py"]], Appearance -> "Frameless"], " in ", "binary_deserialize"}], 
                    Column[{
                    
                    Column[{"  33.  ", "  34.      \"\"\"", 
                    "  35.      parser = WXFParser(wxf_input)", 
                    "  36.      if consumer is None:", 
                    "  37.          consumer = WXFConsumerNumpy()", "  38.  ",
                     "  39.      try:", 
                    Item[
                    "  40.          o = \
consumer.next_expression(parser.tokens(), **kwargs)", Background -> 
                    LightYellow], "  41.      except StopIteration:", 
                    "  42.          raise WolframParserException(", 
                    "  43.              \"Input data does not represent a \
valid expression in WXF format. Expecting more input data.\"", 
                    "  44.          )", 
                    "  45.      if not \
parser.context.is_valid_final_state():", 
                    "  46.          raise WolframParserException("}, 
                    Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "wxf_input", 
                    "8:f\.02s0ExternalEvaluate`Private`\
ExternalEvaluateCommandS\n\
ReturnTypef\.02s\.04Listf\.02s0ExternalEvaluate`Private`\
ExternalEvaluateCommandS\.04Callf\.02s\.04Listf\.02s0ExternalEvaluate`Private`\
ExternalEvaluateCommandS\.05Fetchf\.01\.01\.01\.01\.01\.01\.01\.01s\.04ListL \
>U\.01\.01\.01\.01\.01\.01\.01\.01\.00\.00\.00f\.02s0ExternalEvaluate`Private`\
ExternalEvaluateCommandS\.05Fetchf\.01\.01\.01\.01\.01\.01\.01\.01s\.04ListLP-\
?U\.01\.01\.01\.01\.01\.01\.01\.01\.00\.00\.00S\nExpression"}, {
                    "consumer", 
                    "<ExternalEvaluateConsumer globals=4 objects=20>"}, {
                    "kwargs", "{}"}, {
                    "parser", 
                    "<wolframclient.deserializers.wxf.wxfparser.WXFParser \
object at 0x15561ac10>"}}, Background -> {Null, {LightGray}}, Alignment -> 
                    Left, Frame -> LightGray]}]}]}, False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless"], " in ", "next_expression"}], 
                    Column[{
                    
                    Column[{
                    "  69.          constants.WXF_CONSTANTS.RuleDelayed: \
\"consume_rule_delayed\",", "  70.      }", "  71.  ", 
                    "  72.      def next_expression(self, tokens, **kwargs):",
                     "  73.          \"\"\"Deserialize the next expression \
starting at the next token yield by `tokens`.\"\"\"", 
                    "  74.          token = next(tokens)", 
                    "  75.          consumer = \
self._consumer_from_type(token.wxf_type)", 
                    Item[
                    "  76.          return consumer(token, tokens, **kwargs)",
                     Background -> LightYellow], "  77.  ", 
                    "  78.      def _consumer_from_type(self, wxf_type):", 
                    "  79.          try:", 
                    "  80.              func = self._mapping[wxf_type]", 
                    "  81.          except KeyError:", 
                    "  82.              raise WolframParserException("}, 
                    Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "self", 
                    "<ExternalEvaluateConsumer globals=4 objects=20>"}, {
                    "tokens", 
                    "<generator object WXFParser.tokens at 0x1555ec100>"}, {
                    "kwargs", "{}"}, {
                    "token", "WXFToken<b'f', data=None, len=2>"}, {
                    "consumer", 
                    "<bound method ExternalEvaluateConsumer.consume_function \
of <ExternalEvaluateConsumer globals=4 objects=20>>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless"], " in ", 
                    "consume_function"}], 
                    Column[{
                    
                    Column[{" 319.  ", 
                    " 320.      def __init__(self, routes_registry={}, \
objects_registry={}, globals_registry={}):", 
                    " 321.          self.objects_registry = \
registry(objects_registry)", 
                    " 322.          self.globals_registry = \
registry(globals_registry)", 
                    " 323.          self.routes_registry = \
registry(self.builtin_routes, **routes_registry)", " 324.  ", 
                    " 325.      def consume_function(self, *args, **kwargs):", 
                    Item[
                    " 326.          expr = super().consume_function(*args, \
**kwargs)", Background -> LightYellow], " 327.  ", 
                    " 328.          if check_wl_symbol(expr, \
self.hook_symbol):", " 329.              assert len(expr.args) == 2", 
                    
                    " 330.              return \
self.dispatch_wl_object(*expr.args)", " 331.  ", 
                    " 332.          return expr"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "self", 
                    "<ExternalEvaluateConsumer globals=4 objects=20>"}, {
                    "args", 
                    "(<wolframclient.deserializers.wxf.wxfparser.WXFToken \
object at 0x155652200>, <generator object WXFParser.tokens at \
0x1555ec100>)"}, {"kwargs", "{}"}, {
                    "__class__", 
                    "<class \
'wolframclient.utils.externalevaluate.ExternalEvaluateConsumer'>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless"], " in ", "consume_function"}], 
                    Column[{
                    
                    Column[{
                    "  94.          Return a :class:`list` if the head is \
symbol `List`, otherwise returns the result of \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`", "  95.          applied to the head and arguments.", "  96.  ", 
                    "  97.          Usually custom parsing rules target \
Functions, but not List. To do so, it is recommended to override", 
                    "  98.          \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`.", "  99.          \"\"\"", 
                    " 100.          head = self.next_expression(tokens, \
**kwargs)", 
                    Item[
                    " 101.          args = tuple(", Background -> 
                    LightYellow], 
                    " 102.              self.next_expression(tokens, \
**kwargs) for i in range(current_token.length)", " 103.          )", 
                    " 104.          if head == self._LIST:", 
                    " 105.              return args", " 106.          else:", 
                    " 107.              return self.build_function(head, \
args, **kwargs)"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "self", 
                    "<ExternalEvaluateConsumer globals=4 objects=20>"}, {
                    "current_token", "WXFToken<b'f', data=None, len=2>"}, {
                    "tokens", 
                    "<generator object WXFParser.tokens at 0x1555ec100>"}, {
                    "kwargs", "{}"}, {
                    "head", 
                    "ExternalEvaluate`Private`ExternalEvaluateCommand"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless"], " in ", "<genexpr>"}], 
                    Column[{
                    
                    Column[{
                    "  95.          applied to the head and arguments.", 
                    "  96.  ", 
                    "  97.          Usually custom parsing rules target \
Functions, but not List. To do so, it is recommended to override", 
                    "  98.          \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`.", "  99.          \"\"\"", 
                    " 100.          head = self.next_expression(tokens, \
**kwargs)", " 101.          args = tuple(", 
                    Item[
                    " 102.              self.next_expression(tokens, \
**kwargs) for i in range(current_token.length)", Background -> LightYellow], 
                    " 103.          )", 
                    " 104.          if head == self._LIST:", 
                    " 105.              return args", " 106.          else:", 
                    " 107.              return self.build_function(head, \
args, **kwargs)", " 108.  "}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    ".0", "<range_iterator object at 0x155631f80>"}, {
                    "i", "1"}, {"kwargs", "{}"}, {
                    "self", 
                    "<ExternalEvaluateConsumer globals=4 objects=20>"}, {
                    "tokens", 
                    "<generator object WXFParser.tokens at 0x1555ec100>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless"], " in ", "next_expression"}], 
                    Column[{
                    
                    Column[{
                    "  69.          constants.WXF_CONSTANTS.RuleDelayed: \
\"consume_rule_delayed\",", "  70.      }", "  71.  ", 
                    "  72.      def next_expression(self, tokens, **kwargs):",
                     "  73.          \"\"\"Deserialize the next expression \
starting at the next token yield by `tokens`.\"\"\"", 
                    "  74.          token = next(tokens)", 
                    "  75.          consumer = \
self._consumer_from_type(token.wxf_type)", 
                    Item[
                    "  76.          return consumer(token, tokens, **kwargs)",
                     Background -> LightYellow], "  77.  ", 
                    "  78.      def _consumer_from_type(self, wxf_type):", 
                    "  79.          try:", 
                    "  80.              func = self._mapping[wxf_type]", 
                    "  81.          except KeyError:", 
                    "  82.              raise WolframParserException("}, 
                    Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "self", 
                    "<ExternalEvaluateConsumer globals=4 objects=20>"}, {
                    "tokens", 
                    "<generator object WXFParser.tokens at 0x1555ec100>"}, {
                    "kwargs", "{}"}, {
                    "token", "WXFToken<b'f', data=None, len=2>"}, {
                    "consumer", 
                    "<bound method ExternalEvaluateConsumer.consume_function \
of <ExternalEvaluateConsumer globals=4 objects=20>>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless"], " in ", 
                    "consume_function"}], 
                    Column[{
                    
                    Column[{" 319.  ", 
                    " 320.      def __init__(self, routes_registry={}, \
objects_registry={}, globals_registry={}):", 
                    " 321.          self.objects_registry = \
registry(objects_registry)", 
                    " 322.          self.globals_registry = \
registry(globals_registry)", 
                    " 323.          self.routes_registry = \
registry(self.builtin_routes, **routes_registry)", " 324.  ", 
                    " 325.      def consume_function(self, *args, **kwargs):", 
                    Item[
                    " 326.          expr = super().consume_function(*args, \
**kwargs)", Background -> LightYellow], " 327.  ", 
                    " 328.          if check_wl_symbol(expr, \
self.hook_symbol):", " 329.              assert len(expr.args) == 2", 
                    " 330.              return \
self.dispatch_wl_object(*expr.args)", " 331.  ", 
                    " 332.          return expr"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "self", 
                    "<ExternalEvaluateConsumer globals=4 objects=20>"}, {
                    "args", 
                    "(<wolframclient.deserializers.wxf.wxfparser.WXFToken \
object at 0x155653970>, <generator object WXFParser.tokens at \
0x1555ec100>)"}, {"kwargs", "{}"}, {
                    "__class__", 
                    "<class \
'wolframclient.utils.externalevaluate.ExternalEvaluateConsumer'>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless"], " in ", "consume_function"}], 
                    Column[{
                    
                    Column[{
                    "  94.          Return a :class:`list` if the head is \
symbol `List`, otherwise returns the result of \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`", "  95.          applied to the head and arguments.", "  96.  ", 
                    "  97.          Usually custom parsing rules target \
Functions, but not List. To do so, it is recommended to override", 
                    "  98.          \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`.", "  99.          \"\"\"", 
                    " 100.          head = self.next_expression(tokens, \
**kwargs)", 
                    Item[
                    " 101.          args = tuple(", Background -> 
                    LightYellow], 
                    " 102.              self.next_expression(tokens, \
**kwargs) for i in range(current_token.length)", " 103.          )", 
                    " 104.          if head == self._LIST:", 
                    " 105.              return args", " 106.          else:", 
                    " 107.              return self.build_function(head, \
args, **kwargs)"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "self", 
                    "<ExternalEvaluateConsumer globals=4 objects=20>"}, {
                    "current_token", "WXFToken<b'f', data=None, len=2>"}, {
                    "tokens", 
                    "<generator object WXFParser.tokens at 0x1555ec100>"}, {
                    "kwargs", "{}"}, {"head", "List"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless"], " in ", "<genexpr>"}], 
                    Column[{
                    
                    Column[{
                    "  95.          applied to the head and arguments.", 
                    "  96.  ", 
                    "  97.          Usually custom parsing rules target \
Functions, but not List. To do so, it is recommended to override", 
                    "  98.          \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`.", "  99.          \"\"\"", 
                    " 100.          head = self.next_expression(tokens, \
**kwargs)", " 101.          args = tuple(", 
                    Item[
                    " 102.              self.next_expression(tokens, \
**kwargs) for i in range(current_token.length)", Background -> LightYellow], 
                    " 103.          )", 
                    " 104.          if head == self._LIST:", 
                    " 105.              return args", " 106.          else:", 
                    " 107.              return self.build_function(head, \
args, **kwargs)", " 108.  "}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    ".0", "<range_iterator object at 0x1556320d0>"}, {
                    "i", "0"}, {"kwargs", "{}"}, {
                    "self", 
                    "<ExternalEvaluateConsumer globals=4 objects=20>"}, {
                    "tokens", 
                    "<generator object WXFParser.tokens at 0x1555ec100>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless"], " in ", "next_expression"}], 
                    Column[{
                    
                    Column[{
                    "  69.          constants.WXF_CONSTANTS.RuleDelayed: \
\"consume_rule_delayed\",", "  70.      }", "  71.  ", 
                    "  72.      def next_expression(self, tokens, **kwargs):",
                     "  73.          \"\"\"Deserialize the next expression \
starting at the next token yield by `tokens`.\"\"\"", 
                    "  74.          token = next(tokens)", 
                    "  75.          consumer = \
self._consumer_from_type(token.wxf_type)", 
                    Item[
                    "  76.          return consumer(token, tokens, **kwargs)",
                     Background -> LightYellow], "  77.  ", 
                    "  78.      def _consumer_from_type(self, wxf_type):", 
                    "  79.          try:", 
                    "  80.              func = self._mapping[wxf_type]", 
                    "  81.          except KeyError:", 
                    "  82.              raise WolframParserException("}, 
                    Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "self", 
                    "<ExternalEvaluateConsumer globals=4 objects=20>"}, {
                    "tokens", 
                    "<generator object WXFParser.tokens at 0x1555ec100>"}, {
                    "kwargs", "{}"}, {
                    "token", "WXFToken<b'f', data=None, len=2>"}, {
                    "consumer", 
                    "<bound method ExternalEvaluateConsumer.consume_function \
of <ExternalEvaluateConsumer globals=4 objects=20>>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless"], " in ", 
                    "consume_function"}], 
                    Column[{
                    
                    Column[{
                    " 323.          self.routes_registry = \
registry(self.builtin_routes, **routes_registry)", " 324.  ", 
                    " 325.      def consume_function(self, *args, **kwargs):",
                     " 326.          expr = super().consume_function(*args, \
**kwargs)", " 327.  ", 
                    " 328.          if check_wl_symbol(expr, \
self.hook_symbol):", " 329.              assert len(expr.args) == 2", 
                    Item[
                    " 330.              return \
self.dispatch_wl_object(*expr.args)", Background -> LightYellow], " 331.  ", 
                    " 332.          return expr", " 333.  ", 
                    " 334.      def dispatch_wl_object(self, route, args):", 
                    " 335.          return self.routes_registry[route](self, \
*args)", " 336.  "}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "self", 
                    "<ExternalEvaluateConsumer globals=4 objects=20>"}, {
                    "args", 
                    "(<wolframclient.deserializers.wxf.wxfparser.WXFToken \
object at 0x155653560>, <generator object WXFParser.tokens at \
0x1555ec100>)"}, {"kwargs", "{}"}, {
                    "expr", 
                    "ExternalEvaluate`Private`ExternalEvaluateCommand['Call', \
(<function degree at 0x1553ee520>, None, \
hypernetx.classes.Hypergraph.Hypergraph)]"}, {
                    "__class__", 
                    "<class \
'wolframclient.utils.externalevaluate.ExternalEvaluateConsumer'>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless"], " in ", 
                    "dispatch_wl_object"}], 
                    Column[{
                    
                    Column[{
                    " 328.          if check_wl_symbol(expr, \
self.hook_symbol):", " 329.              assert len(expr.args) == 2", 
                    " 330.              return \
self.dispatch_wl_object(*expr.args)", " 331.  ", " 332.          return expr",
                     " 333.  ", 
                    " 334.      def dispatch_wl_object(self, route, args):", 
                    Item[
                    " 335.          return self.routes_registry[route](self, \
*args)", Background -> LightYellow], " 336.  ", 
                    " 337.      def __repr__(self):", 
                    " 338.          return \"<{} globals={} \
objects={}>\".format(", 
                    " 339.              self.__class__.__name__, \
len(self.globals_registry), len(self.objects_registry)", " 340.          )", 
                    " 341.  "}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "self", 
                    "<ExternalEvaluateConsumer globals=4 objects=20>"}, {
                    "route", "Call"}, {
                    "args", 
                    "(<function degree at 0x1553ee520>, None, \
hypernetx.classes.Hypergraph.Hypergraph)"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless"], " in ", "Call"}], 
                    Column[{
                    
                    Column[{" 245.  ", " 246.  ", 
                    " 247.  @routes.register_function", 
                    " 248.  def Call(consumer, result, *args):", " 249.  ", 
                    " 250.      pos, kwargs = unpack_optionals(args)", 
                    " 251.  ", 
                    Item[
                    " 252.      return result(*pos, **kwargs)", Background -> 
                    LightYellow], " 253.  ", " 254.  ", 
                    " 255.  @routes.register_function", 
                    " 256.  def MethodCall(consumer, result, names, *args):", 
                    " 257.      return Call(consumer, GetAttribute(consumer, \
result, names), *args)", " 258.  "}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "consumer", 
                    "<ExternalEvaluateConsumer globals=4 objects=20>"}, {
                    "result", "<function degree at 0x1553ee520>"}, {
                    "args", 
                    "(None, hypernetx.classes.Hypergraph.Hypergraph,)"}, {
                    "pos", "[None, \
hypernetx.classes.Hypergraph.Hypergraph]"}, {"kwargs", "{}"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, True], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Users/arnoudb/hypernetx/Python/Hypergraph/Hypergraph.\
py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Users/arnoudb/hypernetx/Python/Hypergraph/Hypergraph.\
py"], 
                    SystemOpen[
                    "/Users/arnoudb/hypernetx/Python/Hypergraph/Hypergraph.\
py"]], Appearance -> "Frameless"], " in ", "degree"}], 
                    Column[{
                    
                    Column[{"  39.  def connected_components(hg):", 
                    "  40.      return hg.connected_components()", "  41.  ", 
                    "  42.  def dataframe(hg):", 
                    "  43.      return hg.dataframe", "  44.  ", 
                    "  45.  def degree(hg):", 
                    Item[
                    "  46.      return hg.degree()", Background -> 
                    LightYellow], "  47.  ", "  48.  def diameter(hg):", 
                    "  49.      return hg.diameter()", "  50.  ", 
                    "  51.  def dim(hg):", "  52.      return hg.dim()"}, 
                    Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "hg", "None, <class \
'hypernetx.classes.Hypergraph.Hypergraph'>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, True]}], FontFamily -> 
                    "Courier"]}, True]], DynamicModuleValues -> Automatic], 
                    Setting[#, {0}]& ], HoldForm], "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  Failure[
  "PythonError", <|
   "MessageTemplate" :> 
    "Hypergraph.degree() missing 1 required positional argument: 'node'", 
    "MessageParameters" :> <||>, "FailureCode" :> "TypeError", "Traceback" :> 
    OpenerView[{
       Row[{
        "TypeError", " ", 
         "Hypergraph.degree() missing 1 required positional argument: \
'node'"}], 
       Style[
        Column[{
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/language/\
decorators.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/language/\
decorators.py"], 
                SystemOpen[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/language/\
decorators.py"]], Appearance -> "Frameless"], " in ", "safe_wl_execute"}], 
            Column[{
              
              Column[{"  14.      \"wl\": b'Failure[\"PythonFailure\", \
<|\"MessageTemplate\" -> \"Unexpected error occurred.\"|>]',", "  15.  }", 
                "  16.  ", "  17.  ", 
                "  18.  def safe_wl_execute(function, args=(), opts={}, \
export_opts={}, exception_class=None):", "  19.  ", "  20.      try:", 
                Item[
                "  21.          return export(function(*args, **opts), \
**export_opts)", Background -> LightYellow], 
                "  22.      except Exception as export_exception:", 
                "  23.          try:", "  24.              try:", "  25.  ", 
                "  26.                  # The user can provide an exception \
class, and it can be broken, in which case we are running another", 
                "  27.                  # try / except to return errors that \
are happening during class serialization"}, Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  "function", "<function handle_message at 0x105bc8fe0>"}, {
                  "args", "(<zmq.Socket(zmq.PAIR) at 0x105ba8c20>,)"}, {
                  "opts", 
                   "{'consumer': <ExternalEvaluateConsumer globals=4 \
objects=20>}"}, {"export_opts", 
                   "{'object_processor': <function \
start_zmq_loop.<locals>.<lambda> at 0x104e509a0>, 'target_format': 'wxf'}"}, {
                  "exception_class", "None"}, {
                  "export_exception", 
                   "Hypergraph.degree() missing 1 required positional \
argument: 'node'"}}, Background -> {Null, {LightGray}}, Alignment -> Left, 
                 Frame -> LightGray]}]}]}, False], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                SystemOpen[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless"], " in ", 
              "handle_message"}], 
            Column[{
              
              Column[{" 350.          self.socket.send(zmq.Frame(bytes))", 
                " 351.  ", " 352.      def send_side_effect(self, expr):", 
                " 353.          self.write(export(self.keep_listening(expr), \
target_format=\"wxf\"))", " 354.  ", " 355.  ", 
                " 356.  def handle_message(socket, consumer):", 
                Item[
                " 357.      result = \
binary_deserialize(socket.recv(copy=False).buffer, consumer=consumer)", 
                 Background -> LightYellow], " 358.  ", 
                " 359.      sys.stdout.flush()", " 360.      return result", 
                " 361.  ", " 362.  ", 
                " 363.  def start_zmq_instance(port=None, \
write_to_stdout=True, **opts):"}, Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  "socket", "<zmq.Socket(zmq.PAIR) at 0x105ba8c20>"}, {
                  "consumer", 
                   "<ExternalEvaluateConsumer globals=4 objects=20>"}}, 
                 Background -> {Null, {LightGray}}, Alignment -> Left, Frame -> 
                 LightGray]}]}]}, False], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
__init__.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
__init__.py"], 
                SystemOpen[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
__init__.py"]], Appearance -> "Frameless"], " in ", "binary_deserialize"}], 
            Column[{
              
              Column[{"  33.  ", "  34.      \"\"\"", 
                "  35.      parser = WXFParser(wxf_input)", 
                "  36.      if consumer is None:", 
                "  37.          consumer = WXFConsumerNumpy()", "  38.  ", 
                "  39.      try:", 
                Item[
                "  40.          o = consumer.next_expression(parser.tokens(), \
**kwargs)", Background -> LightYellow], "  41.      except StopIteration:", 
                "  42.          raise WolframParserException(", 
                "  43.              \"Input data does not represent a valid \
expression in WXF format. Expecting more input data.\"", "  44.          )", 
                "  45.      if not parser.context.is_valid_final_state():", 
                "  46.          raise WolframParserException("}, 
               Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  "wxf_input", 
                   "8:f\.02s0ExternalEvaluate`Private`\
ExternalEvaluateCommandS\n\
ReturnTypef\.02s\.04Listf\.02s0ExternalEvaluate`Private`\
ExternalEvaluateCommandS\.04Callf\.02s\.04Listf\.02s0ExternalEvaluate`Private`\
ExternalEvaluateCommandS\.05Fetchf\.01\.01\.01\.01\.01\.01\.01\.01s\.04ListL \
>U\.01\.01\.01\.01\.01\.01\.01\.01\.00\.00\.00f\.02s0ExternalEvaluate`Private`\
ExternalEvaluateCommandS\.05Fetchf\.01\.01\.01\.01\.01\.01\.01\.01s\.04ListLP-\
?U\.01\.01\.01\.01\.01\.01\.01\.01\.00\.00\.00S\nExpression"}, {
                  "consumer", 
                   "<ExternalEvaluateConsumer globals=4 objects=20>"}, {
                  "kwargs", "{}"}, {
                  "parser", 
                   "<wolframclient.deserializers.wxf.wxfparser.WXFParser \
object at 0x15561ac10>"}}, Background -> {Null, {LightGray}}, Alignment -> 
                 Left, Frame -> LightGray]}]}]}, False], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                SystemOpen[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless"], " in ", "next_expression"}], 
            Column[{
              
              Column[{"  69.          constants.WXF_CONSTANTS.RuleDelayed: \
\"consume_rule_delayed\",", "  70.      }", "  71.  ", 
                "  72.      def next_expression(self, tokens, **kwargs):", 
                "  73.          \"\"\"Deserialize the next expression \
starting at the next token yield by `tokens`.\"\"\"", 
                "  74.          token = next(tokens)", 
                "  75.          consumer = \
self._consumer_from_type(token.wxf_type)", 
                Item[
                "  76.          return consumer(token, tokens, **kwargs)", 
                 Background -> LightYellow], "  77.  ", 
                "  78.      def _consumer_from_type(self, wxf_type):", 
                "  79.          try:", 
                "  80.              func = self._mapping[wxf_type]", 
                "  81.          except KeyError:", 
                "  82.              raise WolframParserException("}, 
               Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  "self", 
                   "<ExternalEvaluateConsumer globals=4 objects=20>"}, {
                  "tokens", 
                   "<generator object WXFParser.tokens at 0x1555ec100>"}, {
                  "kwargs", "{}"}, {
                  "token", "WXFToken<b'f', data=None, len=2>"}, {
                  "consumer", 
                   "<bound method ExternalEvaluateConsumer.consume_function \
of <ExternalEvaluateConsumer globals=4 objects=20>>"}}, 
                 Background -> {Null, {LightGray}}, Alignment -> Left, Frame -> 
                 LightGray]}]}]}, False], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                SystemOpen[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless"], " in ", 
              "consume_function"}], 
            Column[{
              
              Column[{" 319.  ", 
                " 320.      def __init__(self, routes_registry={}, \
objects_registry={}, globals_registry={}):", 
                " 321.          self.objects_registry = \
registry(objects_registry)", 
                " 322.          self.globals_registry = \
registry(globals_registry)", 
                " 323.          self.routes_registry = \
registry(self.builtin_routes, **routes_registry)", " 324.  ", 
                " 325.      def consume_function(self, *args, **kwargs):", 
                Item[
                " 326.          expr = super().consume_function(*args, \
**kwargs)", Background -> LightYellow], " 327.  ", 
                " 328.          if check_wl_symbol(expr, self.hook_symbol):", 
                " 329.              assert len(expr.args) == 2", 
                " 330.              return \
self.dispatch_wl_object(*expr.args)", " 331.  ", 
                " 332.          return expr"}, Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  "self", 
                   "<ExternalEvaluateConsumer globals=4 objects=20>"}, {
                  "args", 
                   "(<wolframclient.deserializers.wxf.wxfparser.WXFToken \
object at 0x155652200>, <generator object WXFParser.tokens at \
0x1555ec100>)"}, {"kwargs", "{}"}, {
                  "__class__", 
                   "<class \
'wolframclient.utils.externalevaluate.ExternalEvaluateConsumer'>"}}, 
                 Background -> {Null, {LightGray}}, Alignment -> Left, Frame -> 
                 LightGray]}]}]}, False], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                SystemOpen[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless"], " in ", "consume_function"}], 
            Column[{
              
              Column[{"  94.          Return a :class:`list` if the head is \
symbol `List`, otherwise returns the result of \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`", "  95.          applied to the head and arguments.", "  96.  ", 
                "  97.          Usually custom parsing rules target \
Functions, but not List. To do so, it is recommended to override", 
                "  98.          \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`.", "  99.          \"\"\"", 
                " 100.          head = self.next_expression(tokens, \
**kwargs)", 
                Item[
                " 101.          args = tuple(", Background -> LightYellow], 
                " 102.              self.next_expression(tokens, **kwargs) \
for i in range(current_token.length)", " 103.          )", 
                " 104.          if head == self._LIST:", 
                " 105.              return args", " 106.          else:", 
                " 107.              return self.build_function(head, args, \
**kwargs)"}, Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  "self", 
                   "<ExternalEvaluateConsumer globals=4 objects=20>"}, {
                  "current_token", "WXFToken<b'f', data=None, len=2>"}, {
                  "tokens", 
                   "<generator object WXFParser.tokens at 0x1555ec100>"}, {
                  "kwargs", "{}"}, {
                  "head", 
                   "ExternalEvaluate`Private`ExternalEvaluateCommand"}}, 
                 Background -> {Null, {LightGray}}, Alignment -> Left, Frame -> 
                 LightGray]}]}]}, False], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                SystemOpen[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless"], " in ", "<genexpr>"}], 
            Column[{
              
              Column[{"  95.          applied to the head and arguments.", 
                "  96.  ", 
                "  97.          Usually custom parsing rules target \
Functions, but not List. To do so, it is recommended to override", 
                "  98.          \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`.", "  99.          \"\"\"", 
                " 100.          head = self.next_expression(tokens, \
**kwargs)", " 101.          args = tuple(", 
                Item[
                " 102.              self.next_expression(tokens, **kwargs) \
for i in range(current_token.length)", Background -> LightYellow], 
                " 103.          )", " 104.          if head == self._LIST:", 
                " 105.              return args", " 106.          else:", 
                " 107.              return self.build_function(head, args, \
**kwargs)", " 108.  "}, Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  ".0", "<range_iterator object at 0x155631f80>"}, {
                  "i", "1"}, {"kwargs", "{}"}, {
                  "self", 
                   "<ExternalEvaluateConsumer globals=4 objects=20>"}, {
                  "tokens", 
                   "<generator object WXFParser.tokens at 0x1555ec100>"}}, 
                 Background -> {Null, {LightGray}}, Alignment -> Left, Frame -> 
                 LightGray]}]}]}, False], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                SystemOpen[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless"], " in ", "next_expression"}], 
            Column[{
              
              Column[{"  69.          constants.WXF_CONSTANTS.RuleDelayed: \
\"consume_rule_delayed\",", "  70.      }", "  71.  ", 
                "  72.      def next_expression(self, tokens, **kwargs):", 
                "  73.          \"\"\"Deserialize the next expression \
starting at the next token yield by `tokens`.\"\"\"", 
                "  74.          token = next(tokens)", 
                "  75.          consumer = \
self._consumer_from_type(token.wxf_type)", 
                Item[
                "  76.          return consumer(token, tokens, **kwargs)", 
                 Background -> LightYellow], "  77.  ", 
                "  78.      def _consumer_from_type(self, wxf_type):", 
                "  79.          try:", 
                "  80.              func = self._mapping[wxf_type]", 
                "  81.          except KeyError:", 
                "  82.              raise WolframParserException("}, 
               Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  "self", 
                   "<ExternalEvaluateConsumer globals=4 objects=20>"}, {
                  "tokens", 
                   "<generator object WXFParser.tokens at 0x1555ec100>"}, {
                  "kwargs", "{}"}, {
                  "token", "WXFToken<b'f', data=None, len=2>"}, {
                  "consumer", 
                   "<bound method ExternalEvaluateConsumer.consume_function \
of <ExternalEvaluateConsumer globals=4 objects=20>>"}}, 
                 Background -> {Null, {LightGray}}, Alignment -> Left, Frame -> 
                 LightGray]}]}]}, False], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                SystemOpen[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless"], " in ", 
              "consume_function"}], 
            Column[{
              
              Column[{" 319.  ", 
                
                " 320.      def __init__(self, routes_registry={}, \
objects_registry={}, globals_registry={}):", 
                " 321.          self.objects_registry = \
registry(objects_registry)", 
                " 322.          self.globals_registry = \
registry(globals_registry)", 
                " 323.          self.routes_registry = \
registry(self.builtin_routes, **routes_registry)", " 324.  ", 
                " 325.      def consume_function(self, *args, **kwargs):", 
                Item[
                " 326.          expr = super().consume_function(*args, \
**kwargs)", Background -> LightYellow], " 327.  ", 
                " 328.          if check_wl_symbol(expr, self.hook_symbol):", 
                " 329.              assert len(expr.args) == 2", 
                " 330.              return \
self.dispatch_wl_object(*expr.args)", " 331.  ", 
                " 332.          return expr"}, Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  "self", 
                   "<ExternalEvaluateConsumer globals=4 objects=20>"}, {
                  "args", 
                   "(<wolframclient.deserializers.wxf.wxfparser.WXFToken \
object at 0x155653970>, <generator object WXFParser.tokens at \
0x1555ec100>)"}, {"kwargs", "{}"}, {
                  "__class__", 
                   "<class \
'wolframclient.utils.externalevaluate.ExternalEvaluateConsumer'>"}}, 
                 Background -> {Null, {LightGray}}, Alignment -> Left, Frame -> 
                 LightGray]}]}]}, False], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                SystemOpen[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless"], " in ", "consume_function"}], 
            Column[{
              
              Column[{"  94.          Return a :class:`list` if the head is \
symbol `List`, otherwise returns the result of \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`", "  95.          applied to the head and arguments.", "  96.  ", 
                "  97.          Usually custom parsing rules target \
Functions, but not List. To do so, it is recommended to override", 
                "  98.          \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`.", "  99.          \"\"\"", 
                " 100.          head = self.next_expression(tokens, \
**kwargs)", 
                Item[
                " 101.          args = tuple(", Background -> LightYellow], 
                " 102.              self.next_expression(tokens, **kwargs) \
for i in range(current_token.length)", " 103.          )", 
                " 104.          if head == self._LIST:", 
                " 105.              return args", " 106.          else:", 
                " 107.              return self.build_function(head, args, \
**kwargs)"}, Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  "self", 
                   "<ExternalEvaluateConsumer globals=4 objects=20>"}, {
                  "current_token", "WXFToken<b'f', data=None, len=2>"}, {
                  "tokens", 
                   "<generator object WXFParser.tokens at 0x1555ec100>"}, {
                  "kwargs", "{}"}, {"head", "List"}}, 
                 Background -> {Null, {LightGray}}, Alignment -> Left, Frame -> 
                 LightGray]}]}]}, False], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                SystemOpen[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless"], " in ", "<genexpr>"}], 
            Column[{
              
              Column[{"  95.          applied to the head and arguments.", 
                "  96.  ", 
                "  97.          Usually custom parsing rules target \
Functions, but not List. To do so, it is recommended to override", 
                "  98.          \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`.", "  99.          \"\"\"", 
                " 100.          head = self.next_expression(tokens, \
**kwargs)", " 101.          args = tuple(", 
                Item[
                " 102.              self.next_expression(tokens, **kwargs) \
for i in range(current_token.length)", Background -> LightYellow], 
                " 103.          )", " 104.          if head == self._LIST:", 
                " 105.              return args", " 106.          else:", 
                " 107.              return self.build_function(head, args, \
**kwargs)", " 108.  "}, Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  ".0", "<range_iterator object at 0x1556320d0>"}, {
                  "i", "0"}, {"kwargs", "{}"}, {
                  "self", 
                   "<ExternalEvaluateConsumer globals=4 objects=20>"}, {
                  "tokens", 
                   "<generator object WXFParser.tokens at 0x1555ec100>"}}, 
                 Background -> {Null, {LightGray}}, Alignment -> Left, Frame -> 
                 LightGray]}]}]}, False], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                SystemOpen[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless"], " in ", "next_expression"}], 
            Column[{
              
              Column[{"  69.          constants.WXF_CONSTANTS.RuleDelayed: \
\"consume_rule_delayed\",", "  70.      }", "  71.  ", 
                "  72.      def next_expression(self, tokens, **kwargs):", 
                "  73.          \"\"\"Deserialize the next expression \
starting at the next token yield by `tokens`.\"\"\"", 
                "  74.          token = next(tokens)", 
                "  75.          consumer = \
self._consumer_from_type(token.wxf_type)", 
                Item[
                "  76.          return consumer(token, tokens, **kwargs)", 
                 Background -> LightYellow], "  77.  ", 
                "  78.      def _consumer_from_type(self, wxf_type):", 
                "  79.          try:", 
                "  80.              func = self._mapping[wxf_type]", 
                "  81.          except KeyError:", 
                "  82.              raise WolframParserException("}, 
               Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  "self", 
                   "<ExternalEvaluateConsumer globals=4 objects=20>"}, {
                  "tokens", 
                   "<generator object WXFParser.tokens at 0x1555ec100>"}, {
                  "kwargs", "{}"}, {
                  "token", "WXFToken<b'f', data=None, len=2>"}, {
                  "consumer", 
                   "<bound method ExternalEvaluateConsumer.consume_function \
of <ExternalEvaluateConsumer globals=4 objects=20>>"}}, 
                 Background -> {Null, {LightGray}}, Alignment -> Left, Frame -> 
                 LightGray]}]}]}, False], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                SystemOpen[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless"], " in ", 
              "consume_function"}], 
            Column[{
              
              Column[{" 323.          self.routes_registry = \
registry(self.builtin_routes, **routes_registry)", " 324.  ", 
                " 325.      def consume_function(self, *args, **kwargs):", 
                " 326.          expr = super().consume_function(*args, \
**kwargs)", " 327.  ", 
                " 328.          if check_wl_symbol(expr, self.hook_symbol):", 
                " 329.              assert len(expr.args) == 2", 
                Item[
                " 330.              return \
self.dispatch_wl_object(*expr.args)", Background -> LightYellow], " 331.  ", 
                " 332.          return expr", " 333.  ", 
                " 334.      def dispatch_wl_object(self, route, args):", 
                " 335.          return self.routes_registry[route](self, \
*args)", " 336.  "}, Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  "self", 
                   "<ExternalEvaluateConsumer globals=4 objects=20>"}, {
                  "args", 
                   "(<wolframclient.deserializers.wxf.wxfparser.WXFToken \
object at 0x155653560>, <generator object WXFParser.tokens at \
0x1555ec100>)"}, {"kwargs", "{}"}, {
                  "expr", 
                   "ExternalEvaluate`Private`ExternalEvaluateCommand['Call', \
(<function degree at 0x1553ee520>, None, \
hypernetx.classes.Hypergraph.Hypergraph)]"}, {
                  "__class__", 
                   "<class \
'wolframclient.utils.externalevaluate.ExternalEvaluateConsumer'>"}}, 
                 Background -> {Null, {LightGray}}, Alignment -> Left, Frame -> 
                 LightGray]}]}]}, False], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                SystemOpen[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless"], " in ", 
              "dispatch_wl_object"}], 
            Column[{
              
              Column[{" 328.          if check_wl_symbol(expr, \
self.hook_symbol):", " 329.              assert len(expr.args) == 2", 
                " 330.              return \
self.dispatch_wl_object(*expr.args)", " 331.  ", " 332.          return expr",
                 " 333.  ", 
                " 334.      def dispatch_wl_object(self, route, args):", 
                Item[
                " 335.          return self.routes_registry[route](self, \
*args)", Background -> LightYellow], " 336.  ", 
                " 337.      def __repr__(self):", 
                " 338.          return \"<{} globals={} \
objects={}>\".format(", 
                " 339.              self.__class__.__name__, \
len(self.globals_registry), len(self.objects_registry)", " 340.          )", 
                " 341.  "}, Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  "self", 
                   "<ExternalEvaluateConsumer globals=4 objects=20>"}, {
                  "route", "Call"}, {
                  "args", 
                   "(<function degree at 0x1553ee520>, None, \
hypernetx.classes.Hypergraph.Hypergraph)"}}, 
                 Background -> {Null, {LightGray}}, Alignment -> Left, Frame -> 
                 LightGray]}]}]}, False], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                SystemOpen[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless"], " in ", "Call"}], 
            Column[{
              
              Column[{" 245.  ", " 246.  ", 
                " 247.  @routes.register_function", 
                " 248.  def Call(consumer, result, *args):", " 249.  ", 
                " 250.      pos, kwargs = unpack_optionals(args)", " 251.  ", 
                
                Item[
                " 252.      return result(*pos, **kwargs)", Background -> 
                 LightYellow], " 253.  ", " 254.  ", 
                " 255.  @routes.register_function", 
                " 256.  def MethodCall(consumer, result, names, *args):", 
                " 257.      return Call(consumer, GetAttribute(consumer, \
result, names), *args)", " 258.  "}, Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  "consumer", 
                   "<ExternalEvaluateConsumer globals=4 objects=20>"}, {
                  "result", "<function degree at 0x1553ee520>"}, {
                  "args", 
                   "(None, hypernetx.classes.Hypergraph.Hypergraph,)"}, {
                  "pos", "[None, hypernetx.classes.Hypergraph.Hypergraph]"}, {
                  "kwargs", "{}"}}, Background -> {Null, {LightGray}}, 
                 Alignment -> Left, Frame -> LightGray]}]}]}, True], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Users/arnoudb/hypernetx/Python/Hypergraph/Hypergraph.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Users/arnoudb/hypernetx/Python/Hypergraph/Hypergraph.py"], 
                SystemOpen[
                "/Users/arnoudb/hypernetx/Python/Hypergraph/Hypergraph.py"]], 
               Appearance -> "Frameless"], " in ", "degree"}], 
            Column[{
              
              Column[{"  39.  def connected_components(hg):", 
                "  40.      return hg.connected_components()", "  41.  ", 
                "  42.  def dataframe(hg):", "  43.      return hg.dataframe",
                 "  44.  ", "  45.  def degree(hg):", 
                Item[
                "  46.      return hg.degree()", Background -> LightYellow], 
                "  47.  ", "  48.  def diameter(hg):", 
                "  49.      return hg.diameter()", "  50.  ", 
                "  51.  def dim(hg):", "  52.      return hg.dim()"}, 
               Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  "hg", "None, <class \
'hypernetx.classes.Hypergraph.Hypergraph'>"}}, 
                 Background -> {Null, {LightGray}}, Alignment -> Left, Frame -> 
                 LightGray]}]}]}, True]}], FontFamily -> "Courier"]}, True]|>],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.922797343024625*^9, 3.922797784107085*^9, 
  3.922801295225253*^9},
 CellLabel->"Out[20]=",ExpressionUUID->"6ce31973-cb0f-455e-a646-14e11d6ec597"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"HypergraphDiameter", "[", "hg", "]"}]], "Input",
 CellChangeTimes->{{3.92279738067467*^9, 3.922797381749537*^9}},
 CellLabel->"In[21]:=",ExpressionUUID->"61da78d8-104b-4011-babe-4337df3d24d5"],

Cell[BoxData["1"], "Output",
 CellChangeTimes->{3.9227973820354233`*^9, 3.922797784125271*^9, 
  3.922801295844689*^9},
 CellLabel->"Out[21]=",ExpressionUUID->"d1225344-a400-45f9-b5db-a7981369a18a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"HypergraphDim", "[", "hg", "]"}]], "Input",
 CellChangeTimes->{{3.922797392344247*^9, 3.922797393214918*^9}},
 CellLabel->"In[22]:=",ExpressionUUID->"b52d46a5-71b9-4ae0-8e7b-b9b846791ec1"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["Failure",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            FrameBox[
             StyleBox["\"\[WarningSign]\"", 
              Directive["Message", 35], StripOnInput -> False], 
             ContentPadding -> False, FrameStyle -> None, 
             FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
            GridBox[{{
               TagBox[
                GridBox[{{
                   TagBox["\"Message: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                   "\"Hypergraph.dim() missing 1 required positional \
argument: 'edge'\"", "SummaryItem"]}}, 
                 GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                 GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                 GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}, {
               TagBox[
                GridBox[{{
                   TagBox["\"Tag: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["\"PythonError\"", "SummaryItem"]}}, 
                 GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                 GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                 GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            FrameBox[
             StyleBox["\"\[WarningSign]\"", 
              Directive["Message", 35], StripOnInput -> False], 
             ContentPadding -> False, FrameStyle -> None, 
             FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
            GridBox[{{
               TagBox[
                GridBox[{{
                   TagBox["\"Message: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                   "\"Hypergraph.dim() missing 1 required positional \
argument: 'edge'\"", "SummaryItem"]}}, 
                 GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                 GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                 GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}, {
               TagBox[
                GridBox[{{
                   TagBox["\"Tag: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["\"PythonError\"", "SummaryItem"]}}, 
                 GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                 GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                 GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}, {
               RowBox[{
                 TagBox[
                  TemplateBox[{"\"FailureCode\"", "\": \""}, "RowDefault"], 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox[
                  TagBox["\"TypeError\"", HoldForm], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                  TemplateBox[{"\"Traceback\"", "\": \""}, "RowDefault"], 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   TagBox[
                    DynamicModuleBox[{Typeset`var$$ = True}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    
                    TemplateBox[{
                    "\"TypeError\"", "\" \"", 
                    "\"Hypergraph.dim() missing 1 required positional \
argument: 'edge'\""}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    
                    TemplateBox[{
                    "\"TypeError\"", "\" \"", 
                    "\"Hypergraph.dim() missing 1 required positional \
argument: 'edge'\""}, "RowDefault"]}, {"", 
                    PaneBox[
                    StyleBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/language/\
decorators.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/language/\
decorators.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/language/\
decorators.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"safe_wl_execute\""}, 
                    "RowDefault"]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/language/\
decorators.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/language/\
decorators.py"], 
                    SystemOpen[
                    
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/language/\
decorators.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"safe_wl_execute\""}, 
                    "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{
                    "\"  14.      \\\"wl\\\": \
b'Failure[\\\"PythonFailure\\\", <|\\\"MessageTemplate\\\" -> \\\"Unexpected \
error occurred.\\\"|>]',\""}, {"\"  15.  }\""}, {"\"  16.  \""}, {
                    "\"  17.  \""}, {
                    "\"  18.  def safe_wl_execute(function, args=(), opts={}, \
export_opts={}, exception_class=None):\""}, {"\"  19.  \""}, {
                    "\"  20.      try:\""}, {
                    ItemBox[
                    "\"  21.          return export(function(*args, **opts), \
**export_opts)\"", Background -> RGBColor[1, 1, 0.85], StripOnInput -> 
                    False]}, {
                    "\"  22.      except Exception as export_exception:\""}, {
                    "\"  23.          try:\""}, {
                    "\"  24.              try:\""}, {"\"  25.  \""}, {
                    "\"  26.                  # The user can provide an \
exception class, and it can be broken, in which case we are running \
another\""}, {
                    "\"  27.                  # try / except to return errors \
that are happening during class serialization\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\"function\"", 
                    "\"<function handle_message at 0x105bc8fe0>\""}, {
                    "\"args\"", 
                    "\"(<zmq.Socket(zmq.PAIR) at 0x105ba8c20>,)\""}, {
                    "\"opts\"", 
                    "\"{'consumer': <ExternalEvaluateConsumer globals=4 \
objects=22>}\""}, {"\"export_opts\"", 
                    "\"{'object_processor': <function \
start_zmq_loop.<locals>.<lambda> at 0x104e509a0>, 'target_format': \
'wxf'}\""}, {"\"exception_class\"", "\"None\""}, {"\"export_exception\"", 
                    "\"Hypergraph.dim() missing 1 required positional \
argument: 'edge'\""}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {"Columns" -> {{
                    Null}}, "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"function", 
                    "<function handle_message at 0x105bc8fe0>"}, {
                    "args", "(<zmq.Socket(zmq.PAIR) at 0x105ba8c20>,)"}, {
                    "opts", 
                    "{'consumer': <ExternalEvaluateConsumer globals=4 \
objects=22>}"}, {"export_opts", 
                    "{'object_processor': <function \
start_zmq_loop.<locals>.<lambda> at 0x104e509a0>, 'target_format': 'wxf'}"}, {
                    "exception_class", "None"}, {"export_exception", 
                    "Hypergraph.dim() missing 1 required positional argument: \
'edge'"}}, Background -> {Null, {LightGray}}, Alignment -> Left, Frame -> 
                    LightGray]}, False]], DynamicModuleValues -> Automatic], 
                    Setting[#, {0}]& ]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/language/\
decorators.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/language/\
decorators.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/language/\
decorators.py"]], Appearance -> "Frameless"], " in ", "safe_wl_execute"}], 
                    Column[{
                    
                    Column[{
                    "  14.      \"wl\": b'Failure[\"PythonFailure\", \
<|\"MessageTemplate\" -> \"Unexpected error occurred.\"|>]',", "  15.  }", 
                    "  16.  ", "  17.  ", 
                    "  18.  def safe_wl_execute(function, args=(), opts={}, \
export_opts={}, exception_class=None):", "  19.  ", "  20.      try:", 
                    Item[
                    "  21.          return export(function(*args, **opts), \
**export_opts)", Background -> LightYellow], 
                    "  22.      except Exception as export_exception:", 
                    "  23.          try:", "  24.              try:", 
                    "  25.  ", 
                    "  26.                  # The user can provide an \
exception class, and it can be broken, in which case we are running another", 
                    "  27.                  # try / except to return errors \
that are happening during class serialization"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"function", 
                    "<function handle_message at 0x105bc8fe0>"}, {
                    "args", "(<zmq.Socket(zmq.PAIR) at 0x105ba8c20>,)"}, {
                    "opts", 
                    "{'consumer': <ExternalEvaluateConsumer globals=4 \
objects=22>}"}, {"export_opts", 
                    "{'object_processor': <function \
start_zmq_loop.<locals>.<lambda> at 0x104e509a0>, 'target_format': 'wxf'}"}, {
                    "exception_class", "None"}, {
                    "export_exception", 
                    "Hypergraph.dim() missing 1 required positional argument: \
'edge'"}}, Background -> {Null, {LightGray}}, Alignment -> Left, Frame -> 
                    LightGray]}]}]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless", Evaluator -> Automatic, 
                    Method -> "Preemptive"], "\" in \"", 
                    "\"handle_message\""}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless", Evaluator -> Automatic, 
                    Method -> "Preemptive"], "\" in \"", 
                    "\"handle_message\""}, "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{
                    "\" 350.          self.socket.send(zmq.Frame(bytes))\""}, \
{"\" 351.  \""}, {"\" 352.      def send_side_effect(self, expr):\""}, {
                    "\" 353.          \
self.write(export(self.keep_listening(expr), target_format=\\\"wxf\\\"))\""}, \
{"\" 354.  \""}, {"\" 355.  \""}, {
                    "\" 356.  def handle_message(socket, consumer):\""}, {
                    ItemBox[
                    "\" 357.      result = \
binary_deserialize(socket.recv(copy=False).buffer, consumer=consumer)\"", 
                    Background -> RGBColor[1, 1, 0.85], StripOnInput -> 
                    False]}, {"\" 358.  \""}, {
                    "\" 359.      sys.stdout.flush()\""}, {
                    "\" 360.      return result\""}, {"\" 361.  \""}, {
                    "\" 362.  \""}, {
                    "\" 363.  def start_zmq_instance(port=None, \
write_to_stdout=True, **opts):\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\"socket\"", 
                    "\"<zmq.Socket(zmq.PAIR) at 0x105ba8c20>\""}, {
                    "\"consumer\"", 
                    "\"<ExternalEvaluateConsumer globals=4 objects=22>\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Null}}, 
                    "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"socket", 
                    "<zmq.Socket(zmq.PAIR) at 0x105ba8c20>"}, {
                    "consumer", 
                    "<ExternalEvaluateConsumer globals=4 objects=22>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless"], " in ", 
                    "handle_message"}], 
                    Column[{
                    
                    Column[{
                    " 350.          self.socket.send(zmq.Frame(bytes))", 
                    " 351.  ", " 352.      def send_side_effect(self, expr):",
                     " 353.          \
self.write(export(self.keep_listening(expr), target_format=\"wxf\"))", 
                    " 354.  ", " 355.  ", 
                    " 356.  def handle_message(socket, consumer):", 
                    Item[
                    " 357.      result = \
binary_deserialize(socket.recv(copy=False).buffer, consumer=consumer)", 
                    Background -> LightYellow], " 358.  ", 
                    " 359.      sys.stdout.flush()", 
                    " 360.      return result", " 361.  ", " 362.  ", 
                    " 363.  def start_zmq_instance(port=None, \
write_to_stdout=True, **opts):"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"socket", 
                    "<zmq.Socket(zmq.PAIR) at 0x105ba8c20>"}, {
                    "consumer", 
                    "<ExternalEvaluateConsumer globals=4 objects=22>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
__init__.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
__init__.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
__init__.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"binary_deserialize\""}, 
                    "RowDefault"]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
__init__.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
__init__.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
__init__.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"binary_deserialize\""}, 
                    "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{"\"  33.  \""}, {
                    "\"  34.      \\\"\\\"\\\"\""}, {
                    "\"  35.      parser = WXFParser(wxf_input)\""}, {
                    "\"  36.      if consumer is None:\""}, {
                    "\"  37.          consumer = WXFConsumerNumpy()\""}, {
                    "\"  38.  \""}, {"\"  39.      try:\""}, {
                    ItemBox[
                    "\"  40.          o = \
consumer.next_expression(parser.tokens(), **kwargs)\"", Background -> 
                    RGBColor[1, 1, 0.85], StripOnInput -> False]}, {
                    "\"  41.      except StopIteration:\""}, {
                    "\"  42.          raise WolframParserException(\""}, {
                    "\"  43.              \\\"Input data does not represent a \
valid expression in WXF format. Expecting more input data.\\\"\""}, {
                    "\"  44.          )\""}, {
                    "\"  45.      if not \
parser.context.is_valid_final_state():\""}, {
                    "\"  46.          raise WolframParserException(\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\"wxf_input\"", 
                    "\"8:f\.02s0ExternalEvaluate`Private`\
ExternalEvaluateCommandS\\nReturnTypef\.02s\.04Listf\.02s0ExternalEvaluate`\
Private`ExternalEvaluateCommandS\.04Callf\.02s\.04Listf\.02s0ExternalEvaluate`\
Private`ExternalEvaluateCommandS\.05Fetchf\.01\.01\.01\.01\.01\.01\.01\.01s\
\.04ListL`>U\.01\.01\.01\.01\.01\.01\.01\.01\.00\.00\.00f\.02\
s0ExternalEvaluate`Private`ExternalEvaluateCommandS\.05Fetchf\.01\.01\.01\.01\
\.01\.01\.01\.01s\.04ListLP-?U\.01\.01\.01\.01\.01\.01\.01\.01\.00\.00\.00S\\\
nExpression\""}, {"\"consumer\"", 
                    "\"<ExternalEvaluateConsumer globals=4 objects=22>\""}, {
                    "\"kwargs\"", "\"{}\""}, {"\"parser\"", 
                    "\"<wolframclient.deserializers.wxf.wxfparser.WXFParser \
object at 0x15536e210>\""}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {"Columns" -> {{
                    Null}}, "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"wxf_input", 
                    "8:f\.02s0ExternalEvaluate`Private`\
ExternalEvaluateCommandS\n\
ReturnTypef\.02s\.04Listf\.02s0ExternalEvaluate`Private`\
ExternalEvaluateCommandS\.04Callf\.02s\.04Listf\.02s0ExternalEvaluate`Private`\
ExternalEvaluateCommandS\.05Fetchf\.01\.01\.01\.01\.01\.01\.01\.01s\.04ListL`>\
U\.01\.01\.01\.01\.01\.01\.01\.01\.00\.00\.00f\.02s0ExternalEvaluate`Private`\
ExternalEvaluateCommandS\.05Fetchf\.01\.01\.01\.01\.01\.01\.01\.01s\.04ListLP-\
?U\.01\.01\.01\.01\.01\.01\.01\.01\.00\.00\.00S\nExpression"}, {
                    "consumer", 
                    "<ExternalEvaluateConsumer globals=4 objects=22>"}, {
                    "kwargs", "{}"}, {"parser", 
                    "<wolframclient.deserializers.wxf.wxfparser.WXFParser \
object at 0x15536e210>"}}, Background -> {Null, {LightGray}}, Alignment -> 
                    Left, Frame -> LightGray]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
__init__.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
__init__.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
__init__.py"]], Appearance -> "Frameless"], " in ", "binary_deserialize"}], 
                    Column[{
                    
                    Column[{"  33.  ", "  34.      \"\"\"", 
                    "  35.      parser = WXFParser(wxf_input)", 
                    "  36.      if consumer is None:", 
                    "  37.          consumer = WXFConsumerNumpy()", "  38.  ",
                     "  39.      try:", 
                    Item[
                    "  40.          o = \
consumer.next_expression(parser.tokens(), **kwargs)", Background -> 
                    LightYellow], "  41.      except StopIteration:", 
                    "  42.          raise WolframParserException(", 
                    "  43.              \"Input data does not represent a \
valid expression in WXF format. Expecting more input data.\"", 
                    "  44.          )", 
                    "  45.      if not \
parser.context.is_valid_final_state():", 
                    "  46.          raise WolframParserException("}, 
                    Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"wxf_input", 
                    "8:f\.02s0ExternalEvaluate`Private`\
ExternalEvaluateCommandS\n\
ReturnTypef\.02s\.04Listf\.02s0ExternalEvaluate`Private`\
ExternalEvaluateCommandS\.04Callf\.02s\.04Listf\.02s0ExternalEvaluate`Private`\
ExternalEvaluateCommandS\.05Fetchf\.01\.01\.01\.01\.01\.01\.01\.01s\.04ListL`>\
U\.01\.01\.01\.01\.01\.01\.01\.01\.00\.00\.00f\.02s0ExternalEvaluate`Private`\
ExternalEvaluateCommandS\.05Fetchf\.01\.01\.01\.01\.01\.01\.01\.01s\.04ListLP-\
?U\.01\.01\.01\.01\.01\.01\.01\.01\.00\.00\.00S\nExpression"}, {
                    "consumer", 
                    "<ExternalEvaluateConsumer globals=4 objects=22>"}, {
                    "kwargs", "{}"}, {"parser", 
                    "<wolframclient.deserializers.wxf.wxfparser.WXFParser \
object at 0x15536e210>"}}, Background -> {Null, {LightGray}}, Alignment -> 
                    Left, Frame -> LightGray]}]}]}, False]], 
                    DynamicModuleValues -> Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"next_expression\""}, 
                    "RowDefault"]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"next_expression\""}, 
                    "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{
                    "\"  69.          constants.WXF_CONSTANTS.RuleDelayed: \\\
\"consume_rule_delayed\\\",\""}, {"\"  70.      }\""}, {"\"  71.  \""}, {
                    "\"  72.      def next_expression(self, tokens, \
**kwargs):\""}, {
                    "\"  73.          \\\"\\\"\\\"Deserialize the next \
expression starting at the next token yield by `tokens`.\\\"\\\"\\\"\""}, {
                    "\"  74.          token = next(tokens)\""}, {
                    "\"  75.          consumer = \
self._consumer_from_type(token.wxf_type)\""}, {
                    ItemBox[
                    "\"  76.          return consumer(token, tokens, \
**kwargs)\"", Background -> RGBColor[1, 1, 0.85], StripOnInput -> False]}, {
                    "\"  77.  \""}, {
                    "\"  78.      def _consumer_from_type(self, \
wxf_type):\""}, {"\"  79.          try:\""}, {
                    "\"  80.              func = self._mapping[wxf_type]\""}, \
{"\"  81.          except KeyError:\""}, {
                    "\"  82.              raise WolframParserException(\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\"self\"", 
                    "\"<ExternalEvaluateConsumer globals=4 objects=22>\""}, {
                    "\"tokens\"", 
                    "\"<generator object WXFParser.tokens at \
0x1555ed480>\""}, {"\"kwargs\"", "\"{}\""}, {"\"token\"", 
                    "\"WXFToken<b'f', data=None, len=2>\""}, {"\"consumer\"", 
                    "\"<bound method \
ExternalEvaluateConsumer.consume_function of <ExternalEvaluateConsumer \
globals=4 objects=22>>\""}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {"Columns" -> {{
                    Null}}, "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<ExternalEvaluateConsumer globals=4 objects=22>"}, {
                    "tokens", 
                    "<generator object WXFParser.tokens at 0x1555ed480>"}, {
                    "kwargs", "{}"}, {"token", 
                    "WXFToken<b'f', data=None, len=2>"}, {
                    "consumer", 
                    "<bound method ExternalEvaluateConsumer.consume_function \
of <ExternalEvaluateConsumer globals=4 objects=22>>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless"], " in ", "next_expression"}], 
                    Column[{
                    
                    Column[{
                    "  69.          constants.WXF_CONSTANTS.RuleDelayed: \
\"consume_rule_delayed\",", "  70.      }", "  71.  ", 
                    "  72.      def next_expression(self, tokens, **kwargs):",
                     "  73.          \"\"\"Deserialize the next expression \
starting at the next token yield by `tokens`.\"\"\"", 
                    "  74.          token = next(tokens)", 
                    "  75.          consumer = \
self._consumer_from_type(token.wxf_type)", 
                    Item[
                    "  76.          return consumer(token, tokens, **kwargs)",
                     Background -> LightYellow], "  77.  ", 
                    "  78.      def _consumer_from_type(self, wxf_type):", 
                    "  79.          try:", 
                    "  80.              func = self._mapping[wxf_type]", 
                    "  81.          except KeyError:", 
                    "  82.              raise WolframParserException("}, 
                    Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<ExternalEvaluateConsumer globals=4 objects=22>"}, {
                    "tokens", 
                    "<generator object WXFParser.tokens at 0x1555ed480>"}, {
                    "kwargs", "{}"}, {"token", 
                    "WXFToken<b'f', data=None, len=2>"}, {
                    "consumer", 
                    "<bound method ExternalEvaluateConsumer.consume_function \
of <ExternalEvaluateConsumer globals=4 objects=22>>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless", Evaluator -> Automatic, 
                    Method -> "Preemptive"], "\" in \"", 
                    "\"consume_function\""}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless", Evaluator -> Automatic, 
                    Method -> "Preemptive"], "\" in \"", 
                    "\"consume_function\""}, "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{"\" 319.  \""}, {
                    "\" 320.      def __init__(self, routes_registry={}, \
objects_registry={}, globals_registry={}):\""}, {
                    "\" 321.          self.objects_registry = \
registry(objects_registry)\""}, {
                    "\" 322.          self.globals_registry = \
registry(globals_registry)\""}, {
                    "\" 323.          self.routes_registry = \
registry(self.builtin_routes, **routes_registry)\""}, {"\" 324.  \""}, {
                    "\" 325.      def consume_function(self, *args, \
**kwargs):\""}, {
                    ItemBox[
                    "\" 326.          expr = super().consume_function(*args, \
**kwargs)\"", Background -> RGBColor[1, 1, 0.85], StripOnInput -> False]}, {
                    "\" 327.  \""}, {
                    "\" 328.          if check_wl_symbol(expr, \
self.hook_symbol):\""}, {
                    "\" 329.              assert len(expr.args) == 2\""}, {
                    "\" 330.              return \
self.dispatch_wl_object(*expr.args)\""}, {"\" 331.  \""}, {
                    "\" 332.          return expr\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\"self\"", 
                    "\"<ExternalEvaluateConsumer globals=4 objects=22>\""}, {
                    "\"args\"", 
                    "\"(<wolframclient.deserializers.wxf.wxfparser.WXFToken \
object at 0x1556539c0>, <generator object WXFParser.tokens at \
0x1555ed480>)\""}, {"\"kwargs\"", "\"{}\""}, {"\"__class__\"", 
                    "\"<class \
'wolframclient.utils.externalevaluate.ExternalEvaluateConsumer'>\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Null}}, 
                    "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<ExternalEvaluateConsumer globals=4 objects=22>"}, {
                    "args", 
                    "(<wolframclient.deserializers.wxf.wxfparser.WXFToken \
object at 0x1556539c0>, <generator object WXFParser.tokens at \
0x1555ed480>)"}, {"kwargs", "{}"}, {"__class__", 
                    "<class \
'wolframclient.utils.externalevaluate.ExternalEvaluateConsumer'>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless"], " in ", 
                    "consume_function"}], 
                    Column[{
                    
                    Column[{" 319.  ", 
                    " 320.      def __init__(self, routes_registry={}, \
objects_registry={}, globals_registry={}):", 
                    " 321.          self.objects_registry = \
registry(objects_registry)", 
                    " 322.          self.globals_registry = \
registry(globals_registry)", 
                    " 323.          self.routes_registry = \
registry(self.builtin_routes, **routes_registry)", " 324.  ", 
                    " 325.      def consume_function(self, *args, **kwargs):", 
                    Item[
                    " 326.          expr = super().consume_function(*args, \
**kwargs)", Background -> LightYellow], " 327.  ", 
                    " 328.          if check_wl_symbol(expr, \
self.hook_symbol):", " 329.              assert len(expr.args) == 2", 
                    " 330.              return \
self.dispatch_wl_object(*expr.args)", " 331.  ", 
                    " 332.          return expr"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<ExternalEvaluateConsumer globals=4 objects=22>"}, {
                    "args", 
                    "(<wolframclient.deserializers.wxf.wxfparser.WXFToken \
object at 0x1556539c0>, <generator object WXFParser.tokens at \
0x1555ed480>)"}, {"kwargs", "{}"}, {"__class__", 
                    "<class \
'wolframclient.utils.externalevaluate.ExternalEvaluateConsumer'>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"consume_function\""}, 
                    "RowDefault"]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"consume_function\""}, 
                    "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{
                    "\"  94.          Return a :class:`list` if the head is \
symbol `List`, otherwise returns the result of \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`\""}, {"\"  95.          applied to the head and arguments.\""}, {
                    "\"  96.  \""}, {
                    "\"  97.          Usually custom parsing rules target \
Functions, but not List. To do so, it is recommended to override\""}, {
                    "\"  98.          \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`.\""}, {"\"  99.          \\\"\\\"\\\"\""}, {
                    "\" 100.          head = self.next_expression(tokens, \
**kwargs)\""}, {
                    ItemBox["\" 101.          args = tuple(\"", Background -> 
                    RGBColor[1, 1, 0.85], StripOnInput -> False]}, {
                    "\" 102.              self.next_expression(tokens, \
**kwargs) for i in range(current_token.length)\""}, {
                    "\" 103.          )\""}, {
                    "\" 104.          if head == self._LIST:\""}, {
                    "\" 105.              return args\""}, {
                    "\" 106.          else:\""}, {
                    "\" 107.              return self.build_function(head, \
args, **kwargs)\""}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\"self\"", 
                    "\"<ExternalEvaluateConsumer globals=4 objects=22>\""}, {
                    "\"current_token\"", 
                    "\"WXFToken<b'f', data=None, len=2>\""}, {"\"tokens\"", 
                    "\"<generator object WXFParser.tokens at \
0x1555ed480>\""}, {"\"kwargs\"", "\"{}\""}, {"\"head\"", 
                    "\"ExternalEvaluate`Private`ExternalEvaluateCommand\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Null}}, 
                    "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<ExternalEvaluateConsumer globals=4 objects=22>"}, {
                    "current_token", "WXFToken<b'f', data=None, len=2>"}, {
                    "tokens", 
                    "<generator object WXFParser.tokens at 0x1555ed480>"}, {
                    "kwargs", "{}"}, {"head", 
                    "ExternalEvaluate`Private`ExternalEvaluateCommand"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless"], " in ", "consume_function"}], 
                    Column[{
                    
                    Column[{
                    "  94.          Return a :class:`list` if the head is \
symbol `List`, otherwise returns the result of \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`", "  95.          applied to the head and arguments.", "  96.  ", 
                    "  97.          Usually custom parsing rules target \
Functions, but not List. To do so, it is recommended to override", 
                    "  98.          \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`.", "  99.          \"\"\"", 
                    " 100.          head = self.next_expression(tokens, \
**kwargs)", 
                    Item[" 101.          args = tuple(", Background -> 
                    LightYellow], 
                    " 102.              self.next_expression(tokens, \
**kwargs) for i in range(current_token.length)", " 103.          )", 
                    " 104.          if head == self._LIST:", 
                    " 105.              return args", " 106.          else:", 
                    " 107.              return self.build_function(head, \
args, **kwargs)"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<ExternalEvaluateConsumer globals=4 objects=22>"}, {
                    "current_token", "WXFToken<b'f', data=None, len=2>"}, {
                    "tokens", 
                    "<generator object WXFParser.tokens at 0x1555ed480>"}, {
                    "kwargs", "{}"}, {"head", 
                    "ExternalEvaluate`Private`ExternalEvaluateCommand"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"<genexpr>\""}, 
                    "RowDefault"]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"<genexpr>\""}, 
                    "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{
                    "\"  95.          applied to the head and arguments.\""}, \
{"\"  96.  \""}, {
                    "\"  97.          Usually custom parsing rules target \
Functions, but not List. To do so, it is recommended to override\""}, {
                    "\"  98.          \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`.\""}, {"\"  99.          \\\"\\\"\\\"\""}, {
                    "\" 100.          head = self.next_expression(tokens, \
**kwargs)\""}, {"\" 101.          args = tuple(\""}, {
                    ItemBox[
                    "\" 102.              self.next_expression(tokens, \
**kwargs) for i in range(current_token.length)\"", Background -> 
                    RGBColor[1, 1, 0.85], StripOnInput -> False]}, {
                    "\" 103.          )\""}, {
                    "\" 104.          if head == self._LIST:\""}, {
                    "\" 105.              return args\""}, {
                    "\" 106.          else:\""}, {
                    "\" 107.              return self.build_function(head, \
args, **kwargs)\""}, {"\" 108.  \""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\".0\"", 
                    "\"<range_iterator object at 0x155697b70>\""}, {
                    "\"i\"", "\"1\""}, {"\"kwargs\"", "\"{}\""}, {
                    "\"self\"", 
                    "\"<ExternalEvaluateConsumer globals=4 objects=22>\""}, {
                    "\"tokens\"", 
                    "\"<generator object WXFParser.tokens at \
0x1555ed480>\""}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Null}}, 
                    "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {".0", 
                    "<range_iterator object at 0x155697b70>"}, {"i", "1"}, {
                    "kwargs", "{}"}, {"self", 
                    "<ExternalEvaluateConsumer globals=4 objects=22>"}, {
                    "tokens", 
                    "<generator object WXFParser.tokens at 0x1555ed480>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless"], " in ", "<genexpr>"}], 
                    Column[{
                    
                    Column[{
                    "  95.          applied to the head and arguments.", 
                    "  96.  ", 
                    "  97.          Usually custom parsing rules target \
Functions, but not List. To do so, it is recommended to override", 
                    "  98.          \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`.", "  99.          \"\"\"", 
                    " 100.          head = self.next_expression(tokens, \
**kwargs)", " 101.          args = tuple(", 
                    Item[
                    " 102.              self.next_expression(tokens, \
**kwargs) for i in range(current_token.length)", Background -> LightYellow], 
                    " 103.          )", 
                    " 104.          if head == self._LIST:", 
                    " 105.              return args", " 106.          else:", 
                    " 107.              return self.build_function(head, \
args, **kwargs)", " 108.  "}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {".0", 
                    "<range_iterator object at 0x155697b70>"}, {"i", "1"}, {
                    "kwargs", "{}"}, {"self", 
                    "<ExternalEvaluateConsumer globals=4 objects=22>"}, {
                    "tokens", 
                    "<generator object WXFParser.tokens at 0x1555ed480>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"next_expression\""}, 
                    "RowDefault"]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"next_expression\""}, 
                    "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{
                    "\"  69.          constants.WXF_CONSTANTS.RuleDelayed: \\\
\"consume_rule_delayed\\\",\""}, {"\"  70.      }\""}, {"\"  71.  \""}, {
                    "\"  72.      def next_expression(self, tokens, \
**kwargs):\""}, {
                    "\"  73.          \\\"\\\"\\\"Deserialize the next \
expression starting at the next token yield by `tokens`.\\\"\\\"\\\"\""}, {
                    "\"  74.          token = next(tokens)\""}, {
                    "\"  75.          consumer = \
self._consumer_from_type(token.wxf_type)\""}, {
                    ItemBox[
                    "\"  76.          return consumer(token, tokens, \
**kwargs)\"", Background -> RGBColor[1, 1, 0.85], StripOnInput -> False]}, {
                    "\"  77.  \""}, {
                    "\"  78.      def _consumer_from_type(self, \
wxf_type):\""}, {"\"  79.          try:\""}, {
                    "\"  80.              func = self._mapping[wxf_type]\""}, \
{"\"  81.          except KeyError:\""}, {
                    "\"  82.              raise WolframParserException(\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\"self\"", 
                    "\"<ExternalEvaluateConsumer globals=4 objects=22>\""}, {
                    "\"tokens\"", 
                    "\"<generator object WXFParser.tokens at \
0x1555ed480>\""}, {"\"kwargs\"", "\"{}\""}, {"\"token\"", 
                    "\"WXFToken<b'f', data=None, len=2>\""}, {"\"consumer\"", 
                    "\"<bound method \
ExternalEvaluateConsumer.consume_function of <ExternalEvaluateConsumer \
globals=4 objects=22>>\""}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {"Columns" -> {{
                    Null}}, "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<ExternalEvaluateConsumer globals=4 objects=22>"}, {
                    "tokens", 
                    "<generator object WXFParser.tokens at 0x1555ed480>"}, {
                    "kwargs", "{}"}, {"token", 
                    "WXFToken<b'f', data=None, len=2>"}, {
                    "consumer", 
                    "<bound method ExternalEvaluateConsumer.consume_function \
of <ExternalEvaluateConsumer globals=4 objects=22>>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless"], " in ", "next_expression"}], 
                    Column[{
                    
                    Column[{
                    "  69.          constants.WXF_CONSTANTS.RuleDelayed: \
\"consume_rule_delayed\",", "  70.      }", "  71.  ", 
                    "  72.      def next_expression(self, tokens, **kwargs):",
                     "  73.          \"\"\"Deserialize the next expression \
starting at the next token yield by `tokens`.\"\"\"", 
                    "  74.          token = next(tokens)", 
                    "  75.          consumer = \
self._consumer_from_type(token.wxf_type)", 
                    Item[
                    "  76.          return consumer(token, tokens, **kwargs)",
                     Background -> LightYellow], "  77.  ", 
                    "  78.      def _consumer_from_type(self, wxf_type):", 
                    "  79.          try:", 
                    "  80.              func = self._mapping[wxf_type]", 
                    "  81.          except KeyError:", 
                    "  82.              raise WolframParserException("}, 
                    Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<ExternalEvaluateConsumer globals=4 objects=22>"}, {
                    "tokens", 
                    "<generator object WXFParser.tokens at 0x1555ed480>"}, {
                    "kwargs", "{}"}, {"token", 
                    "WXFToken<b'f', data=None, len=2>"}, {
                    "consumer", 
                    "<bound method ExternalEvaluateConsumer.consume_function \
of <ExternalEvaluateConsumer globals=4 objects=22>>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless", Evaluator -> Automatic, 
                    Method -> "Preemptive"], "\" in \"", 
                    "\"consume_function\""}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless", Evaluator -> Automatic, 
                    Method -> "Preemptive"], "\" in \"", 
                    "\"consume_function\""}, "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{"\" 319.  \""}, {
                    "\" 320.      def __init__(self, routes_registry={}, \
objects_registry={}, globals_registry={}):\""}, {
                    "\" 321.          self.objects_registry = \
registry(objects_registry)\""}, {
                    "\" 322.          self.globals_registry = \
registry(globals_registry)\""}, {
                    "\" 323.          self.routes_registry = \
registry(self.builtin_routes, **routes_registry)\""}, {"\" 324.  \""}, {
                    "\" 325.      def consume_function(self, *args, \
**kwargs):\""}, {
                    ItemBox[
                    "\" 326.          expr = super().consume_function(*args, \
**kwargs)\"", Background -> RGBColor[1, 1, 0.85], StripOnInput -> False]}, {
                    "\" 327.  \""}, {
                    "\" 328.          if check_wl_symbol(expr, \
self.hook_symbol):\""}, {
                    "\" 329.              assert len(expr.args) == 2\""}, {
                    "\" 330.              return \
self.dispatch_wl_object(*expr.args)\""}, {"\" 331.  \""}, {
                    "\" 332.          return expr\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\"self\"", 
                    "\"<ExternalEvaluateConsumer globals=4 objects=22>\""}, {
                    "\"args\"", 
                    "\"(<wolframclient.deserializers.wxf.wxfparser.WXFToken \
object at 0x155653920>, <generator object WXFParser.tokens at \
0x1555ed480>)\""}, {"\"kwargs\"", "\"{}\""}, {"\"__class__\"", 
                    "\"<class \
'wolframclient.utils.externalevaluate.ExternalEvaluateConsumer'>\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Null}}, 
                    "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<ExternalEvaluateConsumer globals=4 objects=22>"}, {
                    "args", 
                    "(<wolframclient.deserializers.wxf.wxfparser.WXFToken \
object at 0x155653920>, <generator object WXFParser.tokens at \
0x1555ed480>)"}, {"kwargs", "{}"}, {"__class__", 
                    "<class \
'wolframclient.utils.externalevaluate.ExternalEvaluateConsumer'>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless"], " in ", 
                    "consume_function"}], 
                    Column[{
                    
                    Column[{" 319.  ", 
                    " 320.      def __init__(self, routes_registry={}, \
objects_registry={}, globals_registry={}):", 
                    " 321.          self.objects_registry = \
registry(objects_registry)", 
                    " 322.          self.globals_registry = \
registry(globals_registry)", 
                    " 323.          self.routes_registry = \
registry(self.builtin_routes, **routes_registry)", " 324.  ", 
                    " 325.      def consume_function(self, *args, **kwargs):", 
                    Item[
                    " 326.          expr = super().consume_function(*args, \
**kwargs)", Background -> LightYellow], " 327.  ", 
                    " 328.          if check_wl_symbol(expr, \
self.hook_symbol):", " 329.              assert len(expr.args) == 2", 
                    " 330.              return \
self.dispatch_wl_object(*expr.args)", " 331.  ", 
                    " 332.          return expr"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<ExternalEvaluateConsumer globals=4 objects=22>"}, {
                    "args", 
                    "(<wolframclient.deserializers.wxf.wxfparser.WXFToken \
object at 0x155653920>, <generator object WXFParser.tokens at \
0x1555ed480>)"}, {"kwargs", "{}"}, {"__class__", 
                    "<class \
'wolframclient.utils.externalevaluate.ExternalEvaluateConsumer'>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"consume_function\""}, 
                    "RowDefault"]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"consume_function\""}, 
                    "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    GridBox[{{
                    "\"  94.          Return a :class:`list` if the head is \
symbol `List`, otherwise returns the result of \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`\""}, {"\"  95.          applied to the head and arguments.\""}, {
                    "\"  96.  \""}, {
                    "\"  97.          Usually custom parsing rules target \
Functions, but not List. To do so, it is recommended to override\""}, {
                    "\"  98.          \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`.\""}, {"\"  99.          \\\"\\\"\\\"\""}, {
                    "\" 100.          head = self.next_expression(tokens, \
**kwargs)\""}, {
                    ItemBox["\" 101.          args = tuple(\"", Background -> 
                    RGBColor[1, 1, 0.85], StripOnInput -> False]}, {
                    "\" 102.              self.next_expression(tokens, \
**kwargs) for i in range(current_token.length)\""}, {
                    "\" 103.          )\""}, {
                    "\" 104.          if head == self._LIST:\""}, {
                    "\" 105.              return args\""}, {
                    "\" 106.          else:\""}, {
                    "\" 107.              return self.build_function(head, \
args, **kwargs)\""}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\"self\"", 
                    "\"<ExternalEvaluateConsumer globals=4 objects=22>\""}, {
                    "\"current_token\"", 
                    "\"WXFToken<b'f', data=None, len=2>\""}, {"\"tokens\"", 
                    "\"<generator object WXFParser.tokens at \
0x1555ed480>\""}, {"\"kwargs\"", "\"{}\""}, {"\"head\"", "\"List\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Null}}, 
                    "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<ExternalEvaluateConsumer globals=4 objects=22>"}, {
                    "current_token", "WXFToken<b'f', data=None, len=2>"}, {
                    "tokens", 
                    "<generator object WXFParser.tokens at 0x1555ed480>"}, {
                    "kwargs", "{}"}, {"head", "List"}}, Background -> {
                    Null, {LightGray}}, Alignment -> Left, Frame -> 
                    LightGray]}, False]], DynamicModuleValues -> Automatic], 
                    Setting[#, {0}]& ]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless"], " in ", "consume_function"}], 
                    Column[{
                    
                    Column[{
                    "  94.          Return a :class:`list` if the head is \
symbol `List`, otherwise returns the result of \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`", "  95.          applied to the head and arguments.", "  96.  ", 
                    "  97.          Usually custom parsing rules target \
Functions, but not List. To do so, it is recommended to override", 
                    "  98.          \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`.", "  99.          \"\"\"", 
                    " 100.          head = self.next_expression(tokens, \
**kwargs)", 
                    Item[" 101.          args = tuple(", Background -> 
                    LightYellow], 
                    " 102.              self.next_expression(tokens, \
**kwargs) for i in range(current_token.length)", " 103.          )", 
                    " 104.          if head == self._LIST:", 
                    " 105.              return args", " 106.          else:", 
                    " 107.              return self.build_function(head, \
args, **kwargs)"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<ExternalEvaluateConsumer globals=4 objects=22>"}, {
                    "current_token", "WXFToken<b'f', data=None, len=2>"}, {
                    "tokens", 
                    "<generator object WXFParser.tokens at 0x1555ed480>"}, {
                    "kwargs", "{}"}, {"head", "List"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"<genexpr>\""}, 
                    "RowDefault"]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"<genexpr>\""}, 
                    "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{
                    "\"  95.          applied to the head and arguments.\""}, \
{"\"  96.  \""}, {
                    "\"  97.          Usually custom parsing rules target \
Functions, but not List. To do so, it is recommended to override\""}, {
                    "\"  98.          \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`.\""}, {"\"  99.          \\\"\\\"\\\"\""}, {
                    "\" 100.          head = self.next_expression(tokens, \
**kwargs)\""}, {"\" 101.          args = tuple(\""}, {
                    ItemBox[
                    "\" 102.              self.next_expression(tokens, \
**kwargs) for i in range(current_token.length)\"", Background -> 
                    RGBColor[1, 1, 0.85], StripOnInput -> False]}, {
                    "\" 103.          )\""}, {
                    "\" 104.          if head == self._LIST:\""}, {
                    "\" 105.              return args\""}, {
                    "\" 106.          else:\""}, {
                    "\" 107.              return self.build_function(head, \
args, **kwargs)\""}, {"\" 108.  \""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\".0\"", 
                    "\"<range_iterator object at 0x155697f60>\""}, {
                    "\"i\"", "\"0\""}, {"\"kwargs\"", "\"{}\""}, {
                    "\"self\"", 
                    "\"<ExternalEvaluateConsumer globals=4 objects=22>\""}, {
                    "\"tokens\"", 
                    "\"<generator object WXFParser.tokens at \
0x1555ed480>\""}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Null}}, 
                    "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {".0", 
                    "<range_iterator object at 0x155697f60>"}, {"i", "0"}, {
                    "kwargs", "{}"}, {"self", 
                    "<ExternalEvaluateConsumer globals=4 objects=22>"}, {
                    "tokens", 
                    "<generator object WXFParser.tokens at 0x1555ed480>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless"], " in ", "<genexpr>"}], 
                    Column[{
                    
                    Column[{
                    "  95.          applied to the head and arguments.", 
                    "  96.  ", 
                    "  97.          Usually custom parsing rules target \
Functions, but not List. To do so, it is recommended to override", 
                    "  98.          \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`.", "  99.          \"\"\"", 
                    " 100.          head = self.next_expression(tokens, \
**kwargs)", " 101.          args = tuple(", 
                    Item[
                    " 102.              self.next_expression(tokens, \
**kwargs) for i in range(current_token.length)", Background -> LightYellow], 
                    " 103.          )", 
                    " 104.          if head == self._LIST:", 
                    " 105.              return args", " 106.          else:", 
                    " 107.              return self.build_function(head, \
args, **kwargs)", " 108.  "}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {".0", 
                    "<range_iterator object at 0x155697f60>"}, {"i", "0"}, {
                    "kwargs", "{}"}, {"self", 
                    "<ExternalEvaluateConsumer globals=4 objects=22>"}, {
                    "tokens", 
                    "<generator object WXFParser.tokens at 0x1555ed480>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"next_expression\""}, 
                    "RowDefault"]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"next_expression\""}, 
                    "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{
                    "\"  69.          constants.WXF_CONSTANTS.RuleDelayed: \\\
\"consume_rule_delayed\\\",\""}, {"\"  70.      }\""}, {"\"  71.  \""}, {
                    "\"  72.      def next_expression(self, tokens, \
**kwargs):\""}, {
                    "\"  73.          \\\"\\\"\\\"Deserialize the next \
expression starting at the next token yield by `tokens`.\\\"\\\"\\\"\""}, {
                    "\"  74.          token = next(tokens)\""}, {
                    "\"  75.          consumer = \
self._consumer_from_type(token.wxf_type)\""}, {
                    ItemBox[
                    "\"  76.          return consumer(token, tokens, \
**kwargs)\"", Background -> RGBColor[1, 1, 0.85], StripOnInput -> False]}, {
                    "\"  77.  \""}, {
                    "\"  78.      def _consumer_from_type(self, \
wxf_type):\""}, {"\"  79.          try:\""}, {
                    "\"  80.              func = self._mapping[wxf_type]\""}, \
{"\"  81.          except KeyError:\""}, {
                    "\"  82.              raise WolframParserException(\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\"self\"", 
                    "\"<ExternalEvaluateConsumer globals=4 objects=22>\""}, {
                    "\"tokens\"", 
                    "\"<generator object WXFParser.tokens at \
0x1555ed480>\""}, {"\"kwargs\"", "\"{}\""}, {"\"token\"", 
                    "\"WXFToken<b'f', data=None, len=2>\""}, {"\"consumer\"", 
                    "\"<bound method \
ExternalEvaluateConsumer.consume_function of <ExternalEvaluateConsumer \
globals=4 objects=22>>\""}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {"Columns" -> {{
                    Null}}, "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<ExternalEvaluateConsumer globals=4 objects=22>"}, {
                    "tokens", 
                    "<generator object WXFParser.tokens at 0x1555ed480>"}, {
                    "kwargs", "{}"}, {"token", 
                    "WXFToken<b'f', data=None, len=2>"}, {"consumer", 
                    "<bound method ExternalEvaluateConsumer.consume_function \
of <ExternalEvaluateConsumer globals=4 objects=22>>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless"], " in ", "next_expression"}], 
                    Column[{
                    
                    Column[{
                    "  69.          constants.WXF_CONSTANTS.RuleDelayed: \
\"consume_rule_delayed\",", "  70.      }", "  71.  ", 
                    "  72.      def next_expression(self, tokens, **kwargs):",
                     "  73.          \"\"\"Deserialize the next expression \
starting at the next token yield by `tokens`.\"\"\"", 
                    "  74.          token = next(tokens)", 
                    "  75.          consumer = \
self._consumer_from_type(token.wxf_type)", 
                    Item[
                    "  76.          return consumer(token, tokens, **kwargs)",
                     Background -> LightYellow], "  77.  ", 
                    "  78.      def _consumer_from_type(self, wxf_type):", 
                    "  79.          try:", 
                    "  80.              func = self._mapping[wxf_type]", 
                    "  81.          except KeyError:", 
                    "  82.              raise WolframParserException("}, 
                    Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<ExternalEvaluateConsumer globals=4 objects=22>"}, {
                    "tokens", 
                    "<generator object WXFParser.tokens at 0x1555ed480>"}, {
                    "kwargs", "{}"}, {"token", 
                    "WXFToken<b'f', data=None, len=2>"}, {
                    "consumer", 
                    "<bound method ExternalEvaluateConsumer.consume_function \
of <ExternalEvaluateConsumer globals=4 objects=22>>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless", Evaluator -> Automatic, 
                    Method -> "Preemptive"], "\" in \"", 
                    "\"consume_function\""}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless", Evaluator -> Automatic, 
                    Method -> "Preemptive"], "\" in \"", 
                    "\"consume_function\""}, "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{
                    "\" 323.          self.routes_registry = \
registry(self.builtin_routes, **routes_registry)\""}, {"\" 324.  \""}, {
                    "\" 325.      def consume_function(self, *args, \
**kwargs):\""}, {
                    "\" 326.          expr = super().consume_function(*args, \
**kwargs)\""}, {"\" 327.  \""}, {
                    "\" 328.          if check_wl_symbol(expr, \
self.hook_symbol):\""}, {
                    "\" 329.              assert len(expr.args) == 2\""}, {
                    ItemBox[
                    "\" 330.              return \
self.dispatch_wl_object(*expr.args)\"", Background -> RGBColor[1, 1, 0.85], 
                    StripOnInput -> False]}, {"\" 331.  \""}, {
                    "\" 332.          return expr\""}, {"\" 333.  \""}, {
                    "\" 334.      def dispatch_wl_object(self, route, \
args):\""}, {
                    "\" 335.          return \
self.routes_registry[route](self, *args)\""}, {"\" 336.  \""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\"self\"", 
                    "\"<ExternalEvaluateConsumer globals=4 objects=22>\""}, {
                    "\"args\"", 
                    "\"(<wolframclient.deserializers.wxf.wxfparser.WXFToken \
object at 0x15567ca40>, <generator object WXFParser.tokens at \
0x1555ed480>)\""}, {"\"kwargs\"", "\"{}\""}, {"\"expr\"", 
                    "\"ExternalEvaluate`Private`ExternalEvaluateCommand['Call'\
, (<function dim at 0x1553ee660>, None, \
hypernetx.classes.Hypergraph.Hypergraph)]\""}, {"\"__class__\"", 
                    "\"<class \
'wolframclient.utils.externalevaluate.ExternalEvaluateConsumer'>\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Null}}, 
                    "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<ExternalEvaluateConsumer globals=4 objects=22>"}, {
                    "args", 
                    "(<wolframclient.deserializers.wxf.wxfparser.WXFToken \
object at 0x15567ca40>, <generator object WXFParser.tokens at \
0x1555ed480>)"}, {"kwargs", "{}"}, {"expr", 
                    "ExternalEvaluate`Private`ExternalEvaluateCommand['Call', \
(<function dim at 0x1553ee660>, None, \
hypernetx.classes.Hypergraph.Hypergraph)]"}, {"__class__", 
                    "<class \
'wolframclient.utils.externalevaluate.ExternalEvaluateConsumer'>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless"], " in ", 
                    "consume_function"}], 
                    Column[{
                    
                    Column[{
                    " 323.          self.routes_registry = \
registry(self.builtin_routes, **routes_registry)", " 324.  ", 
                    " 325.      def consume_function(self, *args, **kwargs):",
                     " 326.          expr = super().consume_function(*args, \
**kwargs)", " 327.  ", 
                    " 328.          if check_wl_symbol(expr, \
self.hook_symbol):", " 329.              assert len(expr.args) == 2", 
                    Item[
                    " 330.              return \
self.dispatch_wl_object(*expr.args)", Background -> LightYellow], " 331.  ", 
                    " 332.          return expr", " 333.  ", 
                    " 334.      def dispatch_wl_object(self, route, args):", 
                    " 335.          return self.routes_registry[route](self, \
*args)", " 336.  "}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<ExternalEvaluateConsumer globals=4 objects=22>"}, {
                    "args", 
                    "(<wolframclient.deserializers.wxf.wxfparser.WXFToken \
object at 0x15567ca40>, <generator object WXFParser.tokens at \
0x1555ed480>)"}, {"kwargs", "{}"}, {"expr", 
                    "ExternalEvaluate`Private`ExternalEvaluateCommand['Call', \
(<function dim at 0x1553ee660>, None, \
hypernetx.classes.Hypergraph.Hypergraph)]"}, {
                    "__class__", 
                    "<class \
'wolframclient.utils.externalevaluate.ExternalEvaluateConsumer'>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless", Evaluator -> Automatic, 
                    Method -> "Preemptive"], "\" in \"", 
                    "\"dispatch_wl_object\""}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless", Evaluator -> Automatic, 
                    Method -> "Preemptive"], "\" in \"", 
                    "\"dispatch_wl_object\""}, "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{
                    "\" 328.          if check_wl_symbol(expr, \
self.hook_symbol):\""}, {
                    "\" 329.              assert len(expr.args) == 2\""}, {
                    "\" 330.              return \
self.dispatch_wl_object(*expr.args)\""}, {"\" 331.  \""}, {
                    "\" 332.          return expr\""}, {"\" 333.  \""}, {
                    "\" 334.      def dispatch_wl_object(self, route, \
args):\""}, {
                    ItemBox[
                    "\" 335.          return \
self.routes_registry[route](self, *args)\"", Background -> 
                    RGBColor[1, 1, 0.85], StripOnInput -> False]}, {
                    "\" 336.  \""}, {"\" 337.      def __repr__(self):\""}, {
                    "\" 338.          return \\\"<{} globals={} objects={}>\\\
\".format(\""}, {
                    "\" 339.              self.__class__.__name__, \
len(self.globals_registry), len(self.objects_registry)\""}, {
                    "\" 340.          )\""}, {"\" 341.  \""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\"self\"", 
                    "\"<ExternalEvaluateConsumer globals=4 objects=22>\""}, {
                    "\"route\"", "\"Call\""}, {"\"args\"", 
                    "\"(<function dim at 0x1553ee660>, None, \
hypernetx.classes.Hypergraph.Hypergraph)\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Null}}, "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<ExternalEvaluateConsumer globals=4 objects=22>"}, {
                    "route", "Call"}, {"args", 
                    "(<function dim at 0x1553ee660>, None, \
hypernetx.classes.Hypergraph.Hypergraph)"}}, Background -> {
                    Null, {LightGray}}, Alignment -> Left, Frame -> 
                    LightGray]}, False]], DynamicModuleValues -> Automatic], 
                    Setting[#, {0}]& ]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless"], " in ", 
                    "dispatch_wl_object"}], 
                    Column[{
                    
                    Column[{
                    " 328.          if check_wl_symbol(expr, \
self.hook_symbol):", " 329.              assert len(expr.args) == 2", 
                    " 330.              return \
self.dispatch_wl_object(*expr.args)", " 331.  ", " 332.          return expr",
                     " 333.  ", 
                    " 334.      def dispatch_wl_object(self, route, args):", 
                    Item[
                    " 335.          return self.routes_registry[route](self, \
*args)", Background -> LightYellow], " 336.  ", 
                    " 337.      def __repr__(self):", 
                    " 338.          return \"<{} globals={} \
objects={}>\".format(", 
                    " 339.              self.__class__.__name__, \
len(self.globals_registry), len(self.objects_registry)", " 340.          )", 
                    " 341.  "}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<ExternalEvaluateConsumer globals=4 objects=22>"}, {
                    "route", "Call"}, {"args", 
                    "(<function dim at 0x1553ee660>, None, \
hypernetx.classes.Hypergraph.Hypergraph)"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = True}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless", Evaluator -> Automatic, 
                    Method -> "Preemptive"], "\" in \"", "\"Call\""}, 
                    "RowDefault"]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless", Evaluator -> Automatic, 
                    Method -> "Preemptive"], "\" in \"", "\"Call\""}, 
                    "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{"\" 245.  \""}, {"\" 246.  \""}, {
                    "\" 247.  @routes.register_function\""}, {
                    "\" 248.  def Call(consumer, result, *args):\""}, {
                    "\" 249.  \""}, {
                    "\" 250.      pos, kwargs = unpack_optionals(args)\""}, {
                    "\" 251.  \""}, {
                    ItemBox[
                    "\" 252.      return result(*pos, **kwargs)\"", 
                    Background -> RGBColor[1, 1, 0.85], StripOnInput -> 
                    False]}, {"\" 253.  \""}, {"\" 254.  \""}, {
                    "\" 255.  @routes.register_function\""}, {
                    "\" 256.  def MethodCall(consumer, result, names, *args):\
\""}, {"\" 257.      return Call(consumer, GetAttribute(consumer, result, \
names), *args)\""}, {"\" 258.  \""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{"\"Key\"", "\"Value\""}, {
                    "\"consumer\"", 
                    "\"<ExternalEvaluateConsumer globals=4 objects=22>\""}, {
                    "\"result\"", "\"<function dim at 0x1553ee660>\""}, {
                    "\"args\"", 
                    "\"(None, hypernetx.classes.Hypergraph.Hypergraph,)\""}, {
                    "\"pos\"", 
                    "\"[None, hypernetx.classes.Hypergraph.Hypergraph]\""}, {
                    "\"kwargs\"", "\"{}\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Null}}, "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"consumer", 
                    "<ExternalEvaluateConsumer globals=4 objects=22>"}, {
                    "result", "<function dim at 0x1553ee660>"}, {
                    "args", 
                    "(None, hypernetx.classes.Hypergraph.Hypergraph,)"}, {
                    "pos", "[None, \
hypernetx.classes.Hypergraph.Hypergraph]"}, {"kwargs", "{}"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless"], " in ", "Call"}], 
                    Column[{
                    
                    Column[{" 245.  ", " 246.  ", 
                    " 247.  @routes.register_function", 
                    " 248.  def Call(consumer, result, *args):", " 249.  ", 
                    " 250.      pos, kwargs = unpack_optionals(args)", 
                    " 251.  ", 
                    Item[
                    " 252.      return result(*pos, **kwargs)", Background -> 
                    LightYellow], " 253.  ", " 254.  ", 
                    " 255.  @routes.register_function", 
                    " 256.  def MethodCall(consumer, result, names, *args):", 
                    " 257.      return Call(consumer, GetAttribute(consumer, \
result, names), *args)", " 258.  "}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"consumer", 
                    "<ExternalEvaluateConsumer globals=4 objects=22>"}, {
                    "result", "<function dim at 0x1553ee660>"}, {
                    "args", 
                    "(None, hypernetx.classes.Hypergraph.Hypergraph,)"}, {
                    "pos", "[None, \
hypernetx.classes.Hypergraph.Hypergraph]"}, {"kwargs", "{}"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, True]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = True}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Users/arnoudb/hypernetx/Python/Hypergraph/Hypergraph.\
py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Users/arnoudb/hypernetx/Python/Hypergraph/Hypergraph.\
py"], 
                    SystemOpen[
                    "/Users/arnoudb/hypernetx/Python/Hypergraph/Hypergraph.\
py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"dim\""}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Users/arnoudb/hypernetx/Python/Hypergraph/Hypergraph.\
py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Users/arnoudb/hypernetx/Python/Hypergraph/Hypergraph.\
py"], 
                    SystemOpen[
                    "/Users/arnoudb/hypernetx/Python/Hypergraph/Hypergraph.\
py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"dim\""}, "RowDefault"]}, {
                    "", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{"\"  45.  def degree(hg):\""}, {
                    "\"  46.      return hg.degree()\""}, {"\"  47.  \""}, {
                    "\"  48.  def diameter(hg):\""}, {
                    "\"  49.      return hg.diameter()\""}, {"\"  50.  \""}, {
                    "\"  51.  def dim(hg):\""}, {
                    ItemBox[
                    "\"  52.      return hg.dim()\"", Background -> 
                    RGBColor[1, 1, 0.85], StripOnInput -> False]}, {
                    "\"  53.  \""}, {"\"  54.  def distance(hg):\""}, {
                    "\"  55.      return hg.distance()\""}, {"\"  56.  \""}, {
                    "\"  57.  def dual(hg):\""}, {
                    "\"  58.      return hg.dual()\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\"hg\"", 
                    "\"None, <class \
'hypernetx.classes.Hypergraph.Hypergraph'>\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Null}}, "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"hg", 
                    "None, <class \
'hypernetx.classes.Hypergraph.Hypergraph'>"}}, Background -> {
                    Null, {LightGray}}, Alignment -> Left, Frame -> 
                    LightGray]}, False]], DynamicModuleValues -> Automatic], 
                    Setting[#, {0}]& ]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Users/arnoudb/hypernetx/Python/Hypergraph/Hypergraph.\
py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Users/arnoudb/hypernetx/Python/Hypergraph/Hypergraph.\
py"], 
                    SystemOpen[
                    "/Users/arnoudb/hypernetx/Python/Hypergraph/Hypergraph.\
py"]], Appearance -> "Frameless"], " in ", "dim"}], 
                    Column[{
                    
                    Column[{"  45.  def degree(hg):", 
                    "  46.      return hg.degree()", "  47.  ", 
                    "  48.  def diameter(hg):", 
                    "  49.      return hg.diameter()", "  50.  ", 
                    "  51.  def dim(hg):", 
                    Item[
                    "  52.      return hg.dim()", Background -> LightYellow], 
                    "  53.  ", "  54.  def distance(hg):", 
                    "  55.      return hg.distance()", "  56.  ", 
                    "  57.  def dual(hg):", "  58.      return hg.dual()"}, 
                    Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"hg", 
                    "None, <class \
'hypernetx.classes.Hypergraph.Hypergraph'>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, True]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], FontFamily -> "Courier", StripOnInput -> 
                    False], ImageMargins -> 0]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    
                    Row[{"TypeError", " ", 
                    "Hypergraph.dim() missing 1 required positional argument: \
'edge'"}], 
                    Style[
                    Column[{
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/language/\
decorators.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/language/\
decorators.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/language/\
decorators.py"]], Appearance -> "Frameless"], " in ", "safe_wl_execute"}], 
                    Column[{
                    
                    Column[{
                    "  14.      \"wl\": b'Failure[\"PythonFailure\", \
<|\"MessageTemplate\" -> \"Unexpected error occurred.\"|>]',", "  15.  }", 
                    "  16.  ", "  17.  ", 
                    "  18.  def safe_wl_execute(function, args=(), opts={}, \
export_opts={}, exception_class=None):", "  19.  ", "  20.      try:", 
                    Item[
                    "  21.          return export(function(*args, **opts), \
**export_opts)", Background -> LightYellow], 
                    "  22.      except Exception as export_exception:", 
                    "  23.          try:", "  24.              try:", 
                    "  25.  ", 
                    "  26.                  # The user can provide an \
exception class, and it can be broken, in which case we are running another", 
                    "  27.                  # try / except to return errors \
that are happening during class serialization"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "function", "<function handle_message at 0x105bc8fe0>"}, {
                    "args", "(<zmq.Socket(zmq.PAIR) at 0x105ba8c20>,)"}, {
                    "opts", 
                    "{'consumer': <ExternalEvaluateConsumer globals=4 \
objects=22>}"}, {"export_opts", 
                    "{'object_processor': <function \
start_zmq_loop.<locals>.<lambda> at 0x104e509a0>, 'target_format': 'wxf'}"}, {
                    "exception_class", "None"}, {
                    "export_exception", 
                    "Hypergraph.dim() missing 1 required positional argument: \
'edge'"}}, Background -> {Null, {LightGray}}, Alignment -> Left, Frame -> 
                    LightGray]}]}]}, False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless"], " in ", 
                    "handle_message"}], 
                    Column[{
                    
                    Column[{
                    " 350.          self.socket.send(zmq.Frame(bytes))", 
                    " 351.  ", " 352.      def send_side_effect(self, expr):",
                     " 353.          \
self.write(export(self.keep_listening(expr), target_format=\"wxf\"))", 
                    " 354.  ", " 355.  ", 
                    " 356.  def handle_message(socket, consumer):", 
                    Item[
                    " 357.      result = \
binary_deserialize(socket.recv(copy=False).buffer, consumer=consumer)", 
                    Background -> LightYellow], " 358.  ", 
                    " 359.      sys.stdout.flush()", 
                    " 360.      return result", " 361.  ", " 362.  ", 
                    " 363.  def start_zmq_instance(port=None, \
write_to_stdout=True, **opts):"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "socket", "<zmq.Socket(zmq.PAIR) at 0x105ba8c20>"}, {
                    "consumer", 
                    "<ExternalEvaluateConsumer globals=4 objects=22>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
__init__.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
__init__.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
__init__.py"]], Appearance -> "Frameless"], " in ", "binary_deserialize"}], 
                    Column[{
                    
                    Column[{"  33.  ", "  34.      \"\"\"", 
                    "  35.      parser = WXFParser(wxf_input)", 
                    "  36.      if consumer is None:", 
                    "  37.          consumer = WXFConsumerNumpy()", "  38.  ",
                     "  39.      try:", 
                    Item[
                    "  40.          o = \
consumer.next_expression(parser.tokens(), **kwargs)", Background -> 
                    LightYellow], "  41.      except StopIteration:", 
                    "  42.          raise WolframParserException(", 
                    "  43.              \"Input data does not represent a \
valid expression in WXF format. Expecting more input data.\"", 
                    "  44.          )", 
                    "  45.      if not \
parser.context.is_valid_final_state():", 
                    "  46.          raise WolframParserException("}, 
                    Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "wxf_input", 
                    "8:f\.02s0ExternalEvaluate`Private`\
ExternalEvaluateCommandS\n\
ReturnTypef\.02s\.04Listf\.02s0ExternalEvaluate`Private`\
ExternalEvaluateCommandS\.04Callf\.02s\.04Listf\.02s0ExternalEvaluate`Private`\
ExternalEvaluateCommandS\.05Fetchf\.01\.01\.01\.01\.01\.01\.01\.01s\.04ListL`>\
U\.01\.01\.01\.01\.01\.01\.01\.01\.00\.00\.00f\.02s0ExternalEvaluate`Private`\
ExternalEvaluateCommandS\.05Fetchf\.01\.01\.01\.01\.01\.01\.01\.01s\.04ListLP-\
?U\.01\.01\.01\.01\.01\.01\.01\.01\.00\.00\.00S\nExpression"}, {
                    "consumer", 
                    "<ExternalEvaluateConsumer globals=4 objects=22>"}, {
                    "kwargs", "{}"}, {
                    "parser", 
                    "<wolframclient.deserializers.wxf.wxfparser.WXFParser \
object at 0x15536e210>"}}, Background -> {Null, {LightGray}}, Alignment -> 
                    Left, Frame -> LightGray]}]}]}, False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless"], " in ", "next_expression"}], 
                    Column[{
                    
                    Column[{
                    "  69.          constants.WXF_CONSTANTS.RuleDelayed: \
\"consume_rule_delayed\",", "  70.      }", "  71.  ", 
                    "  72.      def next_expression(self, tokens, **kwargs):",
                     "  73.          \"\"\"Deserialize the next expression \
starting at the next token yield by `tokens`.\"\"\"", 
                    "  74.          token = next(tokens)", 
                    "  75.          consumer = \
self._consumer_from_type(token.wxf_type)", 
                    Item[
                    "  76.          return consumer(token, tokens, **kwargs)",
                     Background -> LightYellow], "  77.  ", 
                    "  78.      def _consumer_from_type(self, wxf_type):", 
                    "  79.          try:", 
                    "  80.              func = self._mapping[wxf_type]", 
                    "  81.          except KeyError:", 
                    "  82.              raise WolframParserException("}, 
                    Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "self", 
                    "<ExternalEvaluateConsumer globals=4 objects=22>"}, {
                    "tokens", 
                    "<generator object WXFParser.tokens at 0x1555ed480>"}, {
                    "kwargs", "{}"}, {
                    "token", "WXFToken<b'f', data=None, len=2>"}, {
                    "consumer", 
                    "<bound method ExternalEvaluateConsumer.consume_function \
of <ExternalEvaluateConsumer globals=4 objects=22>>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless"], " in ", 
                    "consume_function"}], 
                    Column[{
                    
                    Column[{" 319.  ", 
                    " 320.      def __init__(self, routes_registry={}, \
objects_registry={}, globals_registry={}):", 
                    " 321.          self.objects_registry = \
registry(objects_registry)", 
                    " 322.          self.globals_registry = \
registry(globals_registry)", 
                    " 323.          self.routes_registry = \
registry(self.builtin_routes, **routes_registry)", " 324.  ", 
                    " 325.      def consume_function(self, *args, **kwargs):", 
                    Item[
                    " 326.          expr = super().consume_function(*args, \
**kwargs)", Background -> LightYellow], " 327.  ", 
                    " 328.          if check_wl_symbol(expr, \
self.hook_symbol):", " 329.              assert len(expr.args) == 2", 
                    
                    " 330.              return \
self.dispatch_wl_object(*expr.args)", " 331.  ", 
                    " 332.          return expr"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "self", 
                    "<ExternalEvaluateConsumer globals=4 objects=22>"}, {
                    "args", 
                    "(<wolframclient.deserializers.wxf.wxfparser.WXFToken \
object at 0x1556539c0>, <generator object WXFParser.tokens at \
0x1555ed480>)"}, {"kwargs", "{}"}, {
                    "__class__", 
                    "<class \
'wolframclient.utils.externalevaluate.ExternalEvaluateConsumer'>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless"], " in ", "consume_function"}], 
                    Column[{
                    
                    Column[{
                    "  94.          Return a :class:`list` if the head is \
symbol `List`, otherwise returns the result of \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`", "  95.          applied to the head and arguments.", "  96.  ", 
                    "  97.          Usually custom parsing rules target \
Functions, but not List. To do so, it is recommended to override", 
                    "  98.          \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`.", "  99.          \"\"\"", 
                    " 100.          head = self.next_expression(tokens, \
**kwargs)", 
                    Item[
                    " 101.          args = tuple(", Background -> 
                    LightYellow], 
                    " 102.              self.next_expression(tokens, \
**kwargs) for i in range(current_token.length)", " 103.          )", 
                    " 104.          if head == self._LIST:", 
                    " 105.              return args", " 106.          else:", 
                    " 107.              return self.build_function(head, \
args, **kwargs)"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "self", 
                    "<ExternalEvaluateConsumer globals=4 objects=22>"}, {
                    "current_token", "WXFToken<b'f', data=None, len=2>"}, {
                    "tokens", 
                    "<generator object WXFParser.tokens at 0x1555ed480>"}, {
                    "kwargs", "{}"}, {
                    "head", 
                    "ExternalEvaluate`Private`ExternalEvaluateCommand"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless"], " in ", "<genexpr>"}], 
                    Column[{
                    
                    Column[{
                    "  95.          applied to the head and arguments.", 
                    "  96.  ", 
                    "  97.          Usually custom parsing rules target \
Functions, but not List. To do so, it is recommended to override", 
                    "  98.          \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`.", "  99.          \"\"\"", 
                    " 100.          head = self.next_expression(tokens, \
**kwargs)", " 101.          args = tuple(", 
                    Item[
                    " 102.              self.next_expression(tokens, \
**kwargs) for i in range(current_token.length)", Background -> LightYellow], 
                    " 103.          )", 
                    " 104.          if head == self._LIST:", 
                    " 105.              return args", " 106.          else:", 
                    " 107.              return self.build_function(head, \
args, **kwargs)", " 108.  "}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    ".0", "<range_iterator object at 0x155697b70>"}, {
                    "i", "1"}, {"kwargs", "{}"}, {
                    "self", 
                    "<ExternalEvaluateConsumer globals=4 objects=22>"}, {
                    "tokens", 
                    "<generator object WXFParser.tokens at 0x1555ed480>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless"], " in ", "next_expression"}], 
                    Column[{
                    
                    Column[{
                    "  69.          constants.WXF_CONSTANTS.RuleDelayed: \
\"consume_rule_delayed\",", "  70.      }", "  71.  ", 
                    "  72.      def next_expression(self, tokens, **kwargs):",
                     "  73.          \"\"\"Deserialize the next expression \
starting at the next token yield by `tokens`.\"\"\"", 
                    "  74.          token = next(tokens)", 
                    "  75.          consumer = \
self._consumer_from_type(token.wxf_type)", 
                    Item[
                    "  76.          return consumer(token, tokens, **kwargs)",
                     Background -> LightYellow], "  77.  ", 
                    "  78.      def _consumer_from_type(self, wxf_type):", 
                    "  79.          try:", 
                    "  80.              func = self._mapping[wxf_type]", 
                    "  81.          except KeyError:", 
                    "  82.              raise WolframParserException("}, 
                    Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "self", 
                    "<ExternalEvaluateConsumer globals=4 objects=22>"}, {
                    "tokens", 
                    "<generator object WXFParser.tokens at 0x1555ed480>"}, {
                    "kwargs", "{}"}, {
                    "token", "WXFToken<b'f', data=None, len=2>"}, {
                    "consumer", 
                    "<bound method ExternalEvaluateConsumer.consume_function \
of <ExternalEvaluateConsumer globals=4 objects=22>>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless"], " in ", 
                    "consume_function"}], 
                    Column[{
                    
                    Column[{" 319.  ", 
                    " 320.      def __init__(self, routes_registry={}, \
objects_registry={}, globals_registry={}):", 
                    " 321.          self.objects_registry = \
registry(objects_registry)", 
                    " 322.          self.globals_registry = \
registry(globals_registry)", 
                    " 323.          self.routes_registry = \
registry(self.builtin_routes, **routes_registry)", " 324.  ", 
                    " 325.      def consume_function(self, *args, **kwargs):", 
                    Item[
                    " 326.          expr = super().consume_function(*args, \
**kwargs)", Background -> LightYellow], " 327.  ", 
                    " 328.          if check_wl_symbol(expr, \
self.hook_symbol):", " 329.              assert len(expr.args) == 2", 
                    " 330.              return \
self.dispatch_wl_object(*expr.args)", " 331.  ", 
                    " 332.          return expr"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "self", 
                    "<ExternalEvaluateConsumer globals=4 objects=22>"}, {
                    "args", 
                    "(<wolframclient.deserializers.wxf.wxfparser.WXFToken \
object at 0x155653920>, <generator object WXFParser.tokens at \
0x1555ed480>)"}, {"kwargs", "{}"}, {
                    "__class__", 
                    "<class \
'wolframclient.utils.externalevaluate.ExternalEvaluateConsumer'>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless"], " in ", "consume_function"}], 
                    Column[{
                    
                    Column[{
                    "  94.          Return a :class:`list` if the head is \
symbol `List`, otherwise returns the result of \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`", "  95.          applied to the head and arguments.", "  96.  ", 
                    "  97.          Usually custom parsing rules target \
Functions, but not List. To do so, it is recommended to override", 
                    "  98.          \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`.", "  99.          \"\"\"", 
                    " 100.          head = self.next_expression(tokens, \
**kwargs)", 
                    Item[
                    " 101.          args = tuple(", Background -> 
                    LightYellow], 
                    " 102.              self.next_expression(tokens, \
**kwargs) for i in range(current_token.length)", " 103.          )", 
                    " 104.          if head == self._LIST:", 
                    " 105.              return args", " 106.          else:", 
                    " 107.              return self.build_function(head, \
args, **kwargs)"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "self", 
                    "<ExternalEvaluateConsumer globals=4 objects=22>"}, {
                    "current_token", "WXFToken<b'f', data=None, len=2>"}, {
                    "tokens", 
                    "<generator object WXFParser.tokens at 0x1555ed480>"}, {
                    "kwargs", "{}"}, {"head", "List"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless"], " in ", "<genexpr>"}], 
                    Column[{
                    
                    Column[{
                    "  95.          applied to the head and arguments.", 
                    "  96.  ", 
                    "  97.          Usually custom parsing rules target \
Functions, but not List. To do so, it is recommended to override", 
                    "  98.          \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`.", "  99.          \"\"\"", 
                    " 100.          head = self.next_expression(tokens, \
**kwargs)", " 101.          args = tuple(", 
                    Item[
                    " 102.              self.next_expression(tokens, \
**kwargs) for i in range(current_token.length)", Background -> LightYellow], 
                    " 103.          )", 
                    " 104.          if head == self._LIST:", 
                    " 105.              return args", " 106.          else:", 
                    " 107.              return self.build_function(head, \
args, **kwargs)", " 108.  "}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    ".0", "<range_iterator object at 0x155697f60>"}, {
                    "i", "0"}, {"kwargs", "{}"}, {
                    "self", 
                    "<ExternalEvaluateConsumer globals=4 objects=22>"}, {
                    "tokens", 
                    "<generator object WXFParser.tokens at 0x1555ed480>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless"], " in ", "next_expression"}], 
                    Column[{
                    
                    Column[{
                    "  69.          constants.WXF_CONSTANTS.RuleDelayed: \
\"consume_rule_delayed\",", "  70.      }", "  71.  ", 
                    "  72.      def next_expression(self, tokens, **kwargs):",
                     "  73.          \"\"\"Deserialize the next expression \
starting at the next token yield by `tokens`.\"\"\"", 
                    "  74.          token = next(tokens)", 
                    "  75.          consumer = \
self._consumer_from_type(token.wxf_type)", 
                    Item[
                    "  76.          return consumer(token, tokens, **kwargs)",
                     Background -> LightYellow], "  77.  ", 
                    "  78.      def _consumer_from_type(self, wxf_type):", 
                    "  79.          try:", 
                    "  80.              func = self._mapping[wxf_type]", 
                    "  81.          except KeyError:", 
                    "  82.              raise WolframParserException("}, 
                    Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "self", 
                    "<ExternalEvaluateConsumer globals=4 objects=22>"}, {
                    "tokens", 
                    "<generator object WXFParser.tokens at 0x1555ed480>"}, {
                    "kwargs", "{}"}, {
                    "token", "WXFToken<b'f', data=None, len=2>"}, {
                    "consumer", 
                    "<bound method ExternalEvaluateConsumer.consume_function \
of <ExternalEvaluateConsumer globals=4 objects=22>>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless"], " in ", 
                    "consume_function"}], 
                    Column[{
                    
                    Column[{
                    " 323.          self.routes_registry = \
registry(self.builtin_routes, **routes_registry)", " 324.  ", 
                    " 325.      def consume_function(self, *args, **kwargs):",
                     " 326.          expr = super().consume_function(*args, \
**kwargs)", " 327.  ", 
                    " 328.          if check_wl_symbol(expr, \
self.hook_symbol):", " 329.              assert len(expr.args) == 2", 
                    Item[
                    " 330.              return \
self.dispatch_wl_object(*expr.args)", Background -> LightYellow], " 331.  ", 
                    " 332.          return expr", " 333.  ", 
                    " 334.      def dispatch_wl_object(self, route, args):", 
                    " 335.          return self.routes_registry[route](self, \
*args)", " 336.  "}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "self", 
                    "<ExternalEvaluateConsumer globals=4 objects=22>"}, {
                    "args", 
                    "(<wolframclient.deserializers.wxf.wxfparser.WXFToken \
object at 0x15567ca40>, <generator object WXFParser.tokens at \
0x1555ed480>)"}, {"kwargs", "{}"}, {
                    "expr", 
                    "ExternalEvaluate`Private`ExternalEvaluateCommand['Call', \
(<function dim at 0x1553ee660>, None, \
hypernetx.classes.Hypergraph.Hypergraph)]"}, {
                    "__class__", 
                    "<class \
'wolframclient.utils.externalevaluate.ExternalEvaluateConsumer'>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless"], " in ", 
                    "dispatch_wl_object"}], 
                    Column[{
                    
                    Column[{
                    " 328.          if check_wl_symbol(expr, \
self.hook_symbol):", " 329.              assert len(expr.args) == 2", 
                    " 330.              return \
self.dispatch_wl_object(*expr.args)", " 331.  ", " 332.          return expr",
                     " 333.  ", 
                    " 334.      def dispatch_wl_object(self, route, args):", 
                    Item[
                    " 335.          return self.routes_registry[route](self, \
*args)", Background -> LightYellow], " 336.  ", 
                    " 337.      def __repr__(self):", 
                    " 338.          return \"<{} globals={} \
objects={}>\".format(", 
                    " 339.              self.__class__.__name__, \
len(self.globals_registry), len(self.objects_registry)", " 340.          )", 
                    " 341.  "}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "self", 
                    "<ExternalEvaluateConsumer globals=4 objects=22>"}, {
                    "route", "Call"}, {
                    "args", 
                    "(<function dim at 0x1553ee660>, None, \
hypernetx.classes.Hypergraph.Hypergraph)"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless"], " in ", "Call"}], 
                    Column[{
                    
                    Column[{" 245.  ", " 246.  ", 
                    " 247.  @routes.register_function", 
                    " 248.  def Call(consumer, result, *args):", " 249.  ", 
                    " 250.      pos, kwargs = unpack_optionals(args)", 
                    " 251.  ", 
                    Item[
                    " 252.      return result(*pos, **kwargs)", Background -> 
                    LightYellow], " 253.  ", " 254.  ", 
                    " 255.  @routes.register_function", 
                    " 256.  def MethodCall(consumer, result, names, *args):", 
                    " 257.      return Call(consumer, GetAttribute(consumer, \
result, names), *args)", " 258.  "}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "consumer", 
                    "<ExternalEvaluateConsumer globals=4 objects=22>"}, {
                    "result", "<function dim at 0x1553ee660>"}, {
                    "args", 
                    "(None, hypernetx.classes.Hypergraph.Hypergraph,)"}, {
                    "pos", "[None, \
hypernetx.classes.Hypergraph.Hypergraph]"}, {"kwargs", "{}"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, True], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Users/arnoudb/hypernetx/Python/Hypergraph/Hypergraph.\
py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Users/arnoudb/hypernetx/Python/Hypergraph/Hypergraph.\
py"], 
                    SystemOpen[
                    "/Users/arnoudb/hypernetx/Python/Hypergraph/Hypergraph.\
py"]], Appearance -> "Frameless"], " in ", "dim"}], 
                    Column[{
                    
                    Column[{"  45.  def degree(hg):", 
                    "  46.      return hg.degree()", "  47.  ", 
                    "  48.  def diameter(hg):", 
                    "  49.      return hg.diameter()", "  50.  ", 
                    "  51.  def dim(hg):", 
                    Item[
                    "  52.      return hg.dim()", Background -> LightYellow], 
                    "  53.  ", "  54.  def distance(hg):", 
                    "  55.      return hg.distance()", "  56.  ", 
                    "  57.  def dual(hg):", "  58.      return hg.dual()"}, 
                    Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "hg", "None, <class \
'hypernetx.classes.Hypergraph.Hypergraph'>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, True]}], FontFamily -> 
                    "Courier"]}, True]], DynamicModuleValues -> Automatic], 
                    Setting[#, {0}]& ], HoldForm], "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  Failure[
  "PythonError", <|
   "MessageTemplate" :> 
    "Hypergraph.dim() missing 1 required positional argument: 'edge'", 
    "MessageParameters" :> <||>, "FailureCode" :> "TypeError", "Traceback" :> 
    OpenerView[{
       Row[{
        "TypeError", " ", 
         "Hypergraph.dim() missing 1 required positional argument: 'edge'"}], 
       
       Style[
        Column[{
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/language/\
decorators.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/language/\
decorators.py"], 
                SystemOpen[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/language/\
decorators.py"]], Appearance -> "Frameless"], " in ", "safe_wl_execute"}], 
            Column[{
              
              Column[{"  14.      \"wl\": b'Failure[\"PythonFailure\", \
<|\"MessageTemplate\" -> \"Unexpected error occurred.\"|>]',", "  15.  }", 
                "  16.  ", "  17.  ", 
                "  18.  def safe_wl_execute(function, args=(), opts={}, \
export_opts={}, exception_class=None):", "  19.  ", "  20.      try:", 
                Item[
                "  21.          return export(function(*args, **opts), \
**export_opts)", Background -> LightYellow], 
                "  22.      except Exception as export_exception:", 
                "  23.          try:", "  24.              try:", "  25.  ", 
                "  26.                  # The user can provide an exception \
class, and it can be broken, in which case we are running another", 
                "  27.                  # try / except to return errors that \
are happening during class serialization"}, Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  "function", "<function handle_message at 0x105bc8fe0>"}, {
                  "args", "(<zmq.Socket(zmq.PAIR) at 0x105ba8c20>,)"}, {
                  "opts", 
                   "{'consumer': <ExternalEvaluateConsumer globals=4 \
objects=22>}"}, {"export_opts", 
                   "{'object_processor': <function \
start_zmq_loop.<locals>.<lambda> at 0x104e509a0>, 'target_format': 'wxf'}"}, {
                  "exception_class", "None"}, {
                  "export_exception", 
                   "Hypergraph.dim() missing 1 required positional argument: \
'edge'"}}, Background -> {Null, {LightGray}}, Alignment -> Left, Frame -> 
                 LightGray]}]}]}, False], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                SystemOpen[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless"], " in ", 
              "handle_message"}], 
            Column[{
              
              Column[{" 350.          self.socket.send(zmq.Frame(bytes))", 
                " 351.  ", " 352.      def send_side_effect(self, expr):", 
                " 353.          self.write(export(self.keep_listening(expr), \
target_format=\"wxf\"))", " 354.  ", " 355.  ", 
                " 356.  def handle_message(socket, consumer):", 
                Item[
                " 357.      result = \
binary_deserialize(socket.recv(copy=False).buffer, consumer=consumer)", 
                 Background -> LightYellow], " 358.  ", 
                " 359.      sys.stdout.flush()", " 360.      return result", 
                " 361.  ", " 362.  ", 
                " 363.  def start_zmq_instance(port=None, \
write_to_stdout=True, **opts):"}, Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  "socket", "<zmq.Socket(zmq.PAIR) at 0x105ba8c20>"}, {
                  "consumer", 
                   "<ExternalEvaluateConsumer globals=4 objects=22>"}}, 
                 Background -> {Null, {LightGray}}, Alignment -> Left, Frame -> 
                 LightGray]}]}]}, False], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
__init__.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
__init__.py"], 
                SystemOpen[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
__init__.py"]], Appearance -> "Frameless"], " in ", "binary_deserialize"}], 
            Column[{
              
              Column[{"  33.  ", "  34.      \"\"\"", 
                "  35.      parser = WXFParser(wxf_input)", 
                "  36.      if consumer is None:", 
                "  37.          consumer = WXFConsumerNumpy()", "  38.  ", 
                "  39.      try:", 
                Item[
                "  40.          o = consumer.next_expression(parser.tokens(), \
**kwargs)", Background -> LightYellow], "  41.      except StopIteration:", 
                "  42.          raise WolframParserException(", 
                "  43.              \"Input data does not represent a valid \
expression in WXF format. Expecting more input data.\"", "  44.          )", 
                "  45.      if not parser.context.is_valid_final_state():", 
                "  46.          raise WolframParserException("}, 
               Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  "wxf_input", 
                   "8:f\.02s0ExternalEvaluate`Private`\
ExternalEvaluateCommandS\n\
ReturnTypef\.02s\.04Listf\.02s0ExternalEvaluate`Private`\
ExternalEvaluateCommandS\.04Callf\.02s\.04Listf\.02s0ExternalEvaluate`Private`\
ExternalEvaluateCommandS\.05Fetchf\.01\.01\.01\.01\.01\.01\.01\.01s\.04ListL`>\
U\.01\.01\.01\.01\.01\.01\.01\.01\.00\.00\.00f\.02s0ExternalEvaluate`Private`\
ExternalEvaluateCommandS\.05Fetchf\.01\.01\.01\.01\.01\.01\.01\.01s\.04ListLP-\
?U\.01\.01\.01\.01\.01\.01\.01\.01\.00\.00\.00S\nExpression"}, {
                  "consumer", 
                   "<ExternalEvaluateConsumer globals=4 objects=22>"}, {
                  "kwargs", "{}"}, {
                  "parser", 
                   "<wolframclient.deserializers.wxf.wxfparser.WXFParser \
object at 0x15536e210>"}}, Background -> {Null, {LightGray}}, Alignment -> 
                 Left, Frame -> LightGray]}]}]}, False], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                SystemOpen[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless"], " in ", "next_expression"}], 
            Column[{
              
              Column[{"  69.          constants.WXF_CONSTANTS.RuleDelayed: \
\"consume_rule_delayed\",", "  70.      }", "  71.  ", 
                "  72.      def next_expression(self, tokens, **kwargs):", 
                "  73.          \"\"\"Deserialize the next expression \
starting at the next token yield by `tokens`.\"\"\"", 
                "  74.          token = next(tokens)", 
                "  75.          consumer = \
self._consumer_from_type(token.wxf_type)", 
                Item[
                "  76.          return consumer(token, tokens, **kwargs)", 
                 Background -> LightYellow], "  77.  ", 
                "  78.      def _consumer_from_type(self, wxf_type):", 
                "  79.          try:", 
                "  80.              func = self._mapping[wxf_type]", 
                "  81.          except KeyError:", 
                "  82.              raise WolframParserException("}, 
               Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  "self", 
                   "<ExternalEvaluateConsumer globals=4 objects=22>"}, {
                  "tokens", 
                   "<generator object WXFParser.tokens at 0x1555ed480>"}, {
                  "kwargs", "{}"}, {
                  "token", "WXFToken<b'f', data=None, len=2>"}, {
                  "consumer", 
                   "<bound method ExternalEvaluateConsumer.consume_function \
of <ExternalEvaluateConsumer globals=4 objects=22>>"}}, 
                 Background -> {Null, {LightGray}}, Alignment -> Left, Frame -> 
                 LightGray]}]}]}, False], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                SystemOpen[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless"], " in ", 
              "consume_function"}], 
            Column[{
              
              Column[{" 319.  ", 
                " 320.      def __init__(self, routes_registry={}, \
objects_registry={}, globals_registry={}):", 
                " 321.          self.objects_registry = \
registry(objects_registry)", 
                " 322.          self.globals_registry = \
registry(globals_registry)", 
                " 323.          self.routes_registry = \
registry(self.builtin_routes, **routes_registry)", " 324.  ", 
                " 325.      def consume_function(self, *args, **kwargs):", 
                Item[
                " 326.          expr = super().consume_function(*args, \
**kwargs)", Background -> LightYellow], " 327.  ", 
                " 328.          if check_wl_symbol(expr, self.hook_symbol):", 
                " 329.              assert len(expr.args) == 2", 
                " 330.              return \
self.dispatch_wl_object(*expr.args)", " 331.  ", 
                " 332.          return expr"}, Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  "self", 
                   "<ExternalEvaluateConsumer globals=4 objects=22>"}, {
                  "args", 
                   "(<wolframclient.deserializers.wxf.wxfparser.WXFToken \
object at 0x1556539c0>, <generator object WXFParser.tokens at \
0x1555ed480>)"}, {"kwargs", "{}"}, {
                  "__class__", 
                   "<class \
'wolframclient.utils.externalevaluate.ExternalEvaluateConsumer'>"}}, 
                 Background -> {Null, {LightGray}}, Alignment -> Left, Frame -> 
                 LightGray]}]}]}, False], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                SystemOpen[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless"], " in ", "consume_function"}], 
            Column[{
              
              Column[{"  94.          Return a :class:`list` if the head is \
symbol `List`, otherwise returns the result of \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`", "  95.          applied to the head and arguments.", "  96.  ", 
                "  97.          Usually custom parsing rules target \
Functions, but not List. To do so, it is recommended to override", 
                "  98.          \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`.", "  99.          \"\"\"", 
                " 100.          head = self.next_expression(tokens, \
**kwargs)", 
                Item[
                " 101.          args = tuple(", Background -> LightYellow], 
                " 102.              self.next_expression(tokens, **kwargs) \
for i in range(current_token.length)", " 103.          )", 
                " 104.          if head == self._LIST:", 
                " 105.              return args", " 106.          else:", 
                " 107.              return self.build_function(head, args, \
**kwargs)"}, Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  "self", 
                   "<ExternalEvaluateConsumer globals=4 objects=22>"}, {
                  "current_token", "WXFToken<b'f', data=None, len=2>"}, {
                  "tokens", 
                   "<generator object WXFParser.tokens at 0x1555ed480>"}, {
                  "kwargs", "{}"}, {
                  "head", 
                   "ExternalEvaluate`Private`ExternalEvaluateCommand"}}, 
                 Background -> {Null, {LightGray}}, Alignment -> Left, Frame -> 
                 LightGray]}]}]}, False], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                SystemOpen[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless"], " in ", "<genexpr>"}], 
            Column[{
              
              Column[{"  95.          applied to the head and arguments.", 
                "  96.  ", 
                "  97.          Usually custom parsing rules target \
Functions, but not List. To do so, it is recommended to override", 
                "  98.          \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`.", "  99.          \"\"\"", 
                " 100.          head = self.next_expression(tokens, \
**kwargs)", " 101.          args = tuple(", 
                Item[
                " 102.              self.next_expression(tokens, **kwargs) \
for i in range(current_token.length)", Background -> LightYellow], 
                " 103.          )", " 104.          if head == self._LIST:", 
                " 105.              return args", " 106.          else:", 
                " 107.              return self.build_function(head, args, \
**kwargs)", " 108.  "}, Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  ".0", "<range_iterator object at 0x155697b70>"}, {
                  "i", "1"}, {"kwargs", "{}"}, {
                  "self", 
                   "<ExternalEvaluateConsumer globals=4 objects=22>"}, {
                  "tokens", 
                   "<generator object WXFParser.tokens at 0x1555ed480>"}}, 
                 Background -> {Null, {LightGray}}, Alignment -> Left, Frame -> 
                 LightGray]}]}]}, False], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                SystemOpen[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless"], " in ", "next_expression"}], 
            Column[{
              
              Column[{"  69.          constants.WXF_CONSTANTS.RuleDelayed: \
\"consume_rule_delayed\",", "  70.      }", "  71.  ", 
                "  72.      def next_expression(self, tokens, **kwargs):", 
                "  73.          \"\"\"Deserialize the next expression \
starting at the next token yield by `tokens`.\"\"\"", 
                "  74.          token = next(tokens)", 
                "  75.          consumer = \
self._consumer_from_type(token.wxf_type)", 
                Item[
                "  76.          return consumer(token, tokens, **kwargs)", 
                 Background -> LightYellow], "  77.  ", 
                "  78.      def _consumer_from_type(self, wxf_type):", 
                "  79.          try:", 
                "  80.              func = self._mapping[wxf_type]", 
                "  81.          except KeyError:", 
                "  82.              raise WolframParserException("}, 
               Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  "self", 
                   "<ExternalEvaluateConsumer globals=4 objects=22>"}, {
                  "tokens", 
                   "<generator object WXFParser.tokens at 0x1555ed480>"}, {
                  "kwargs", "{}"}, {
                  "token", "WXFToken<b'f', data=None, len=2>"}, {
                  "consumer", 
                   "<bound method ExternalEvaluateConsumer.consume_function \
of <ExternalEvaluateConsumer globals=4 objects=22>>"}}, 
                 Background -> {Null, {LightGray}}, Alignment -> Left, Frame -> 
                 LightGray]}]}]}, False], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                SystemOpen[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless"], " in ", 
              "consume_function"}], 
            Column[{
              
              Column[{" 319.  ", 
                " 320.      def __init__(self, routes_registry={}, \
objects_registry={}, globals_registry={}):", 
                
                " 321.          self.objects_registry = \
registry(objects_registry)", 
                " 322.          self.globals_registry = \
registry(globals_registry)", 
                " 323.          self.routes_registry = \
registry(self.builtin_routes, **routes_registry)", " 324.  ", 
                " 325.      def consume_function(self, *args, **kwargs):", 
                Item[
                " 326.          expr = super().consume_function(*args, \
**kwargs)", Background -> LightYellow], " 327.  ", 
                " 328.          if check_wl_symbol(expr, self.hook_symbol):", 
                " 329.              assert len(expr.args) == 2", 
                " 330.              return \
self.dispatch_wl_object(*expr.args)", " 331.  ", 
                " 332.          return expr"}, Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  "self", 
                   "<ExternalEvaluateConsumer globals=4 objects=22>"}, {
                  "args", 
                   "(<wolframclient.deserializers.wxf.wxfparser.WXFToken \
object at 0x155653920>, <generator object WXFParser.tokens at \
0x1555ed480>)"}, {"kwargs", "{}"}, {
                  "__class__", 
                   "<class \
'wolframclient.utils.externalevaluate.ExternalEvaluateConsumer'>"}}, 
                 Background -> {Null, {LightGray}}, Alignment -> Left, Frame -> 
                 LightGray]}]}]}, False], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                SystemOpen[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless"], " in ", "consume_function"}], 
            Column[{
              
              Column[{"  94.          Return a :class:`list` if the head is \
symbol `List`, otherwise returns the result of \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`", "  95.          applied to the head and arguments.", "  96.  ", 
                "  97.          Usually custom parsing rules target \
Functions, but not List. To do so, it is recommended to override", 
                "  98.          \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`.", "  99.          \"\"\"", 
                " 100.          head = self.next_expression(tokens, \
**kwargs)", 
                Item[
                " 101.          args = tuple(", Background -> LightYellow], 
                " 102.              self.next_expression(tokens, **kwargs) \
for i in range(current_token.length)", " 103.          )", 
                " 104.          if head == self._LIST:", 
                " 105.              return args", " 106.          else:", 
                " 107.              return self.build_function(head, args, \
**kwargs)"}, Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  "self", 
                   "<ExternalEvaluateConsumer globals=4 objects=22>"}, {
                  "current_token", "WXFToken<b'f', data=None, len=2>"}, {
                  "tokens", 
                   "<generator object WXFParser.tokens at 0x1555ed480>"}, {
                  "kwargs", "{}"}, {"head", "List"}}, 
                 Background -> {Null, {LightGray}}, Alignment -> Left, Frame -> 
                 LightGray]}]}]}, False], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                SystemOpen[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless"], " in ", "<genexpr>"}], 
            Column[{
              
              Column[{"  95.          applied to the head and arguments.", 
                "  96.  ", 
                "  97.          Usually custom parsing rules target \
Functions, but not List. To do so, it is recommended to override", 
                "  98.          \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`.", "  99.          \"\"\"", 
                " 100.          head = self.next_expression(tokens, \
**kwargs)", " 101.          args = tuple(", 
                Item[
                " 102.              self.next_expression(tokens, **kwargs) \
for i in range(current_token.length)", Background -> LightYellow], 
                " 103.          )", " 104.          if head == self._LIST:", 
                " 105.              return args", " 106.          else:", 
                " 107.              return self.build_function(head, args, \
**kwargs)", " 108.  "}, Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  ".0", "<range_iterator object at 0x155697f60>"}, {
                  "i", "0"}, {"kwargs", "{}"}, {
                  "self", 
                   "<ExternalEvaluateConsumer globals=4 objects=22>"}, {
                  "tokens", 
                   "<generator object WXFParser.tokens at 0x1555ed480>"}}, 
                 Background -> {Null, {LightGray}}, Alignment -> Left, Frame -> 
                 LightGray]}]}]}, False], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                SystemOpen[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless"], " in ", "next_expression"}], 
            Column[{
              
              Column[{"  69.          constants.WXF_CONSTANTS.RuleDelayed: \
\"consume_rule_delayed\",", "  70.      }", "  71.  ", 
                "  72.      def next_expression(self, tokens, **kwargs):", 
                "  73.          \"\"\"Deserialize the next expression \
starting at the next token yield by `tokens`.\"\"\"", 
                "  74.          token = next(tokens)", 
                "  75.          consumer = \
self._consumer_from_type(token.wxf_type)", 
                Item[
                "  76.          return consumer(token, tokens, **kwargs)", 
                 Background -> LightYellow], "  77.  ", 
                "  78.      def _consumer_from_type(self, wxf_type):", 
                "  79.          try:", 
                "  80.              func = self._mapping[wxf_type]", 
                "  81.          except KeyError:", 
                "  82.              raise WolframParserException("}, 
               Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  "self", 
                   "<ExternalEvaluateConsumer globals=4 objects=22>"}, {
                  "tokens", 
                   "<generator object WXFParser.tokens at 0x1555ed480>"}, {
                  "kwargs", "{}"}, {
                  "token", "WXFToken<b'f', data=None, len=2>"}, {
                  "consumer", 
                   "<bound method ExternalEvaluateConsumer.consume_function \
of <ExternalEvaluateConsumer globals=4 objects=22>>"}}, 
                 Background -> {Null, {LightGray}}, Alignment -> Left, Frame -> 
                 LightGray]}]}]}, False], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                SystemOpen[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless"], " in ", 
              "consume_function"}], 
            Column[{
              
              Column[{" 323.          self.routes_registry = \
registry(self.builtin_routes, **routes_registry)", " 324.  ", 
                " 325.      def consume_function(self, *args, **kwargs):", 
                " 326.          expr = super().consume_function(*args, \
**kwargs)", " 327.  ", 
                " 328.          if check_wl_symbol(expr, self.hook_symbol):", 
                " 329.              assert len(expr.args) == 2", 
                Item[
                " 330.              return \
self.dispatch_wl_object(*expr.args)", Background -> LightYellow], " 331.  ", 
                " 332.          return expr", " 333.  ", 
                " 334.      def dispatch_wl_object(self, route, args):", 
                " 335.          return self.routes_registry[route](self, \
*args)", " 336.  "}, Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  "self", 
                   "<ExternalEvaluateConsumer globals=4 objects=22>"}, {
                  "args", 
                   "(<wolframclient.deserializers.wxf.wxfparser.WXFToken \
object at 0x15567ca40>, <generator object WXFParser.tokens at \
0x1555ed480>)"}, {"kwargs", "{}"}, {
                  "expr", 
                   "ExternalEvaluate`Private`ExternalEvaluateCommand['Call', \
(<function dim at 0x1553ee660>, None, \
hypernetx.classes.Hypergraph.Hypergraph)]"}, {
                  "__class__", 
                   "<class \
'wolframclient.utils.externalevaluate.ExternalEvaluateConsumer'>"}}, 
                 Background -> {Null, {LightGray}}, Alignment -> Left, Frame -> 
                 LightGray]}]}]}, False], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                SystemOpen[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless"], " in ", 
              "dispatch_wl_object"}], 
            Column[{
              
              Column[{" 328.          if check_wl_symbol(expr, \
self.hook_symbol):", " 329.              assert len(expr.args) == 2", 
                " 330.              return \
self.dispatch_wl_object(*expr.args)", " 331.  ", " 332.          return expr",
                 " 333.  ", 
                " 334.      def dispatch_wl_object(self, route, args):", 
                Item[
                " 335.          return self.routes_registry[route](self, \
*args)", Background -> LightYellow], " 336.  ", 
                " 337.      def __repr__(self):", 
                " 338.          return \"<{} globals={} \
objects={}>\".format(", 
                " 339.              self.__class__.__name__, \
len(self.globals_registry), len(self.objects_registry)", " 340.          )", 
                " 341.  "}, Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  "self", 
                   "<ExternalEvaluateConsumer globals=4 objects=22>"}, {
                  "route", "Call"}, {
                  "args", 
                   "(<function dim at 0x1553ee660>, None, \
hypernetx.classes.Hypergraph.Hypergraph)"}}, 
                 Background -> {Null, {LightGray}}, Alignment -> Left, Frame -> 
                 LightGray]}]}]}, False], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                SystemOpen[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless"], " in ", "Call"}], 
            Column[{
              
              Column[{" 245.  ", " 246.  ", 
                " 247.  @routes.register_function", 
                " 248.  def Call(consumer, result, *args):", " 249.  ", 
                " 250.      pos, kwargs = unpack_optionals(args)", " 251.  ", 
                
                Item[
                " 252.      return result(*pos, **kwargs)", Background -> 
                 LightYellow], " 253.  ", " 254.  ", 
                " 255.  @routes.register_function", 
                " 256.  def MethodCall(consumer, result, names, *args):", 
                " 257.      return Call(consumer, GetAttribute(consumer, \
result, names), *args)", " 258.  "}, Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  "consumer", 
                   "<ExternalEvaluateConsumer globals=4 objects=22>"}, {
                  "result", "<function dim at 0x1553ee660>"}, {
                  "args", 
                   "(None, hypernetx.classes.Hypergraph.Hypergraph,)"}, {
                  "pos", "[None, hypernetx.classes.Hypergraph.Hypergraph]"}, {
                  "kwargs", "{}"}}, Background -> {Null, {LightGray}}, 
                 Alignment -> Left, Frame -> LightGray]}]}]}, True], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Users/arnoudb/hypernetx/Python/Hypergraph/Hypergraph.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Users/arnoudb/hypernetx/Python/Hypergraph/Hypergraph.py"], 
                SystemOpen[
                "/Users/arnoudb/hypernetx/Python/Hypergraph/Hypergraph.py"]], 
               Appearance -> "Frameless"], " in ", "dim"}], 
            Column[{
              
              Column[{"  45.  def degree(hg):", 
                "  46.      return hg.degree()", "  47.  ", 
                "  48.  def diameter(hg):", "  49.      return hg.diameter()",
                 "  50.  ", "  51.  def dim(hg):", 
                Item["  52.      return hg.dim()", Background -> LightYellow],
                 "  53.  ", "  54.  def distance(hg):", 
                "  55.      return hg.distance()", "  56.  ", 
                "  57.  def dual(hg):", "  58.      return hg.dual()"}, 
               Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  "hg", "None, <class \
'hypernetx.classes.Hypergraph.Hypergraph'>"}}, 
                 Background -> {Null, {LightGray}}, Alignment -> Left, Frame -> 
                 LightGray]}]}]}, True]}], FontFamily -> "Courier"]}, True]|>],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.922797393605083*^9, 3.922797784195854*^9, 
  3.92280129655858*^9},
 CellLabel->"Out[22]=",ExpressionUUID->"f3284da2-0227-47d7-a3b6-a0bb78d5632a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"HypergraphDistance", "[", "hg", "]"}]], "Input",
 CellChangeTimes->{{3.922797401725026*^9, 3.9227974024052258`*^9}},
 CellLabel->"In[23]:=",ExpressionUUID->"98ad4638-d6ba-40c4-ac44-fc98787ea972"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["Failure",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            FrameBox[
             StyleBox["\"\[WarningSign]\"", 
              Directive["Message", 35], StripOnInput -> False], 
             ContentPadding -> False, FrameStyle -> None, 
             FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
            GridBox[{{
               TagBox[
                GridBox[{{
                   TagBox["\"Message: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                   "\"Hypergraph.distance() missing 2 required positional \
arguments: 'source' and 'target'\"", "SummaryItem"]}}, 
                 GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                 GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                 GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}, {
               TagBox[
                GridBox[{{
                   TagBox["\"Tag: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["\"PythonError\"", "SummaryItem"]}}, 
                 GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                 GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                 GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            FrameBox[
             StyleBox["\"\[WarningSign]\"", 
              Directive["Message", 35], StripOnInput -> False], 
             ContentPadding -> False, FrameStyle -> None, 
             FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
            GridBox[{{
               TagBox[
                GridBox[{{
                   TagBox["\"Message: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                   "\"Hypergraph.distance() missing 2 required positional \
arguments: 'source' and 'target'\"", "SummaryItem"]}}, 
                 GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                 GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                 GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}, {
               TagBox[
                GridBox[{{
                   TagBox["\"Tag: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["\"PythonError\"", "SummaryItem"]}}, 
                 GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                 GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                 GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}, {
               RowBox[{
                 TagBox[
                  TemplateBox[{"\"FailureCode\"", "\": \""}, "RowDefault"], 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox[
                  TagBox["\"TypeError\"", HoldForm], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                  TemplateBox[{"\"Traceback\"", "\": \""}, "RowDefault"], 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   TagBox[
                    DynamicModuleBox[{Typeset`var$$ = True}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    
                    TemplateBox[{
                    "\"TypeError\"", "\" \"", 
                    "\"Hypergraph.distance() missing 2 required positional \
arguments: 'source' and 'target'\""}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    
                    TemplateBox[{
                    "\"TypeError\"", "\" \"", 
                    "\"Hypergraph.distance() missing 2 required positional \
arguments: 'source' and 'target'\""}, "RowDefault"]}, {"", 
                    PaneBox[
                    StyleBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/language/\
decorators.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/language/\
decorators.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/language/\
decorators.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"safe_wl_execute\""}, 
                    "RowDefault"]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/language/\
decorators.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/language/\
decorators.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/language/\
decorators.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"safe_wl_execute\""}, 
                    "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{
                    "\"  14.      \\\"wl\\\": \
b'Failure[\\\"PythonFailure\\\", <|\\\"MessageTemplate\\\" -> \\\"Unexpected \
error occurred.\\\"|>]',\""}, {"\"  15.  }\""}, {"\"  16.  \""}, {
                    "\"  17.  \""}, {
                    "\"  18.  def safe_wl_execute(function, args=(), opts={}, \
export_opts={}, exception_class=None):\""}, {"\"  19.  \""}, {
                    "\"  20.      try:\""}, {
                    ItemBox[
                    "\"  21.          return export(function(*args, **opts), \
**export_opts)\"", Background -> RGBColor[1, 1, 0.85], StripOnInput -> 
                    False]}, {
                    "\"  22.      except Exception as export_exception:\""}, {
                    "\"  23.          try:\""}, {
                    "\"  24.              try:\""}, {"\"  25.  \""}, {
                    "\"  26.                  # The user can provide an \
exception class, and it can be broken, in which case we are running \
another\""}, {
                    "\"  27.                  # try / except to return errors \
that are happening during class serialization\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\"function\"", 
                    "\"<function handle_message at 0x105bc8fe0>\""}, {
                    "\"args\"", 
                    "\"(<zmq.Socket(zmq.PAIR) at 0x105ba8c20>,)\""}, {
                    "\"opts\"", 
                    "\"{'consumer': <ExternalEvaluateConsumer globals=4 \
objects=23>}\""}, {"\"export_opts\"", 
                    "\"{'object_processor': <function \
start_zmq_loop.<locals>.<lambda> at 0x104e509a0>, 'target_format': \
'wxf'}\""}, {"\"exception_class\"", "\"None\""}, {"\"export_exception\"", 
                    "\"Hypergraph.distance() missing 2 required positional \
arguments: 'source' and 'target'\""}}, GridBoxAlignment -> {"Columns" -> {{
                    Left}}}, AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Null}}, "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"function", 
                    "<function handle_message at 0x105bc8fe0>"}, {
                    "args", "(<zmq.Socket(zmq.PAIR) at 0x105ba8c20>,)"}, {
                    "opts", 
                    "{'consumer': <ExternalEvaluateConsumer globals=4 \
objects=23>}"}, {"export_opts", 
                    "{'object_processor': <function \
start_zmq_loop.<locals>.<lambda> at 0x104e509a0>, 'target_format': 'wxf'}"}, {
                    "exception_class", "None"}, {"export_exception", 
                    "Hypergraph.distance() missing 2 required positional \
arguments: 'source' and 'target'"}}, Background -> {Null, {LightGray}}, 
                    Alignment -> Left, Frame -> LightGray]}, False]], 
                    DynamicModuleValues -> Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/language/\
decorators.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/language/\
decorators.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/language/\
decorators.py"]], Appearance -> "Frameless"], " in ", "safe_wl_execute"}], 
                    Column[{
                    
                    Column[{
                    "  14.      \"wl\": b'Failure[\"PythonFailure\", \
<|\"MessageTemplate\" -> \"Unexpected error occurred.\"|>]',", "  15.  }", 
                    "  16.  ", "  17.  ", 
                    "  18.  def safe_wl_execute(function, args=(), opts={}, \
export_opts={}, exception_class=None):", "  19.  ", "  20.      try:", 
                    Item[
                    "  21.          return export(function(*args, **opts), \
**export_opts)", Background -> LightYellow], 
                    "  22.      except Exception as export_exception:", 
                    "  23.          try:", "  24.              try:", 
                    "  25.  ", 
                    "  26.                  # The user can provide an \
exception class, and it can be broken, in which case we are running another", 
                    "  27.                  # try / except to return errors \
that are happening during class serialization"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"function", 
                    "<function handle_message at 0x105bc8fe0>"}, {
                    "args", "(<zmq.Socket(zmq.PAIR) at 0x105ba8c20>,)"}, {
                    "opts", 
                    "{'consumer': <ExternalEvaluateConsumer globals=4 \
objects=23>}"}, {"export_opts", 
                    "{'object_processor': <function \
start_zmq_loop.<locals>.<lambda> at 0x104e509a0>, 'target_format': 'wxf'}"}, {
                    "exception_class", "None"}, {
                    "export_exception", 
                    "Hypergraph.distance() missing 2 required positional \
arguments: 'source' and 'target'"}}, Background -> {Null, {LightGray}}, 
                    Alignment -> Left, Frame -> LightGray]}]}]}, False]], 
                    DynamicModuleValues -> Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless", Evaluator -> Automatic, 
                    Method -> "Preemptive"], "\" in \"", 
                    "\"handle_message\""}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless", Evaluator -> Automatic, 
                    Method -> "Preemptive"], "\" in \"", 
                    "\"handle_message\""}, "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{
                    "\" 350.          self.socket.send(zmq.Frame(bytes))\""}, \
{"\" 351.  \""}, {"\" 352.      def send_side_effect(self, expr):\""}, {
                    "\" 353.          \
self.write(export(self.keep_listening(expr), target_format=\\\"wxf\\\"))\""}, \
{"\" 354.  \""}, {"\" 355.  \""}, {
                    "\" 356.  def handle_message(socket, consumer):\""}, {
                    ItemBox[
                    "\" 357.      result = \
binary_deserialize(socket.recv(copy=False).buffer, consumer=consumer)\"", 
                    Background -> RGBColor[1, 1, 0.85], StripOnInput -> 
                    False]}, {"\" 358.  \""}, {
                    "\" 359.      sys.stdout.flush()\""}, {
                    "\" 360.      return result\""}, {"\" 361.  \""}, {
                    "\" 362.  \""}, {
                    "\" 363.  def start_zmq_instance(port=None, \
write_to_stdout=True, **opts):\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\"socket\"", 
                    "\"<zmq.Socket(zmq.PAIR) at 0x105ba8c20>\""}, {
                    "\"consumer\"", 
                    "\"<ExternalEvaluateConsumer globals=4 objects=23>\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Null}}, 
                    "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"socket", 
                    "<zmq.Socket(zmq.PAIR) at 0x105ba8c20>"}, {
                    "consumer", 
                    "<ExternalEvaluateConsumer globals=4 objects=23>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless"], " in ", 
                    "handle_message"}], 
                    Column[{
                    
                    Column[{
                    " 350.          self.socket.send(zmq.Frame(bytes))", 
                    " 351.  ", " 352.      def send_side_effect(self, expr):",
                     " 353.          \
self.write(export(self.keep_listening(expr), target_format=\"wxf\"))", 
                    " 354.  ", " 355.  ", 
                    " 356.  def handle_message(socket, consumer):", 
                    Item[
                    " 357.      result = \
binary_deserialize(socket.recv(copy=False).buffer, consumer=consumer)", 
                    Background -> LightYellow], " 358.  ", 
                    " 359.      sys.stdout.flush()", 
                    " 360.      return result", " 361.  ", " 362.  ", 
                    " 363.  def start_zmq_instance(port=None, \
write_to_stdout=True, **opts):"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"socket", 
                    "<zmq.Socket(zmq.PAIR) at 0x105ba8c20>"}, {
                    "consumer", 
                    "<ExternalEvaluateConsumer globals=4 objects=23>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
__init__.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
__init__.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
__init__.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"binary_deserialize\""}, 
                    "RowDefault"]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
__init__.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
__init__.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
__init__.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"binary_deserialize\""}, 
                    "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{"\"  33.  \""}, {
                    "\"  34.      \\\"\\\"\\\"\""}, {
                    "\"  35.      parser = WXFParser(wxf_input)\""}, {
                    "\"  36.      if consumer is None:\""}, {
                    "\"  37.          consumer = WXFConsumerNumpy()\""}, {
                    "\"  38.  \""}, {"\"  39.      try:\""}, {
                    ItemBox[
                    "\"  40.          o = \
consumer.next_expression(parser.tokens(), **kwargs)\"", Background -> 
                    RGBColor[1, 1, 0.85], StripOnInput -> False]}, {
                    "\"  41.      except StopIteration:\""}, {
                    "\"  42.          raise WolframParserException(\""}, {
                    "\"  43.              \\\"Input data does not represent a \
valid expression in WXF format. Expecting more input data.\\\"\""}, {
                    "\"  44.          )\""}, {
                    "\"  45.      if not \
parser.context.is_valid_final_state():\""}, {
                    "\"  46.          raise WolframParserException(\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\"wxf_input\"", 
                    "\"8:f\.02s0ExternalEvaluate`Private`\
ExternalEvaluateCommandS\\nReturnTypef\.02s\.04Listf\.02s0ExternalEvaluate`\
Private`ExternalEvaluateCommandS\.04Callf\.02s\.04Listf\.02s0ExternalEvaluate`\
Private`ExternalEvaluateCommandS\.05Fetchf\.01\.01\.01\.01\.01\.01\.01\.01s\
\.04ListL\.00>U\.01\.01\.01\.01\.01\.01\.01\.01\.00\.00\.00f\.02\
s0ExternalEvaluate`Private`ExternalEvaluateCommandS\.05Fetchf\.01\.01\.01\.01\
\.01\.01\.01\.01s\.04ListLP-?U\.01\.01\.01\.01\.01\.01\.01\.01\.00\.00\.00S\\\
nExpression\""}, {"\"consumer\"", 
                    "\"<ExternalEvaluateConsumer globals=4 objects=23>\""}, {
                    "\"kwargs\"", "\"{}\""}, {"\"parser\"", 
                    "\"<wolframclient.deserializers.wxf.wxfparser.WXFParser \
object at 0x155620f50>\""}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {"Columns" -> {{
                    Null}}, "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"wxf_input", 
                    "8:f\.02s0ExternalEvaluate`Private`\
ExternalEvaluateCommandS\n\
ReturnTypef\.02s\.04Listf\.02s0ExternalEvaluate`Private`\
ExternalEvaluateCommandS\.04Callf\.02s\.04Listf\.02s0ExternalEvaluate`Private`\
ExternalEvaluateCommandS\.05Fetchf\.01\.01\.01\.01\.01\.01\.01\.01s\.04ListL\
\.00>U\.01\.01\.01\.01\.01\.01\.01\.01\.00\.00\.00f\.02s0ExternalEvaluate`\
Private`ExternalEvaluateCommandS\.05Fetchf\.01\.01\.01\.01\.01\.01\.01\.01s\
\.04ListLP-?U\.01\.01\.01\.01\.01\.01\.01\.01\.00\.00\.00S\nExpression"}, {
                    "consumer", 
                    "<ExternalEvaluateConsumer globals=4 objects=23>"}, {
                    "kwargs", "{}"}, {"parser", 
                    "<wolframclient.deserializers.wxf.wxfparser.WXFParser \
object at 0x155620f50>"}}, Background -> {Null, {LightGray}}, Alignment -> 
                    Left, Frame -> LightGray]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
__init__.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
__init__.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
__init__.py"]], Appearance -> "Frameless"], " in ", "binary_deserialize"}], 
                    Column[{
                    
                    Column[{"  33.  ", "  34.      \"\"\"", 
                    "  35.      parser = WXFParser(wxf_input)", 
                    "  36.      if consumer is None:", 
                    "  37.          consumer = WXFConsumerNumpy()", "  38.  ",
                     "  39.      try:", 
                    Item[
                    "  40.          o = \
consumer.next_expression(parser.tokens(), **kwargs)", Background -> 
                    LightYellow], "  41.      except StopIteration:", 
                    "  42.          raise WolframParserException(", 
                    "  43.              \"Input data does not represent a \
valid expression in WXF format. Expecting more input data.\"", 
                    "  44.          )", 
                    "  45.      if not \
parser.context.is_valid_final_state():", 
                    "  46.          raise WolframParserException("}, 
                    Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"wxf_input", 
                    "8:f\.02s0ExternalEvaluate`Private`\
ExternalEvaluateCommandS\n\
ReturnTypef\.02s\.04Listf\.02s0ExternalEvaluate`Private`\
ExternalEvaluateCommandS\.04Callf\.02s\.04Listf\.02s0ExternalEvaluate`Private`\
ExternalEvaluateCommandS\.05Fetchf\.01\.01\.01\.01\.01\.01\.01\.01s\.04ListL\
\.00>U\.01\.01\.01\.01\.01\.01\.01\.01\.00\.00\.00f\.02s0ExternalEvaluate`\
Private`ExternalEvaluateCommandS\.05Fetchf\.01\.01\.01\.01\.01\.01\.01\.01s\
\.04ListLP-?U\.01\.01\.01\.01\.01\.01\.01\.01\.00\.00\.00S\nExpression"}, {
                    "consumer", 
                    "<ExternalEvaluateConsumer globals=4 objects=23>"}, {
                    "kwargs", "{}"}, {"parser", 
                    "<wolframclient.deserializers.wxf.wxfparser.WXFParser \
object at 0x155620f50>"}}, Background -> {Null, {LightGray}}, Alignment -> 
                    Left, Frame -> LightGray]}]}]}, False]], 
                    DynamicModuleValues -> Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"next_expression\""}, 
                    "RowDefault"]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"next_expression\""}, 
                    "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{
                    "\"  69.          constants.WXF_CONSTANTS.RuleDelayed: \\\
\"consume_rule_delayed\\\",\""}, {"\"  70.      }\""}, {"\"  71.  \""}, {
                    "\"  72.      def next_expression(self, tokens, \
**kwargs):\""}, {
                    "\"  73.          \\\"\\\"\\\"Deserialize the next \
expression starting at the next token yield by `tokens`.\\\"\\\"\\\"\""}, {
                    "\"  74.          token = next(tokens)\""}, {
                    "\"  75.          consumer = \
self._consumer_from_type(token.wxf_type)\""}, {
                    ItemBox[
                    "\"  76.          return consumer(token, tokens, \
**kwargs)\"", Background -> RGBColor[1, 1, 0.85], StripOnInput -> False]}, {
                    "\"  77.  \""}, {
                    "\"  78.      def _consumer_from_type(self, \
wxf_type):\""}, {"\"  79.          try:\""}, {
                    "\"  80.              func = self._mapping[wxf_type]\""}, \
{"\"  81.          except KeyError:\""}, {
                    "\"  82.              raise WolframParserException(\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\"self\"", 
                    "\"<ExternalEvaluateConsumer globals=4 objects=23>\""}, {
                    "\"tokens\"", 
                    "\"<generator object WXFParser.tokens at \
0x1555ed840>\""}, {"\"kwargs\"", "\"{}\""}, {"\"token\"", 
                    "\"WXFToken<b'f', data=None, len=2>\""}, {"\"consumer\"", 
                    "\"<bound method \
ExternalEvaluateConsumer.consume_function of <ExternalEvaluateConsumer \
globals=4 objects=23>>\""}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {"Columns" -> {{
                    Null}}, "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<ExternalEvaluateConsumer globals=4 objects=23>"}, {
                    "tokens", 
                    "<generator object WXFParser.tokens at 0x1555ed840>"}, {
                    "kwargs", "{}"}, {"token", 
                    "WXFToken<b'f', data=None, len=2>"}, {
                    "consumer", 
                    "<bound method ExternalEvaluateConsumer.consume_function \
of <ExternalEvaluateConsumer globals=4 objects=23>>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless"], " in ", "next_expression"}], 
                    Column[{
                    
                    Column[{
                    "  69.          constants.WXF_CONSTANTS.RuleDelayed: \
\"consume_rule_delayed\",", "  70.      }", "  71.  ", 
                    "  72.      def next_expression(self, tokens, **kwargs):",
                     "  73.          \"\"\"Deserialize the next expression \
starting at the next token yield by `tokens`.\"\"\"", 
                    "  74.          token = next(tokens)", 
                    "  75.          consumer = \
self._consumer_from_type(token.wxf_type)", 
                    Item[
                    "  76.          return consumer(token, tokens, **kwargs)",
                     Background -> LightYellow], "  77.  ", 
                    "  78.      def _consumer_from_type(self, wxf_type):", 
                    "  79.          try:", 
                    "  80.              func = self._mapping[wxf_type]", 
                    "  81.          except KeyError:", 
                    "  82.              raise WolframParserException("}, 
                    Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<ExternalEvaluateConsumer globals=4 objects=23>"}, {
                    "tokens", 
                    "<generator object WXFParser.tokens at 0x1555ed840>"}, {
                    "kwargs", "{}"}, {"token", 
                    "WXFToken<b'f', data=None, len=2>"}, {
                    "consumer", 
                    "<bound method ExternalEvaluateConsumer.consume_function \
of <ExternalEvaluateConsumer globals=4 objects=23>>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless", Evaluator -> Automatic, 
                    Method -> "Preemptive"], "\" in \"", 
                    "\"consume_function\""}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless", Evaluator -> Automatic, 
                    Method -> "Preemptive"], "\" in \"", 
                    "\"consume_function\""}, "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{"\" 319.  \""}, {
                    "\" 320.      def __init__(self, routes_registry={}, \
objects_registry={}, globals_registry={}):\""}, {
                    "\" 321.          self.objects_registry = \
registry(objects_registry)\""}, {
                    "\" 322.          self.globals_registry = \
registry(globals_registry)\""}, {
                    "\" 323.          self.routes_registry = \
registry(self.builtin_routes, **routes_registry)\""}, {"\" 324.  \""}, {
                    "\" 325.      def consume_function(self, *args, \
**kwargs):\""}, {
                    ItemBox[
                    "\" 326.          expr = super().consume_function(*args, \
**kwargs)\"", Background -> RGBColor[1, 1, 0.85], StripOnInput -> False]}, {
                    "\" 327.  \""}, {
                    "\" 328.          if check_wl_symbol(expr, \
self.hook_symbol):\""}, {
                    "\" 329.              assert len(expr.args) == 2\""}, {
                    "\" 330.              return \
self.dispatch_wl_object(*expr.args)\""}, {"\" 331.  \""}, {
                    "\" 332.          return expr\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\"self\"", 
                    "\"<ExternalEvaluateConsumer globals=4 objects=23>\""}, {
                    "\"args\"", 
                    "\"(<wolframclient.deserializers.wxf.wxfparser.WXFToken \
object at 0x15565d300>, <generator object WXFParser.tokens at \
0x1555ed840>)\""}, {"\"kwargs\"", "\"{}\""}, {"\"__class__\"", 
                    "\"<class \
'wolframclient.utils.externalevaluate.ExternalEvaluateConsumer'>\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Null}}, 
                    "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<ExternalEvaluateConsumer globals=4 objects=23>"}, {
                    "args", 
                    "(<wolframclient.deserializers.wxf.wxfparser.WXFToken \
object at 0x15565d300>, <generator object WXFParser.tokens at \
0x1555ed840>)"}, {"kwargs", "{}"}, {"__class__", 
                    "<class \
'wolframclient.utils.externalevaluate.ExternalEvaluateConsumer'>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless"], " in ", 
                    "consume_function"}], 
                    Column[{
                    
                    Column[{" 319.  ", 
                    " 320.      def __init__(self, routes_registry={}, \
objects_registry={}, globals_registry={}):", 
                    " 321.          self.objects_registry = \
registry(objects_registry)", 
                    " 322.          self.globals_registry = \
registry(globals_registry)", 
                    " 323.          self.routes_registry = \
registry(self.builtin_routes, **routes_registry)", " 324.  ", 
                    " 325.      def consume_function(self, *args, **kwargs):", 
                    Item[
                    " 326.          expr = super().consume_function(*args, \
**kwargs)", Background -> LightYellow], " 327.  ", 
                    " 328.          if check_wl_symbol(expr, \
self.hook_symbol):", " 329.              assert len(expr.args) == 2", 
                    " 330.              return \
self.dispatch_wl_object(*expr.args)", " 331.  ", 
                    " 332.          return expr"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<ExternalEvaluateConsumer globals=4 objects=23>"}, {
                    "args", 
                    "(<wolframclient.deserializers.wxf.wxfparser.WXFToken \
object at 0x15565d300>, <generator object WXFParser.tokens at \
0x1555ed840>)"}, {"kwargs", "{}"}, {"__class__", 
                    "<class \
'wolframclient.utils.externalevaluate.ExternalEvaluateConsumer'>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"consume_function\""}, 
                    "RowDefault"]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"consume_function\""}, 
                    "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{
                    "\"  94.          Return a :class:`list` if the head is \
symbol `List`, otherwise returns the result of \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`\""}, {"\"  95.          applied to the head and arguments.\""}, {
                    "\"  96.  \""}, {
                    "\"  97.          Usually custom parsing rules target \
Functions, but not List. To do so, it is recommended to override\""}, {
                    
                    "\"  98.          \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`.\""}, {"\"  99.          \\\"\\\"\\\"\""}, {
                    "\" 100.          head = self.next_expression(tokens, \
**kwargs)\""}, {
                    ItemBox["\" 101.          args = tuple(\"", Background -> 
                    RGBColor[1, 1, 0.85], StripOnInput -> False]}, {
                    "\" 102.              self.next_expression(tokens, \
**kwargs) for i in range(current_token.length)\""}, {
                    "\" 103.          )\""}, {
                    "\" 104.          if head == self._LIST:\""}, {
                    "\" 105.              return args\""}, {
                    "\" 106.          else:\""}, {
                    "\" 107.              return self.build_function(head, \
args, **kwargs)\""}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\"self\"", 
                    "\"<ExternalEvaluateConsumer globals=4 objects=23>\""}, {
                    "\"current_token\"", 
                    "\"WXFToken<b'f', data=None, len=2>\""}, {"\"tokens\"", 
                    "\"<generator object WXFParser.tokens at \
0x1555ed840>\""}, {"\"kwargs\"", "\"{}\""}, {"\"head\"", 
                    "\"ExternalEvaluate`Private`ExternalEvaluateCommand\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Null}}, 
                    "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<ExternalEvaluateConsumer globals=4 objects=23>"}, {
                    "current_token", "WXFToken<b'f', data=None, len=2>"}, {
                    "tokens", 
                    "<generator object WXFParser.tokens at 0x1555ed840>"}, {
                    "kwargs", "{}"}, {"head", 
                    "ExternalEvaluate`Private`ExternalEvaluateCommand"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless"], " in ", "consume_function"}], 
                    Column[{
                    
                    Column[{
                    "  94.          Return a :class:`list` if the head is \
symbol `List`, otherwise returns the result of \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`", "  95.          applied to the head and arguments.", "  96.  ", 
                    "  97.          Usually custom parsing rules target \
Functions, but not List. To do so, it is recommended to override", 
                    "  98.          \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`.", "  99.          \"\"\"", 
                    " 100.          head = self.next_expression(tokens, \
**kwargs)", 
                    Item[" 101.          args = tuple(", Background -> 
                    LightYellow], 
                    " 102.              self.next_expression(tokens, \
**kwargs) for i in range(current_token.length)", " 103.          )", 
                    " 104.          if head == self._LIST:", 
                    " 105.              return args", " 106.          else:", 
                    " 107.              return self.build_function(head, \
args, **kwargs)"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<ExternalEvaluateConsumer globals=4 objects=23>"}, {
                    "current_token", "WXFToken<b'f', data=None, len=2>"}, {
                    "tokens", 
                    "<generator object WXFParser.tokens at 0x1555ed840>"}, {
                    "kwargs", "{}"}, {"head", 
                    "ExternalEvaluate`Private`ExternalEvaluateCommand"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"<genexpr>\""}, 
                    "RowDefault"]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"<genexpr>\""}, 
                    "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{
                    "\"  95.          applied to the head and arguments.\""}, \
{"\"  96.  \""}, {
                    "\"  97.          Usually custom parsing rules target \
Functions, but not List. To do so, it is recommended to override\""}, {
                    "\"  98.          \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`.\""}, {"\"  99.          \\\"\\\"\\\"\""}, {
                    "\" 100.          head = self.next_expression(tokens, \
**kwargs)\""}, {"\" 101.          args = tuple(\""}, {
                    ItemBox[
                    "\" 102.              self.next_expression(tokens, \
**kwargs) for i in range(current_token.length)\"", Background -> 
                    RGBColor[1, 1, 0.85], StripOnInput -> False]}, {
                    "\" 103.          )\""}, {
                    "\" 104.          if head == self._LIST:\""}, {
                    "\" 105.              return args\""}, {
                    "\" 106.          else:\""}, {
                    "\" 107.              return self.build_function(head, \
args, **kwargs)\""}, {"\" 108.  \""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\".0\"", 
                    "\"<range_iterator object at 0x155682730>\""}, {
                    "\"i\"", "\"1\""}, {"\"kwargs\"", "\"{}\""}, {
                    "\"self\"", 
                    "\"<ExternalEvaluateConsumer globals=4 objects=23>\""}, {
                    "\"tokens\"", 
                    "\"<generator object WXFParser.tokens at \
0x1555ed840>\""}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Null}}, 
                    "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {".0", 
                    "<range_iterator object at 0x155682730>"}, {"i", "1"}, {
                    "kwargs", "{}"}, {"self", 
                    "<ExternalEvaluateConsumer globals=4 objects=23>"}, {
                    "tokens", 
                    "<generator object WXFParser.tokens at 0x1555ed840>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless"], " in ", "<genexpr>"}], 
                    Column[{
                    
                    Column[{
                    "  95.          applied to the head and arguments.", 
                    "  96.  ", 
                    "  97.          Usually custom parsing rules target \
Functions, but not List. To do so, it is recommended to override", 
                    "  98.          \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`.", "  99.          \"\"\"", 
                    " 100.          head = self.next_expression(tokens, \
**kwargs)", " 101.          args = tuple(", 
                    Item[
                    " 102.              self.next_expression(tokens, \
**kwargs) for i in range(current_token.length)", Background -> LightYellow], 
                    " 103.          )", 
                    " 104.          if head == self._LIST:", 
                    " 105.              return args", " 106.          else:", 
                    " 107.              return self.build_function(head, \
args, **kwargs)", " 108.  "}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {".0", 
                    "<range_iterator object at 0x155682730>"}, {"i", "1"}, {
                    "kwargs", "{}"}, {"self", 
                    "<ExternalEvaluateConsumer globals=4 objects=23>"}, {
                    "tokens", 
                    "<generator object WXFParser.tokens at 0x1555ed840>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"next_expression\""}, 
                    "RowDefault"]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"next_expression\""}, 
                    "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{
                    "\"  69.          constants.WXF_CONSTANTS.RuleDelayed: \\\
\"consume_rule_delayed\\\",\""}, {"\"  70.      }\""}, {"\"  71.  \""}, {
                    "\"  72.      def next_expression(self, tokens, \
**kwargs):\""}, {
                    "\"  73.          \\\"\\\"\\\"Deserialize the next \
expression starting at the next token yield by `tokens`.\\\"\\\"\\\"\""}, {
                    "\"  74.          token = next(tokens)\""}, {
                    "\"  75.          consumer = \
self._consumer_from_type(token.wxf_type)\""}, {
                    ItemBox[
                    "\"  76.          return consumer(token, tokens, \
**kwargs)\"", Background -> RGBColor[1, 1, 0.85], StripOnInput -> False]}, {
                    "\"  77.  \""}, {
                    "\"  78.      def _consumer_from_type(self, \
wxf_type):\""}, {"\"  79.          try:\""}, {
                    "\"  80.              func = self._mapping[wxf_type]\""}, \
{"\"  81.          except KeyError:\""}, {
                    "\"  82.              raise WolframParserException(\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\"self\"", 
                    "\"<ExternalEvaluateConsumer globals=4 objects=23>\""}, {
                    "\"tokens\"", 
                    "\"<generator object WXFParser.tokens at \
0x1555ed840>\""}, {"\"kwargs\"", "\"{}\""}, {"\"token\"", 
                    "\"WXFToken<b'f', data=None, len=2>\""}, {"\"consumer\"", 
                    "\"<bound method \
ExternalEvaluateConsumer.consume_function of <ExternalEvaluateConsumer \
globals=4 objects=23>>\""}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {"Columns" -> {{
                    Null}}, "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<ExternalEvaluateConsumer globals=4 objects=23>"}, {
                    "tokens", 
                    "<generator object WXFParser.tokens at 0x1555ed840>"}, {
                    "kwargs", "{}"}, {"token", 
                    "WXFToken<b'f', data=None, len=2>"}, {
                    "consumer", 
                    "<bound method ExternalEvaluateConsumer.consume_function \
of <ExternalEvaluateConsumer globals=4 objects=23>>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless"], " in ", "next_expression"}], 
                    Column[{
                    
                    Column[{
                    "  69.          constants.WXF_CONSTANTS.RuleDelayed: \
\"consume_rule_delayed\",", "  70.      }", "  71.  ", 
                    "  72.      def next_expression(self, tokens, **kwargs):",
                     "  73.          \"\"\"Deserialize the next expression \
starting at the next token yield by `tokens`.\"\"\"", 
                    "  74.          token = next(tokens)", 
                    "  75.          consumer = \
self._consumer_from_type(token.wxf_type)", 
                    Item[
                    "  76.          return consumer(token, tokens, **kwargs)",
                     Background -> LightYellow], "  77.  ", 
                    "  78.      def _consumer_from_type(self, wxf_type):", 
                    "  79.          try:", 
                    "  80.              func = self._mapping[wxf_type]", 
                    "  81.          except KeyError:", 
                    "  82.              raise WolframParserException("}, 
                    Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<ExternalEvaluateConsumer globals=4 objects=23>"}, {
                    "tokens", 
                    "<generator object WXFParser.tokens at 0x1555ed840>"}, {
                    "kwargs", "{}"}, {"token", 
                    "WXFToken<b'f', data=None, len=2>"}, {
                    "consumer", 
                    "<bound method ExternalEvaluateConsumer.consume_function \
of <ExternalEvaluateConsumer globals=4 objects=23>>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless", Evaluator -> Automatic, 
                    Method -> "Preemptive"], "\" in \"", 
                    "\"consume_function\""}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless", Evaluator -> Automatic, 
                    Method -> "Preemptive"], "\" in \"", 
                    "\"consume_function\""}, "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{"\" 319.  \""}, {
                    "\" 320.      def __init__(self, routes_registry={}, \
objects_registry={}, globals_registry={}):\""}, {
                    "\" 321.          self.objects_registry = \
registry(objects_registry)\""}, {
                    "\" 322.          self.globals_registry = \
registry(globals_registry)\""}, {
                    "\" 323.          self.routes_registry = \
registry(self.builtin_routes, **routes_registry)\""}, {"\" 324.  \""}, {
                    "\" 325.      def consume_function(self, *args, \
**kwargs):\""}, {
                    ItemBox[
                    "\" 326.          expr = super().consume_function(*args, \
**kwargs)\"", Background -> RGBColor[1, 1, 0.85], StripOnInput -> False]}, {
                    "\" 327.  \""}, {
                    "\" 328.          if check_wl_symbol(expr, \
self.hook_symbol):\""}, {
                    "\" 329.              assert len(expr.args) == 2\""}, {
                    "\" 330.              return \
self.dispatch_wl_object(*expr.args)\""}, {"\" 331.  \""}, {
                    "\" 332.          return expr\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\"self\"", 
                    "\"<ExternalEvaluateConsumer globals=4 objects=23>\""}, {
                    "\"args\"", 
                    "\"(<wolframclient.deserializers.wxf.wxfparser.WXFToken \
object at 0x15565d4e0>, <generator object WXFParser.tokens at \
0x1555ed840>)\""}, {"\"kwargs\"", "\"{}\""}, {"\"__class__\"", 
                    "\"<class \
'wolframclient.utils.externalevaluate.ExternalEvaluateConsumer'>\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Null}}, 
                    "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<ExternalEvaluateConsumer globals=4 objects=23>"}, {
                    "args", 
                    "(<wolframclient.deserializers.wxf.wxfparser.WXFToken \
object at 0x15565d4e0>, <generator object WXFParser.tokens at \
0x1555ed840>)"}, {"kwargs", "{}"}, {"__class__", 
                    "<class \
'wolframclient.utils.externalevaluate.ExternalEvaluateConsumer'>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless"], " in ", 
                    "consume_function"}], 
                    Column[{
                    
                    Column[{" 319.  ", 
                    " 320.      def __init__(self, routes_registry={}, \
objects_registry={}, globals_registry={}):", 
                    " 321.          self.objects_registry = \
registry(objects_registry)", 
                    " 322.          self.globals_registry = \
registry(globals_registry)", 
                    " 323.          self.routes_registry = \
registry(self.builtin_routes, **routes_registry)", " 324.  ", 
                    " 325.      def consume_function(self, *args, **kwargs):", 
                    Item[
                    " 326.          expr = super().consume_function(*args, \
**kwargs)", Background -> LightYellow], " 327.  ", 
                    " 328.          if check_wl_symbol(expr, \
self.hook_symbol):", " 329.              assert len(expr.args) == 2", 
                    " 330.              return \
self.dispatch_wl_object(*expr.args)", " 331.  ", 
                    " 332.          return expr"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<ExternalEvaluateConsumer globals=4 objects=23>"}, {
                    "args", 
                    "(<wolframclient.deserializers.wxf.wxfparser.WXFToken \
object at 0x15565d4e0>, <generator object WXFParser.tokens at \
0x1555ed840>)"}, {"kwargs", "{}"}, {"__class__", 
                    "<class \
'wolframclient.utils.externalevaluate.ExternalEvaluateConsumer'>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"consume_function\""}, 
                    "RowDefault"]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"consume_function\""}, 
                    "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{
                    "\"  94.          Return a :class:`list` if the head is \
symbol `List`, otherwise returns the result of \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`\""}, {"\"  95.          applied to the head and arguments.\""}, {
                    "\"  96.  \""}, {
                    "\"  97.          Usually custom parsing rules target \
Functions, but not List. To do so, it is recommended to override\""}, {
                    "\"  98.          \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`.\""}, {"\"  99.          \\\"\\\"\\\"\""}, {
                    "\" 100.          head = self.next_expression(tokens, \
**kwargs)\""}, {
                    ItemBox["\" 101.          args = tuple(\"", Background -> 
                    RGBColor[1, 1, 0.85], StripOnInput -> False]}, {
                    "\" 102.              self.next_expression(tokens, \
**kwargs) for i in range(current_token.length)\""}, {
                    "\" 103.          )\""}, {
                    "\" 104.          if head == self._LIST:\""}, {
                    "\" 105.              return args\""}, {
                    "\" 106.          else:\""}, {
                    "\" 107.              return self.build_function(head, \
args, **kwargs)\""}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\"self\"", 
                    "\"<ExternalEvaluateConsumer globals=4 objects=23>\""}, {
                    "\"current_token\"", 
                    "\"WXFToken<b'f', data=None, len=2>\""}, {"\"tokens\"", 
                    "\"<generator object WXFParser.tokens at \
0x1555ed840>\""}, {"\"kwargs\"", "\"{}\""}, {"\"head\"", "\"List\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Null}}, 
                    "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<ExternalEvaluateConsumer globals=4 objects=23>"}, {
                    "current_token", "WXFToken<b'f', data=None, len=2>"}, {
                    "tokens", 
                    "<generator object WXFParser.tokens at 0x1555ed840>"}, {
                    "kwargs", "{}"}, {"head", "List"}}, Background -> {
                    Null, {LightGray}}, Alignment -> Left, Frame -> 
                    LightGray]}, False]], DynamicModuleValues -> Automatic], 
                    Setting[#, {0}]& ]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless"], " in ", "consume_function"}], 
                    Column[{
                    
                    Column[{
                    "  94.          Return a :class:`list` if the head is \
symbol `List`, otherwise returns the result of \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`", "  95.          applied to the head and arguments.", "  96.  ", 
                    "  97.          Usually custom parsing rules target \
Functions, but not List. To do so, it is recommended to override", 
                    "  98.          \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`.", "  99.          \"\"\"", 
                    " 100.          head = self.next_expression(tokens, \
**kwargs)", 
                    Item[" 101.          args = tuple(", Background -> 
                    LightYellow], 
                    " 102.              self.next_expression(tokens, \
**kwargs) for i in range(current_token.length)", " 103.          )", 
                    " 104.          if head == self._LIST:", 
                    " 105.              return args", " 106.          else:", 
                    " 107.              return self.build_function(head, \
args, **kwargs)"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<ExternalEvaluateConsumer globals=4 objects=23>"}, {
                    "current_token", "WXFToken<b'f', data=None, len=2>"}, {
                    "tokens", 
                    "<generator object WXFParser.tokens at 0x1555ed840>"}, {
                    "kwargs", "{}"}, {"head", "List"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"<genexpr>\""}, 
                    "RowDefault"]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"<genexpr>\""}, 
                    "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{
                    "\"  95.          applied to the head and arguments.\""}, \
{"\"  96.  \""}, {
                    "\"  97.          Usually custom parsing rules target \
Functions, but not List. To do so, it is recommended to override\""}, {
                    "\"  98.          \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`.\""}, {"\"  99.          \\\"\\\"\\\"\""}, {
                    "\" 100.          head = self.next_expression(tokens, \
**kwargs)\""}, {"\" 101.          args = tuple(\""}, {
                    ItemBox[
                    "\" 102.              self.next_expression(tokens, \
**kwargs) for i in range(current_token.length)\"", Background -> 
                    RGBColor[1, 1, 0.85], StripOnInput -> False]}, {
                    "\" 103.          )\""}, {
                    "\" 104.          if head == self._LIST:\""}, {
                    "\" 105.              return args\""}, {
                    "\" 106.          else:\""}, {
                    "\" 107.              return self.build_function(head, \
args, **kwargs)\""}, {"\" 108.  \""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\".0\"", 
                    "\"<range_iterator object at 0x155681e30>\""}, {
                    "\"i\"", "\"0\""}, {"\"kwargs\"", "\"{}\""}, {
                    "\"self\"", 
                    "\"<ExternalEvaluateConsumer globals=4 objects=23>\""}, {
                    "\"tokens\"", 
                    "\"<generator object WXFParser.tokens at \
0x1555ed840>\""}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Null}}, 
                    "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {".0", 
                    "<range_iterator object at 0x155681e30>"}, {"i", "0"}, {
                    "kwargs", "{}"}, {"self", 
                    "<ExternalEvaluateConsumer globals=4 objects=23>"}, {
                    "tokens", 
                    "<generator object WXFParser.tokens at 0x1555ed840>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless"], " in ", "<genexpr>"}], 
                    Column[{
                    Column[{
                    "  95.          applied to the head and arguments.", 
                    "  96.  ", 
                    "  97.          Usually custom parsing rules target \
Functions, but not List. To do so, it is recommended to override", 
                    "  98.          \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`.", "  99.          \"\"\"", 
                    " 100.          head = self.next_expression(tokens, \
**kwargs)", " 101.          args = tuple(", 
                    Item[
                    " 102.              self.next_expression(tokens, \
**kwargs) for i in range(current_token.length)", Background -> LightYellow], 
                    " 103.          )", 
                    " 104.          if head == self._LIST:", 
                    " 105.              return args", " 106.          else:", 
                    " 107.              return self.build_function(head, \
args, **kwargs)", " 108.  "}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {".0", 
                    "<range_iterator object at 0x155681e30>"}, {"i", "0"}, {
                    "kwargs", "{}"}, {"self", 
                    "<ExternalEvaluateConsumer globals=4 objects=23>"}, {
                    "tokens", 
                    "<generator object WXFParser.tokens at 0x1555ed840>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"next_expression\""}, 
                    "RowDefault"]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"next_expression\""}, 
                    "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{
                    "\"  69.          constants.WXF_CONSTANTS.RuleDelayed: \\\
\"consume_rule_delayed\\\",\""}, {"\"  70.      }\""}, {"\"  71.  \""}, {
                    "\"  72.      def next_expression(self, tokens, \
**kwargs):\""}, {
                    "\"  73.          \\\"\\\"\\\"Deserialize the next \
expression starting at the next token yield by `tokens`.\\\"\\\"\\\"\""}, {
                    "\"  74.          token = next(tokens)\""}, {
                    "\"  75.          consumer = \
self._consumer_from_type(token.wxf_type)\""}, {
                    ItemBox[
                    "\"  76.          return consumer(token, tokens, \
**kwargs)\"", Background -> RGBColor[1, 1, 0.85], StripOnInput -> False]}, {
                    "\"  77.  \""}, {
                    "\"  78.      def _consumer_from_type(self, \
wxf_type):\""}, {"\"  79.          try:\""}, {
                    "\"  80.              func = self._mapping[wxf_type]\""}, \
{"\"  81.          except KeyError:\""}, {
                    "\"  82.              raise WolframParserException(\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\"self\"", 
                    "\"<ExternalEvaluateConsumer globals=4 objects=23>\""}, {
                    "\"tokens\"", 
                    "\"<generator object WXFParser.tokens at \
0x1555ed840>\""}, {"\"kwargs\"", "\"{}\""}, {"\"token\"", 
                    "\"WXFToken<b'f', data=None, len=2>\""}, {"\"consumer\"", 
                    "\"<bound method \
ExternalEvaluateConsumer.consume_function of <ExternalEvaluateConsumer \
globals=4 objects=23>>\""}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {"Columns" -> {{
                    Null}}, "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<ExternalEvaluateConsumer globals=4 objects=23>"}, {
                    "tokens", 
                    "<generator object WXFParser.tokens at 0x1555ed840>"}, {
                    "kwargs", "{}"}, {"token", 
                    "WXFToken<b'f', data=None, len=2>"}, {
                    "consumer", 
                    "<bound method ExternalEvaluateConsumer.consume_function \
of <ExternalEvaluateConsumer globals=4 objects=23>>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless"], " in ", "next_expression"}], 
                    Column[{
                    
                    Column[{
                    "  69.          constants.WXF_CONSTANTS.RuleDelayed: \
\"consume_rule_delayed\",", "  70.      }", "  71.  ", 
                    "  72.      def next_expression(self, tokens, **kwargs):",
                     "  73.          \"\"\"Deserialize the next expression \
starting at the next token yield by `tokens`.\"\"\"", 
                    "  74.          token = next(tokens)", 
                    "  75.          consumer = \
self._consumer_from_type(token.wxf_type)", 
                    Item[
                    "  76.          return consumer(token, tokens, **kwargs)",
                     Background -> LightYellow], "  77.  ", 
                    "  78.      def _consumer_from_type(self, wxf_type):", 
                    "  79.          try:", 
                    "  80.              func = self._mapping[wxf_type]", 
                    "  81.          except KeyError:", 
                    "  82.              raise WolframParserException("}, 
                    Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<ExternalEvaluateConsumer globals=4 objects=23>"}, {
                    "tokens", 
                    "<generator object WXFParser.tokens at 0x1555ed840>"}, {
                    "kwargs", "{}"}, {"token", 
                    "WXFToken<b'f', data=None, len=2>"}, {
                    "consumer", 
                    "<bound method ExternalEvaluateConsumer.consume_function \
of <ExternalEvaluateConsumer globals=4 objects=23>>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless", Evaluator -> Automatic, 
                    Method -> "Preemptive"], "\" in \"", 
                    "\"consume_function\""}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless", Evaluator -> Automatic, 
                    Method -> "Preemptive"], "\" in \"", 
                    "\"consume_function\""}, "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{
                    "\" 323.          self.routes_registry = \
registry(self.builtin_routes, **routes_registry)\""}, {"\" 324.  \""}, {
                    "\" 325.      def consume_function(self, *args, \
**kwargs):\""}, {
                    "\" 326.          expr = super().consume_function(*args, \
**kwargs)\""}, {"\" 327.  \""}, {
                    "\" 328.          if check_wl_symbol(expr, \
self.hook_symbol):\""}, {
                    "\" 329.              assert len(expr.args) == 2\""}, {
                    ItemBox[
                    "\" 330.              return \
self.dispatch_wl_object(*expr.args)\"", Background -> RGBColor[1, 1, 0.85], 
                    StripOnInput -> False]}, {"\" 331.  \""}, {
                    "\" 332.          return expr\""}, {"\" 333.  \""}, {
                    "\" 334.      def dispatch_wl_object(self, route, \
args):\""}, {
                    "\" 335.          return \
self.routes_registry[route](self, *args)\""}, {"\" 336.  \""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\"self\"", 
                    "\"<ExternalEvaluateConsumer globals=4 objects=23>\""}, {
                    "\"args\"", 
                    "\"(<wolframclient.deserializers.wxf.wxfparser.WXFToken \
object at 0x15565e9d0>, <generator object WXFParser.tokens at \
0x1555ed840>)\""}, {"\"kwargs\"", "\"{}\""}, {"\"expr\"", 
                    "\"ExternalEvaluate`Private`ExternalEvaluateCommand['Call'\
, (<function distance at 0x1553ee700>, None, \
hypernetx.classes.Hypergraph.Hypergraph)]\""}, {"\"__class__\"", 
                    "\"<class \
'wolframclient.utils.externalevaluate.ExternalEvaluateConsumer'>\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Null}}, 
                    "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<ExternalEvaluateConsumer globals=4 objects=23>"}, {
                    "args", 
                    "(<wolframclient.deserializers.wxf.wxfparser.WXFToken \
object at 0x15565e9d0>, <generator object WXFParser.tokens at \
0x1555ed840>)"}, {"kwargs", "{}"}, {"expr", 
                    "ExternalEvaluate`Private`ExternalEvaluateCommand['Call', \
(<function distance at 0x1553ee700>, None, \
hypernetx.classes.Hypergraph.Hypergraph)]"}, {"__class__", 
                    "<class \
'wolframclient.utils.externalevaluate.ExternalEvaluateConsumer'>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless"], " in ", 
                    "consume_function"}], 
                    Column[{
                    
                    Column[{
                    " 323.          self.routes_registry = \
registry(self.builtin_routes, **routes_registry)", " 324.  ", 
                    " 325.      def consume_function(self, *args, **kwargs):",
                     " 326.          expr = super().consume_function(*args, \
**kwargs)", " 327.  ", 
                    " 328.          if check_wl_symbol(expr, \
self.hook_symbol):", " 329.              assert len(expr.args) == 2", 
                    Item[
                    " 330.              return \
self.dispatch_wl_object(*expr.args)", Background -> LightYellow], " 331.  ", 
                    " 332.          return expr", " 333.  ", 
                    " 334.      def dispatch_wl_object(self, route, args):", 
                    " 335.          return self.routes_registry[route](self, \
*args)", " 336.  "}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<ExternalEvaluateConsumer globals=4 objects=23>"}, {
                    "args", 
                    "(<wolframclient.deserializers.wxf.wxfparser.WXFToken \
object at 0x15565e9d0>, <generator object WXFParser.tokens at \
0x1555ed840>)"}, {"kwargs", "{}"}, {"expr", 
                    "ExternalEvaluate`Private`ExternalEvaluateCommand['Call', \
(<function distance at 0x1553ee700>, None, \
hypernetx.classes.Hypergraph.Hypergraph)]"}, {
                    "__class__", 
                    "<class \
'wolframclient.utils.externalevaluate.ExternalEvaluateConsumer'>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless", Evaluator -> Automatic, 
                    Method -> "Preemptive"], "\" in \"", 
                    "\"dispatch_wl_object\""}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless", Evaluator -> Automatic, 
                    Method -> "Preemptive"], "\" in \"", 
                    "\"dispatch_wl_object\""}, "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{
                    "\" 328.          if check_wl_symbol(expr, \
self.hook_symbol):\""}, {
                    "\" 329.              assert len(expr.args) == 2\""}, {
                    "\" 330.              return \
self.dispatch_wl_object(*expr.args)\""}, {"\" 331.  \""}, {
                    "\" 332.          return expr\""}, {"\" 333.  \""}, {
                    "\" 334.      def dispatch_wl_object(self, route, \
args):\""}, {
                    ItemBox[
                    "\" 335.          return \
self.routes_registry[route](self, *args)\"", Background -> 
                    RGBColor[1, 1, 0.85], StripOnInput -> False]}, {
                    "\" 336.  \""}, {"\" 337.      def __repr__(self):\""}, {
                    "\" 338.          return \\\"<{} globals={} objects={}>\\\
\".format(\""}, {
                    "\" 339.              self.__class__.__name__, \
len(self.globals_registry), len(self.objects_registry)\""}, {
                    "\" 340.          )\""}, {"\" 341.  \""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\"self\"", 
                    "\"<ExternalEvaluateConsumer globals=4 objects=23>\""}, {
                    "\"route\"", "\"Call\""}, {"\"args\"", 
                    "\"(<function distance at 0x1553ee700>, None, \
hypernetx.classes.Hypergraph.Hypergraph)\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Null}}, "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<ExternalEvaluateConsumer globals=4 objects=23>"}, {
                    "route", "Call"}, {"args", 
                    "(<function distance at 0x1553ee700>, None, \
hypernetx.classes.Hypergraph.Hypergraph)"}}, Background -> {
                    Null, {LightGray}}, Alignment -> Left, Frame -> 
                    LightGray]}, False]], DynamicModuleValues -> Automatic], 
                    Setting[#, {0}]& ]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless"], " in ", 
                    "dispatch_wl_object"}], 
                    Column[{
                    
                    Column[{
                    " 328.          if check_wl_symbol(expr, \
self.hook_symbol):", " 329.              assert len(expr.args) == 2", 
                    " 330.              return \
self.dispatch_wl_object(*expr.args)", " 331.  ", " 332.          return expr",
                     " 333.  ", 
                    " 334.      def dispatch_wl_object(self, route, args):", 
                    Item[
                    " 335.          return self.routes_registry[route](self, \
*args)", Background -> LightYellow], " 336.  ", 
                    " 337.      def __repr__(self):", 
                    " 338.          return \"<{} globals={} \
objects={}>\".format(", 
                    " 339.              self.__class__.__name__, \
len(self.globals_registry), len(self.objects_registry)", " 340.          )", 
                    " 341.  "}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<ExternalEvaluateConsumer globals=4 objects=23>"}, {
                    "route", "Call"}, {"args", 
                    "(<function distance at 0x1553ee700>, None, \
hypernetx.classes.Hypergraph.Hypergraph)"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = True}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless", Evaluator -> Automatic, 
                    Method -> "Preemptive"], "\" in \"", "\"Call\""}, 
                    "RowDefault"]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless", Evaluator -> Automatic, 
                    Method -> "Preemptive"], "\" in \"", "\"Call\""}, 
                    "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{"\" 245.  \""}, {"\" 246.  \""}, {
                    "\" 247.  @routes.register_function\""}, {
                    "\" 248.  def Call(consumer, result, *args):\""}, {
                    "\" 249.  \""}, {
                    "\" 250.      pos, kwargs = unpack_optionals(args)\""}, {
                    "\" 251.  \""}, {
                    ItemBox[
                    "\" 252.      return result(*pos, **kwargs)\"", 
                    Background -> RGBColor[1, 1, 0.85], StripOnInput -> 
                    False]}, {"\" 253.  \""}, {"\" 254.  \""}, {
                    "\" 255.  @routes.register_function\""}, {
                    "\" 256.  def MethodCall(consumer, result, names, *args):\
\""}, {"\" 257.      return Call(consumer, GetAttribute(consumer, result, \
names), *args)\""}, {"\" 258.  \""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\"consumer\"", 
                    "\"<ExternalEvaluateConsumer globals=4 objects=23>\""}, {
                    "\"result\"", "\"<function distance at 0x1553ee700>\""}, {
                    "\"args\"", 
                    "\"(None, hypernetx.classes.Hypergraph.Hypergraph,)\""}, {
                    "\"pos\"", 
                    "\"[None, hypernetx.classes.Hypergraph.Hypergraph]\""}, {
                    "\"kwargs\"", "\"{}\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Null}}, "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"consumer", 
                    "<ExternalEvaluateConsumer globals=4 objects=23>"}, {
                    "result", "<function distance at 0x1553ee700>"}, {
                    "args", 
                    "(None, hypernetx.classes.Hypergraph.Hypergraph,)"}, {
                    "pos", "[None, \
hypernetx.classes.Hypergraph.Hypergraph]"}, {"kwargs", "{}"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless"], " in ", "Call"}], 
                    Column[{
                    
                    Column[{" 245.  ", " 246.  ", 
                    " 247.  @routes.register_function", 
                    " 248.  def Call(consumer, result, *args):", " 249.  ", 
                    " 250.      pos, kwargs = unpack_optionals(args)", 
                    " 251.  ", 
                    Item[
                    " 252.      return result(*pos, **kwargs)", Background -> 
                    LightYellow], " 253.  ", " 254.  ", 
                    " 255.  @routes.register_function", 
                    " 256.  def MethodCall(consumer, result, names, *args):", 
                    " 257.      return Call(consumer, GetAttribute(consumer, \
result, names), *args)", " 258.  "}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"consumer", 
                    "<ExternalEvaluateConsumer globals=4 objects=23>"}, {
                    "result", "<function distance at 0x1553ee700>"}, {
                    "args", 
                    "(None, hypernetx.classes.Hypergraph.Hypergraph,)"}, {
                    "pos", "[None, \
hypernetx.classes.Hypergraph.Hypergraph]"}, {"kwargs", "{}"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, True]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = True}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Users/arnoudb/hypernetx/Python/Hypergraph/Hypergraph.\
py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Users/arnoudb/hypernetx/Python/Hypergraph/Hypergraph.\
py"], 
                    SystemOpen[
                    "/Users/arnoudb/hypernetx/Python/Hypergraph/Hypergraph.\
py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"distance\""}, 
                    "RowDefault"]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Users/arnoudb/hypernetx/Python/Hypergraph/Hypergraph.\
py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Users/arnoudb/hypernetx/Python/Hypergraph/Hypergraph.\
py"], 
                    SystemOpen[
                    "/Users/arnoudb/hypernetx/Python/Hypergraph/Hypergraph.\
py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"distance\""}, 
                    "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{"\"  48.  def diameter(hg):\""}, {
                    "\"  49.      return hg.diameter()\""}, {"\"  50.  \""}, {
                    "\"  51.  def dim(hg):\""}, {
                    "\"  52.      return hg.dim()\""}, {"\"  53.  \""}, {
                    "\"  54.  def distance(hg):\""}, {
                    ItemBox[
                    "\"  55.      return hg.distance()\"", Background -> 
                    RGBColor[1, 1, 0.85], StripOnInput -> False]}, {
                    "\"  56.  \""}, {"\"  57.  def dual(hg):\""}, {
                    "\"  58.      return hg.dual()\""}, {"\"  59.  \""}, {
                    "\"  60.  def edge_adjacency_matrix(hg):\""}, {
                    "\"  61.      return hg.edge_adjacency_matrix()\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\"hg\"", 
                    "\"None, <class \
'hypernetx.classes.Hypergraph.Hypergraph'>\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Null}}, "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"hg", 
                    "None, <class \
'hypernetx.classes.Hypergraph.Hypergraph'>"}}, Background -> {
                    Null, {LightGray}}, Alignment -> Left, Frame -> 
                    LightGray]}, False]], DynamicModuleValues -> Automatic], 
                    Setting[#, {0}]& ]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Users/arnoudb/hypernetx/Python/Hypergraph/Hypergraph.\
py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Users/arnoudb/hypernetx/Python/Hypergraph/Hypergraph.\
py"], 
                    SystemOpen[
                    "/Users/arnoudb/hypernetx/Python/Hypergraph/Hypergraph.\
py"]], Appearance -> "Frameless"], " in ", "distance"}], 
                    Column[{
                    
                    Column[{"  48.  def diameter(hg):", 
                    "  49.      return hg.diameter()", "  50.  ", 
                    "  51.  def dim(hg):", "  52.      return hg.dim()", 
                    "  53.  ", "  54.  def distance(hg):", 
                    Item[
                    "  55.      return hg.distance()", Background -> 
                    LightYellow], "  56.  ", "  57.  def dual(hg):", 
                    "  58.      return hg.dual()", "  59.  ", 
                    "  60.  def edge_adjacency_matrix(hg):", 
                    "  61.      return hg.edge_adjacency_matrix()"}, 
                    Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"hg", 
                    "None, <class \
'hypernetx.classes.Hypergraph.Hypergraph'>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, True]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], FontFamily -> "Courier", StripOnInput -> 
                    False], ImageMargins -> 0]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    
                    Row[{"TypeError", " ", 
                    "Hypergraph.distance() missing 2 required positional \
arguments: 'source' and 'target'"}], 
                    Style[
                    Column[{
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/language/\
decorators.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/language/\
decorators.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/language/\
decorators.py"]], Appearance -> "Frameless"], " in ", "safe_wl_execute"}], 
                    Column[{
                    
                    Column[{
                    "  14.      \"wl\": b'Failure[\"PythonFailure\", \
<|\"MessageTemplate\" -> \"Unexpected error occurred.\"|>]',", "  15.  }", 
                    "  16.  ", "  17.  ", 
                    "  18.  def safe_wl_execute(function, args=(), opts={}, \
export_opts={}, exception_class=None):", "  19.  ", "  20.      try:", 
                    Item[
                    "  21.          return export(function(*args, **opts), \
**export_opts)", Background -> LightYellow], 
                    "  22.      except Exception as export_exception:", 
                    "  23.          try:", "  24.              try:", 
                    "  25.  ", 
                    "  26.                  # The user can provide an \
exception class, and it can be broken, in which case we are running another", 
                    "  27.                  # try / except to return errors \
that are happening during class serialization"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "function", "<function handle_message at 0x105bc8fe0>"}, {
                    "args", "(<zmq.Socket(zmq.PAIR) at 0x105ba8c20>,)"}, {
                    "opts", 
                    "{'consumer': <ExternalEvaluateConsumer globals=4 \
objects=23>}"}, {"export_opts", 
                    "{'object_processor': <function \
start_zmq_loop.<locals>.<lambda> at 0x104e509a0>, 'target_format': 'wxf'}"}, {
                    "exception_class", "None"}, {
                    "export_exception", 
                    "Hypergraph.distance() missing 2 required positional \
arguments: 'source' and 'target'"}}, Background -> {Null, {LightGray}}, 
                    Alignment -> Left, Frame -> LightGray]}]}]}, False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless"], " in ", 
                    "handle_message"}], 
                    Column[{
                    
                    Column[{
                    " 350.          self.socket.send(zmq.Frame(bytes))", 
                    " 351.  ", " 352.      def send_side_effect(self, expr):",
                     " 353.          \
self.write(export(self.keep_listening(expr), target_format=\"wxf\"))", 
                    " 354.  ", " 355.  ", 
                    " 356.  def handle_message(socket, consumer):", 
                    Item[
                    " 357.      result = \
binary_deserialize(socket.recv(copy=False).buffer, consumer=consumer)", 
                    Background -> LightYellow], " 358.  ", 
                    " 359.      sys.stdout.flush()", 
                    " 360.      return result", " 361.  ", " 362.  ", 
                    " 363.  def start_zmq_instance(port=None, \
write_to_stdout=True, **opts):"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "socket", "<zmq.Socket(zmq.PAIR) at 0x105ba8c20>"}, {
                    "consumer", 
                    "<ExternalEvaluateConsumer globals=4 objects=23>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
__init__.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
__init__.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
__init__.py"]], Appearance -> "Frameless"], " in ", "binary_deserialize"}], 
                    Column[{
                    
                    Column[{"  33.  ", "  34.      \"\"\"", 
                    "  35.      parser = WXFParser(wxf_input)", 
                    "  36.      if consumer is None:", 
                    "  37.          consumer = WXFConsumerNumpy()", "  38.  ",
                     "  39.      try:", 
                    Item[
                    "  40.          o = \
consumer.next_expression(parser.tokens(), **kwargs)", Background -> 
                    LightYellow], "  41.      except StopIteration:", 
                    "  42.          raise WolframParserException(", 
                    "  43.              \"Input data does not represent a \
valid expression in WXF format. Expecting more input data.\"", 
                    "  44.          )", 
                    "  45.      if not \
parser.context.is_valid_final_state():", 
                    "  46.          raise WolframParserException("}, 
                    Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "wxf_input", 
                    "8:f\.02s0ExternalEvaluate`Private`\
ExternalEvaluateCommandS\n\
ReturnTypef\.02s\.04Listf\.02s0ExternalEvaluate`Private`\
ExternalEvaluateCommandS\.04Callf\.02s\.04Listf\.02s0ExternalEvaluate`Private`\
ExternalEvaluateCommandS\.05Fetchf\.01\.01\.01\.01\.01\.01\.01\.01s\.04ListL\
\.00>U\.01\.01\.01\.01\.01\.01\.01\.01\.00\.00\.00f\.02s0ExternalEvaluate`\
Private`ExternalEvaluateCommandS\.05Fetchf\.01\.01\.01\.01\.01\.01\.01\.01s\
\.04ListLP-?U\.01\.01\.01\.01\.01\.01\.01\.01\.00\.00\.00S\nExpression"}, {
                    "consumer", 
                    "<ExternalEvaluateConsumer globals=4 objects=23>"}, {
                    "kwargs", "{}"}, {
                    "parser", 
                    "<wolframclient.deserializers.wxf.wxfparser.WXFParser \
object at 0x155620f50>"}}, Background -> {Null, {LightGray}}, Alignment -> 
                    Left, Frame -> LightGray]}]}]}, False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless"], " in ", "next_expression"}], 
                    Column[{
                    
                    Column[{
                    "  69.          constants.WXF_CONSTANTS.RuleDelayed: \
\"consume_rule_delayed\",", "  70.      }", "  71.  ", 
                    "  72.      def next_expression(self, tokens, **kwargs):",
                     "  73.          \"\"\"Deserialize the next expression \
starting at the next token yield by `tokens`.\"\"\"", 
                    "  74.          token = next(tokens)", 
                    "  75.          consumer = \
self._consumer_from_type(token.wxf_type)", 
                    Item[
                    "  76.          return consumer(token, tokens, **kwargs)",
                     Background -> LightYellow], "  77.  ", 
                    "  78.      def _consumer_from_type(self, wxf_type):", 
                    "  79.          try:", 
                    "  80.              func = self._mapping[wxf_type]", 
                    "  81.          except KeyError:", 
                    "  82.              raise WolframParserException("}, 
                    Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "self", 
                    "<ExternalEvaluateConsumer globals=4 objects=23>"}, {
                    "tokens", 
                    "<generator object WXFParser.tokens at 0x1555ed840>"}, {
                    "kwargs", "{}"}, {
                    "token", "WXFToken<b'f', data=None, len=2>"}, {
                    "consumer", 
                    "<bound method ExternalEvaluateConsumer.consume_function \
of <ExternalEvaluateConsumer globals=4 objects=23>>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless"], " in ", 
                    "consume_function"}], 
                    Column[{
                    
                    Column[{" 319.  ", 
                    " 320.      def __init__(self, routes_registry={}, \
objects_registry={}, globals_registry={}):", 
                    " 321.          self.objects_registry = \
registry(objects_registry)", 
                    " 322.          self.globals_registry = \
registry(globals_registry)", 
                    " 323.          self.routes_registry = \
registry(self.builtin_routes, **routes_registry)", " 324.  ", 
                    " 325.      def consume_function(self, *args, **kwargs):", 
                    Item[
                    " 326.          expr = super().consume_function(*args, \
**kwargs)", Background -> LightYellow], " 327.  ", 
                    " 328.          if check_wl_symbol(expr, \
self.hook_symbol):", " 329.              assert len(expr.args) == 2", 
                    " 330.              return \
self.dispatch_wl_object(*expr.args)", " 331.  ", 
                    " 332.          return expr"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "self", 
                    "<ExternalEvaluateConsumer globals=4 objects=23>"}, {
                    "args", 
                    "(<wolframclient.deserializers.wxf.wxfparser.WXFToken \
object at 0x15565d300>, <generator object WXFParser.tokens at \
0x1555ed840>)"}, {"kwargs", "{}"}, {
                    "__class__", 
                    "<class \
'wolframclient.utils.externalevaluate.ExternalEvaluateConsumer'>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless"], " in ", "consume_function"}], 
                    Column[{
                    
                    Column[{
                    "  94.          Return a :class:`list` if the head is \
symbol `List`, otherwise returns the result of \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`", "  95.          applied to the head and arguments.", "  96.  ", 
                    "  97.          Usually custom parsing rules target \
Functions, but not List. To do so, it is recommended to override", 
                    "  98.          \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`.", "  99.          \"\"\"", 
                    " 100.          head = self.next_expression(tokens, \
**kwargs)", 
                    Item[
                    " 101.          args = tuple(", Background -> 
                    LightYellow], 
                    " 102.              self.next_expression(tokens, \
**kwargs) for i in range(current_token.length)", " 103.          )", 
                    " 104.          if head == self._LIST:", 
                    " 105.              return args", " 106.          else:", 
                    " 107.              return self.build_function(head, \
args, **kwargs)"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "self", 
                    "<ExternalEvaluateConsumer globals=4 objects=23>"}, {
                    "current_token", "WXFToken<b'f', data=None, len=2>"}, {
                    "tokens", 
                    "<generator object WXFParser.tokens at 0x1555ed840>"}, {
                    "kwargs", "{}"}, {
                    "head", 
                    "ExternalEvaluate`Private`ExternalEvaluateCommand"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless"], " in ", "<genexpr>"}], 
                    Column[{
                    
                    Column[{
                    "  95.          applied to the head and arguments.", 
                    "  96.  ", 
                    "  97.          Usually custom parsing rules target \
Functions, but not List. To do so, it is recommended to override", 
                    "  98.          \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`.", "  99.          \"\"\"", 
                    " 100.          head = self.next_expression(tokens, \
**kwargs)", " 101.          args = tuple(", 
                    Item[
                    " 102.              self.next_expression(tokens, \
**kwargs) for i in range(current_token.length)", Background -> LightYellow], 
                    " 103.          )", 
                    " 104.          if head == self._LIST:", 
                    " 105.              return args", " 106.          else:", 
                    " 107.              return self.build_function(head, \
args, **kwargs)", " 108.  "}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    ".0", "<range_iterator object at 0x155682730>"}, {
                    "i", "1"}, {"kwargs", "{}"}, {
                    "self", 
                    "<ExternalEvaluateConsumer globals=4 objects=23>"}, {
                    "tokens", 
                    "<generator object WXFParser.tokens at 0x1555ed840>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless"], " in ", "next_expression"}], 
                    Column[{
                    
                    Column[{
                    "  69.          constants.WXF_CONSTANTS.RuleDelayed: \
\"consume_rule_delayed\",", "  70.      }", "  71.  ", 
                    "  72.      def next_expression(self, tokens, **kwargs):",
                     "  73.          \"\"\"Deserialize the next expression \
starting at the next token yield by `tokens`.\"\"\"", 
                    "  74.          token = next(tokens)", 
                    "  75.          consumer = \
self._consumer_from_type(token.wxf_type)", 
                    Item[
                    "  76.          return consumer(token, tokens, **kwargs)",
                     Background -> LightYellow], "  77.  ", 
                    "  78.      def _consumer_from_type(self, wxf_type):", 
                    "  79.          try:", 
                    "  80.              func = self._mapping[wxf_type]", 
                    "  81.          except KeyError:", 
                    "  82.              raise WolframParserException("}, 
                    Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "self", 
                    "<ExternalEvaluateConsumer globals=4 objects=23>"}, {
                    "tokens", 
                    "<generator object WXFParser.tokens at 0x1555ed840>"}, {
                    "kwargs", "{}"}, {
                    "token", "WXFToken<b'f', data=None, len=2>"}, {
                    "consumer", 
                    "<bound method ExternalEvaluateConsumer.consume_function \
of <ExternalEvaluateConsumer globals=4 objects=23>>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless"], " in ", 
                    "consume_function"}], 
                    Column[{
                    
                    Column[{" 319.  ", 
                    " 320.      def __init__(self, routes_registry={}, \
objects_registry={}, globals_registry={}):", 
                    " 321.          self.objects_registry = \
registry(objects_registry)", 
                    " 322.          self.globals_registry = \
registry(globals_registry)", 
                    " 323.          self.routes_registry = \
registry(self.builtin_routes, **routes_registry)", " 324.  ", 
                    " 325.      def consume_function(self, *args, **kwargs):", 
                    Item[
                    " 326.          expr = super().consume_function(*args, \
**kwargs)", Background -> LightYellow], " 327.  ", 
                    " 328.          if check_wl_symbol(expr, \
self.hook_symbol):", " 329.              assert len(expr.args) == 2", 
                    " 330.              return \
self.dispatch_wl_object(*expr.args)", " 331.  ", 
                    " 332.          return expr"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "self", 
                    "<ExternalEvaluateConsumer globals=4 objects=23>"}, {
                    "args", 
                    "(<wolframclient.deserializers.wxf.wxfparser.WXFToken \
object at 0x15565d4e0>, <generator object WXFParser.tokens at \
0x1555ed840>)"}, {"kwargs", "{}"}, {
                    "__class__", 
                    "<class \
'wolframclient.utils.externalevaluate.ExternalEvaluateConsumer'>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless"], " in ", "consume_function"}], 
                    Column[{
                    
                    Column[{
                    "  94.          Return a :class:`list` if the head is \
symbol `List`, otherwise returns the result of \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`", "  95.          applied to the head and arguments.", "  96.  ", 
                    "  97.          Usually custom parsing rules target \
Functions, but not List. To do so, it is recommended to override", 
                    "  98.          \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`.", "  99.          \"\"\"", 
                    " 100.          head = self.next_expression(tokens, \
**kwargs)", 
                    Item[
                    " 101.          args = tuple(", Background -> 
                    LightYellow], 
                    " 102.              self.next_expression(tokens, \
**kwargs) for i in range(current_token.length)", " 103.          )", 
                    " 104.          if head == self._LIST:", 
                    " 105.              return args", " 106.          else:", 
                    " 107.              return self.build_function(head, \
args, **kwargs)"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "self", 
                    "<ExternalEvaluateConsumer globals=4 objects=23>"}, {
                    "current_token", "WXFToken<b'f', data=None, len=2>"}, {
                    "tokens", 
                    "<generator object WXFParser.tokens at 0x1555ed840>"}, {
                    "kwargs", "{}"}, {"head", "List"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless"], " in ", "<genexpr>"}], 
                    Column[{
                    
                    Column[{
                    "  95.          applied to the head and arguments.", 
                    "  96.  ", 
                    "  97.          Usually custom parsing rules target \
Functions, but not List. To do so, it is recommended to override", 
                    "  98.          \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`.", "  99.          \"\"\"", 
                    " 100.          head = self.next_expression(tokens, \
**kwargs)", " 101.          args = tuple(", 
                    Item[
                    " 102.              self.next_expression(tokens, \
**kwargs) for i in range(current_token.length)", Background -> LightYellow], 
                    " 103.          )", 
                    " 104.          if head == self._LIST:", 
                    " 105.              return args", " 106.          else:", 
                    " 107.              return self.build_function(head, \
args, **kwargs)", " 108.  "}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    ".0", "<range_iterator object at 0x155681e30>"}, {
                    "i", "0"}, {"kwargs", "{}"}, {
                    "self", 
                    "<ExternalEvaluateConsumer globals=4 objects=23>"}, {
                    "tokens", 
                    "<generator object WXFParser.tokens at 0x1555ed840>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless"], " in ", "next_expression"}], 
                    Column[{
                    
                    Column[{
                    "  69.          constants.WXF_CONSTANTS.RuleDelayed: \
\"consume_rule_delayed\",", "  70.      }", "  71.  ", 
                    "  72.      def next_expression(self, tokens, **kwargs):",
                     "  73.          \"\"\"Deserialize the next expression \
starting at the next token yield by `tokens`.\"\"\"", 
                    "  74.          token = next(tokens)", 
                    "  75.          consumer = \
self._consumer_from_type(token.wxf_type)", 
                    Item[
                    "  76.          return consumer(token, tokens, **kwargs)",
                     Background -> LightYellow], "  77.  ", 
                    "  78.      def _consumer_from_type(self, wxf_type):", 
                    "  79.          try:", 
                    "  80.              func = self._mapping[wxf_type]", 
                    "  81.          except KeyError:", 
                    "  82.              raise WolframParserException("}, 
                    Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "self", 
                    "<ExternalEvaluateConsumer globals=4 objects=23>"}, {
                    "tokens", 
                    "<generator object WXFParser.tokens at 0x1555ed840>"}, {
                    "kwargs", "{}"}, {
                    "token", "WXFToken<b'f', data=None, len=2>"}, {
                    "consumer", 
                    "<bound method ExternalEvaluateConsumer.consume_function \
of <ExternalEvaluateConsumer globals=4 objects=23>>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless"], " in ", 
                    "consume_function"}], 
                    Column[{
                    
                    Column[{
                    " 323.          self.routes_registry = \
registry(self.builtin_routes, **routes_registry)", " 324.  ", 
                    " 325.      def consume_function(self, *args, **kwargs):",
                     " 326.          expr = super().consume_function(*args, \
**kwargs)", " 327.  ", 
                    " 328.          if check_wl_symbol(expr, \
self.hook_symbol):", " 329.              assert len(expr.args) == 2", 
                    Item[
                    " 330.              return \
self.dispatch_wl_object(*expr.args)", Background -> LightYellow], " 331.  ", 
                    " 332.          return expr", " 333.  ", 
                    " 334.      def dispatch_wl_object(self, route, args):", 
                    " 335.          return self.routes_registry[route](self, \
*args)", " 336.  "}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "self", 
                    "<ExternalEvaluateConsumer globals=4 objects=23>"}, {
                    "args", 
                    "(<wolframclient.deserializers.wxf.wxfparser.WXFToken \
object at 0x15565e9d0>, <generator object WXFParser.tokens at \
0x1555ed840>)"}, {"kwargs", "{}"}, {
                    "expr", 
                    "ExternalEvaluate`Private`ExternalEvaluateCommand['Call', \
(<function distance at 0x1553ee700>, None, \
hypernetx.classes.Hypergraph.Hypergraph)]"}, {
                    "__class__", 
                    "<class \
'wolframclient.utils.externalevaluate.ExternalEvaluateConsumer'>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless"], " in ", 
                    "dispatch_wl_object"}], 
                    Column[{
                    
                    Column[{
                    " 328.          if check_wl_symbol(expr, \
self.hook_symbol):", " 329.              assert len(expr.args) == 2", 
                    " 330.              return \
self.dispatch_wl_object(*expr.args)", " 331.  ", " 332.          return expr",
                     " 333.  ", 
                    " 334.      def dispatch_wl_object(self, route, args):", 
                    Item[
                    " 335.          return self.routes_registry[route](self, \
*args)", Background -> LightYellow], " 336.  ", 
                    " 337.      def __repr__(self):", 
                    " 338.          return \"<{} globals={} \
objects={}>\".format(", 
                    " 339.              self.__class__.__name__, \
len(self.globals_registry), len(self.objects_registry)", " 340.          )", 
                    " 341.  "}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "self", 
                    "<ExternalEvaluateConsumer globals=4 objects=23>"}, {
                    "route", "Call"}, {
                    "args", 
                    "(<function distance at 0x1553ee700>, None, \
hypernetx.classes.Hypergraph.Hypergraph)"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless"], " in ", "Call"}], 
                    Column[{
                    
                    Column[{" 245.  ", " 246.  ", 
                    " 247.  @routes.register_function", 
                    " 248.  def Call(consumer, result, *args):", " 249.  ", 
                    " 250.      pos, kwargs = unpack_optionals(args)", 
                    " 251.  ", 
                    Item[
                    " 252.      return result(*pos, **kwargs)", Background -> 
                    LightYellow], " 253.  ", " 254.  ", 
                    " 255.  @routes.register_function", 
                    " 256.  def MethodCall(consumer, result, names, *args):", 
                    " 257.      return Call(consumer, GetAttribute(consumer, \
result, names), *args)", " 258.  "}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "consumer", 
                    "<ExternalEvaluateConsumer globals=4 objects=23>"}, {
                    "result", "<function distance at 0x1553ee700>"}, {
                    "args", 
                    "(None, hypernetx.classes.Hypergraph.Hypergraph,)"}, {
                    "pos", "[None, \
hypernetx.classes.Hypergraph.Hypergraph]"}, {"kwargs", "{}"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, True], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Users/arnoudb/hypernetx/Python/Hypergraph/Hypergraph.\
py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Users/arnoudb/hypernetx/Python/Hypergraph/Hypergraph.\
py"], 
                    SystemOpen[
                    "/Users/arnoudb/hypernetx/Python/Hypergraph/Hypergraph.\
py"]], Appearance -> "Frameless"], " in ", "distance"}], 
                    Column[{
                    
                    Column[{"  48.  def diameter(hg):", 
                    "  49.      return hg.diameter()", "  50.  ", 
                    "  51.  def dim(hg):", "  52.      return hg.dim()", 
                    "  53.  ", "  54.  def distance(hg):", 
                    Item["  55.      return hg.distance()", Background -> 
                    LightYellow], "  56.  ", "  57.  def dual(hg):", 
                    "  58.      return hg.dual()", "  59.  ", 
                    "  60.  def edge_adjacency_matrix(hg):", 
                    "  61.      return hg.edge_adjacency_matrix()"}, 
                    Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "hg", "None, <class \
'hypernetx.classes.Hypergraph.Hypergraph'>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, True]}], FontFamily -> 
                    "Courier"]}, True]], DynamicModuleValues -> Automatic], 
                    Setting[#, {0}]& ], HoldForm], "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  Failure[
  "PythonError", <|
   "MessageTemplate" :> 
    "Hypergraph.distance() missing 2 required positional arguments: 'source' \
and 'target'", "MessageParameters" :> <||>, "FailureCode" :> "TypeError", 
    "Traceback" :> OpenerView[{
       Row[{
        "TypeError", " ", 
         "Hypergraph.distance() missing 2 required positional arguments: \
'source' and 'target'"}], 
       Style[
        Column[{
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/language/\
decorators.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/language/\
decorators.py"], 
                SystemOpen[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/language/\
decorators.py"]], Appearance -> "Frameless"], " in ", "safe_wl_execute"}], 
            Column[{
              
              Column[{"  14.      \"wl\": b'Failure[\"PythonFailure\", \
<|\"MessageTemplate\" -> \"Unexpected error occurred.\"|>]',", "  15.  }", 
                "  16.  ", "  17.  ", 
                "  18.  def safe_wl_execute(function, args=(), opts={}, \
export_opts={}, exception_class=None):", "  19.  ", "  20.      try:", 
                Item[
                "  21.          return export(function(*args, **opts), \
**export_opts)", Background -> LightYellow], 
                "  22.      except Exception as export_exception:", 
                "  23.          try:", "  24.              try:", "  25.  ", 
                "  26.                  # The user can provide an exception \
class, and it can be broken, in which case we are running another", 
                "  27.                  # try / except to return errors that \
are happening during class serialization"}, Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  "function", "<function handle_message at 0x105bc8fe0>"}, {
                  "args", "(<zmq.Socket(zmq.PAIR) at 0x105ba8c20>,)"}, {
                  "opts", 
                   "{'consumer': <ExternalEvaluateConsumer globals=4 \
objects=23>}"}, {"export_opts", 
                   "{'object_processor': <function \
start_zmq_loop.<locals>.<lambda> at 0x104e509a0>, 'target_format': 'wxf'}"}, {
                  "exception_class", "None"}, {
                  "export_exception", 
                   "Hypergraph.distance() missing 2 required positional \
arguments: 'source' and 'target'"}}, Background -> {Null, {LightGray}}, 
                 Alignment -> Left, Frame -> LightGray]}]}]}, False], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                SystemOpen[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless"], " in ", 
              "handle_message"}], 
            Column[{
              
              Column[{" 350.          self.socket.send(zmq.Frame(bytes))", 
                " 351.  ", " 352.      def send_side_effect(self, expr):", 
                " 353.          self.write(export(self.keep_listening(expr), \
target_format=\"wxf\"))", " 354.  ", " 355.  ", 
                " 356.  def handle_message(socket, consumer):", 
                Item[
                " 357.      result = \
binary_deserialize(socket.recv(copy=False).buffer, consumer=consumer)", 
                 Background -> LightYellow], " 358.  ", 
                " 359.      sys.stdout.flush()", " 360.      return result", 
                " 361.  ", " 362.  ", 
                " 363.  def start_zmq_instance(port=None, \
write_to_stdout=True, **opts):"}, Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  "socket", "<zmq.Socket(zmq.PAIR) at 0x105ba8c20>"}, {
                  "consumer", 
                   "<ExternalEvaluateConsumer globals=4 objects=23>"}}, 
                 Background -> {Null, {LightGray}}, Alignment -> Left, Frame -> 
                 LightGray]}]}]}, False], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
__init__.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
__init__.py"], 
                SystemOpen[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
__init__.py"]], Appearance -> "Frameless"], " in ", "binary_deserialize"}], 
            Column[{
              
              Column[{"  33.  ", "  34.      \"\"\"", 
                "  35.      parser = WXFParser(wxf_input)", 
                "  36.      if consumer is None:", 
                "  37.          consumer = WXFConsumerNumpy()", "  38.  ", 
                "  39.      try:", 
                Item[
                "  40.          o = consumer.next_expression(parser.tokens(), \
**kwargs)", Background -> LightYellow], "  41.      except StopIteration:", 
                "  42.          raise WolframParserException(", 
                "  43.              \"Input data does not represent a valid \
expression in WXF format. Expecting more input data.\"", "  44.          )", 
                "  45.      if not parser.context.is_valid_final_state():", 
                "  46.          raise WolframParserException("}, 
               Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  "wxf_input", 
                   "8:f\.02s0ExternalEvaluate`Private`\
ExternalEvaluateCommandS\n\
ReturnTypef\.02s\.04Listf\.02s0ExternalEvaluate`Private`\
ExternalEvaluateCommandS\.04Callf\.02s\.04Listf\.02s0ExternalEvaluate`Private`\
ExternalEvaluateCommandS\.05Fetchf\.01\.01\.01\.01\.01\.01\.01\.01s\.04ListL\
\.00>U\.01\.01\.01\.01\.01\.01\.01\.01\.00\.00\.00f\.02s0ExternalEvaluate`\
Private`ExternalEvaluateCommandS\.05Fetchf\.01\.01\.01\.01\.01\.01\.01\.01s\
\.04ListLP-?U\.01\.01\.01\.01\.01\.01\.01\.01\.00\.00\.00S\nExpression"}, {
                  "consumer", 
                   "<ExternalEvaluateConsumer globals=4 objects=23>"}, {
                  "kwargs", "{}"}, {
                  "parser", 
                   "<wolframclient.deserializers.wxf.wxfparser.WXFParser \
object at 0x155620f50>"}}, Background -> {Null, {LightGray}}, Alignment -> 
                 Left, Frame -> LightGray]}]}]}, False], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                SystemOpen[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless"], " in ", "next_expression"}], 
            Column[{
              
              Column[{"  69.          constants.WXF_CONSTANTS.RuleDelayed: \
\"consume_rule_delayed\",", "  70.      }", "  71.  ", 
                "  72.      def next_expression(self, tokens, **kwargs):", 
                "  73.          \"\"\"Deserialize the next expression \
starting at the next token yield by `tokens`.\"\"\"", 
                "  74.          token = next(tokens)", 
                "  75.          consumer = \
self._consumer_from_type(token.wxf_type)", 
                Item[
                "  76.          return consumer(token, tokens, **kwargs)", 
                 Background -> LightYellow], "  77.  ", 
                "  78.      def _consumer_from_type(self, wxf_type):", 
                "  79.          try:", 
                "  80.              func = self._mapping[wxf_type]", 
                "  81.          except KeyError:", 
                "  82.              raise WolframParserException("}, 
               Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  "self", 
                   "<ExternalEvaluateConsumer globals=4 objects=23>"}, {
                  "tokens", 
                   "<generator object WXFParser.tokens at 0x1555ed840>"}, {
                  "kwargs", "{}"}, {
                  "token", "WXFToken<b'f', data=None, len=2>"}, {
                  "consumer", 
                   "<bound method ExternalEvaluateConsumer.consume_function \
of <ExternalEvaluateConsumer globals=4 objects=23>>"}}, 
                 Background -> {Null, {LightGray}}, Alignment -> Left, Frame -> 
                 LightGray]}]}]}, False], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                SystemOpen[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless"], " in ", 
              "consume_function"}], 
            Column[{
              
              Column[{" 319.  ", 
                " 320.      def __init__(self, routes_registry={}, \
objects_registry={}, globals_registry={}):", 
                " 321.          self.objects_registry = \
registry(objects_registry)", 
                " 322.          self.globals_registry = \
registry(globals_registry)", 
                " 323.          self.routes_registry = \
registry(self.builtin_routes, **routes_registry)", " 324.  ", 
                " 325.      def consume_function(self, *args, **kwargs):", 
                Item[
                " 326.          expr = super().consume_function(*args, \
**kwargs)", Background -> LightYellow], " 327.  ", 
                " 328.          if check_wl_symbol(expr, self.hook_symbol):", 
                " 329.              assert len(expr.args) == 2", 
                " 330.              return \
self.dispatch_wl_object(*expr.args)", " 331.  ", 
                " 332.          return expr"}, Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  "self", 
                   "<ExternalEvaluateConsumer globals=4 objects=23>"}, {
                  "args", 
                   "(<wolframclient.deserializers.wxf.wxfparser.WXFToken \
object at 0x15565d300>, <generator object WXFParser.tokens at \
0x1555ed840>)"}, {"kwargs", "{}"}, {
                  "__class__", 
                   "<class \
'wolframclient.utils.externalevaluate.ExternalEvaluateConsumer'>"}}, 
                 Background -> {Null, {LightGray}}, Alignment -> Left, Frame -> 
                 LightGray]}]}]}, False], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                SystemOpen[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless"], " in ", "consume_function"}], 
            Column[{
              
              Column[{"  94.          Return a :class:`list` if the head is \
symbol `List`, otherwise returns the result of \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`", "  95.          applied to the head and arguments.", "  96.  ", 
                "  97.          Usually custom parsing rules target \
Functions, but not List. To do so, it is recommended to override", 
                "  98.          \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`.", "  99.          \"\"\"", 
                " 100.          head = self.next_expression(tokens, \
**kwargs)", 
                Item[
                " 101.          args = tuple(", Background -> LightYellow], 
                " 102.              self.next_expression(tokens, **kwargs) \
for i in range(current_token.length)", " 103.          )", 
                " 104.          if head == self._LIST:", 
                " 105.              return args", " 106.          else:", 
                " 107.              return self.build_function(head, args, \
**kwargs)"}, Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  "self", 
                   "<ExternalEvaluateConsumer globals=4 objects=23>"}, {
                  "current_token", "WXFToken<b'f', data=None, len=2>"}, {
                  "tokens", 
                   "<generator object WXFParser.tokens at 0x1555ed840>"}, {
                  "kwargs", "{}"}, {
                  "head", 
                   "ExternalEvaluate`Private`ExternalEvaluateCommand"}}, 
                 Background -> {Null, {LightGray}}, Alignment -> Left, Frame -> 
                 LightGray]}]}]}, False], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                SystemOpen[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless"], " in ", "<genexpr>"}], 
            Column[{
              
              Column[{"  95.          applied to the head and arguments.", 
                "  96.  ", 
                "  97.          Usually custom parsing rules target \
Functions, but not List. To do so, it is recommended to override", 
                "  98.          \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`.", "  99.          \"\"\"", 
                " 100.          head = self.next_expression(tokens, \
**kwargs)", " 101.          args = tuple(", 
                Item[
                " 102.              self.next_expression(tokens, **kwargs) \
for i in range(current_token.length)", Background -> LightYellow], 
                " 103.          )", " 104.          if head == self._LIST:", 
                " 105.              return args", " 106.          else:", 
                " 107.              return self.build_function(head, args, \
**kwargs)", " 108.  "}, Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  ".0", "<range_iterator object at 0x155682730>"}, {
                  "i", "1"}, {"kwargs", "{}"}, {
                  "self", 
                   "<ExternalEvaluateConsumer globals=4 objects=23>"}, {
                  "tokens", 
                   "<generator object WXFParser.tokens at 0x1555ed840>"}}, 
                 Background -> {Null, {LightGray}}, Alignment -> Left, Frame -> 
                 LightGray]}]}]}, False], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                SystemOpen[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless"], " in ", "next_expression"}], 
            Column[{
              
              Column[{"  69.          constants.WXF_CONSTANTS.RuleDelayed: \
\"consume_rule_delayed\",", "  70.      }", "  71.  ", 
                "  72.      def next_expression(self, tokens, **kwargs):", 
                "  73.          \"\"\"Deserialize the next expression \
starting at the next token yield by `tokens`.\"\"\"", 
                "  74.          token = next(tokens)", 
                "  75.          consumer = \
self._consumer_from_type(token.wxf_type)", 
                Item[
                "  76.          return consumer(token, tokens, **kwargs)", 
                 Background -> LightYellow], "  77.  ", 
                "  78.      def _consumer_from_type(self, wxf_type):", 
                "  79.          try:", 
                "  80.              func = self._mapping[wxf_type]", 
                "  81.          except KeyError:", 
                "  82.              raise WolframParserException("}, 
               Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  "self", 
                   "<ExternalEvaluateConsumer globals=4 objects=23>"}, {
                  "tokens", 
                   "<generator object WXFParser.tokens at 0x1555ed840>"}, {
                  "kwargs", "{}"}, {
                  "token", "WXFToken<b'f', data=None, len=2>"}, {
                  "consumer", 
                   "<bound method ExternalEvaluateConsumer.consume_function \
of <ExternalEvaluateConsumer globals=4 objects=23>>"}}, 
                 Background -> {Null, {LightGray}}, Alignment -> Left, Frame -> 
                 LightGray]}]}]}, False], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                SystemOpen[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless"], " in ", 
              "consume_function"}], 
            Column[{
              
              Column[{" 319.  ", 
                " 320.      def __init__(self, routes_registry={}, \
objects_registry={}, globals_registry={}):", 
                " 321.          self.objects_registry = \
registry(objects_registry)", 
                " 322.          self.globals_registry = \
registry(globals_registry)", 
                " 323.          self.routes_registry = \
registry(self.builtin_routes, **routes_registry)", " 324.  ", 
                " 325.      def consume_function(self, *args, **kwargs):", 
                Item[
                " 326.          expr = super().consume_function(*args, \
**kwargs)", Background -> LightYellow], " 327.  ", 
                " 328.          if check_wl_symbol(expr, self.hook_symbol):", 
                " 329.              assert len(expr.args) == 2", 
                " 330.              return \
self.dispatch_wl_object(*expr.args)", " 331.  ", 
                " 332.          return expr"}, Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  "self", 
                   "<ExternalEvaluateConsumer globals=4 objects=23>"}, {
                  "args", 
                   "(<wolframclient.deserializers.wxf.wxfparser.WXFToken \
object at 0x15565d4e0>, <generator object WXFParser.tokens at \
0x1555ed840>)"}, {"kwargs", "{}"}, {
                  "__class__", 
                   "<class \
'wolframclient.utils.externalevaluate.ExternalEvaluateConsumer'>"}}, 
                 Background -> {Null, {LightGray}}, Alignment -> Left, Frame -> 
                 LightGray]}]}]}, False], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                SystemOpen[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless"], " in ", "consume_function"}], 
            Column[{
              
              Column[{"  94.          Return a :class:`list` if the head is \
symbol `List`, otherwise returns the result of \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`", "  95.          applied to the head and arguments.", "  96.  ", 
                "  97.          Usually custom parsing rules target \
Functions, but not List. To do so, it is recommended to override", 
                "  98.          \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`.", "  99.          \"\"\"", 
                " 100.          head = self.next_expression(tokens, \
**kwargs)", 
                Item[
                " 101.          args = tuple(", Background -> LightYellow], 
                " 102.              self.next_expression(tokens, **kwargs) \
for i in range(current_token.length)", " 103.          )", 
                " 104.          if head == self._LIST:", 
                " 105.              return args", " 106.          else:", 
                " 107.              return self.build_function(head, args, \
**kwargs)"}, Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  "self", 
                   "<ExternalEvaluateConsumer globals=4 objects=23>"}, {
                  "current_token", "WXFToken<b'f', data=None, len=2>"}, {
                  "tokens", 
                   "<generator object WXFParser.tokens at 0x1555ed840>"}, {
                  "kwargs", "{}"}, {"head", "List"}}, 
                 Background -> {Null, {LightGray}}, Alignment -> Left, Frame -> 
                 LightGray]}]}]}, False], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                SystemOpen[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless"], " in ", "<genexpr>"}], 
            Column[{
              
              Column[{"  95.          applied to the head and arguments.", 
                "  96.  ", 
                "  97.          Usually custom parsing rules target \
Functions, but not List. To do so, it is recommended to override", 
                "  98.          \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`.", "  99.          \"\"\"", 
                " 100.          head = self.next_expression(tokens, \
**kwargs)", " 101.          args = tuple(", 
                Item[
                " 102.              self.next_expression(tokens, **kwargs) \
for i in range(current_token.length)", Background -> LightYellow], 
                " 103.          )", " 104.          if head == self._LIST:", 
                " 105.              return args", " 106.          else:", 
                " 107.              return self.build_function(head, args, \
**kwargs)", " 108.  "}, Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  ".0", "<range_iterator object at 0x155681e30>"}, {
                  "i", "0"}, {"kwargs", "{}"}, {
                  "self", 
                   "<ExternalEvaluateConsumer globals=4 objects=23>"}, {
                  "tokens", 
                   "<generator object WXFParser.tokens at 0x1555ed840>"}}, 
                 Background -> {Null, {LightGray}}, Alignment -> Left, Frame -> 
                 LightGray]}]}]}, False], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                SystemOpen[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless"], " in ", "next_expression"}], 
            Column[{
              
              Column[{"  69.          constants.WXF_CONSTANTS.RuleDelayed: \
\"consume_rule_delayed\",", "  70.      }", "  71.  ", 
                "  72.      def next_expression(self, tokens, **kwargs):", 
                "  73.          \"\"\"Deserialize the next expression \
starting at the next token yield by `tokens`.\"\"\"", 
                "  74.          token = next(tokens)", 
                "  75.          consumer = \
self._consumer_from_type(token.wxf_type)", 
                Item[
                "  76.          return consumer(token, tokens, **kwargs)", 
                 Background -> LightYellow], "  77.  ", 
                "  78.      def _consumer_from_type(self, wxf_type):", 
                "  79.          try:", 
                "  80.              func = self._mapping[wxf_type]", 
                "  81.          except KeyError:", 
                "  82.              raise WolframParserException("}, 
               Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  "self", 
                   "<ExternalEvaluateConsumer globals=4 objects=23>"}, {
                  "tokens", 
                   "<generator object WXFParser.tokens at 0x1555ed840>"}, {
                  "kwargs", "{}"}, {
                  "token", "WXFToken<b'f', data=None, len=2>"}, {
                  "consumer", 
                   "<bound method ExternalEvaluateConsumer.consume_function \
of <ExternalEvaluateConsumer globals=4 objects=23>>"}}, 
                 Background -> {Null, {LightGray}}, Alignment -> Left, Frame -> 
                 LightGray]}]}]}, False], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                SystemOpen[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless"], " in ", 
              "consume_function"}], 
            Column[{
              
              Column[{" 323.          self.routes_registry = \
registry(self.builtin_routes, **routes_registry)", " 324.  ", 
                " 325.      def consume_function(self, *args, **kwargs):", 
                " 326.          expr = super().consume_function(*args, \
**kwargs)", " 327.  ", 
                " 328.          if check_wl_symbol(expr, self.hook_symbol):", 
                " 329.              assert len(expr.args) == 2", 
                Item[
                " 330.              return \
self.dispatch_wl_object(*expr.args)", Background -> LightYellow], " 331.  ", 
                " 332.          return expr", " 333.  ", 
                " 334.      def dispatch_wl_object(self, route, args):", 
                " 335.          return self.routes_registry[route](self, \
*args)", " 336.  "}, Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  "self", 
                   "<ExternalEvaluateConsumer globals=4 objects=23>"}, {
                  "args", 
                   "(<wolframclient.deserializers.wxf.wxfparser.WXFToken \
object at 0x15565e9d0>, <generator object WXFParser.tokens at \
0x1555ed840>)"}, {"kwargs", "{}"}, {
                  "expr", 
                   "ExternalEvaluate`Private`ExternalEvaluateCommand['Call', \
(<function distance at 0x1553ee700>, None, \
hypernetx.classes.Hypergraph.Hypergraph)]"}, {
                  "__class__", 
                   "<class \
'wolframclient.utils.externalevaluate.ExternalEvaluateConsumer'>"}}, 
                 Background -> {Null, {LightGray}}, Alignment -> Left, Frame -> 
                 LightGray]}]}]}, False], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                SystemOpen[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless"], " in ", 
              "dispatch_wl_object"}], 
            Column[{
              
              Column[{" 328.          if check_wl_symbol(expr, \
self.hook_symbol):", " 329.              assert len(expr.args) == 2", 
                " 330.              return \
self.dispatch_wl_object(*expr.args)", " 331.  ", " 332.          return expr",
                 " 333.  ", 
                " 334.      def dispatch_wl_object(self, route, args):", 
                Item[
                " 335.          return self.routes_registry[route](self, \
*args)", Background -> LightYellow], " 336.  ", 
                " 337.      def __repr__(self):", 
                " 338.          return \"<{} globals={} \
objects={}>\".format(", 
                " 339.              self.__class__.__name__, \
len(self.globals_registry), len(self.objects_registry)", " 340.          )", 
                " 341.  "}, Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  "self", 
                   "<ExternalEvaluateConsumer globals=4 objects=23>"}, {
                  "route", "Call"}, {
                  "args", 
                   "(<function distance at 0x1553ee700>, None, \
hypernetx.classes.Hypergraph.Hypergraph)"}}, 
                 Background -> {Null, {LightGray}}, Alignment -> Left, Frame -> 
                 LightGray]}]}]}, False], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                SystemOpen[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless"], " in ", "Call"}], 
            Column[{
              
              Column[{" 245.  ", " 246.  ", 
                " 247.  @routes.register_function", 
                " 248.  def Call(consumer, result, *args):", " 249.  ", 
                " 250.      pos, kwargs = unpack_optionals(args)", " 251.  ", 
                
                Item[
                " 252.      return result(*pos, **kwargs)", Background -> 
                 LightYellow], " 253.  ", " 254.  ", 
                " 255.  @routes.register_function", 
                " 256.  def MethodCall(consumer, result, names, *args):", 
                " 257.      return Call(consumer, GetAttribute(consumer, \
result, names), *args)", " 258.  "}, Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  "consumer", 
                   "<ExternalEvaluateConsumer globals=4 objects=23>"}, {
                  "result", "<function distance at 0x1553ee700>"}, {
                  "args", 
                   "(None, hypernetx.classes.Hypergraph.Hypergraph,)"}, {
                  "pos", "[None, hypernetx.classes.Hypergraph.Hypergraph]"}, {
                  "kwargs", "{}"}}, Background -> {Null, {LightGray}}, 
                 Alignment -> Left, Frame -> LightGray]}]}]}, True], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Users/arnoudb/hypernetx/Python/Hypergraph/Hypergraph.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Users/arnoudb/hypernetx/Python/Hypergraph/Hypergraph.py"], 
                SystemOpen[
                "/Users/arnoudb/hypernetx/Python/Hypergraph/Hypergraph.py"]], 
               Appearance -> "Frameless"], " in ", "distance"}], 
            Column[{
              
              Column[{"  48.  def diameter(hg):", 
                "  49.      return hg.diameter()", "  50.  ", 
                "  51.  def dim(hg):", "  52.      return hg.dim()", 
                "  53.  ", "  54.  def distance(hg):", 
                Item[
                "  55.      return hg.distance()", Background -> LightYellow],
                 "  56.  ", "  57.  def dual(hg):", 
                "  58.      return hg.dual()", "  59.  ", 
                "  60.  def edge_adjacency_matrix(hg):", 
                "  61.      return hg.edge_adjacency_matrix()"}, 
               Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  "hg", "None, <class \
'hypernetx.classes.Hypergraph.Hypergraph'>"}}, 
                 Background -> {Null, {LightGray}}, Alignment -> Left, Frame -> 
                 LightGray]}]}]}, True]}], FontFamily -> "Courier"]}, True]|>],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.922797402772715*^9, 3.922797784345254*^9, 
  3.922801297178729*^9},
 CellLabel->"Out[23]=",ExpressionUUID->"9650b378-7c90-4bce-b3fa-bd01cadc5633"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"HypergraphDual", "[", "hg", "]"}]], "Input",
 CellChangeTimes->{{3.922796987715042*^9, 3.9227969930295258`*^9}},
 CellLabel->"In[24]:=",ExpressionUUID->"60c250a6-d5ad-48ad-8161-1ae6b00393a1"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["ExternalObject",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{
              Thickness[0.05], {
               FaceForm[{
                 RGBColor[1., 1., 1.], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 
                 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {
                 1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
                 3}, {0, 1, 0}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}}, {{1, 4, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                 0}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 
                 3}, {1, 3, 3}}}, {{{7.5718000000000005`, 17.7334}, {7.0998, 
                 17.7334}, {6.7168, 17.342399999999998`}, {6.7168, 16.8624}, {
                 6.7168, 16.3854}, {7.0998, 15.997399999999999`}, {
                 7.5718000000000005`, 15.997399999999999`}, {
                 8.043800000000001, 15.997399999999999`}, {8.4268, 16.3854}, {
                 8.4268, 16.8624}, {8.4268, 17.342399999999998`}, {
                 8.043800000000001, 17.7334}, {7.5718000000000005`, 
                 17.7334}}, CompressedData["
1:eJxTTMoPSmViYGBQAWIQvXD12hvxZbwODSxH+w2/izl86QsuUZnOAuezVHCr
aNT9se+5ncGQzyjl8EZ2+QsPve/2X6bfndzeKu/Qst2h6dHxD/ZfvSLbLMSU
4fz1U1I7kmVV4erNVtuFRxdqOCRs3P9mns0fe98WXv/1ItoOR9qWh58yYnP4
+AVowA4dh6z8D60nQwTg/EsTY/45/1KG87O1v02/K6zi8O7kYae1L3UdBLi3
Lqs8Lubw+zRQhEnPwdnuxc01v8QcGtQOtS2fbgDng2w5ctHQgc1E0MzGVsLB
+wS77exSIwfP/bWyFunyDs2BnnMbjhk5+CzjclP9quCwVMdZ5vUjI4cJhuW6
ivFKDqbvLVzdPxk5JIYEqS84qezgLyeW5fvZyGHaJp7CNacRfAOQAamqcD63
m2op0y01h3aQA54YOZx6ar/kvp0G3D4rZa/q5vVaEPMnQe0v1XG4bgIUWG4I
58P8A+M/mCO4dC+jJpy/M5vz54Llag73gLESNVkLEm/7VBwOWgItcNaA86PE
t19kiJOH80OmKfaVFkrC+ZbpLpn5BSIOx3JNGrY7KMH5UZf3PBaZKwfnw9IH
AO506oE=
                 "], {{12.401800000000001`, 4.1044}, {11.9298, 4.1044}, {
                 11.5458, 3.7164}, {11.5458, 3.2394}, {11.5458, 
                 2.7593999999999994`}, {11.9298, 2.369399999999999}, {
                 12.401800000000001`, 2.369399999999999}, {
                 12.872800000000002`, 2.369399999999999}, {13.2568, 
                 2.7593999999999994`}, {13.2568, 3.2394}, {13.2568, 3.7164}, {
                 12.872800000000002`, 4.1044}, {12.401800000000001`, 
                 4.1044}}, CompressedData["
1:eJxTTMoPSmViYGBQAWIQ/Uei+LrQJ2UHhUNty8NPfbBfaXrW2m+iEpyvdVrg
+C4LRYcC3899wSWf7M+tOn81LEfe4cBGvbzFjN/sb635FZPrKuPgUPST/+X2
n/bOdi9urvkl5sARP8NHtIfRAcY/smKJn4MwD5y/aIv5j0MpcnB+rknDdocm
RQepRxHi2y9KOeyeNoG/qkzZIQrIY4iTh/MPWip7VTtrwPkuv96+PmCpDedf
mhjzz3mXroPFtaO5JgxqcP6DOYJL9zJqwvldfU8+yV/ScWBbPMmKMdfA4eMX
r8i2HToOE/mrzFbXGcL5GnU9O7M1jRympHYkx8ZoO9z8AJIwcjBbbRceXajh
0Pzo+Izd34wc3p087LT2pQqcL7R070HxNCWH+TY6V2YB1SeEBKkv6JR3kKlJ
NAoVAKo/APTIb0kHkDMbphs6NLAc7Tf8LgZ3D4wPdu8vZTgfSJbrPlR2WNC5
4eHLqSIOz+yX3N/Xp+OQF1a7bluSiIPPMi431VIdeHjD+CLAYLzHxOQwi0N6
XpymlsMFzgylnIpf9lURK4AxrgGPT3B47lRzWNAU6Dm34ZP94ZRVQKerwtMD
enoBAPI7A7I=
                 "]}]}, {
               FaceForm[{
                 RGBColor[0.20800000000000002`, 0.514, 0.6859999999999999], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}}, {{1, 4, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                 0}, {1, 3, 3}, {1, 3, 3}}}, {{{7.5718000000000005`, 
                 17.6836}, {8.014800000000001, 17.6836}, {8.3778, 17.3156}, {
                 8.3778, 16.862599999999997`}, {8.3778, 16.4116}, {
                 8.014800000000001, 16.046599999999998`}, {
                 7.5718000000000005`, 16.046599999999998`}, {7.1268, 
                 16.046599999999998`}, {6.7658000000000005`, 16.4116}, {
                 6.7658000000000005`, 16.862599999999997`}, {
                 6.7658000000000005`, 17.3156}, {7.1268, 17.6836}, {
                 7.5718000000000005`, 17.6836}}, CompressedData["
1:eJxTTMoPSmViYGBQBWIQnRgSpL7gpLLDYxHZk0//GzmYnbX2uxio5NBvWK6r
COQ7nU+7+vyVgsOa7tsZDO+NHKLEt19kiJN3EPMI+CNx2cgh6fBl7VRJCYd/
zr/evm4wchDg3rqs8riYQ2vU5T2PrxjC+XxzjBdtmW4A59fKWqS7vNR1uDQx
BqhVGYMPVKRpdUkHrh7Gb5l3dtX5UAE4v+gn/8vt69ng/DOHndZm3vttD+YH
aTt8OAkS+Gb/aUNA9qxyDQeec5KBt6Q/2N/XnbDgh6GqgwTQ2/ZL3tt77Ae6
QF0Zrv6Nhat7UaW8wxWXGx++eP223xet4PgxWcqBJ0Mpp6KK2aFlefgpoyNi
DgtXr70RX8YL5wcBbZmzSASDP2llU6DnXDk4/4fhs3WqKkoOb/V3q/N3Szq0
nQw5uGKJCjx8YfyDlspe1c4acL5XdbO+zzItOP+Z/ZL7+/p0HJR2/mn/MlsN
zgfybl9n1ITzYeEP4wNjvXPDQUOHa8+ztL9N13IARW/+QiO4fbD4haQPNYfO
DQ9fTv1k5NADUueoColvBmMH9PQDAFGHDrQ=
                 "]}]}, {
               FaceForm[{
                 RGBColor[0.976, 0.8430000000000001, 0.353], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}}, {{0, 2, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {
                 0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}}}, {{{12.4014, 4.0552}, {12.846400000000001`, 4.0552}, {
                 13.2074, 3.6902}, {13.2074, 3.2392000000000003`}, {13.2074, 
                 2.7862}, {12.846400000000001`, 2.4182}, {12.4014, 2.4182}, {
                 11.958400000000001`, 2.4182}, {11.595400000000001`, 
                 2.7862}, {11.595400000000001`, 3.2392000000000003`}, {
                 11.595400000000001`, 3.6902}, {11.958400000000001`, 
                 4.0552}, {12.4014, 4.0552}}, CompressedData["
1:eJxTTMoPSmViYGBQBGIQ3bszm/PnAl2HgsWMe1gv6TjA+Ec26uUtZtSE819t
X8/8nEfNISJ64/43ctoOlq7uRT/7lR06k2PvuDlrwPkvs7S/TY+Vh/MvpF19
nrVaCs6fH6d5WuC4mMNLkHk9inB+1r3Crr4UOTi/LerynsciPAh5hvxGlqNM
Dr8OpaxKuCLlcO96Y7HblF/2MPtesZgImtl8tde5MuuZbLqSw52tLTUXNr+1
/3363cnDTKoOCo4fk8/EvraHuRem3j4c6KEcLQel5HdRTna/7Ndlghyi4zCL
Q3penCaTA4wPcw+Mn7H5VfHWqSIO6sGsiyf9UsbgG2itFL5wRAyuHsYH+zvH
AM6PATlsjSGcbwwKeGUjhzV2QIfZSzn8sSo41zHJyKGuBxgRlfIOGUo5FVWs
xg62s0Pnr85VcljVFOg5l8HYoX15+CkjFlW4+l23uv6mlms4/OIH2uhs5BAg
J5bl+1kLYj/QPlh8w9wD4wMA37PnHw==
                 "]}]}}, {
             ImageSize -> 
              Dynamic[{
                Automatic, 
                 3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                  Magnification])}], AspectRatio -> Automatic, 
              ImageSize -> {20., 20.}, PlotRange -> {{0., 20.}, {0., 20.}}}], 
            
            GridBox[{{
               RowBox[{
                 TagBox["\"System: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Python\"", "SummaryItem"]}], 
               RowBox[{
                 TagBox["\"IsModule: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["False", "SummaryItem"]}], ""}, {
               RowBox[{
                 TagBox["\"Module: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"hypernetx.classes.Hypergraph\"", "SummaryItem"]}], 
               
               RowBox[{
                 TagBox["\"IsClass: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["False", "SummaryItem"]}], "\[SpanFromLeft]"}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{
              Thickness[0.05], {
               FaceForm[{
                 RGBColor[1., 1., 1.], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 
                 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {
                 1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
                 3}, {0, 1, 0}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}}, {{1, 4, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                 0}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 
                 3}, {1, 3, 3}}}, {{{7.5718000000000005`, 17.7334}, {7.0998, 
                 17.7334}, {6.7168, 17.342399999999998`}, {6.7168, 16.8624}, {
                 6.7168, 16.3854}, {7.0998, 15.997399999999999`}, {
                 7.5718000000000005`, 15.997399999999999`}, {
                 8.043800000000001, 15.997399999999999`}, {8.4268, 16.3854}, {
                 8.4268, 16.8624}, {8.4268, 17.342399999999998`}, {
                 8.043800000000001, 17.7334}, {7.5718000000000005`, 
                 17.7334}}, CompressedData["
1:eJxTTMoPSmViYGBQAWIQvXD12hvxZbwODSxH+w2/izl86QsuUZnOAuezVHCr
aNT9se+5ncGQzyjl8EZ2+QsPve/2X6bfndzeKu/Qst2h6dHxD/ZfvSLbLMSU
4fz1U1I7kmVV4erNVtuFRxdqOCRs3P9mns0fe98WXv/1ItoOR9qWh58yYnP4
+AVowA4dh6z8D60nQwTg/EsTY/45/1KG87O1v02/K6zi8O7kYae1L3UdBLi3
Lqs8Lubw+zRQhEnPwdnuxc01v8QcGtQOtS2fbgDng2w5ctHQgc1E0MzGVsLB
+wS77exSIwfP/bWyFunyDs2BnnMbjhk5+CzjclP9quCwVMdZ5vUjI4cJhuW6
ivFKDqbvLVzdPxk5JIYEqS84qezgLyeW5fvZyGHaJp7CNacRfAOQAamqcD63
m2op0y01h3aQA54YOZx6ar/kvp0G3D4rZa/q5vVaEPMnQe0v1XG4bgIUWG4I
58P8A+M/mCO4dC+jJpy/M5vz54Llag73gLESNVkLEm/7VBwOWgItcNaA86PE
t19kiJOH80OmKfaVFkrC+ZbpLpn5BSIOx3JNGrY7KMH5UZf3PBaZKwfnw9IH
AO506oE=
                 "], {{12.401800000000001`, 4.1044}, {11.9298, 4.1044}, {
                 11.5458, 3.7164}, {11.5458, 3.2394}, {11.5458, 
                 2.7593999999999994`}, {11.9298, 2.369399999999999}, {
                 12.401800000000001`, 2.369399999999999}, {
                 12.872800000000002`, 2.369399999999999}, {13.2568, 
                 2.7593999999999994`}, {13.2568, 3.2394}, {13.2568, 3.7164}, {
                 12.872800000000002`, 4.1044}, {12.401800000000001`, 
                 4.1044}}, CompressedData["
1:eJxTTMoPSmViYGBQAWIQ/Uei+LrQJ2UHhUNty8NPfbBfaXrW2m+iEpyvdVrg
+C4LRYcC3899wSWf7M+tOn81LEfe4cBGvbzFjN/sb635FZPrKuPgUPST/+X2
n/bOdi9urvkl5sARP8NHtIfRAcY/smKJn4MwD5y/aIv5j0MpcnB+rknDdocm
RQepRxHi2y9KOeyeNoG/qkzZIQrIY4iTh/MPWip7VTtrwPkuv96+PmCpDedf
mhjzz3mXroPFtaO5JgxqcP6DOYJL9zJqwvldfU8+yV/ScWBbPMmKMdfA4eMX
r8i2HToOE/mrzFbXGcL5GnU9O7M1jRympHYkx8ZoO9z8AJIwcjBbbRceXajh
0Pzo+Izd34wc3p087LT2pQqcL7R070HxNCWH+TY6V2YB1SeEBKkv6JR3kKlJ
NAoVAKo/APTIb0kHkDMbphs6NLAc7Tf8LgZ3D4wPdu8vZTgfSJbrPlR2WNC5
4eHLqSIOz+yX3N/Xp+OQF1a7bluSiIPPMi431VIdeHjD+CLAYLzHxOQwi0N6
XpymlsMFzgylnIpf9lURK4AxrgGPT3B47lRzWNAU6Dm34ZP94ZRVQKerwtMD
enoBAPI7A7I=
                 "]}]}, {
               FaceForm[{
                 RGBColor[0.20800000000000002`, 0.514, 0.6859999999999999], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}}, {{1, 4, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                 0}, {1, 3, 3}, {1, 3, 3}}}, {{{7.5718000000000005`, 
                 17.6836}, {8.014800000000001, 17.6836}, {8.3778, 17.3156}, {
                 8.3778, 16.862599999999997`}, {8.3778, 16.4116}, {
                 8.014800000000001, 16.046599999999998`}, {
                 7.5718000000000005`, 16.046599999999998`}, {7.1268, 
                 16.046599999999998`}, {6.7658000000000005`, 16.4116}, {
                 6.7658000000000005`, 16.862599999999997`}, {
                 6.7658000000000005`, 17.3156}, {7.1268, 17.6836}, {
                 7.5718000000000005`, 17.6836}}, CompressedData["
1:eJxTTMoPSmViYGBQBWIQnRgSpL7gpLLDYxHZk0//GzmYnbX2uxio5NBvWK6r
COQ7nU+7+vyVgsOa7tsZDO+NHKLEt19kiJN3EPMI+CNx2cgh6fBl7VRJCYd/
zr/evm4wchDg3rqs8riYQ2vU5T2PrxjC+XxzjBdtmW4A59fKWqS7vNR1uDQx
BqhVGYMPVKRpdUkHrh7Gb5l3dtX5UAE4v+gn/8vt69ng/DOHndZm3vttD+YH
aTt8OAkS+Gb/aUNA9qxyDQeec5KBt6Q/2N/XnbDgh6GqgwTQ2/ZL3tt77Ae6
QF0Zrv6Nhat7UaW8wxWXGx++eP223xet4PgxWcqBJ0Mpp6KK2aFlefgpoyNi
DgtXr70RX8YL5wcBbZmzSASDP2llU6DnXDk4/4fhs3WqKkoOb/V3q/N3Szq0
nQw5uGKJCjx8YfyDlspe1c4acL5XdbO+zzItOP+Z/ZL7+/p0HJR2/mn/MlsN
zgfybl9n1ITzYeEP4wNjvXPDQUOHa8+ztL9N13IARW/+QiO4fbD4haQPNYfO
DQ9fTv1k5NADUueoColvBmMH9PQDAFGHDrQ=
                 "]}]}, {
               FaceForm[{
                 RGBColor[0.976, 0.8430000000000001, 0.353], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}}, {{0, 2, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {
                 0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}}}, {{{12.4014, 4.0552}, {12.846400000000001`, 4.0552}, {
                 13.2074, 3.6902}, {13.2074, 3.2392000000000003`}, {13.2074, 
                 2.7862}, {12.846400000000001`, 2.4182}, {12.4014, 2.4182}, {
                 11.958400000000001`, 2.4182}, {11.595400000000001`, 
                 2.7862}, {11.595400000000001`, 3.2392000000000003`}, {
                 11.595400000000001`, 3.6902}, {11.958400000000001`, 
                 4.0552}, {12.4014, 4.0552}}, CompressedData["
1:eJxTTMoPSmViYGBQBGIQ3bszm/PnAl2HgsWMe1gv6TjA+Ec26uUtZtSE819t
X8/8nEfNISJ64/43ctoOlq7uRT/7lR06k2PvuDlrwPkvs7S/TY+Vh/MvpF19
nrVaCs6fH6d5WuC4mMNLkHk9inB+1r3Crr4UOTi/LerynsciPAh5hvxGlqNM
Dr8OpaxKuCLlcO96Y7HblF/2MPtesZgImtl8tde5MuuZbLqSw52tLTUXNr+1
/3363cnDTKoOCo4fk8/EvraHuRem3j4c6KEcLQel5HdRTna/7Ndlghyi4zCL
Q3penCaTA4wPcw+Mn7H5VfHWqSIO6sGsiyf9UsbgG2itFL5wRAyuHsYH+zvH
AM6PATlsjSGcbwwKeGUjhzV2QIfZSzn8sSo41zHJyKGuBxgRlfIOGUo5FVWs
xg62s0Pnr85VcljVFOg5l8HYoX15+CkjFlW4+l23uv6mlms4/OIH2uhs5BAg
J5bl+1kLYj/QPlh8w9wD4wMA37PnHw==
                 "]}]}}, {
             ImageSize -> 
              Dynamic[{
                Automatic, 
                 3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                  Magnification])}], AspectRatio -> Automatic, 
              ImageSize -> {20., 20.}, PlotRange -> {{0., 20.}, {0., 20.}}}], 
            
            GridBox[{{
               RowBox[{
                 TagBox["\"System: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Python\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"IsModule: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["False", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Module: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                 "\"hypernetx.classes.Hypergraph\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"IsClass: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["False", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"IsFunction: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["False", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"IsMethod: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["False", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"IsCallable: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["False", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Status: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Evaluated\"", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  ExternalObject[
   ExternalSessionObject["4412c19d-12e2-4c9a-b100-dd88d0e74d8e"], 
   ExternalEvaluate`RPC["Fetch", {5727310928}], <|
   "IsModule" -> False, "Module" -> "hypernetx.classes.Hypergraph", "IsClass" -> 
    False, "IsFunction" -> False, "IsMethod" -> False, "IsCallable" -> 
    False|>],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.922796993355336*^9, 3.9227971205841208`*^9, 
  3.922797286345649*^9, 3.92279740875935*^9, 3.922797784369388*^9, 
  3.922801297790655*^9},
 CellLabel->"Out[24]=",ExpressionUUID->"d551a87c-79a4-4a31-991c-3344de7b0f16"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"HypergraphEdgeAdjacencyMatrix", "[", "hg", "]"}], "//", 
  "Normal"}]], "Input",
 CellChangeTimes->{{3.922802061069201*^9, 3.922802075474206*^9}, {
  3.9228021718616323`*^9, 3.922802173094804*^9}},
 CellLabel->"In[6]:=",ExpressionUUID->"423ae3fe-b675-42bb-82e8-03133a321f9a"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"0", ",", "1", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "1", ",", "0"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.922802075847466*^9, {3.922802134963835*^9, 3.922802173415523*^9}},
 CellLabel->"Out[6]=",ExpressionUUID->"873ee98e-eda4-4dae-8fc1-1ecf3448d407"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"HypergraphEdgeCol", "[", "hg", "]"}]], "Input",
 CellChangeTimes->{{3.9228022006220617`*^9, 3.922802229509693*^9}},
 CellLabel->"In[7]:=",ExpressionUUID->"3fc89d98-2bb9-4551-aa89-badc9ba08834"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["Failure",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            FrameBox[
             StyleBox["\"\[WarningSign]\"", 
              Directive["Message", 35], StripOnInput -> False], 
             ContentPadding -> False, FrameStyle -> None, 
             FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
            GridBox[{{
               TagBox[
                GridBox[{{
                   TagBox["\"Message: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                   "\"'str' object is not callable\"", "SummaryItem"]}}, 
                 GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                 GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                 GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}, {
               TagBox[
                GridBox[{{
                   TagBox["\"Tag: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["\"PythonError\"", "SummaryItem"]}}, 
                 GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                 GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                 GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            FrameBox[
             StyleBox["\"\[WarningSign]\"", 
              Directive["Message", 35], StripOnInput -> False], 
             ContentPadding -> False, FrameStyle -> None, 
             FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
            GridBox[{{
               TagBox[
                GridBox[{{
                   TagBox["\"Message: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                   "\"'str' object is not callable\"", "SummaryItem"]}}, 
                 GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                 GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                 GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}, {
               TagBox[
                GridBox[{{
                   TagBox["\"Tag: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["\"PythonError\"", "SummaryItem"]}}, 
                 GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                 GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                 GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}, {
               RowBox[{
                 TagBox[
                  TemplateBox[{"\"FailureCode\"", "\": \""}, "RowDefault"], 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox[
                  TagBox["\"TypeError\"", HoldForm], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                  TemplateBox[{"\"Traceback\"", "\": \""}, "RowDefault"], 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   TagBox[
                    DynamicModuleBox[{Typeset`var$$ = True}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    
                    TemplateBox[{
                    "\"TypeError\"", "\" \"", 
                    "\"'str' object is not callable\""}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    
                    TemplateBox[{
                    "\"TypeError\"", "\" \"", 
                    "\"'str' object is not callable\""}, "RowDefault"]}, {
                    "", 
                    PaneBox[
                    StyleBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/language/\
decorators.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/language/\
decorators.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/language/\
decorators.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"safe_wl_execute\""}, 
                    "RowDefault"]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/language/\
decorators.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/language/\
decorators.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/language/\
decorators.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"safe_wl_execute\""}, 
                    "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{
                    "\"  14.      \\\"wl\\\": \
b'Failure[\\\"PythonFailure\\\", <|\\\"MessageTemplate\\\" -> \\\"Unexpected \
error occurred.\\\"|>]',\""}, {"\"  15.  }\""}, {"\"  16.  \""}, {
                    "\"  17.  \""}, {
                    "\"  18.  def safe_wl_execute(function, args=(), opts={}, \
export_opts={}, exception_class=None):\""}, {"\"  19.  \""}, {
                    "\"  20.      try:\""}, {
                    ItemBox[
                    "\"  21.          return export(function(*args, **opts), \
**export_opts)\"", Background -> RGBColor[1, 1, 0.85], StripOnInput -> 
                    False]}, {
                    "\"  22.      except Exception as export_exception:\""}, {
                    "\"  23.          try:\""}, {
                    "\"  24.              try:\""}, {"\"  25.  \""}, {
                    "\"  26.                  # The user can provide an \
exception class, and it can be broken, in which case we are running \
another\""}, {
                    "\"  27.                  # try / except to return errors \
that are happening during class serialization\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\"function\"", 
                    "\"<function handle_message at 0x103b78fe0>\""}, {
                    "\"args\"", 
                    "\"(<zmq.Socket(zmq.PAIR) at 0x103b54c20>,)\""}, {
                    "\"opts\"", 
                    "\"{'consumer': <ExternalEvaluateConsumer globals=4 \
objects=4>}\""}, {"\"export_opts\"", 
                    "\"{'object_processor': <function \
start_zmq_loop.<locals>.<lambda> at 0x102e009a0>, 'target_format': \
'wxf'}\""}, {"\"exception_class\"", "\"None\""}, {"\"export_exception\"", 
                    "\"'str' object is not callable\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Null}}, 
                    "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"function", 
                    "<function handle_message at 0x103b78fe0>"}, {
                    "args", "(<zmq.Socket(zmq.PAIR) at 0x103b54c20>,)"}, {
                    "opts", 
                    "{'consumer': <ExternalEvaluateConsumer globals=4 \
objects=4>}"}, {"export_opts", 
                    "{'object_processor': <function \
start_zmq_loop.<locals>.<lambda> at 0x102e009a0>, 'target_format': 'wxf'}"}, {
                    "exception_class", "None"}, {"export_exception", 
                    "'str' object is not callable"}}, Background -> {
                    Null, {LightGray}}, Alignment -> Left, Frame -> 
                    LightGray]}, False]], DynamicModuleValues -> Automatic], 
                    Setting[#, {0}]& ]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/language/\
decorators.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/language/\
decorators.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/language/\
decorators.py"]], Appearance -> "Frameless"], " in ", "safe_wl_execute"}], 
                    Column[{
                    
                    Column[{
                    "  14.      \"wl\": b'Failure[\"PythonFailure\", \
<|\"MessageTemplate\" -> \"Unexpected error occurred.\"|>]',", "  15.  }", 
                    "  16.  ", "  17.  ", 
                    "  18.  def safe_wl_execute(function, args=(), opts={}, \
export_opts={}, exception_class=None):", "  19.  ", "  20.      try:", 
                    Item[
                    "  21.          return export(function(*args, **opts), \
**export_opts)", Background -> LightYellow], 
                    "  22.      except Exception as export_exception:", 
                    "  23.          try:", "  24.              try:", 
                    "  25.  ", 
                    "  26.                  # The user can provide an \
exception class, and it can be broken, in which case we are running another", 
                    "  27.                  # try / except to return errors \
that are happening during class serialization"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"function", 
                    "<function handle_message at 0x103b78fe0>"}, {
                    "args", "(<zmq.Socket(zmq.PAIR) at 0x103b54c20>,)"}, {
                    "opts", 
                    "{'consumer': <ExternalEvaluateConsumer globals=4 \
objects=4>}"}, {"export_opts", 
                    "{'object_processor': <function \
start_zmq_loop.<locals>.<lambda> at 0x102e009a0>, 'target_format': 'wxf'}"}, {
                    "exception_class", "None"}, {
                    "export_exception", "'str' object is not callable"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless", Evaluator -> Automatic, 
                    Method -> "Preemptive"], "\" in \"", 
                    "\"handle_message\""}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless", Evaluator -> Automatic, 
                    Method -> "Preemptive"], "\" in \"", 
                    "\"handle_message\""}, "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{
                    "\" 350.          self.socket.send(zmq.Frame(bytes))\""}, \
{"\" 351.  \""}, {"\" 352.      def send_side_effect(self, expr):\""}, {
                    "\" 353.          \
self.write(export(self.keep_listening(expr), target_format=\\\"wxf\\\"))\""}, \
{"\" 354.  \""}, {"\" 355.  \""}, {
                    "\" 356.  def handle_message(socket, consumer):\""}, {
                    ItemBox[
                    "\" 357.      result = \
binary_deserialize(socket.recv(copy=False).buffer, consumer=consumer)\"", 
                    Background -> RGBColor[1, 1, 0.85], StripOnInput -> 
                    False]}, {"\" 358.  \""}, {
                    "\" 359.      sys.stdout.flush()\""}, {
                    "\" 360.      return result\""}, {"\" 361.  \""}, {
                    "\" 362.  \""}, {
                    "\" 363.  def start_zmq_instance(port=None, \
write_to_stdout=True, **opts):\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\"socket\"", 
                    "\"<zmq.Socket(zmq.PAIR) at 0x103b54c20>\""}, {
                    "\"consumer\"", 
                    "\"<ExternalEvaluateConsumer globals=4 objects=4>\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Null}}, 
                    "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"socket", 
                    "<zmq.Socket(zmq.PAIR) at 0x103b54c20>"}, {
                    "consumer", 
                    "<ExternalEvaluateConsumer globals=4 objects=4>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless"], " in ", 
                    "handle_message"}], 
                    Column[{
                    
                    Column[{
                    " 350.          self.socket.send(zmq.Frame(bytes))", 
                    " 351.  ", " 352.      def send_side_effect(self, expr):",
                     
                    " 353.          \
self.write(export(self.keep_listening(expr), target_format=\"wxf\"))", 
                    " 354.  ", " 355.  ", 
                    " 356.  def handle_message(socket, consumer):", 
                    Item[
                    " 357.      result = \
binary_deserialize(socket.recv(copy=False).buffer, consumer=consumer)", 
                    Background -> LightYellow], " 358.  ", 
                    " 359.      sys.stdout.flush()", 
                    " 360.      return result", " 361.  ", " 362.  ", 
                    " 363.  def start_zmq_instance(port=None, \
write_to_stdout=True, **opts):"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"socket", 
                    "<zmq.Socket(zmq.PAIR) at 0x103b54c20>"}, {
                    "consumer", 
                    "<ExternalEvaluateConsumer globals=4 objects=4>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
__init__.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
__init__.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
__init__.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"binary_deserialize\""}, 
                    "RowDefault"]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
__init__.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
__init__.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
__init__.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"binary_deserialize\""}, 
                    "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{"\"  33.  \""}, {
                    "\"  34.      \\\"\\\"\\\"\""}, {
                    "\"  35.      parser = WXFParser(wxf_input)\""}, {
                    "\"  36.      if consumer is None:\""}, {
                    "\"  37.          consumer = WXFConsumerNumpy()\""}, {
                    "\"  38.  \""}, {"\"  39.      try:\""}, {
                    ItemBox[
                    "\"  40.          o = \
consumer.next_expression(parser.tokens(), **kwargs)\"", Background -> 
                    RGBColor[1, 1, 0.85], StripOnInput -> False]}, {
                    "\"  41.      except StopIteration:\""}, {
                    "\"  42.          raise WolframParserException(\""}, {
                    "\"  43.              \\\"Input data does not represent a \
valid expression in WXF format. Expecting more input data.\\\"\""}, {
                    "\"  44.          )\""}, {
                    "\"  45.      if not \
parser.context.is_valid_final_state():\""}, {
                    "\"  46.          raise WolframParserException(\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\"wxf_input\"", 
                    "\"8:f\.02s0ExternalEvaluate`Private`\
ExternalEvaluateCommandS\\nReturnTypef\.02s\.04Listf\.02s0ExternalEvaluate`\
Private`ExternalEvaluateCommandS\.04Callf\.02s\.04Listf\.02s0ExternalEvaluate`\
Private`ExternalEvaluateCommandS\.05Fetchf\.01\.01\.01\.01\.01\.01\.01\.01s\
\.04ListLhau\.01\.01\.01\.01\.01\.01\.01\.01\.00\.00\.00f\.02\
s0ExternalEvaluate`Private`ExternalEvaluateCommandS\.05Fetchf\.01\.01\.01\.01\
\.01\.01\.01\.01s\.04ListLau\.01\.01\.01\.01\.01\.01\.01\.01\.00\.00\.00S\\\
nExpression\""}, {"\"consumer\"", 
                    "\"<ExternalEvaluateConsumer globals=4 objects=4>\""}, {
                    "\"kwargs\"", "\"{}\""}, {"\"parser\"", 
                    "\"<wolframclient.deserializers.wxf.wxfparser.WXFParser \
object at 0x174bb3f10>\""}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {"Columns" -> {{
                    Null}}, "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"wxf_input", 
                    "8:f\.02s0ExternalEvaluate`Private`\
ExternalEvaluateCommandS\n\
ReturnTypef\.02s\.04Listf\.02s0ExternalEvaluate`Private`\
ExternalEvaluateCommandS\.04Callf\.02s\.04Listf\.02s0ExternalEvaluate`Private`\
ExternalEvaluateCommandS\.05Fetchf\.01\.01\.01\.01\.01\.01\.01\.01s\.04\
ListLhau\.01\.01\.01\.01\.01\.01\.01\.01\.00\.00\.00f\.02s0ExternalEvaluate`\
Private`ExternalEvaluateCommandS\.05Fetchf\.01\.01\.01\.01\.01\.01\.01\.01s\
\.04ListLau\.01\.01\.01\.01\.01\.01\.01\.01\.00\.00\.00S\nExpression"}, {
                    "consumer", 
                    "<ExternalEvaluateConsumer globals=4 objects=4>"}, {
                    "kwargs", "{}"}, {"parser", 
                    "<wolframclient.deserializers.wxf.wxfparser.WXFParser \
object at 0x174bb3f10>"}}, Background -> {Null, {LightGray}}, Alignment -> 
                    Left, Frame -> LightGray]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
__init__.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
__init__.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
__init__.py"]], Appearance -> "Frameless"], " in ", "binary_deserialize"}], 
                    Column[{
                    
                    Column[{"  33.  ", "  34.      \"\"\"", 
                    "  35.      parser = WXFParser(wxf_input)", 
                    "  36.      if consumer is None:", 
                    "  37.          consumer = WXFConsumerNumpy()", "  38.  ",
                     "  39.      try:", 
                    Item[
                    "  40.          o = \
consumer.next_expression(parser.tokens(), **kwargs)", Background -> 
                    LightYellow], "  41.      except StopIteration:", 
                    "  42.          raise WolframParserException(", 
                    "  43.              \"Input data does not represent a \
valid expression in WXF format. Expecting more input data.\"", 
                    "  44.          )", 
                    "  45.      if not \
parser.context.is_valid_final_state():", 
                    "  46.          raise WolframParserException("}, 
                    Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"wxf_input", 
                    "8:f\.02s0ExternalEvaluate`Private`\
ExternalEvaluateCommandS\n\
ReturnTypef\.02s\.04Listf\.02s0ExternalEvaluate`Private`\
ExternalEvaluateCommandS\.04Callf\.02s\.04Listf\.02s0ExternalEvaluate`Private`\
ExternalEvaluateCommandS\.05Fetchf\.01\.01\.01\.01\.01\.01\.01\.01s\.04\
ListLhau\.01\.01\.01\.01\.01\.01\.01\.01\.00\.00\.00f\.02s0ExternalEvaluate`\
Private`ExternalEvaluateCommandS\.05Fetchf\.01\.01\.01\.01\.01\.01\.01\.01s\
\.04ListLau\.01\.01\.01\.01\.01\.01\.01\.01\.00\.00\.00S\nExpression"}, {
                    "consumer", 
                    "<ExternalEvaluateConsumer globals=4 objects=4>"}, {
                    "kwargs", "{}"}, {"parser", 
                    "<wolframclient.deserializers.wxf.wxfparser.WXFParser \
object at 0x174bb3f10>"}}, Background -> {Null, {LightGray}}, Alignment -> 
                    Left, Frame -> LightGray]}]}]}, False]], 
                    DynamicModuleValues -> Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"next_expression\""}, 
                    "RowDefault"]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"next_expression\""}, 
                    "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{
                    "\"  69.          constants.WXF_CONSTANTS.RuleDelayed: \\\
\"consume_rule_delayed\\\",\""}, {"\"  70.      }\""}, {"\"  71.  \""}, {
                    "\"  72.      def next_expression(self, tokens, \
**kwargs):\""}, {
                    "\"  73.          \\\"\\\"\\\"Deserialize the next \
expression starting at the next token yield by `tokens`.\\\"\\\"\\\"\""}, {
                    "\"  74.          token = next(tokens)\""}, {
                    "\"  75.          consumer = \
self._consumer_from_type(token.wxf_type)\""}, {
                    ItemBox[
                    "\"  76.          return consumer(token, tokens, \
**kwargs)\"", Background -> RGBColor[1, 1, 0.85], StripOnInput -> False]}, {
                    "\"  77.  \""}, {
                    "\"  78.      def _consumer_from_type(self, \
wxf_type):\""}, {"\"  79.          try:\""}, {
                    "\"  80.              func = self._mapping[wxf_type]\""}, \
{"\"  81.          except KeyError:\""}, {
                    "\"  82.              raise WolframParserException(\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\"self\"", 
                    "\"<ExternalEvaluateConsumer globals=4 objects=4>\""}, {
                    "\"tokens\"", 
                    "\"<generator object WXFParser.tokens at \
0x1755b7580>\""}, {"\"kwargs\"", "\"{}\""}, {"\"token\"", 
                    "\"WXFToken<b'f', data=None, len=2>\""}, {"\"consumer\"", 
                    "\"<bound method \
ExternalEvaluateConsumer.consume_function of <ExternalEvaluateConsumer \
globals=4 objects=4>>\""}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {"Columns" -> {{
                    Null}}, "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<ExternalEvaluateConsumer globals=4 objects=4>"}, {
                    "tokens", 
                    "<generator object WXFParser.tokens at 0x1755b7580>"}, {
                    "kwargs", "{}"}, {"token", 
                    "WXFToken<b'f', data=None, len=2>"}, {
                    "consumer", 
                    "<bound method ExternalEvaluateConsumer.consume_function \
of <ExternalEvaluateConsumer globals=4 objects=4>>"}}, Background -> {
                    Null, {LightGray}}, Alignment -> Left, Frame -> 
                    LightGray]}, False]], DynamicModuleValues -> Automatic], 
                    Setting[#, {0}]& ]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless"], " in ", "next_expression"}], 
                    Column[{
                    
                    Column[{
                    "  69.          constants.WXF_CONSTANTS.RuleDelayed: \
\"consume_rule_delayed\",", "  70.      }", "  71.  ", 
                    "  72.      def next_expression(self, tokens, **kwargs):",
                     "  73.          \"\"\"Deserialize the next expression \
starting at the next token yield by `tokens`.\"\"\"", 
                    "  74.          token = next(tokens)", 
                    "  75.          consumer = \
self._consumer_from_type(token.wxf_type)", 
                    Item[
                    "  76.          return consumer(token, tokens, **kwargs)",
                     Background -> LightYellow], "  77.  ", 
                    "  78.      def _consumer_from_type(self, wxf_type):", 
                    "  79.          try:", 
                    "  80.              func = self._mapping[wxf_type]", 
                    "  81.          except KeyError:", 
                    "  82.              raise WolframParserException("}, 
                    Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<ExternalEvaluateConsumer globals=4 objects=4>"}, {
                    "tokens", 
                    "<generator object WXFParser.tokens at 0x1755b7580>"}, {
                    "kwargs", "{}"}, {"token", 
                    "WXFToken<b'f', data=None, len=2>"}, {
                    "consumer", 
                    "<bound method ExternalEvaluateConsumer.consume_function \
of <ExternalEvaluateConsumer globals=4 objects=4>>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless", Evaluator -> Automatic, 
                    Method -> "Preemptive"], "\" in \"", 
                    "\"consume_function\""}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless", Evaluator -> Automatic, 
                    Method -> "Preemptive"], "\" in \"", 
                    "\"consume_function\""}, "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{"\" 319.  \""}, {
                    "\" 320.      def __init__(self, routes_registry={}, \
objects_registry={}, globals_registry={}):\""}, {
                    "\" 321.          self.objects_registry = \
registry(objects_registry)\""}, {
                    "\" 322.          self.globals_registry = \
registry(globals_registry)\""}, {
                    "\" 323.          self.routes_registry = \
registry(self.builtin_routes, **routes_registry)\""}, {"\" 324.  \""}, {
                    "\" 325.      def consume_function(self, *args, \
**kwargs):\""}, {
                    ItemBox[
                    "\" 326.          expr = super().consume_function(*args, \
**kwargs)\"", Background -> RGBColor[1, 1, 0.85], StripOnInput -> False]}, {
                    "\" 327.  \""}, {
                    "\" 328.          if check_wl_symbol(expr, \
self.hook_symbol):\""}, {
                    "\" 329.              assert len(expr.args) == 2\""}, {
                    "\" 330.              return \
self.dispatch_wl_object(*expr.args)\""}, {"\" 331.  \""}, {
                    "\" 332.          return expr\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\"self\"", 
                    "\"<ExternalEvaluateConsumer globals=4 objects=4>\""}, {
                    "\"args\"", 
                    "\"(<wolframclient.deserializers.wxf.wxfparser.WXFToken \
object at 0x17563ba10>, <generator object WXFParser.tokens at \
0x1755b7580>)\""}, {"\"kwargs\"", "\"{}\""}, {"\"__class__\"", 
                    "\"<class \
'wolframclient.utils.externalevaluate.ExternalEvaluateConsumer'>\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Null}}, 
                    "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<ExternalEvaluateConsumer globals=4 objects=4>"}, {
                    "args", 
                    "(<wolframclient.deserializers.wxf.wxfparser.WXFToken \
object at 0x17563ba10>, <generator object WXFParser.tokens at \
0x1755b7580>)"}, {"kwargs", "{}"}, {"__class__", 
                    "<class \
'wolframclient.utils.externalevaluate.ExternalEvaluateConsumer'>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless"], " in ", 
                    "consume_function"}], 
                    Column[{
                    
                    Column[{" 319.  ", 
                    " 320.      def __init__(self, routes_registry={}, \
objects_registry={}, globals_registry={}):", 
                    " 321.          self.objects_registry = \
registry(objects_registry)", 
                    " 322.          self.globals_registry = \
registry(globals_registry)", 
                    " 323.          self.routes_registry = \
registry(self.builtin_routes, **routes_registry)", " 324.  ", 
                    " 325.      def consume_function(self, *args, **kwargs):", 
                    Item[
                    " 326.          expr = super().consume_function(*args, \
**kwargs)", Background -> LightYellow], " 327.  ", 
                    " 328.          if check_wl_symbol(expr, \
self.hook_symbol):", " 329.              assert len(expr.args) == 2", 
                    " 330.              return \
self.dispatch_wl_object(*expr.args)", " 331.  ", 
                    " 332.          return expr"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<ExternalEvaluateConsumer globals=4 objects=4>"}, {
                    "args", 
                    "(<wolframclient.deserializers.wxf.wxfparser.WXFToken \
object at 0x17563ba10>, <generator object WXFParser.tokens at \
0x1755b7580>)"}, {"kwargs", "{}"}, {"__class__", 
                    "<class \
'wolframclient.utils.externalevaluate.ExternalEvaluateConsumer'>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"consume_function\""}, 
                    "RowDefault"]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"consume_function\""}, 
                    "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{
                    "\"  94.          Return a :class:`list` if the head is \
symbol `List`, otherwise returns the result of \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`\""}, {"\"  95.          applied to the head and arguments.\""}, {
                    "\"  96.  \""}, {
                    "\"  97.          Usually custom parsing rules target \
Functions, but not List. To do so, it is recommended to override\""}, {
                    "\"  98.          \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`.\""}, {"\"  99.          \\\"\\\"\\\"\""}, {
                    "\" 100.          head = self.next_expression(tokens, \
**kwargs)\""}, {
                    ItemBox["\" 101.          args = tuple(\"", Background -> 
                    RGBColor[1, 1, 0.85], StripOnInput -> False]}, {
                    "\" 102.              self.next_expression(tokens, \
**kwargs) for i in range(current_token.length)\""}, {
                    "\" 103.          )\""}, {
                    "\" 104.          if head == self._LIST:\""}, {
                    "\" 105.              return args\""}, {
                    "\" 106.          else:\""}, {
                    "\" 107.              return self.build_function(head, \
args, **kwargs)\""}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\"self\"", 
                    "\"<ExternalEvaluateConsumer globals=4 objects=4>\""}, {
                    "\"current_token\"", 
                    "\"WXFToken<b'f', data=None, len=2>\""}, {"\"tokens\"", 
                    "\"<generator object WXFParser.tokens at \
0x1755b7580>\""}, {"\"kwargs\"", "\"{}\""}, {"\"head\"", 
                    "\"ExternalEvaluate`Private`ExternalEvaluateCommand\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Null}}, 
                    "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<ExternalEvaluateConsumer globals=4 objects=4>"}, {
                    "current_token", "WXFToken<b'f', data=None, len=2>"}, {
                    "tokens", 
                    "<generator object WXFParser.tokens at 0x1755b7580>"}, {
                    "kwargs", "{}"}, {"head", 
                    "ExternalEvaluate`Private`ExternalEvaluateCommand"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless"], " in ", "consume_function"}], 
                    Column[{
                    
                    Column[{
                    "  94.          Return a :class:`list` if the head is \
symbol `List`, otherwise returns the result of \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`", "  95.          applied to the head and arguments.", "  96.  ", 
                    "  97.          Usually custom parsing rules target \
Functions, but not List. To do so, it is recommended to override", 
                    "  98.          \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`.", "  99.          \"\"\"", 
                    " 100.          head = self.next_expression(tokens, \
**kwargs)", 
                    Item[" 101.          args = tuple(", Background -> 
                    LightYellow], 
                    " 102.              self.next_expression(tokens, \
**kwargs) for i in range(current_token.length)", " 103.          )", 
                    " 104.          if head == self._LIST:", 
                    " 105.              return args", " 106.          else:", 
                    " 107.              return self.build_function(head, \
args, **kwargs)"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<ExternalEvaluateConsumer globals=4 objects=4>"}, {
                    "current_token", "WXFToken<b'f', data=None, len=2>"}, {
                    "tokens", 
                    "<generator object WXFParser.tokens at 0x1755b7580>"}, {
                    "kwargs", "{}"}, {"head", 
                    "ExternalEvaluate`Private`ExternalEvaluateCommand"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"<genexpr>\""}, 
                    "RowDefault"]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"<genexpr>\""}, 
                    "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{
                    "\"  95.          applied to the head and arguments.\""}, \
{"\"  96.  \""}, {
                    "\"  97.          Usually custom parsing rules target \
Functions, but not List. To do so, it is recommended to override\""}, {
                    "\"  98.          \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`.\""}, {"\"  99.          \\\"\\\"\\\"\""}, {
                    "\" 100.          head = self.next_expression(tokens, \
**kwargs)\""}, {"\" 101.          args = tuple(\""}, {
                    ItemBox[
                    "\" 102.              self.next_expression(tokens, \
**kwargs) for i in range(current_token.length)\"", Background -> 
                    RGBColor[1, 1, 0.85], StripOnInput -> False]}, {
                    "\" 103.          )\""}, {
                    "\" 104.          if head == self._LIST:\""}, {
                    "\" 105.              return args\""}, {
                    "\" 106.          else:\""}, {
                    "\" 107.              return self.build_function(head, \
args, **kwargs)\""}, {"\" 108.  \""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\".0\"", 
                    "\"<range_iterator object at 0x175631290>\""}, {
                    "\"i\"", "\"1\""}, {"\"kwargs\"", "\"{}\""}, {
                    "\"self\"", 
                    "\"<ExternalEvaluateConsumer globals=4 objects=4>\""}, {
                    "\"tokens\"", 
                    "\"<generator object WXFParser.tokens at \
0x1755b7580>\""}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Null}}, 
                    "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {".0", 
                    "<range_iterator object at 0x175631290>"}, {"i", "1"}, {
                    "kwargs", "{}"}, {"self", 
                    "<ExternalEvaluateConsumer globals=4 objects=4>"}, {
                    "tokens", 
                    "<generator object WXFParser.tokens at 0x1755b7580>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless"], " in ", "<genexpr>"}], 
                    Column[{
                    
                    Column[{
                    "  95.          applied to the head and arguments.", 
                    "  96.  ", 
                    "  97.          Usually custom parsing rules target \
Functions, but not List. To do so, it is recommended to override", 
                    "  98.          \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`.", "  99.          \"\"\"", 
                    " 100.          head = self.next_expression(tokens, \
**kwargs)", " 101.          args = tuple(", 
                    Item[
                    " 102.              self.next_expression(tokens, \
**kwargs) for i in range(current_token.length)", Background -> LightYellow], 
                    " 103.          )", 
                    " 104.          if head == self._LIST:", 
                    " 105.              return args", " 106.          else:", 
                    " 107.              return self.build_function(head, \
args, **kwargs)", " 108.  "}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {".0", 
                    "<range_iterator object at 0x175631290>"}, {"i", "1"}, {
                    "kwargs", "{}"}, {"self", 
                    "<ExternalEvaluateConsumer globals=4 objects=4>"}, {
                    "tokens", 
                    "<generator object WXFParser.tokens at 0x1755b7580>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"next_expression\""}, 
                    "RowDefault"]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"next_expression\""}, 
                    "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{
                    "\"  69.          constants.WXF_CONSTANTS.RuleDelayed: \\\
\"consume_rule_delayed\\\",\""}, {"\"  70.      }\""}, {"\"  71.  \""}, {
                    "\"  72.      def next_expression(self, tokens, \
**kwargs):\""}, {
                    "\"  73.          \\\"\\\"\\\"Deserialize the next \
expression starting at the next token yield by `tokens`.\\\"\\\"\\\"\""}, {
                    "\"  74.          token = next(tokens)\""}, {
                    "\"  75.          consumer = \
self._consumer_from_type(token.wxf_type)\""}, {
                    ItemBox[
                    "\"  76.          return consumer(token, tokens, \
**kwargs)\"", Background -> RGBColor[1, 1, 0.85], StripOnInput -> False]}, {
                    "\"  77.  \""}, {
                    "\"  78.      def _consumer_from_type(self, \
wxf_type):\""}, {"\"  79.          try:\""}, {
                    "\"  80.              func = self._mapping[wxf_type]\""}, \
{"\"  81.          except KeyError:\""}, {
                    "\"  82.              raise WolframParserException(\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\"self\"", 
                    "\"<ExternalEvaluateConsumer globals=4 objects=4>\""}, {
                    "\"tokens\"", 
                    "\"<generator object WXFParser.tokens at \
0x1755b7580>\""}, {"\"kwargs\"", "\"{}\""}, {"\"token\"", 
                    "\"WXFToken<b'f', data=None, len=2>\""}, {"\"consumer\"", 
                    "\"<bound method \
ExternalEvaluateConsumer.consume_function of <ExternalEvaluateConsumer \
globals=4 objects=4>>\""}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {"Columns" -> {{
                    Null}}, "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<ExternalEvaluateConsumer globals=4 objects=4>"}, {
                    "tokens", 
                    "<generator object WXFParser.tokens at 0x1755b7580>"}, {
                    "kwargs", "{}"}, {"token", 
                    "WXFToken<b'f', data=None, len=2>"}, {
                    "consumer", 
                    "<bound method ExternalEvaluateConsumer.consume_function \
of <ExternalEvaluateConsumer globals=4 objects=4>>"}}, Background -> {
                    Null, {LightGray}}, Alignment -> Left, Frame -> 
                    LightGray]}, False]], DynamicModuleValues -> Automatic], 
                    Setting[#, {0}]& ]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless"], " in ", "next_expression"}], 
                    Column[{
                    
                    Column[{
                    "  69.          constants.WXF_CONSTANTS.RuleDelayed: \
\"consume_rule_delayed\",", "  70.      }", "  71.  ", 
                    "  72.      def next_expression(self, tokens, **kwargs):",
                     "  73.          \"\"\"Deserialize the next expression \
starting at the next token yield by `tokens`.\"\"\"", 
                    "  74.          token = next(tokens)", 
                    "  75.          consumer = \
self._consumer_from_type(token.wxf_type)", 
                    Item[
                    "  76.          return consumer(token, tokens, **kwargs)",
                     Background -> LightYellow], "  77.  ", 
                    "  78.      def _consumer_from_type(self, wxf_type):", 
                    "  79.          try:", 
                    "  80.              func = self._mapping[wxf_type]", 
                    "  81.          except KeyError:", 
                    "  82.              raise WolframParserException("}, 
                    Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<ExternalEvaluateConsumer globals=4 objects=4>"}, {
                    "tokens", 
                    "<generator object WXFParser.tokens at 0x1755b7580>"}, {
                    "kwargs", "{}"}, {"token", 
                    "WXFToken<b'f', data=None, len=2>"}, {
                    "consumer", 
                    "<bound method ExternalEvaluateConsumer.consume_function \
of <ExternalEvaluateConsumer globals=4 objects=4>>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless", Evaluator -> Automatic, 
                    Method -> "Preemptive"], "\" in \"", 
                    "\"consume_function\""}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless", Evaluator -> Automatic, 
                    Method -> "Preemptive"], "\" in \"", 
                    "\"consume_function\""}, "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{"\" 319.  \""}, {
                    "\" 320.      def __init__(self, routes_registry={}, \
objects_registry={}, globals_registry={}):\""}, {
                    "\" 321.          self.objects_registry = \
registry(objects_registry)\""}, {
                    "\" 322.          self.globals_registry = \
registry(globals_registry)\""}, {
                    "\" 323.          self.routes_registry = \
registry(self.builtin_routes, **routes_registry)\""}, {"\" 324.  \""}, {
                    "\" 325.      def consume_function(self, *args, \
**kwargs):\""}, {
                    ItemBox[
                    "\" 326.          expr = super().consume_function(*args, \
**kwargs)\"", Background -> RGBColor[1, 1, 0.85], StripOnInput -> False]}, {
                    "\" 327.  \""}, {
                    "\" 328.          if check_wl_symbol(expr, \
self.hook_symbol):\""}, {
                    "\" 329.              assert len(expr.args) == 2\""}, {
                    "\" 330.              return \
self.dispatch_wl_object(*expr.args)\""}, {"\" 331.  \""}, {
                    "\" 332.          return expr\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\"self\"", 
                    "\"<ExternalEvaluateConsumer globals=4 objects=4>\""}, {
                    "\"args\"", 
                    "\"(<wolframclient.deserializers.wxf.wxfparser.WXFToken \
object at 0x1756444f0>, <generator object WXFParser.tokens at \
0x1755b7580>)\""}, {"\"kwargs\"", "\"{}\""}, {"\"__class__\"", 
                    "\"<class \
'wolframclient.utils.externalevaluate.ExternalEvaluateConsumer'>\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Null}}, 
                    "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<ExternalEvaluateConsumer globals=4 objects=4>"}, {
                    "args", 
                    "(<wolframclient.deserializers.wxf.wxfparser.WXFToken \
object at 0x1756444f0>, <generator object WXFParser.tokens at \
0x1755b7580>)"}, {"kwargs", "{}"}, {"__class__", 
                    "<class \
'wolframclient.utils.externalevaluate.ExternalEvaluateConsumer'>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless"], " in ", 
                    "consume_function"}], 
                    Column[{
                    
                    Column[{" 319.  ", 
                    " 320.      def __init__(self, routes_registry={}, \
objects_registry={}, globals_registry={}):", 
                    " 321.          self.objects_registry = \
registry(objects_registry)", 
                    " 322.          self.globals_registry = \
registry(globals_registry)", 
                    " 323.          self.routes_registry = \
registry(self.builtin_routes, **routes_registry)", " 324.  ", 
                    " 325.      def consume_function(self, *args, **kwargs):", 
                    Item[
                    " 326.          expr = super().consume_function(*args, \
**kwargs)", Background -> LightYellow], " 327.  ", 
                    " 328.          if check_wl_symbol(expr, \
self.hook_symbol):", " 329.              assert len(expr.args) == 2", 
                    " 330.              return \
self.dispatch_wl_object(*expr.args)", " 331.  ", 
                    " 332.          return expr"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<ExternalEvaluateConsumer globals=4 objects=4>"}, {
                    "args", 
                    "(<wolframclient.deserializers.wxf.wxfparser.WXFToken \
object at 0x1756444f0>, <generator object WXFParser.tokens at \
0x1755b7580>)"}, {"kwargs", "{}"}, {"__class__", 
                    "<class \
'wolframclient.utils.externalevaluate.ExternalEvaluateConsumer'>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"consume_function\""}, 
                    "RowDefault"]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"consume_function\""}, 
                    "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{
                    "\"  94.          Return a :class:`list` if the head is \
symbol `List`, otherwise returns the result of \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`\""}, {"\"  95.          applied to the head and arguments.\""}, {
                    "\"  96.  \""}, {
                    "\"  97.          Usually custom parsing rules target \
Functions, but not List. To do so, it is recommended to override\""}, {
                    "\"  98.          \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`.\""}, {"\"  99.          \\\"\\\"\\\"\""}, {
                    "\" 100.          head = self.next_expression(tokens, \
**kwargs)\""}, {
                    ItemBox["\" 101.          args = tuple(\"", Background -> 
                    RGBColor[1, 1, 0.85], StripOnInput -> False]}, {
                    "\" 102.              self.next_expression(tokens, \
**kwargs) for i in range(current_token.length)\""}, {
                    "\" 103.          )\""}, {
                    "\" 104.          if head == self._LIST:\""}, {
                    "\" 105.              return args\""}, {
                    "\" 106.          else:\""}, {
                    "\" 107.              return self.build_function(head, \
args, **kwargs)\""}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\"self\"", 
                    "\"<ExternalEvaluateConsumer globals=4 objects=4>\""}, {
                    "\"current_token\"", 
                    "\"WXFToken<b'f', data=None, len=2>\""}, {"\"tokens\"", 
                    "\"<generator object WXFParser.tokens at \
0x1755b7580>\""}, {"\"kwargs\"", "\"{}\""}, {"\"head\"", "\"List\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Null}}, 
                    "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<ExternalEvaluateConsumer globals=4 objects=4>"}, {
                    "current_token", "WXFToken<b'f', data=None, len=2>"}, {
                    "tokens", 
                    "<generator object WXFParser.tokens at 0x1755b7580>"}, {
                    "kwargs", "{}"}, {"head", "List"}}, Background -> {
                    Null, {LightGray}}, Alignment -> Left, Frame -> 
                    LightGray]}, False]], DynamicModuleValues -> Automatic], 
                    Setting[#, {0}]& ]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless"], " in ", "consume_function"}], 
                    Column[{
                    
                    Column[{
                    "  94.          Return a :class:`list` if the head is \
symbol `List`, otherwise returns the result of \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`", "  95.          applied to the head and arguments.", "  96.  ", 
                    "  97.          Usually custom parsing rules target \
Functions, but not List. To do so, it is recommended to override", 
                    "  98.          \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`.", "  99.          \"\"\"", 
                    " 100.          head = self.next_expression(tokens, \
**kwargs)", 
                    Item[" 101.          args = tuple(", Background -> 
                    LightYellow], 
                    " 102.              self.next_expression(tokens, \
**kwargs) for i in range(current_token.length)", " 103.          )", 
                    " 104.          if head == self._LIST:", 
                    " 105.              return args", " 106.          else:", 
                    " 107.              return self.build_function(head, \
args, **kwargs)"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<ExternalEvaluateConsumer globals=4 objects=4>"}, {
                    "current_token", "WXFToken<b'f', data=None, len=2>"}, {
                    "tokens", 
                    "<generator object WXFParser.tokens at 0x1755b7580>"}, {
                    "kwargs", "{}"}, {"head", "List"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"<genexpr>\""}, 
                    "RowDefault"]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"<genexpr>\""}, 
                    "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{
                    "\"  95.          applied to the head and arguments.\""}, \
{"\"  96.  \""}, {
                    "\"  97.          Usually custom parsing rules target \
Functions, but not List. To do so, it is recommended to override\""}, {
                    "\"  98.          \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`.\""}, {"\"  99.          \\\"\\\"\\\"\""}, {
                    "\" 100.          head = self.next_expression(tokens, \
**kwargs)\""}, {"\" 101.          args = tuple(\""}, {
                    ItemBox[
                    "\" 102.              self.next_expression(tokens, \
**kwargs) for i in range(current_token.length)\"", Background -> 
                    RGBColor[1, 1, 0.85], StripOnInput -> False]}, {
                    "\" 103.          )\""}, {
                    "\" 104.          if head == self._LIST:\""}, {
                    "\" 105.              return args\""}, {
                    "\" 106.          else:\""}, {
                    "\" 107.              return self.build_function(head, \
args, **kwargs)\""}, {"\" 108.  \""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\".0\"", 
                    "\"<range_iterator object at 0x1756312c0>\""}, {
                    "\"i\"", "\"0\""}, {"\"kwargs\"", "\"{}\""}, {
                    "\"self\"", 
                    "\"<ExternalEvaluateConsumer globals=4 objects=4>\""}, {
                    "\"tokens\"", 
                    "\"<generator object WXFParser.tokens at \
0x1755b7580>\""}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Null}}, 
                    "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {".0", 
                    "<range_iterator object at 0x1756312c0>"}, {"i", "0"}, {
                    "kwargs", "{}"}, {"self", 
                    "<ExternalEvaluateConsumer globals=4 objects=4>"}, {
                    "tokens", 
                    "<generator object WXFParser.tokens at 0x1755b7580>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless"], " in ", "<genexpr>"}], 
                    Column[{
                    
                    Column[{
                    "  95.          applied to the head and arguments.", 
                    "  96.  ", 
                    "  97.          Usually custom parsing rules target \
Functions, but not List. To do so, it is recommended to override", 
                    "  98.          \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`.", "  99.          \"\"\"", 
                    " 100.          head = self.next_expression(tokens, \
**kwargs)", " 101.          args = tuple(", 
                    Item[
                    " 102.              self.next_expression(tokens, \
**kwargs) for i in range(current_token.length)", Background -> LightYellow], 
                    " 103.          )", 
                    " 104.          if head == self._LIST:", 
                    " 105.              return args", " 106.          else:", 
                    " 107.              return self.build_function(head, \
args, **kwargs)", " 108.  "}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {".0", 
                    "<range_iterator object at 0x1756312c0>"}, {"i", "0"}, {
                    "kwargs", "{}"}, {"self", 
                    "<ExternalEvaluateConsumer globals=4 objects=4>"}, {
                    "tokens", 
                    "<generator object WXFParser.tokens at 0x1755b7580>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"next_expression\""}, 
                    "RowDefault"]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"next_expression\""}, 
                    "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{
                    "\"  69.          constants.WXF_CONSTANTS.RuleDelayed: \\\
\"consume_rule_delayed\\\",\""}, {"\"  70.      }\""}, {"\"  71.  \""}, {
                    "\"  72.      def next_expression(self, tokens, \
**kwargs):\""}, {
                    "\"  73.          \\\"\\\"\\\"Deserialize the next \
expression starting at the next token yield by `tokens`.\\\"\\\"\\\"\""}, {
                    "\"  74.          token = next(tokens)\""}, {
                    "\"  75.          consumer = \
self._consumer_from_type(token.wxf_type)\""}, {
                    ItemBox[
                    "\"  76.          return consumer(token, tokens, \
**kwargs)\"", Background -> RGBColor[1, 1, 0.85], StripOnInput -> False]}, {
                    "\"  77.  \""}, {
                    "\"  78.      def _consumer_from_type(self, \
wxf_type):\""}, {"\"  79.          try:\""}, {
                    "\"  80.              func = self._mapping[wxf_type]\""}, \
{"\"  81.          except KeyError:\""}, {
                    "\"  82.              raise WolframParserException(\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\"self\"", 
                    "\"<ExternalEvaluateConsumer globals=4 objects=4>\""}, {
                    "\"tokens\"", 
                    "\"<generator object WXFParser.tokens at \
0x1755b7580>\""}, {"\"kwargs\"", "\"{}\""}, {"\"token\"", 
                    "\"WXFToken<b'f', data=None, len=2>\""}, {"\"consumer\"", 
                    "\"<bound method \
ExternalEvaluateConsumer.consume_function of <ExternalEvaluateConsumer \
globals=4 objects=4>>\""}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {"Columns" -> {{
                    Null}}, "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<ExternalEvaluateConsumer globals=4 objects=4>"}, {
                    "tokens", 
                    "<generator object WXFParser.tokens at 0x1755b7580>"}, {
                    "kwargs", "{}"}, {"token", 
                    "WXFToken<b'f', data=None, len=2>"}, {
                    "consumer", 
                    "<bound method ExternalEvaluateConsumer.consume_function \
of <ExternalEvaluateConsumer globals=4 objects=4>>"}}, Background -> {
                    Null, {LightGray}}, Alignment -> Left, Frame -> 
                    LightGray]}, False]], DynamicModuleValues -> Automatic], 
                    Setting[#, {0}]& ]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless"], " in ", "next_expression"}], 
                    Column[{
                    
                    Column[{
                    "  69.          constants.WXF_CONSTANTS.RuleDelayed: \
\"consume_rule_delayed\",", "  70.      }", "  71.  ", 
                    "  72.      def next_expression(self, tokens, **kwargs):",
                     "  73.          \"\"\"Deserialize the next expression \
starting at the next token yield by `tokens`.\"\"\"", 
                    "  74.          token = next(tokens)", 
                    "  75.          consumer = \
self._consumer_from_type(token.wxf_type)", 
                    Item[
                    "  76.          return consumer(token, tokens, **kwargs)",
                     Background -> LightYellow], "  77.  ", 
                    "  78.      def _consumer_from_type(self, wxf_type):", 
                    "  79.          try:", 
                    "  80.              func = self._mapping[wxf_type]", 
                    "  81.          except KeyError:", 
                    "  82.              raise WolframParserException("}, 
                    Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<ExternalEvaluateConsumer globals=4 objects=4>"}, {
                    "tokens", 
                    "<generator object WXFParser.tokens at 0x1755b7580>"}, {
                    "kwargs", "{}"}, {"token", 
                    "WXFToken<b'f', data=None, len=2>"}, {
                    "consumer", 
                    "<bound method ExternalEvaluateConsumer.consume_function \
of <ExternalEvaluateConsumer globals=4 objects=4>>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless", Evaluator -> Automatic, 
                    Method -> "Preemptive"], "\" in \"", 
                    "\"consume_function\""}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless", Evaluator -> Automatic, 
                    Method -> "Preemptive"], "\" in \"", 
                    "\"consume_function\""}, "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{
                    "\" 323.          self.routes_registry = \
registry(self.builtin_routes, **routes_registry)\""}, {"\" 324.  \""}, {
                    "\" 325.      def consume_function(self, *args, \
**kwargs):\""}, {
                    "\" 326.          expr = super().consume_function(*args, \
**kwargs)\""}, {"\" 327.  \""}, {
                    "\" 328.          if check_wl_symbol(expr, \
self.hook_symbol):\""}, {
                    "\" 329.              assert len(expr.args) == 2\""}, {
                    ItemBox[
                    "\" 330.              return \
self.dispatch_wl_object(*expr.args)\"", Background -> RGBColor[1, 1, 0.85], 
                    StripOnInput -> False]}, {"\" 331.  \""}, {
                    "\" 332.          return expr\""}, {"\" 333.  \""}, {
                    "\" 334.      def dispatch_wl_object(self, route, \
args):\""}, {
                    "\" 335.          return \
self.routes_registry[route](self, *args)\""}, {"\" 336.  \""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\"self\"", 
                    "\"<ExternalEvaluateConsumer globals=4 objects=4>\""}, {
                    "\"args\"", 
                    "\"(<wolframclient.deserializers.wxf.wxfparser.WXFToken \
object at 0x175644950>, <generator object WXFParser.tokens at \
0x1755b7580>)\""}, {"\"kwargs\"", "\"{}\""}, {"\"expr\"", 
                    "\"ExternalEvaluate`Private`ExternalEvaluateCommand['Call'\
, (<function edge_col at 0x1756168e0>, None, \
hypernetx.classes.Hypergraph.Hypergraph)]\""}, {"\"__class__\"", 
                    "\"<class \
'wolframclient.utils.externalevaluate.ExternalEvaluateConsumer'>\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Null}}, 
                    "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<ExternalEvaluateConsumer globals=4 objects=4>"}, {
                    "args", 
                    "(<wolframclient.deserializers.wxf.wxfparser.WXFToken \
object at 0x175644950>, <generator object WXFParser.tokens at \
0x1755b7580>)"}, {"kwargs", "{}"}, {"expr", 
                    "ExternalEvaluate`Private`ExternalEvaluateCommand['Call', \
(<function edge_col at 0x1756168e0>, None, \
hypernetx.classes.Hypergraph.Hypergraph)]"}, {"__class__", 
                    "<class \
'wolframclient.utils.externalevaluate.ExternalEvaluateConsumer'>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless"], " in ", 
                    "consume_function"}], 
                    Column[{
                    
                    Column[{
                    " 323.          self.routes_registry = \
registry(self.builtin_routes, **routes_registry)", " 324.  ", 
                    " 325.      def consume_function(self, *args, **kwargs):",
                     " 326.          expr = super().consume_function(*args, \
**kwargs)", " 327.  ", 
                    " 328.          if check_wl_symbol(expr, \
self.hook_symbol):", " 329.              assert len(expr.args) == 2", 
                    Item[
                    " 330.              return \
self.dispatch_wl_object(*expr.args)", Background -> LightYellow], " 331.  ", 
                    " 332.          return expr", " 333.  ", 
                    " 334.      def dispatch_wl_object(self, route, args):", 
                    " 335.          return self.routes_registry[route](self, \
*args)", " 336.  "}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<ExternalEvaluateConsumer globals=4 objects=4>"}, {
                    "args", 
                    "(<wolframclient.deserializers.wxf.wxfparser.WXFToken \
object at 0x175644950>, <generator object WXFParser.tokens at \
0x1755b7580>)"}, {"kwargs", "{}"}, {"expr", 
                    "ExternalEvaluate`Private`ExternalEvaluateCommand['Call', \
(<function edge_col at 0x1756168e0>, None, \
hypernetx.classes.Hypergraph.Hypergraph)]"}, {
                    "__class__", 
                    "<class \
'wolframclient.utils.externalevaluate.ExternalEvaluateConsumer'>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless", Evaluator -> Automatic, 
                    Method -> "Preemptive"], "\" in \"", 
                    "\"dispatch_wl_object\""}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless", Evaluator -> Automatic, 
                    Method -> "Preemptive"], "\" in \"", 
                    "\"dispatch_wl_object\""}, "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{
                    "\" 328.          if check_wl_symbol(expr, \
self.hook_symbol):\""}, {
                    "\" 329.              assert len(expr.args) == 2\""}, {
                    "\" 330.              return \
self.dispatch_wl_object(*expr.args)\""}, {"\" 331.  \""}, {
                    "\" 332.          return expr\""}, {"\" 333.  \""}, {
                    "\" 334.      def dispatch_wl_object(self, route, \
args):\""}, {
                    ItemBox[
                    "\" 335.          return \
self.routes_registry[route](self, *args)\"", Background -> 
                    RGBColor[1, 1, 0.85], StripOnInput -> False]}, {
                    "\" 336.  \""}, {"\" 337.      def __repr__(self):\""}, {
                    "\" 338.          return \\\"<{} globals={} objects={}>\\\
\".format(\""}, {
                    "\" 339.              self.__class__.__name__, \
len(self.globals_registry), len(self.objects_registry)\""}, {
                    "\" 340.          )\""}, {"\" 341.  \""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\"self\"", 
                    "\"<ExternalEvaluateConsumer globals=4 objects=4>\""}, {
                    "\"route\"", "\"Call\""}, {"\"args\"", 
                    "\"(<function edge_col at 0x1756168e0>, None, \
hypernetx.classes.Hypergraph.Hypergraph)\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Null}}, "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<ExternalEvaluateConsumer globals=4 objects=4>"}, {
                    "route", "Call"}, {"args", 
                    "(<function edge_col at 0x1756168e0>, None, \
hypernetx.classes.Hypergraph.Hypergraph)"}}, Background -> {
                    Null, {LightGray}}, Alignment -> Left, Frame -> 
                    LightGray]}, False]], DynamicModuleValues -> Automatic], 
                    Setting[#, {0}]& ]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless"], " in ", 
                    "dispatch_wl_object"}], 
                    Column[{
                    
                    Column[{
                    " 328.          if check_wl_symbol(expr, \
self.hook_symbol):", " 329.              assert len(expr.args) == 2", 
                    " 330.              return \
self.dispatch_wl_object(*expr.args)", " 331.  ", " 332.          return expr",
                     " 333.  ", 
                    " 334.      def dispatch_wl_object(self, route, args):", 
                    Item[
                    " 335.          return self.routes_registry[route](self, \
*args)", Background -> LightYellow], " 336.  ", 
                    " 337.      def __repr__(self):", 
                    " 338.          return \"<{} globals={} \
objects={}>\".format(", 
                    " 339.              self.__class__.__name__, \
len(self.globals_registry), len(self.objects_registry)", " 340.          )", 
                    " 341.  "}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<ExternalEvaluateConsumer globals=4 objects=4>"}, {
                    "route", "Call"}, {"args", 
                    "(<function edge_col at 0x1756168e0>, None, \
hypernetx.classes.Hypergraph.Hypergraph)"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = True}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless", Evaluator -> Automatic, 
                    Method -> "Preemptive"], "\" in \"", "\"Call\""}, 
                    "RowDefault"]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless", Evaluator -> Automatic, 
                    Method -> "Preemptive"], "\" in \"", "\"Call\""}, 
                    "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{"\" 245.  \""}, {"\" 246.  \""}, {
                    "\" 247.  @routes.register_function\""}, {
                    "\" 248.  def Call(consumer, result, *args):\""}, {
                    "\" 249.  \""}, {
                    "\" 250.      pos, kwargs = unpack_optionals(args)\""}, {
                    "\" 251.  \""}, {
                    ItemBox[
                    "\" 252.      return result(*pos, **kwargs)\"", 
                    Background -> RGBColor[1, 1, 0.85], StripOnInput -> 
                    False]}, {"\" 253.  \""}, {"\" 254.  \""}, {
                    "\" 255.  @routes.register_function\""}, {
                    "\" 256.  def MethodCall(consumer, result, names, *args):\
\""}, {"\" 257.      return Call(consumer, GetAttribute(consumer, result, \
names), *args)\""}, {"\" 258.  \""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\"consumer\"", 
                    "\"<ExternalEvaluateConsumer globals=4 objects=4>\""}, {
                    "\"result\"", "\"<function edge_col at 0x1756168e0>\""}, {
                    "\"args\"", 
                    "\"(None, hypernetx.classes.Hypergraph.Hypergraph,)\""}, {
                    "\"pos\"", 
                    "\"[None, hypernetx.classes.Hypergraph.Hypergraph]\""}, {
                    "\"kwargs\"", "\"{}\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Null}}, "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"consumer", 
                    "<ExternalEvaluateConsumer globals=4 objects=4>"}, {
                    "result", "<function edge_col at 0x1756168e0>"}, {
                    "args", 
                    "(None, hypernetx.classes.Hypergraph.Hypergraph,)"}, {
                    "pos", "[None, \
hypernetx.classes.Hypergraph.Hypergraph]"}, {"kwargs", "{}"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless"], " in ", "Call"}], 
                    Column[{
                    
                    Column[{" 245.  ", " 246.  ", 
                    " 247.  @routes.register_function", 
                    " 248.  def Call(consumer, result, *args):", " 249.  ", 
                    " 250.      pos, kwargs = unpack_optionals(args)", 
                    " 251.  ", 
                    Item[
                    " 252.      return result(*pos, **kwargs)", Background -> 
                    LightYellow], " 253.  ", " 254.  ", 
                    " 255.  @routes.register_function", 
                    " 256.  def MethodCall(consumer, result, names, *args):", 
                    " 257.      return Call(consumer, GetAttribute(consumer, \
result, names), *args)", " 258.  "}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    Grid[{{"Key", "Value"}, {"consumer", 
                    "<ExternalEvaluateConsumer globals=4 objects=4>"}, {
                    "result", "<function edge_col at 0x1756168e0>"}, {
                    "args", 
                    "(None, hypernetx.classes.Hypergraph.Hypergraph,)"}, {
                    "pos", "[None, \
hypernetx.classes.Hypergraph.Hypergraph]"}, {"kwargs", "{}"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, True]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = True}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Users/arnoudb/hypernetx/Python/Hypergraph/Hypergraph.\
py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Users/arnoudb/hypernetx/Python/Hypergraph/Hypergraph.\
py"], 
                    SystemOpen[
                    "/Users/arnoudb/hypernetx/Python/Hypergraph/Hypergraph.\
py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"edge_col\""}, 
                    "RowDefault"]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Users/arnoudb/hypernetx/Python/Hypergraph/Hypergraph.\
py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Users/arnoudb/hypernetx/Python/Hypergraph/Hypergraph.\
py"], 
                    SystemOpen[
                    "/Users/arnoudb/hypernetx/Python/Hypergraph/Hypergraph.\
py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"edge_col\""}, 
                    "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{"\"  57.  def dual(hg):\""}, {
                    "\"  58.      return hg.dual()\""}, {"\"  59.  \""}, {
                    "\"  60.  def edge_adjacency_matrix(hg):\""}, {
                    "\"  61.      return hg.edge_adjacency_matrix().toarray()\
\""}, {"\"  62.  \""}, {"\"  63.  def edge_col(hg):\""}, {
                    ItemBox[
                    "\"  64.      return hg.edge_col()\"", Background -> 
                    RGBColor[1, 1, 0.85], StripOnInput -> False]}, {
                    "\"  65.  \""}, {"\"  66.  def edge_diameter(hg):\""}, {
                    "\"  67.      return hg.edge_diameter()\""}, {
                    "\"  68.  \""}, {"\"  69.  def edge_distance(hg):\""}, {
                    "\"  70.      return hg.edge_distance()\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\"hg\"", 
                    "\"None, <class \
'hypernetx.classes.Hypergraph.Hypergraph'>\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Null}}, "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"hg", 
                    "None, <class \
'hypernetx.classes.Hypergraph.Hypergraph'>"}}, Background -> {
                    Null, {LightGray}}, Alignment -> Left, Frame -> 
                    LightGray]}, False]], DynamicModuleValues -> Automatic], 
                    Setting[#, {0}]& ]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Users/arnoudb/hypernetx/Python/Hypergraph/Hypergraph.\
py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Users/arnoudb/hypernetx/Python/Hypergraph/Hypergraph.\
py"], 
                    SystemOpen[
                    "/Users/arnoudb/hypernetx/Python/Hypergraph/Hypergraph.\
py"]], Appearance -> "Frameless"], " in ", "edge_col"}], 
                    Column[{
                    
                    Column[{"  57.  def dual(hg):", 
                    "  58.      return hg.dual()", "  59.  ", 
                    "  60.  def edge_adjacency_matrix(hg):", 
                    "  61.      return hg.edge_adjacency_matrix().toarray()", 
                    "  62.  ", "  63.  def edge_col(hg):", 
                    Item[
                    "  64.      return hg.edge_col()", Background -> 
                    LightYellow], "  65.  ", "  66.  def edge_diameter(hg):", 
                    "  67.      return hg.edge_diameter()", "  68.  ", 
                    "  69.  def edge_distance(hg):", 
                    "  70.      return hg.edge_distance()"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"hg", 
                    "None, <class \
'hypernetx.classes.Hypergraph.Hypergraph'>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, True]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], FontFamily -> "Courier", StripOnInput -> 
                    False], ImageMargins -> 0]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{"TypeError", " ", "'str' object is not callable"}], 
                    Style[
                    Column[{
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/language/\
decorators.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/language/\
decorators.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/language/\
decorators.py"]], Appearance -> "Frameless"], " in ", "safe_wl_execute"}], 
                    Column[{
                    
                    Column[{
                    "  14.      \"wl\": b'Failure[\"PythonFailure\", \
<|\"MessageTemplate\" -> \"Unexpected error occurred.\"|>]',", "  15.  }", 
                    "  16.  ", "  17.  ", 
                    "  18.  def safe_wl_execute(function, args=(), opts={}, \
export_opts={}, exception_class=None):", "  19.  ", "  20.      try:", 
                    Item[
                    "  21.          return export(function(*args, **opts), \
**export_opts)", Background -> LightYellow], 
                    "  22.      except Exception as export_exception:", 
                    "  23.          try:", "  24.              try:", 
                    "  25.  ", 
                    "  26.                  # The user can provide an \
exception class, and it can be broken, in which case we are running another", 
                    "  27.                  # try / except to return errors \
that are happening during class serialization"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "function", "<function handle_message at 0x103b78fe0>"}, {
                    "args", "(<zmq.Socket(zmq.PAIR) at 0x103b54c20>,)"}, {
                    "opts", 
                    "{'consumer': <ExternalEvaluateConsumer globals=4 \
objects=4>}"}, {"export_opts", 
                    "{'object_processor': <function \
start_zmq_loop.<locals>.<lambda> at 0x102e009a0>, 'target_format': 'wxf'}"}, {
                    "exception_class", "None"}, {
                    "export_exception", "'str' object is not callable"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless"], " in ", 
                    "handle_message"}], 
                    Column[{
                    
                    Column[{
                    " 350.          self.socket.send(zmq.Frame(bytes))", 
                    " 351.  ", " 352.      def send_side_effect(self, expr):",
                     " 353.          \
self.write(export(self.keep_listening(expr), target_format=\"wxf\"))", 
                    " 354.  ", " 355.  ", 
                    " 356.  def handle_message(socket, consumer):", 
                    Item[
                    " 357.      result = \
binary_deserialize(socket.recv(copy=False).buffer, consumer=consumer)", 
                    Background -> LightYellow], " 358.  ", 
                    " 359.      sys.stdout.flush()", 
                    " 360.      return result", " 361.  ", " 362.  ", 
                    " 363.  def start_zmq_instance(port=None, \
write_to_stdout=True, **opts):"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "socket", "<zmq.Socket(zmq.PAIR) at 0x103b54c20>"}, {
                    "consumer", 
                    "<ExternalEvaluateConsumer globals=4 objects=4>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
__init__.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
__init__.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
__init__.py"]], Appearance -> "Frameless"], " in ", "binary_deserialize"}], 
                    Column[{
                    
                    Column[{"  33.  ", "  34.      \"\"\"", 
                    "  35.      parser = WXFParser(wxf_input)", 
                    "  36.      if consumer is None:", 
                    "  37.          consumer = WXFConsumerNumpy()", "  38.  ",
                     "  39.      try:", 
                    Item[
                    "  40.          o = \
consumer.next_expression(parser.tokens(), **kwargs)", Background -> 
                    LightYellow], "  41.      except StopIteration:", 
                    "  42.          raise WolframParserException(", 
                    "  43.              \"Input data does not represent a \
valid expression in WXF format. Expecting more input data.\"", 
                    "  44.          )", 
                    "  45.      if not \
parser.context.is_valid_final_state():", 
                    "  46.          raise WolframParserException("}, 
                    Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "wxf_input", 
                    "8:f\.02s0ExternalEvaluate`Private`\
ExternalEvaluateCommandS\n\
ReturnTypef\.02s\.04Listf\.02s0ExternalEvaluate`Private`\
ExternalEvaluateCommandS\.04Callf\.02s\.04Listf\.02s0ExternalEvaluate`Private`\
ExternalEvaluateCommandS\.05Fetchf\.01\.01\.01\.01\.01\.01\.01\.01s\.04\
ListLhau\.01\.01\.01\.01\.01\.01\.01\.01\.00\.00\.00f\.02s0ExternalEvaluate`\
Private`ExternalEvaluateCommandS\.05Fetchf\.01\.01\.01\.01\.01\.01\.01\.01s\
\.04ListLau\.01\.01\.01\.01\.01\.01\.01\.01\.00\.00\.00S\nExpression"}, {
                    "consumer", 
                    "<ExternalEvaluateConsumer globals=4 objects=4>"}, {
                    "kwargs", "{}"}, {
                    "parser", 
                    "<wolframclient.deserializers.wxf.wxfparser.WXFParser \
object at 0x174bb3f10>"}}, Background -> {Null, {LightGray}}, Alignment -> 
                    Left, Frame -> LightGray]}]}]}, False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless"], " in ", "next_expression"}], 
                    Column[{
                    
                    Column[{
                    "  69.          constants.WXF_CONSTANTS.RuleDelayed: \
\"consume_rule_delayed\",", "  70.      }", "  71.  ", 
                    "  72.      def next_expression(self, tokens, **kwargs):",
                     "  73.          \"\"\"Deserialize the next expression \
starting at the next token yield by `tokens`.\"\"\"", 
                    "  74.          token = next(tokens)", 
                    "  75.          consumer = \
self._consumer_from_type(token.wxf_type)", 
                    Item[
                    "  76.          return consumer(token, tokens, **kwargs)",
                     Background -> LightYellow], "  77.  ", 
                    "  78.      def _consumer_from_type(self, wxf_type):", 
                    "  79.          try:", 
                    "  80.              func = self._mapping[wxf_type]", 
                    "  81.          except KeyError:", 
                    "  82.              raise WolframParserException("}, 
                    Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "self", 
                    "<ExternalEvaluateConsumer globals=4 objects=4>"}, {
                    "tokens", 
                    "<generator object WXFParser.tokens at 0x1755b7580>"}, {
                    "kwargs", "{}"}, {
                    "token", "WXFToken<b'f', data=None, len=2>"}, {
                    "consumer", 
                    "<bound method ExternalEvaluateConsumer.consume_function \
of <ExternalEvaluateConsumer globals=4 objects=4>>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless"], " in ", 
                    "consume_function"}], 
                    Column[{
                    
                    Column[{" 319.  ", 
                    " 320.      def __init__(self, routes_registry={}, \
objects_registry={}, globals_registry={}):", 
                    " 321.          self.objects_registry = \
registry(objects_registry)", 
                    " 322.          self.globals_registry = \
registry(globals_registry)", 
                    " 323.          self.routes_registry = \
registry(self.builtin_routes, **routes_registry)", " 324.  ", 
                    " 325.      def consume_function(self, *args, **kwargs):", 
                    Item[
                    " 326.          expr = super().consume_function(*args, \
**kwargs)", Background -> LightYellow], " 327.  ", 
                    " 328.          if check_wl_symbol(expr, \
self.hook_symbol):", " 329.              assert len(expr.args) == 2", 
                    
                    " 330.              return \
self.dispatch_wl_object(*expr.args)", " 331.  ", 
                    " 332.          return expr"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "self", 
                    "<ExternalEvaluateConsumer globals=4 objects=4>"}, {
                    "args", 
                    "(<wolframclient.deserializers.wxf.wxfparser.WXFToken \
object at 0x17563ba10>, <generator object WXFParser.tokens at \
0x1755b7580>)"}, {"kwargs", "{}"}, {
                    "__class__", 
                    "<class \
'wolframclient.utils.externalevaluate.ExternalEvaluateConsumer'>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless"], " in ", "consume_function"}], 
                    Column[{
                    
                    Column[{
                    "  94.          Return a :class:`list` if the head is \
symbol `List`, otherwise returns the result of \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`", "  95.          applied to the head and arguments.", "  96.  ", 
                    "  97.          Usually custom parsing rules target \
Functions, but not List. To do so, it is recommended to override", 
                    "  98.          \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`.", "  99.          \"\"\"", 
                    " 100.          head = self.next_expression(tokens, \
**kwargs)", 
                    Item[
                    " 101.          args = tuple(", Background -> 
                    LightYellow], 
                    " 102.              self.next_expression(tokens, \
**kwargs) for i in range(current_token.length)", " 103.          )", 
                    " 104.          if head == self._LIST:", 
                    " 105.              return args", " 106.          else:", 
                    " 107.              return self.build_function(head, \
args, **kwargs)"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "self", 
                    "<ExternalEvaluateConsumer globals=4 objects=4>"}, {
                    "current_token", "WXFToken<b'f', data=None, len=2>"}, {
                    "tokens", 
                    "<generator object WXFParser.tokens at 0x1755b7580>"}, {
                    "kwargs", "{}"}, {
                    "head", 
                    "ExternalEvaluate`Private`ExternalEvaluateCommand"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless"], " in ", "<genexpr>"}], 
                    Column[{
                    
                    Column[{
                    "  95.          applied to the head and arguments.", 
                    "  96.  ", 
                    "  97.          Usually custom parsing rules target \
Functions, but not List. To do so, it is recommended to override", 
                    "  98.          \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`.", "  99.          \"\"\"", 
                    " 100.          head = self.next_expression(tokens, \
**kwargs)", " 101.          args = tuple(", 
                    Item[
                    " 102.              self.next_expression(tokens, \
**kwargs) for i in range(current_token.length)", Background -> LightYellow], 
                    " 103.          )", 
                    " 104.          if head == self._LIST:", 
                    " 105.              return args", " 106.          else:", 
                    " 107.              return self.build_function(head, \
args, **kwargs)", " 108.  "}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    ".0", "<range_iterator object at 0x175631290>"}, {
                    "i", "1"}, {"kwargs", "{}"}, {
                    "self", 
                    "<ExternalEvaluateConsumer globals=4 objects=4>"}, {
                    "tokens", 
                    "<generator object WXFParser.tokens at 0x1755b7580>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless"], " in ", "next_expression"}], 
                    Column[{
                    
                    Column[{
                    "  69.          constants.WXF_CONSTANTS.RuleDelayed: \
\"consume_rule_delayed\",", "  70.      }", "  71.  ", 
                    "  72.      def next_expression(self, tokens, **kwargs):",
                     "  73.          \"\"\"Deserialize the next expression \
starting at the next token yield by `tokens`.\"\"\"", 
                    "  74.          token = next(tokens)", 
                    "  75.          consumer = \
self._consumer_from_type(token.wxf_type)", 
                    Item[
                    "  76.          return consumer(token, tokens, **kwargs)",
                     Background -> LightYellow], "  77.  ", 
                    "  78.      def _consumer_from_type(self, wxf_type):", 
                    "  79.          try:", 
                    "  80.              func = self._mapping[wxf_type]", 
                    "  81.          except KeyError:", 
                    "  82.              raise WolframParserException("}, 
                    Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "self", 
                    "<ExternalEvaluateConsumer globals=4 objects=4>"}, {
                    "tokens", 
                    "<generator object WXFParser.tokens at 0x1755b7580>"}, {
                    "kwargs", "{}"}, {
                    "token", "WXFToken<b'f', data=None, len=2>"}, {
                    "consumer", 
                    "<bound method ExternalEvaluateConsumer.consume_function \
of <ExternalEvaluateConsumer globals=4 objects=4>>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless"], " in ", 
                    "consume_function"}], 
                    Column[{
                    
                    Column[{" 319.  ", 
                    " 320.      def __init__(self, routes_registry={}, \
objects_registry={}, globals_registry={}):", 
                    " 321.          self.objects_registry = \
registry(objects_registry)", 
                    " 322.          self.globals_registry = \
registry(globals_registry)", 
                    " 323.          self.routes_registry = \
registry(self.builtin_routes, **routes_registry)", " 324.  ", 
                    " 325.      def consume_function(self, *args, **kwargs):", 
                    Item[
                    " 326.          expr = super().consume_function(*args, \
**kwargs)", Background -> LightYellow], " 327.  ", 
                    " 328.          if check_wl_symbol(expr, \
self.hook_symbol):", " 329.              assert len(expr.args) == 2", 
                    " 330.              return \
self.dispatch_wl_object(*expr.args)", " 331.  ", 
                    " 332.          return expr"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "self", 
                    "<ExternalEvaluateConsumer globals=4 objects=4>"}, {
                    "args", 
                    "(<wolframclient.deserializers.wxf.wxfparser.WXFToken \
object at 0x1756444f0>, <generator object WXFParser.tokens at \
0x1755b7580>)"}, {"kwargs", "{}"}, {
                    "__class__", 
                    "<class \
'wolframclient.utils.externalevaluate.ExternalEvaluateConsumer'>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless"], " in ", "consume_function"}], 
                    Column[{
                    
                    Column[{
                    "  94.          Return a :class:`list` if the head is \
symbol `List`, otherwise returns the result of \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`", "  95.          applied to the head and arguments.", "  96.  ", 
                    "  97.          Usually custom parsing rules target \
Functions, but not List. To do so, it is recommended to override", 
                    "  98.          \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`.", "  99.          \"\"\"", 
                    " 100.          head = self.next_expression(tokens, \
**kwargs)", 
                    Item[
                    " 101.          args = tuple(", Background -> 
                    LightYellow], 
                    " 102.              self.next_expression(tokens, \
**kwargs) for i in range(current_token.length)", " 103.          )", 
                    " 104.          if head == self._LIST:", 
                    " 105.              return args", " 106.          else:", 
                    " 107.              return self.build_function(head, \
args, **kwargs)"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "self", 
                    "<ExternalEvaluateConsumer globals=4 objects=4>"}, {
                    "current_token", "WXFToken<b'f', data=None, len=2>"}, {
                    "tokens", 
                    "<generator object WXFParser.tokens at 0x1755b7580>"}, {
                    "kwargs", "{}"}, {"head", "List"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless"], " in ", "<genexpr>"}], 
                    Column[{
                    
                    Column[{
                    "  95.          applied to the head and arguments.", 
                    "  96.  ", 
                    "  97.          Usually custom parsing rules target \
Functions, but not List. To do so, it is recommended to override", 
                    "  98.          \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`.", "  99.          \"\"\"", 
                    " 100.          head = self.next_expression(tokens, \
**kwargs)", " 101.          args = tuple(", 
                    Item[
                    " 102.              self.next_expression(tokens, \
**kwargs) for i in range(current_token.length)", Background -> LightYellow], 
                    " 103.          )", 
                    " 104.          if head == self._LIST:", 
                    " 105.              return args", " 106.          else:", 
                    " 107.              return self.build_function(head, \
args, **kwargs)", " 108.  "}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    ".0", "<range_iterator object at 0x1756312c0>"}, {
                    "i", "0"}, {"kwargs", "{}"}, {
                    "self", 
                    "<ExternalEvaluateConsumer globals=4 objects=4>"}, {
                    "tokens", 
                    "<generator object WXFParser.tokens at 0x1755b7580>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless"], " in ", "next_expression"}], 
                    Column[{
                    
                    Column[{
                    "  69.          constants.WXF_CONSTANTS.RuleDelayed: \
\"consume_rule_delayed\",", "  70.      }", "  71.  ", 
                    "  72.      def next_expression(self, tokens, **kwargs):",
                     "  73.          \"\"\"Deserialize the next expression \
starting at the next token yield by `tokens`.\"\"\"", 
                    "  74.          token = next(tokens)", 
                    "  75.          consumer = \
self._consumer_from_type(token.wxf_type)", 
                    Item[
                    "  76.          return consumer(token, tokens, **kwargs)",
                     Background -> LightYellow], "  77.  ", 
                    "  78.      def _consumer_from_type(self, wxf_type):", 
                    "  79.          try:", 
                    "  80.              func = self._mapping[wxf_type]", 
                    "  81.          except KeyError:", 
                    "  82.              raise WolframParserException("}, 
                    Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "self", 
                    "<ExternalEvaluateConsumer globals=4 objects=4>"}, {
                    "tokens", 
                    "<generator object WXFParser.tokens at 0x1755b7580>"}, {
                    "kwargs", "{}"}, {
                    "token", "WXFToken<b'f', data=None, len=2>"}, {
                    "consumer", 
                    "<bound method ExternalEvaluateConsumer.consume_function \
of <ExternalEvaluateConsumer globals=4 objects=4>>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless"], " in ", 
                    "consume_function"}], 
                    Column[{
                    
                    Column[{
                    " 323.          self.routes_registry = \
registry(self.builtin_routes, **routes_registry)", " 324.  ", 
                    " 325.      def consume_function(self, *args, **kwargs):",
                     " 326.          expr = super().consume_function(*args, \
**kwargs)", " 327.  ", 
                    " 328.          if check_wl_symbol(expr, \
self.hook_symbol):", " 329.              assert len(expr.args) == 2", 
                    Item[
                    " 330.              return \
self.dispatch_wl_object(*expr.args)", Background -> LightYellow], " 331.  ", 
                    " 332.          return expr", " 333.  ", 
                    " 334.      def dispatch_wl_object(self, route, args):", 
                    " 335.          return self.routes_registry[route](self, \
*args)", " 336.  "}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "self", 
                    "<ExternalEvaluateConsumer globals=4 objects=4>"}, {
                    "args", 
                    "(<wolframclient.deserializers.wxf.wxfparser.WXFToken \
object at 0x175644950>, <generator object WXFParser.tokens at \
0x1755b7580>)"}, {"kwargs", "{}"}, {
                    "expr", 
                    "ExternalEvaluate`Private`ExternalEvaluateCommand['Call', \
(<function edge_col at 0x1756168e0>, None, \
hypernetx.classes.Hypergraph.Hypergraph)]"}, {
                    "__class__", 
                    "<class \
'wolframclient.utils.externalevaluate.ExternalEvaluateConsumer'>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless"], " in ", 
                    "dispatch_wl_object"}], 
                    Column[{
                    
                    Column[{
                    " 328.          if check_wl_symbol(expr, \
self.hook_symbol):", " 329.              assert len(expr.args) == 2", 
                    " 330.              return \
self.dispatch_wl_object(*expr.args)", " 331.  ", " 332.          return expr",
                     " 333.  ", 
                    " 334.      def dispatch_wl_object(self, route, args):", 
                    Item[
                    " 335.          return self.routes_registry[route](self, \
*args)", Background -> LightYellow], " 336.  ", 
                    " 337.      def __repr__(self):", 
                    " 338.          return \"<{} globals={} \
objects={}>\".format(", 
                    " 339.              self.__class__.__name__, \
len(self.globals_registry), len(self.objects_registry)", " 340.          )", 
                    " 341.  "}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "self", 
                    "<ExternalEvaluateConsumer globals=4 objects=4>"}, {
                    "route", "Call"}, {
                    "args", 
                    "(<function edge_col at 0x1756168e0>, None, \
hypernetx.classes.Hypergraph.Hypergraph)"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless"], " in ", "Call"}], 
                    Column[{
                    
                    Column[{" 245.  ", " 246.  ", 
                    " 247.  @routes.register_function", 
                    " 248.  def Call(consumer, result, *args):", " 249.  ", 
                    " 250.      pos, kwargs = unpack_optionals(args)", 
                    " 251.  ", 
                    Item[
                    " 252.      return result(*pos, **kwargs)", Background -> 
                    LightYellow], " 253.  ", " 254.  ", 
                    " 255.  @routes.register_function", 
                    " 256.  def MethodCall(consumer, result, names, *args):", 
                    " 257.      return Call(consumer, GetAttribute(consumer, \
result, names), *args)", " 258.  "}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "consumer", 
                    "<ExternalEvaluateConsumer globals=4 objects=4>"}, {
                    "result", "<function edge_col at 0x1756168e0>"}, {
                    "args", 
                    "(None, hypernetx.classes.Hypergraph.Hypergraph,)"}, {
                    "pos", "[None, \
hypernetx.classes.Hypergraph.Hypergraph]"}, {"kwargs", "{}"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, True], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Users/arnoudb/hypernetx/Python/Hypergraph/Hypergraph.\
py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Users/arnoudb/hypernetx/Python/Hypergraph/Hypergraph.\
py"], 
                    SystemOpen[
                    "/Users/arnoudb/hypernetx/Python/Hypergraph/Hypergraph.\
py"]], Appearance -> "Frameless"], " in ", "edge_col"}], 
                    Column[{
                    
                    Column[{"  57.  def dual(hg):", 
                    "  58.      return hg.dual()", "  59.  ", 
                    "  60.  def edge_adjacency_matrix(hg):", 
                    "  61.      return hg.edge_adjacency_matrix().toarray()", 
                    "  62.  ", "  63.  def edge_col(hg):", 
                    Item[
                    "  64.      return hg.edge_col()", Background -> 
                    LightYellow], "  65.  ", "  66.  def edge_diameter(hg):", 
                    "  67.      return hg.edge_diameter()", "  68.  ", 
                    "  69.  def edge_distance(hg):", 
                    "  70.      return hg.edge_distance()"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "hg", "None, <class \
'hypernetx.classes.Hypergraph.Hypergraph'>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, True]}], FontFamily -> 
                    "Courier"]}, True]], DynamicModuleValues -> Automatic], 
                    Setting[#, {0}]& ], HoldForm], "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  Failure[
  "PythonError", <|
   "MessageTemplate" :> "'str' object is not callable", 
    "MessageParameters" :> <||>, "FailureCode" :> "TypeError", "Traceback" :> 
    OpenerView[{
       Row[{"TypeError", " ", "'str' object is not callable"}], 
       Style[
        Column[{
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/language/\
decorators.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/language/\
decorators.py"], 
                SystemOpen[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/language/\
decorators.py"]], Appearance -> "Frameless"], " in ", "safe_wl_execute"}], 
            Column[{
              
              Column[{"  14.      \"wl\": b'Failure[\"PythonFailure\", \
<|\"MessageTemplate\" -> \"Unexpected error occurred.\"|>]',", "  15.  }", 
                "  16.  ", "  17.  ", 
                "  18.  def safe_wl_execute(function, args=(), opts={}, \
export_opts={}, exception_class=None):", "  19.  ", "  20.      try:", 
                Item[
                "  21.          return export(function(*args, **opts), \
**export_opts)", Background -> LightYellow], 
                "  22.      except Exception as export_exception:", 
                "  23.          try:", "  24.              try:", "  25.  ", 
                "  26.                  # The user can provide an exception \
class, and it can be broken, in which case we are running another", 
                "  27.                  # try / except to return errors that \
are happening during class serialization"}, Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  "function", "<function handle_message at 0x103b78fe0>"}, {
                  "args", "(<zmq.Socket(zmq.PAIR) at 0x103b54c20>,)"}, {
                  "opts", 
                   "{'consumer': <ExternalEvaluateConsumer globals=4 \
objects=4>}"}, {"export_opts", 
                   "{'object_processor': <function \
start_zmq_loop.<locals>.<lambda> at 0x102e009a0>, 'target_format': 'wxf'}"}, {
                  "exception_class", "None"}, {
                  "export_exception", "'str' object is not callable"}}, 
                 Background -> {Null, {LightGray}}, Alignment -> Left, Frame -> 
                 LightGray]}]}]}, False], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                SystemOpen[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless"], " in ", 
              "handle_message"}], 
            Column[{
              
              Column[{" 350.          self.socket.send(zmq.Frame(bytes))", 
                " 351.  ", " 352.      def send_side_effect(self, expr):", 
                " 353.          self.write(export(self.keep_listening(expr), \
target_format=\"wxf\"))", " 354.  ", " 355.  ", 
                " 356.  def handle_message(socket, consumer):", 
                Item[
                " 357.      result = \
binary_deserialize(socket.recv(copy=False).buffer, consumer=consumer)", 
                 Background -> LightYellow], " 358.  ", 
                " 359.      sys.stdout.flush()", " 360.      return result", 
                " 361.  ", " 362.  ", 
                " 363.  def start_zmq_instance(port=None, \
write_to_stdout=True, **opts):"}, Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  "socket", "<zmq.Socket(zmq.PAIR) at 0x103b54c20>"}, {
                  "consumer", 
                   "<ExternalEvaluateConsumer globals=4 objects=4>"}}, 
                 Background -> {Null, {LightGray}}, Alignment -> Left, Frame -> 
                 LightGray]}]}]}, False], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
__init__.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
__init__.py"], 
                SystemOpen[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
__init__.py"]], Appearance -> "Frameless"], " in ", "binary_deserialize"}], 
            Column[{
              
              Column[{"  33.  ", "  34.      \"\"\"", 
                "  35.      parser = WXFParser(wxf_input)", 
                "  36.      if consumer is None:", 
                "  37.          consumer = WXFConsumerNumpy()", "  38.  ", 
                "  39.      try:", 
                Item[
                "  40.          o = consumer.next_expression(parser.tokens(), \
**kwargs)", Background -> LightYellow], "  41.      except StopIteration:", 
                "  42.          raise WolframParserException(", 
                "  43.              \"Input data does not represent a valid \
expression in WXF format. Expecting more input data.\"", "  44.          )", 
                "  45.      if not parser.context.is_valid_final_state():", 
                "  46.          raise WolframParserException("}, 
               Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  "wxf_input", 
                   "8:f\.02s0ExternalEvaluate`Private`\
ExternalEvaluateCommandS\n\
ReturnTypef\.02s\.04Listf\.02s0ExternalEvaluate`Private`\
ExternalEvaluateCommandS\.04Callf\.02s\.04Listf\.02s0ExternalEvaluate`Private`\
ExternalEvaluateCommandS\.05Fetchf\.01\.01\.01\.01\.01\.01\.01\.01s\.04\
ListLhau\.01\.01\.01\.01\.01\.01\.01\.01\.00\.00\.00f\.02s0ExternalEvaluate`\
Private`ExternalEvaluateCommandS\.05Fetchf\.01\.01\.01\.01\.01\.01\.01\.01s\
\.04ListLau\.01\.01\.01\.01\.01\.01\.01\.01\.00\.00\.00S\nExpression"}, {
                  "consumer", 
                   "<ExternalEvaluateConsumer globals=4 objects=4>"}, {
                  "kwargs", "{}"}, {
                  "parser", 
                   "<wolframclient.deserializers.wxf.wxfparser.WXFParser \
object at 0x174bb3f10>"}}, Background -> {Null, {LightGray}}, Alignment -> 
                 Left, Frame -> LightGray]}]}]}, False], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                SystemOpen[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless"], " in ", "next_expression"}], 
            Column[{
              
              Column[{"  69.          constants.WXF_CONSTANTS.RuleDelayed: \
\"consume_rule_delayed\",", "  70.      }", "  71.  ", 
                "  72.      def next_expression(self, tokens, **kwargs):", 
                "  73.          \"\"\"Deserialize the next expression \
starting at the next token yield by `tokens`.\"\"\"", 
                "  74.          token = next(tokens)", 
                "  75.          consumer = \
self._consumer_from_type(token.wxf_type)", 
                Item[
                "  76.          return consumer(token, tokens, **kwargs)", 
                 Background -> LightYellow], "  77.  ", 
                "  78.      def _consumer_from_type(self, wxf_type):", 
                "  79.          try:", 
                "  80.              func = self._mapping[wxf_type]", 
                "  81.          except KeyError:", 
                "  82.              raise WolframParserException("}, 
               Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  "self", "<ExternalEvaluateConsumer globals=4 objects=4>"}, {
                  "tokens", 
                   "<generator object WXFParser.tokens at 0x1755b7580>"}, {
                  "kwargs", "{}"}, {
                  "token", "WXFToken<b'f', data=None, len=2>"}, {
                  "consumer", 
                   "<bound method ExternalEvaluateConsumer.consume_function \
of <ExternalEvaluateConsumer globals=4 objects=4>>"}}, 
                 Background -> {Null, {LightGray}}, Alignment -> Left, Frame -> 
                 LightGray]}]}]}, False], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                SystemOpen[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless"], " in ", 
              "consume_function"}], 
            Column[{
              
              Column[{" 319.  ", 
                " 320.      def __init__(self, routes_registry={}, \
objects_registry={}, globals_registry={}):", 
                " 321.          self.objects_registry = \
registry(objects_registry)", 
                " 322.          self.globals_registry = \
registry(globals_registry)", 
                " 323.          self.routes_registry = \
registry(self.builtin_routes, **routes_registry)", " 324.  ", 
                " 325.      def consume_function(self, *args, **kwargs):", 
                Item[
                " 326.          expr = super().consume_function(*args, \
**kwargs)", Background -> LightYellow], " 327.  ", 
                " 328.          if check_wl_symbol(expr, self.hook_symbol):", 
                " 329.              assert len(expr.args) == 2", 
                " 330.              return \
self.dispatch_wl_object(*expr.args)", " 331.  ", 
                " 332.          return expr"}, Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                Grid[{{"Key", "Value"}, {
                  "self", "<ExternalEvaluateConsumer globals=4 objects=4>"}, {
                  "args", 
                   "(<wolframclient.deserializers.wxf.wxfparser.WXFToken \
object at 0x17563ba10>, <generator object WXFParser.tokens at \
0x1755b7580>)"}, {"kwargs", "{}"}, {
                  "__class__", 
                   "<class \
'wolframclient.utils.externalevaluate.ExternalEvaluateConsumer'>"}}, 
                 Background -> {Null, {LightGray}}, Alignment -> Left, Frame -> 
                 LightGray]}]}]}, False], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                SystemOpen[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless"], " in ", "consume_function"}], 
            Column[{
              
              Column[{"  94.          Return a :class:`list` if the head is \
symbol `List`, otherwise returns the result of \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`", "  95.          applied to the head and arguments.", "  96.  ", 
                "  97.          Usually custom parsing rules target \
Functions, but not List. To do so, it is recommended to override", 
                "  98.          \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`.", "  99.          \"\"\"", 
                " 100.          head = self.next_expression(tokens, \
**kwargs)", 
                Item[
                " 101.          args = tuple(", Background -> LightYellow], 
                " 102.              self.next_expression(tokens, **kwargs) \
for i in range(current_token.length)", " 103.          )", 
                " 104.          if head == self._LIST:", 
                " 105.              return args", " 106.          else:", 
                " 107.              return self.build_function(head, args, \
**kwargs)"}, Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  "self", "<ExternalEvaluateConsumer globals=4 objects=4>"}, {
                  "current_token", "WXFToken<b'f', data=None, len=2>"}, {
                  "tokens", 
                   "<generator object WXFParser.tokens at 0x1755b7580>"}, {
                  "kwargs", "{}"}, {
                  "head", 
                   "ExternalEvaluate`Private`ExternalEvaluateCommand"}}, 
                 Background -> {Null, {LightGray}}, Alignment -> Left, Frame -> 
                 LightGray]}]}]}, False], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                SystemOpen[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless"], " in ", "<genexpr>"}], 
            Column[{
              
              Column[{"  95.          applied to the head and arguments.", 
                "  96.  ", 
                "  97.          Usually custom parsing rules target \
Functions, but not List. To do so, it is recommended to override", 
                "  98.          \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`.", "  99.          \"\"\"", 
                " 100.          head = self.next_expression(tokens, \
**kwargs)", " 101.          args = tuple(", 
                Item[
                " 102.              self.next_expression(tokens, **kwargs) \
for i in range(current_token.length)", Background -> LightYellow], 
                " 103.          )", " 104.          if head == self._LIST:", 
                " 105.              return args", " 106.          else:", 
                " 107.              return self.build_function(head, args, \
**kwargs)", " 108.  "}, Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  ".0", "<range_iterator object at 0x175631290>"}, {
                  "i", "1"}, {"kwargs", "{}"}, {
                  "self", "<ExternalEvaluateConsumer globals=4 objects=4>"}, {
                  "tokens", 
                   "<generator object WXFParser.tokens at 0x1755b7580>"}}, 
                 Background -> {Null, {LightGray}}, Alignment -> Left, Frame -> 
                 LightGray]}]}]}, False], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                SystemOpen[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless"], " in ", "next_expression"}], 
            Column[{
              
              Column[{"  69.          constants.WXF_CONSTANTS.RuleDelayed: \
\"consume_rule_delayed\",", "  70.      }", "  71.  ", 
                "  72.      def next_expression(self, tokens, **kwargs):", 
                "  73.          \"\"\"Deserialize the next expression \
starting at the next token yield by `tokens`.\"\"\"", 
                "  74.          token = next(tokens)", 
                "  75.          consumer = \
self._consumer_from_type(token.wxf_type)", 
                Item[
                "  76.          return consumer(token, tokens, **kwargs)", 
                 Background -> LightYellow], "  77.  ", 
                "  78.      def _consumer_from_type(self, wxf_type):", 
                "  79.          try:", 
                "  80.              func = self._mapping[wxf_type]", 
                "  81.          except KeyError:", 
                "  82.              raise WolframParserException("}, 
               Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  "self", "<ExternalEvaluateConsumer globals=4 objects=4>"}, {
                  "tokens", 
                   "<generator object WXFParser.tokens at 0x1755b7580>"}, {
                  "kwargs", "{}"}, {
                  "token", "WXFToken<b'f', data=None, len=2>"}, {
                  "consumer", 
                   "<bound method ExternalEvaluateConsumer.consume_function \
of <ExternalEvaluateConsumer globals=4 objects=4>>"}}, 
                 Background -> {Null, {LightGray}}, Alignment -> Left, Frame -> 
                 LightGray]}]}]}, False], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                SystemOpen[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless"], " in ", 
              "consume_function"}], 
            Column[{
              
              Column[{" 319.  ", 
                " 320.      def __init__(self, routes_registry={}, \
objects_registry={}, globals_registry={}):", 
                
                " 321.          self.objects_registry = \
registry(objects_registry)", 
                " 322.          self.globals_registry = \
registry(globals_registry)", 
                " 323.          self.routes_registry = \
registry(self.builtin_routes, **routes_registry)", " 324.  ", 
                " 325.      def consume_function(self, *args, **kwargs):", 
                Item[
                " 326.          expr = super().consume_function(*args, \
**kwargs)", Background -> LightYellow], " 327.  ", 
                " 328.          if check_wl_symbol(expr, self.hook_symbol):", 
                " 329.              assert len(expr.args) == 2", 
                " 330.              return \
self.dispatch_wl_object(*expr.args)", " 331.  ", 
                " 332.          return expr"}, Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  "self", "<ExternalEvaluateConsumer globals=4 objects=4>"}, {
                  "args", 
                   "(<wolframclient.deserializers.wxf.wxfparser.WXFToken \
object at 0x1756444f0>, <generator object WXFParser.tokens at \
0x1755b7580>)"}, {"kwargs", "{}"}, {
                  "__class__", 
                   "<class \
'wolframclient.utils.externalevaluate.ExternalEvaluateConsumer'>"}}, 
                 Background -> {Null, {LightGray}}, Alignment -> Left, Frame -> 
                 LightGray]}]}]}, False], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                SystemOpen[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless"], " in ", "consume_function"}], 
            Column[{
              
              Column[{"  94.          Return a :class:`list` if the head is \
symbol `List`, otherwise returns the result of \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`", "  95.          applied to the head and arguments.", "  96.  ", 
                "  97.          Usually custom parsing rules target \
Functions, but not List. To do so, it is recommended to override", 
                "  98.          \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`.", "  99.          \"\"\"", 
                " 100.          head = self.next_expression(tokens, \
**kwargs)", 
                Item[
                " 101.          args = tuple(", Background -> LightYellow], 
                " 102.              self.next_expression(tokens, **kwargs) \
for i in range(current_token.length)", " 103.          )", 
                " 104.          if head == self._LIST:", 
                " 105.              return args", " 106.          else:", 
                " 107.              return self.build_function(head, args, \
**kwargs)"}, Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  "self", "<ExternalEvaluateConsumer globals=4 objects=4>"}, {
                  "current_token", "WXFToken<b'f', data=None, len=2>"}, {
                  "tokens", 
                   "<generator object WXFParser.tokens at 0x1755b7580>"}, {
                  "kwargs", "{}"}, {"head", "List"}}, 
                 Background -> {Null, {LightGray}}, Alignment -> Left, Frame -> 
                 LightGray]}]}]}, False], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                SystemOpen[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless"], " in ", "<genexpr>"}], 
            Column[{
              
              Column[{"  95.          applied to the head and arguments.", 
                "  96.  ", 
                "  97.          Usually custom parsing rules target \
Functions, but not List. To do so, it is recommended to override", 
                "  98.          \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`.", "  99.          \"\"\"", 
                " 100.          head = self.next_expression(tokens, \
**kwargs)", " 101.          args = tuple(", 
                Item[
                " 102.              self.next_expression(tokens, **kwargs) \
for i in range(current_token.length)", Background -> LightYellow], 
                " 103.          )", " 104.          if head == self._LIST:", 
                " 105.              return args", " 106.          else:", 
                " 107.              return self.build_function(head, args, \
**kwargs)", " 108.  "}, Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  ".0", "<range_iterator object at 0x1756312c0>"}, {
                  "i", "0"}, {"kwargs", "{}"}, {
                  "self", "<ExternalEvaluateConsumer globals=4 objects=4>"}, {
                  "tokens", 
                   "<generator object WXFParser.tokens at 0x1755b7580>"}}, 
                 Background -> {Null, {LightGray}}, Alignment -> Left, Frame -> 
                 LightGray]}]}]}, False], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                SystemOpen[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless"], " in ", "next_expression"}], 
            Column[{
              
              Column[{"  69.          constants.WXF_CONSTANTS.RuleDelayed: \
\"consume_rule_delayed\",", "  70.      }", "  71.  ", 
                "  72.      def next_expression(self, tokens, **kwargs):", 
                "  73.          \"\"\"Deserialize the next expression \
starting at the next token yield by `tokens`.\"\"\"", 
                "  74.          token = next(tokens)", 
                "  75.          consumer = \
self._consumer_from_type(token.wxf_type)", 
                Item[
                "  76.          return consumer(token, tokens, **kwargs)", 
                 Background -> LightYellow], "  77.  ", 
                "  78.      def _consumer_from_type(self, wxf_type):", 
                "  79.          try:", 
                "  80.              func = self._mapping[wxf_type]", 
                "  81.          except KeyError:", 
                "  82.              raise WolframParserException("}, 
               Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  "self", "<ExternalEvaluateConsumer globals=4 objects=4>"}, {
                  "tokens", 
                   "<generator object WXFParser.tokens at 0x1755b7580>"}, {
                  "kwargs", "{}"}, {
                  "token", "WXFToken<b'f', data=None, len=2>"}, {
                  "consumer", 
                   "<bound method ExternalEvaluateConsumer.consume_function \
of <ExternalEvaluateConsumer globals=4 objects=4>>"}}, 
                 Background -> {Null, {LightGray}}, Alignment -> Left, Frame -> 
                 LightGray]}]}]}, False], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                SystemOpen[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless"], " in ", 
              "consume_function"}], 
            Column[{
              
              Column[{" 323.          self.routes_registry = \
registry(self.builtin_routes, **routes_registry)", " 324.  ", 
                " 325.      def consume_function(self, *args, **kwargs):", 
                " 326.          expr = super().consume_function(*args, \
**kwargs)", " 327.  ", 
                " 328.          if check_wl_symbol(expr, self.hook_symbol):", 
                " 329.              assert len(expr.args) == 2", 
                Item[
                " 330.              return \
self.dispatch_wl_object(*expr.args)", Background -> LightYellow], " 331.  ", 
                " 332.          return expr", " 333.  ", 
                " 334.      def dispatch_wl_object(self, route, args):", 
                " 335.          return self.routes_registry[route](self, \
*args)", " 336.  "}, Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  "self", "<ExternalEvaluateConsumer globals=4 objects=4>"}, {
                  "args", 
                   "(<wolframclient.deserializers.wxf.wxfparser.WXFToken \
object at 0x175644950>, <generator object WXFParser.tokens at \
0x1755b7580>)"}, {"kwargs", "{}"}, {
                  "expr", 
                   "ExternalEvaluate`Private`ExternalEvaluateCommand['Call', \
(<function edge_col at 0x1756168e0>, None, \
hypernetx.classes.Hypergraph.Hypergraph)]"}, {
                  "__class__", 
                   "<class \
'wolframclient.utils.externalevaluate.ExternalEvaluateConsumer'>"}}, 
                 Background -> {Null, {LightGray}}, Alignment -> Left, Frame -> 
                 LightGray]}]}]}, False], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                SystemOpen[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless"], " in ", 
              "dispatch_wl_object"}], 
            Column[{
              
              Column[{" 328.          if check_wl_symbol(expr, \
self.hook_symbol):", " 329.              assert len(expr.args) == 2", 
                " 330.              return \
self.dispatch_wl_object(*expr.args)", " 331.  ", " 332.          return expr",
                 " 333.  ", 
                " 334.      def dispatch_wl_object(self, route, args):", 
                Item[
                " 335.          return self.routes_registry[route](self, \
*args)", Background -> LightYellow], " 336.  ", 
                " 337.      def __repr__(self):", 
                " 338.          return \"<{} globals={} \
objects={}>\".format(", 
                " 339.              self.__class__.__name__, \
len(self.globals_registry), len(self.objects_registry)", " 340.          )", 
                " 341.  "}, Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  "self", "<ExternalEvaluateConsumer globals=4 objects=4>"}, {
                  "route", "Call"}, {
                  "args", 
                   "(<function edge_col at 0x1756168e0>, None, \
hypernetx.classes.Hypergraph.Hypergraph)"}}, 
                 Background -> {Null, {LightGray}}, Alignment -> Left, Frame -> 
                 LightGray]}]}]}, False], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                SystemOpen[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless"], " in ", "Call"}], 
            Column[{
              
              Column[{" 245.  ", " 246.  ", 
                " 247.  @routes.register_function", 
                " 248.  def Call(consumer, result, *args):", " 249.  ", 
                " 250.      pos, kwargs = unpack_optionals(args)", " 251.  ", 
                
                Item[
                " 252.      return result(*pos, **kwargs)", Background -> 
                 LightYellow], " 253.  ", " 254.  ", 
                " 255.  @routes.register_function", 
                " 256.  def MethodCall(consumer, result, names, *args):", 
                " 257.      return Call(consumer, GetAttribute(consumer, \
result, names), *args)", " 258.  "}, Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  "consumer", 
                   "<ExternalEvaluateConsumer globals=4 objects=4>"}, {
                  "result", "<function edge_col at 0x1756168e0>"}, {
                  "args", 
                   "(None, hypernetx.classes.Hypergraph.Hypergraph,)"}, {
                  "pos", "[None, hypernetx.classes.Hypergraph.Hypergraph]"}, {
                  "kwargs", "{}"}}, Background -> {Null, {LightGray}}, 
                 Alignment -> Left, Frame -> LightGray]}]}]}, True], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Users/arnoudb/hypernetx/Python/Hypergraph/Hypergraph.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Users/arnoudb/hypernetx/Python/Hypergraph/Hypergraph.py"], 
                SystemOpen[
                "/Users/arnoudb/hypernetx/Python/Hypergraph/Hypergraph.py"]], 
               Appearance -> "Frameless"], " in ", "edge_col"}], 
            Column[{
              
              Column[{"  57.  def dual(hg):", "  58.      return hg.dual()", 
                "  59.  ", "  60.  def edge_adjacency_matrix(hg):", 
                "  61.      return hg.edge_adjacency_matrix().toarray()", 
                "  62.  ", "  63.  def edge_col(hg):", 
                Item[
                "  64.      return hg.edge_col()", Background -> LightYellow],
                 "  65.  ", "  66.  def edge_diameter(hg):", 
                "  67.      return hg.edge_diameter()", "  68.  ", 
                "  69.  def edge_distance(hg):", 
                "  70.      return hg.edge_distance()"}, Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  "hg", "None, <class \
'hypernetx.classes.Hypergraph.Hypergraph'>"}}, 
                 Background -> {Null, {LightGray}}, Alignment -> Left, Frame -> 
                 LightGray]}]}]}, True]}], FontFamily -> "Courier"]}, True]|>],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.922802230382594*^9},
 CellLabel->"Out[7]=",ExpressionUUID->"fedd32b7-58a0-46ef-baac-acbaa3dd40b4"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"HypergraphEdgeDiameter", "[", "hg", "]"}]], "Input",
 CellChangeTimes->{{3.9228022006220617`*^9, 3.922802241423326*^9}},
 CellLabel->"In[8]:=",ExpressionUUID->"27bbd6b3-189f-4590-b3ec-bf314e6fa1bd"],

Cell[BoxData["1"], "Output",
 CellChangeTimes->{3.922802241895629*^9},
 CellLabel->"Out[8]=",ExpressionUUID->"e706d98c-b65a-4e9f-a73e-acafd2aa4516"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"HypergraphEdgeDistance", "[", "hg", "]"}]], "Input",
 CellChangeTimes->{{3.9228022006220617`*^9, 3.922802251342264*^9}},
 CellLabel->"In[9]:=",ExpressionUUID->"47337a17-5e61-4b53-8cd9-78c136646899"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["Failure",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            FrameBox[
             StyleBox["\"\[WarningSign]\"", 
              Directive["Message", 35], StripOnInput -> False], 
             ContentPadding -> False, FrameStyle -> None, 
             FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
            GridBox[{{
               TagBox[
                GridBox[{{
                   TagBox["\"Message: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                   "\"Hypergraph.edge_distance() missing 2 required \
positional arguments: 'source' and 'target'\"", "SummaryItem"]}}, 
                 GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                 GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                 GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}, {
               TagBox[
                GridBox[{{
                   TagBox["\"Tag: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["\"PythonError\"", "SummaryItem"]}}, 
                 GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                 GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                 GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            FrameBox[
             StyleBox["\"\[WarningSign]\"", 
              Directive["Message", 35], StripOnInput -> False], 
             ContentPadding -> False, FrameStyle -> None, 
             FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
            GridBox[{{
               TagBox[
                GridBox[{{
                   TagBox["\"Message: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                   "\"Hypergraph.edge_distance() missing 2 required \
positional arguments: 'source' and 'target'\"", "SummaryItem"]}}, 
                 GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                 GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                 GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}, {
               TagBox[
                GridBox[{{
                   TagBox["\"Tag: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["\"PythonError\"", "SummaryItem"]}}, 
                 GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                 GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                 GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}, {
               RowBox[{
                 TagBox[
                  TemplateBox[{"\"FailureCode\"", "\": \""}, "RowDefault"], 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox[
                  TagBox["\"TypeError\"", HoldForm], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                  TemplateBox[{"\"Traceback\"", "\": \""}, "RowDefault"], 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   TagBox[
                    DynamicModuleBox[{Typeset`var$$ = True}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    
                    TemplateBox[{
                    "\"TypeError\"", "\" \"", 
                    "\"Hypergraph.edge_distance() missing 2 required \
positional arguments: 'source' and 'target'\""}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    
                    TemplateBox[{
                    "\"TypeError\"", "\" \"", 
                    "\"Hypergraph.edge_distance() missing 2 required \
positional arguments: 'source' and 'target'\""}, "RowDefault"]}, {"", 
                    PaneBox[
                    StyleBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/language/\
decorators.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/language/\
decorators.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/language/\
decorators.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"safe_wl_execute\""}, 
                    "RowDefault"]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/language/\
decorators.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/language/\
decorators.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/language/\
decorators.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"safe_wl_execute\""}, 
                    "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{
                    "\"  14.      \\\"wl\\\": \
b'Failure[\\\"PythonFailure\\\", <|\\\"MessageTemplate\\\" -> \\\"Unexpected \
error occurred.\\\"|>]',\""}, {"\"  15.  }\""}, {"\"  16.  \""}, {
                    "\"  17.  \""}, {
                    "\"  18.  def safe_wl_execute(function, args=(), opts={}, \
export_opts={}, exception_class=None):\""}, {"\"  19.  \""}, {
                    "\"  20.      try:\""}, {
                    ItemBox[
                    "\"  21.          return export(function(*args, **opts), \
**export_opts)\"", Background -> RGBColor[1, 1, 0.85], StripOnInput -> 
                    False]}, {
                    "\"  22.      except Exception as export_exception:\""}, {
                    "\"  23.          try:\""}, {
                    "\"  24.              try:\""}, {"\"  25.  \""}, {
                    "\"  26.                  # The user can provide an \
exception class, and it can be broken, in which case we are running \
another\""}, {
                    "\"  27.                  # try / except to return errors \
that are happening during class serialization\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\"function\"", 
                    "\"<function handle_message at 0x103b78fe0>\""}, {
                    "\"args\"", 
                    "\"(<zmq.Socket(zmq.PAIR) at 0x103b54c20>,)\""}, {
                    "\"opts\"", 
                    "\"{'consumer': <ExternalEvaluateConsumer globals=4 \
objects=6>}\""}, {"\"export_opts\"", 
                    "\"{'object_processor': <function \
start_zmq_loop.<locals>.<lambda> at 0x102e009a0>, 'target_format': \
'wxf'}\""}, {"\"exception_class\"", "\"None\""}, {"\"export_exception\"", 
                    "\"Hypergraph.edge_distance() missing 2 required \
positional arguments: 'source' and 'target'\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Null}}, "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"function", 
                    "<function handle_message at 0x103b78fe0>"}, {
                    "args", "(<zmq.Socket(zmq.PAIR) at 0x103b54c20>,)"}, {
                    "opts", 
                    "{'consumer': <ExternalEvaluateConsumer globals=4 \
objects=6>}"}, {"export_opts", 
                    "{'object_processor': <function \
start_zmq_loop.<locals>.<lambda> at 0x102e009a0>, 'target_format': 'wxf'}"}, {
                    "exception_class", "None"}, {"export_exception", 
                    "Hypergraph.edge_distance() missing 2 required positional \
arguments: 'source' and 'target'"}}, Background -> {Null, {LightGray}}, 
                    Alignment -> Left, Frame -> LightGray]}, False]], 
                    DynamicModuleValues -> Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/language/\
decorators.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/language/\
decorators.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/language/\
decorators.py"]], Appearance -> "Frameless"], " in ", "safe_wl_execute"}], 
                    Column[{
                    
                    Column[{
                    "  14.      \"wl\": b'Failure[\"PythonFailure\", \
<|\"MessageTemplate\" -> \"Unexpected error occurred.\"|>]',", "  15.  }", 
                    "  16.  ", "  17.  ", 
                    "  18.  def safe_wl_execute(function, args=(), opts={}, \
export_opts={}, exception_class=None):", "  19.  ", "  20.      try:", 
                    Item[
                    "  21.          return export(function(*args, **opts), \
**export_opts)", Background -> LightYellow], 
                    "  22.      except Exception as export_exception:", 
                    "  23.          try:", "  24.              try:", 
                    "  25.  ", 
                    "  26.                  # The user can provide an \
exception class, and it can be broken, in which case we are running another", 
                    "  27.                  # try / except to return errors \
that are happening during class serialization"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"function", 
                    "<function handle_message at 0x103b78fe0>"}, {
                    "args", "(<zmq.Socket(zmq.PAIR) at 0x103b54c20>,)"}, {
                    "opts", 
                    "{'consumer': <ExternalEvaluateConsumer globals=4 \
objects=6>}"}, {"export_opts", 
                    "{'object_processor': <function \
start_zmq_loop.<locals>.<lambda> at 0x102e009a0>, 'target_format': 'wxf'}"}, {
                    "exception_class", "None"}, {
                    "export_exception", 
                    "Hypergraph.edge_distance() missing 2 required positional \
arguments: 'source' and 'target'"}}, Background -> {Null, {LightGray}}, 
                    Alignment -> Left, Frame -> LightGray]}]}]}, False]], 
                    DynamicModuleValues -> Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless", Evaluator -> Automatic, 
                    Method -> "Preemptive"], "\" in \"", 
                    "\"handle_message\""}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless", Evaluator -> Automatic, 
                    Method -> "Preemptive"], "\" in \"", 
                    "\"handle_message\""}, "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{
                    "\" 350.          self.socket.send(zmq.Frame(bytes))\""}, \
{"\" 351.  \""}, {"\" 352.      def send_side_effect(self, expr):\""}, {
                    "\" 353.          \
self.write(export(self.keep_listening(expr), target_format=\\\"wxf\\\"))\""}, \
{"\" 354.  \""}, {"\" 355.  \""}, {
                    "\" 356.  def handle_message(socket, consumer):\""}, {
                    ItemBox[
                    "\" 357.      result = \
binary_deserialize(socket.recv(copy=False).buffer, consumer=consumer)\"", 
                    Background -> RGBColor[1, 1, 0.85], StripOnInput -> 
                    False]}, {"\" 358.  \""}, {
                    "\" 359.      sys.stdout.flush()\""}, {
                    "\" 360.      return result\""}, {"\" 361.  \""}, {
                    "\" 362.  \""}, {
                    "\" 363.  def start_zmq_instance(port=None, \
write_to_stdout=True, **opts):\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\"socket\"", 
                    "\"<zmq.Socket(zmq.PAIR) at 0x103b54c20>\""}, {
                    "\"consumer\"", 
                    "\"<ExternalEvaluateConsumer globals=4 objects=6>\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Null}}, 
                    "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"socket", 
                    "<zmq.Socket(zmq.PAIR) at 0x103b54c20>"}, {
                    "consumer", 
                    "<ExternalEvaluateConsumer globals=4 objects=6>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless"], " in ", 
                    "handle_message"}], 
                    Column[{
                    
                    Column[{
                    " 350.          self.socket.send(zmq.Frame(bytes))", 
                    " 351.  ", " 352.      def send_side_effect(self, expr):",
                     " 353.          \
self.write(export(self.keep_listening(expr), target_format=\"wxf\"))", 
                    " 354.  ", " 355.  ", 
                    " 356.  def handle_message(socket, consumer):", 
                    Item[
                    " 357.      result = \
binary_deserialize(socket.recv(copy=False).buffer, consumer=consumer)", 
                    Background -> LightYellow], " 358.  ", 
                    " 359.      sys.stdout.flush()", 
                    " 360.      return result", " 361.  ", " 362.  ", 
                    " 363.  def start_zmq_instance(port=None, \
write_to_stdout=True, **opts):"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"socket", 
                    "<zmq.Socket(zmq.PAIR) at 0x103b54c20>"}, {
                    "consumer", 
                    "<ExternalEvaluateConsumer globals=4 objects=6>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
__init__.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
__init__.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
__init__.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"binary_deserialize\""}, 
                    "RowDefault"]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
__init__.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
__init__.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
__init__.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"binary_deserialize\""}, 
                    "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{"\"  33.  \""}, {
                    "\"  34.      \\\"\\\"\\\"\""}, {
                    "\"  35.      parser = WXFParser(wxf_input)\""}, {
                    "\"  36.      if consumer is None:\""}, {
                    "\"  37.          consumer = WXFConsumerNumpy()\""}, {
                    "\"  38.  \""}, {"\"  39.      try:\""}, {
                    ItemBox[
                    "\"  40.          o = \
consumer.next_expression(parser.tokens(), **kwargs)\"", Background -> 
                    RGBColor[1, 1, 0.85], StripOnInput -> False]}, {
                    "\"  41.      except StopIteration:\""}, {
                    "\"  42.          raise WolframParserException(\""}, {
                    "\"  43.              \\\"Input data does not represent a \
valid expression in WXF format. Expecting more input data.\\\"\""}, {
                    "\"  44.          )\""}, {
                    "\"  45.      if not \
parser.context.is_valid_final_state():\""}, {
                    "\"  46.          raise WolframParserException(\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\"wxf_input\"", 
                    "\"8:f\.02s0ExternalEvaluate`Private`\
ExternalEvaluateCommandS\\nReturnTypef\.02s\.04Listf\.02s0ExternalEvaluate`\
Private`ExternalEvaluateCommandS\.04Callf\.02s\.04Listf\.02s0ExternalEvaluate`\
Private`ExternalEvaluateCommandS\.05Fetchf\.01\.01\.01\.01\.01\.01\.01\.01s\
\.04ListL \
jau\.01\.01\.01\.01\.01\.01\.01\.01\.00\.00\.00f\.02s0ExternalEvaluate`\
Private`ExternalEvaluateCommandS\.05Fetchf\.01\.01\.01\.01\.01\.01\.01\.01s\
\.04ListLau\.01\.01\.01\.01\.01\.01\.01\.01\.00\.00\.00S\\nExpression\""}, {
                    "\"consumer\"", 
                    "\"<ExternalEvaluateConsumer globals=4 objects=6>\""}, {
                    "\"kwargs\"", "\"{}\""}, {"\"parser\"", 
                    "\"<wolframclient.deserializers.wxf.wxfparser.WXFParser \
object at 0x1745d3690>\""}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {"Columns" -> {{
                    Null}}, "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"wxf_input", 
                    "8:f\.02s0ExternalEvaluate`Private`\
ExternalEvaluateCommandS\n\
ReturnTypef\.02s\.04Listf\.02s0ExternalEvaluate`Private`\
ExternalEvaluateCommandS\.04Callf\.02s\.04Listf\.02s0ExternalEvaluate`Private`\
ExternalEvaluateCommandS\.05Fetchf\.01\.01\.01\.01\.01\.01\.01\.01s\.04ListL \
jau\.01\.01\.01\.01\.01\.01\.01\.01\.00\.00\.00f\.02s0ExternalEvaluate`\
Private`ExternalEvaluateCommandS\.05Fetchf\.01\.01\.01\.01\.01\.01\.01\.01s\
\.04ListLau\.01\.01\.01\.01\.01\.01\.01\.01\.00\.00\.00S\nExpression"}, {
                    "consumer", 
                    "<ExternalEvaluateConsumer globals=4 objects=6>"}, {
                    "kwargs", "{}"}, {"parser", 
                    "<wolframclient.deserializers.wxf.wxfparser.WXFParser \
object at 0x1745d3690>"}}, Background -> {Null, {LightGray}}, Alignment -> 
                    Left, Frame -> LightGray]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
__init__.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
__init__.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
__init__.py"]], Appearance -> "Frameless"], " in ", "binary_deserialize"}], 
                    Column[{
                    
                    Column[{"  33.  ", "  34.      \"\"\"", 
                    "  35.      parser = WXFParser(wxf_input)", 
                    "  36.      if consumer is None:", 
                    "  37.          consumer = WXFConsumerNumpy()", "  38.  ",
                     "  39.      try:", 
                    Item[
                    "  40.          o = \
consumer.next_expression(parser.tokens(), **kwargs)", Background -> 
                    LightYellow], "  41.      except StopIteration:", 
                    "  42.          raise WolframParserException(", 
                    "  43.              \"Input data does not represent a \
valid expression in WXF format. Expecting more input data.\"", 
                    "  44.          )", 
                    "  45.      if not \
parser.context.is_valid_final_state():", 
                    "  46.          raise WolframParserException("}, 
                    Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"wxf_input", 
                    "8:f\.02s0ExternalEvaluate`Private`\
ExternalEvaluateCommandS\n\
ReturnTypef\.02s\.04Listf\.02s0ExternalEvaluate`Private`\
ExternalEvaluateCommandS\.04Callf\.02s\.04Listf\.02s0ExternalEvaluate`Private`\
ExternalEvaluateCommandS\.05Fetchf\.01\.01\.01\.01\.01\.01\.01\.01s\.04ListL \
jau\.01\.01\.01\.01\.01\.01\.01\.01\.00\.00\.00f\.02s0ExternalEvaluate`\
Private`ExternalEvaluateCommandS\.05Fetchf\.01\.01\.01\.01\.01\.01\.01\.01s\
\.04ListLau\.01\.01\.01\.01\.01\.01\.01\.01\.00\.00\.00S\nExpression"}, {
                    "consumer", 
                    "<ExternalEvaluateConsumer globals=4 objects=6>"}, {
                    "kwargs", "{}"}, {"parser", 
                    "<wolframclient.deserializers.wxf.wxfparser.WXFParser \
object at 0x1745d3690>"}}, Background -> {Null, {LightGray}}, Alignment -> 
                    Left, Frame -> LightGray]}]}]}, False]], 
                    DynamicModuleValues -> Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"next_expression\""}, 
                    "RowDefault"]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"next_expression\""}, 
                    "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{
                    "\"  69.          constants.WXF_CONSTANTS.RuleDelayed: \\\
\"consume_rule_delayed\\\",\""}, {"\"  70.      }\""}, {"\"  71.  \""}, {
                    "\"  72.      def next_expression(self, tokens, \
**kwargs):\""}, {
                    "\"  73.          \\\"\\\"\\\"Deserialize the next \
expression starting at the next token yield by `tokens`.\\\"\\\"\\\"\""}, {
                    "\"  74.          token = next(tokens)\""}, {
                    "\"  75.          consumer = \
self._consumer_from_type(token.wxf_type)\""}, {
                    ItemBox[
                    "\"  76.          return consumer(token, tokens, \
**kwargs)\"", Background -> RGBColor[1, 1, 0.85], StripOnInput -> False]}, {
                    "\"  77.  \""}, {
                    "\"  78.      def _consumer_from_type(self, \
wxf_type):\""}, {"\"  79.          try:\""}, {
                    "\"  80.              func = self._mapping[wxf_type]\""}, \
{"\"  81.          except KeyError:\""}, {
                    "\"  82.              raise WolframParserException(\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\"self\"", 
                    "\"<ExternalEvaluateConsumer globals=4 objects=6>\""}, {
                    "\"tokens\"", 
                    "\"<generator object WXFParser.tokens at \
0x1755b7e80>\""}, {"\"kwargs\"", "\"{}\""}, {"\"token\"", 
                    "\"WXFToken<b'f', data=None, len=2>\""}, {"\"consumer\"", 
                    "\"<bound method \
ExternalEvaluateConsumer.consume_function of <ExternalEvaluateConsumer \
globals=4 objects=6>>\""}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {"Columns" -> {{
                    Null}}, "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<ExternalEvaluateConsumer globals=4 objects=6>"}, {
                    "tokens", 
                    "<generator object WXFParser.tokens at 0x1755b7e80>"}, {
                    "kwargs", "{}"}, {"token", 
                    "WXFToken<b'f', data=None, len=2>"}, {
                    "consumer", 
                    "<bound method ExternalEvaluateConsumer.consume_function \
of <ExternalEvaluateConsumer globals=4 objects=6>>"}}, Background -> {
                    Null, {LightGray}}, Alignment -> Left, Frame -> 
                    LightGray]}, False]], DynamicModuleValues -> Automatic], 
                    Setting[#, {0}]& ]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless"], " in ", "next_expression"}], 
                    Column[{
                    
                    Column[{
                    "  69.          constants.WXF_CONSTANTS.RuleDelayed: \
\"consume_rule_delayed\",", "  70.      }", "  71.  ", 
                    "  72.      def next_expression(self, tokens, **kwargs):",
                     "  73.          \"\"\"Deserialize the next expression \
starting at the next token yield by `tokens`.\"\"\"", 
                    "  74.          token = next(tokens)", 
                    "  75.          consumer = \
self._consumer_from_type(token.wxf_type)", 
                    Item[
                    "  76.          return consumer(token, tokens, **kwargs)",
                     Background -> LightYellow], "  77.  ", 
                    "  78.      def _consumer_from_type(self, wxf_type):", 
                    "  79.          try:", 
                    "  80.              func = self._mapping[wxf_type]", 
                    "  81.          except KeyError:", 
                    "  82.              raise WolframParserException("}, 
                    Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<ExternalEvaluateConsumer globals=4 objects=6>"}, {
                    "tokens", 
                    "<generator object WXFParser.tokens at 0x1755b7e80>"}, {
                    "kwargs", "{}"}, {"token", 
                    "WXFToken<b'f', data=None, len=2>"}, {
                    "consumer", 
                    "<bound method ExternalEvaluateConsumer.consume_function \
of <ExternalEvaluateConsumer globals=4 objects=6>>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless", Evaluator -> Automatic, 
                    Method -> "Preemptive"], "\" in \"", 
                    "\"consume_function\""}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless", Evaluator -> Automatic, 
                    Method -> "Preemptive"], "\" in \"", 
                    "\"consume_function\""}, "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{"\" 319.  \""}, {
                    "\" 320.      def __init__(self, routes_registry={}, \
objects_registry={}, globals_registry={}):\""}, {
                    "\" 321.          self.objects_registry = \
registry(objects_registry)\""}, {
                    "\" 322.          self.globals_registry = \
registry(globals_registry)\""}, {
                    "\" 323.          self.routes_registry = \
registry(self.builtin_routes, **routes_registry)\""}, {"\" 324.  \""}, {
                    "\" 325.      def consume_function(self, *args, \
**kwargs):\""}, {
                    ItemBox[
                    "\" 326.          expr = super().consume_function(*args, \
**kwargs)\"", Background -> RGBColor[1, 1, 0.85], StripOnInput -> False]}, {
                    "\" 327.  \""}, {
                    "\" 328.          if check_wl_symbol(expr, \
self.hook_symbol):\""}, {
                    "\" 329.              assert len(expr.args) == 2\""}, {
                    "\" 330.              return \
self.dispatch_wl_object(*expr.args)\""}, {"\" 331.  \""}, {
                    "\" 332.          return expr\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\"self\"", 
                    "\"<ExternalEvaluateConsumer globals=4 objects=6>\""}, {
                    "\"args\"", 
                    "\"(<wolframclient.deserializers.wxf.wxfparser.WXFToken \
object at 0x17566bb50>, <generator object WXFParser.tokens at \
0x1755b7e80>)\""}, {"\"kwargs\"", "\"{}\""}, {"\"__class__\"", 
                    "\"<class \
'wolframclient.utils.externalevaluate.ExternalEvaluateConsumer'>\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Null}}, 
                    "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<ExternalEvaluateConsumer globals=4 objects=6>"}, {
                    "args", 
                    "(<wolframclient.deserializers.wxf.wxfparser.WXFToken \
object at 0x17566bb50>, <generator object WXFParser.tokens at \
0x1755b7e80>)"}, {"kwargs", "{}"}, {"__class__", 
                    "<class \
'wolframclient.utils.externalevaluate.ExternalEvaluateConsumer'>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless"], " in ", 
                    "consume_function"}], 
                    Column[{
                    
                    Column[{" 319.  ", 
                    " 320.      def __init__(self, routes_registry={}, \
objects_registry={}, globals_registry={}):", 
                    " 321.          self.objects_registry = \
registry(objects_registry)", 
                    " 322.          self.globals_registry = \
registry(globals_registry)", 
                    " 323.          self.routes_registry = \
registry(self.builtin_routes, **routes_registry)", " 324.  ", 
                    " 325.      def consume_function(self, *args, **kwargs):", 
                    Item[
                    " 326.          expr = super().consume_function(*args, \
**kwargs)", Background -> LightYellow], " 327.  ", 
                    " 328.          if check_wl_symbol(expr, \
self.hook_symbol):", " 329.              assert len(expr.args) == 2", 
                    " 330.              return \
self.dispatch_wl_object(*expr.args)", " 331.  ", 
                    " 332.          return expr"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<ExternalEvaluateConsumer globals=4 objects=6>"}, {
                    "args", 
                    "(<wolframclient.deserializers.wxf.wxfparser.WXFToken \
object at 0x17566bb50>, <generator object WXFParser.tokens at \
0x1755b7e80>)"}, {"kwargs", "{}"}, {"__class__", 
                    "<class \
'wolframclient.utils.externalevaluate.ExternalEvaluateConsumer'>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"consume_function\""}, 
                    "RowDefault"]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"consume_function\""}, 
                    "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{
                    "\"  94.          Return a :class:`list` if the head is \
symbol `List`, otherwise returns the result of \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`\""}, {"\"  95.          applied to the head and arguments.\""}, {
                    "\"  96.  \""}, {
                    "\"  97.          Usually custom parsing rules target \
Functions, but not List. To do so, it is recommended to override\""}, {
                    
                    "\"  98.          \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`.\""}, {"\"  99.          \\\"\\\"\\\"\""}, {
                    "\" 100.          head = self.next_expression(tokens, \
**kwargs)\""}, {
                    ItemBox["\" 101.          args = tuple(\"", Background -> 
                    RGBColor[1, 1, 0.85], StripOnInput -> False]}, {
                    "\" 102.              self.next_expression(tokens, \
**kwargs) for i in range(current_token.length)\""}, {
                    "\" 103.          )\""}, {
                    "\" 104.          if head == self._LIST:\""}, {
                    "\" 105.              return args\""}, {
                    "\" 106.          else:\""}, {
                    "\" 107.              return self.build_function(head, \
args, **kwargs)\""}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\"self\"", 
                    "\"<ExternalEvaluateConsumer globals=4 objects=6>\""}, {
                    "\"current_token\"", 
                    "\"WXFToken<b'f', data=None, len=2>\""}, {"\"tokens\"", 
                    "\"<generator object WXFParser.tokens at \
0x1755b7e80>\""}, {"\"kwargs\"", "\"{}\""}, {"\"head\"", 
                    "\"ExternalEvaluate`Private`ExternalEvaluateCommand\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Null}}, 
                    "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<ExternalEvaluateConsumer globals=4 objects=6>"}, {
                    "current_token", "WXFToken<b'f', data=None, len=2>"}, {
                    "tokens", 
                    "<generator object WXFParser.tokens at 0x1755b7e80>"}, {
                    "kwargs", "{}"}, {"head", 
                    "ExternalEvaluate`Private`ExternalEvaluateCommand"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless"], " in ", "consume_function"}], 
                    Column[{
                    
                    Column[{
                    "  94.          Return a :class:`list` if the head is \
symbol `List`, otherwise returns the result of \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`", "  95.          applied to the head and arguments.", "  96.  ", 
                    "  97.          Usually custom parsing rules target \
Functions, but not List. To do so, it is recommended to override", 
                    "  98.          \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`.", "  99.          \"\"\"", 
                    " 100.          head = self.next_expression(tokens, \
**kwargs)", 
                    Item[" 101.          args = tuple(", Background -> 
                    LightYellow], 
                    " 102.              self.next_expression(tokens, \
**kwargs) for i in range(current_token.length)", " 103.          )", 
                    " 104.          if head == self._LIST:", 
                    " 105.              return args", " 106.          else:", 
                    " 107.              return self.build_function(head, \
args, **kwargs)"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<ExternalEvaluateConsumer globals=4 objects=6>"}, {
                    "current_token", "WXFToken<b'f', data=None, len=2>"}, {
                    "tokens", 
                    "<generator object WXFParser.tokens at 0x1755b7e80>"}, {
                    "kwargs", "{}"}, {"head", 
                    "ExternalEvaluate`Private`ExternalEvaluateCommand"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"<genexpr>\""}, 
                    "RowDefault"]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"<genexpr>\""}, 
                    "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{
                    "\"  95.          applied to the head and arguments.\""}, \
{"\"  96.  \""}, {
                    "\"  97.          Usually custom parsing rules target \
Functions, but not List. To do so, it is recommended to override\""}, {
                    "\"  98.          \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`.\""}, {"\"  99.          \\\"\\\"\\\"\""}, {
                    "\" 100.          head = self.next_expression(tokens, \
**kwargs)\""}, {"\" 101.          args = tuple(\""}, {
                    ItemBox[
                    "\" 102.              self.next_expression(tokens, \
**kwargs) for i in range(current_token.length)\"", Background -> 
                    RGBColor[1, 1, 0.85], StripOnInput -> False]}, {
                    "\" 103.          )\""}, {
                    "\" 104.          if head == self._LIST:\""}, {
                    "\" 105.              return args\""}, {
                    "\" 106.          else:\""}, {
                    "\" 107.              return self.build_function(head, \
args, **kwargs)\""}, {"\" 108.  \""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\".0\"", 
                    "\"<range_iterator object at 0x175687360>\""}, {
                    "\"i\"", "\"1\""}, {"\"kwargs\"", "\"{}\""}, {
                    "\"self\"", 
                    "\"<ExternalEvaluateConsumer globals=4 objects=6>\""}, {
                    "\"tokens\"", 
                    "\"<generator object WXFParser.tokens at \
0x1755b7e80>\""}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Null}}, 
                    "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {".0", 
                    "<range_iterator object at 0x175687360>"}, {"i", "1"}, {
                    "kwargs", "{}"}, {"self", 
                    "<ExternalEvaluateConsumer globals=4 objects=6>"}, {
                    "tokens", 
                    "<generator object WXFParser.tokens at 0x1755b7e80>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless"], " in ", "<genexpr>"}], 
                    Column[{
                    
                    Column[{
                    "  95.          applied to the head and arguments.", 
                    "  96.  ", 
                    "  97.          Usually custom parsing rules target \
Functions, but not List. To do so, it is recommended to override", 
                    "  98.          \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`.", "  99.          \"\"\"", 
                    " 100.          head = self.next_expression(tokens, \
**kwargs)", " 101.          args = tuple(", 
                    Item[
                    " 102.              self.next_expression(tokens, \
**kwargs) for i in range(current_token.length)", Background -> LightYellow], 
                    " 103.          )", 
                    " 104.          if head == self._LIST:", 
                    " 105.              return args", " 106.          else:", 
                    " 107.              return self.build_function(head, \
args, **kwargs)", " 108.  "}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {".0", 
                    "<range_iterator object at 0x175687360>"}, {"i", "1"}, {
                    "kwargs", "{}"}, {"self", 
                    "<ExternalEvaluateConsumer globals=4 objects=6>"}, {
                    "tokens", 
                    "<generator object WXFParser.tokens at 0x1755b7e80>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"next_expression\""}, 
                    "RowDefault"]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"next_expression\""}, 
                    "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{
                    "\"  69.          constants.WXF_CONSTANTS.RuleDelayed: \\\
\"consume_rule_delayed\\\",\""}, {"\"  70.      }\""}, {"\"  71.  \""}, {
                    "\"  72.      def next_expression(self, tokens, \
**kwargs):\""}, {
                    "\"  73.          \\\"\\\"\\\"Deserialize the next \
expression starting at the next token yield by `tokens`.\\\"\\\"\\\"\""}, {
                    "\"  74.          token = next(tokens)\""}, {
                    "\"  75.          consumer = \
self._consumer_from_type(token.wxf_type)\""}, {
                    ItemBox[
                    "\"  76.          return consumer(token, tokens, \
**kwargs)\"", Background -> RGBColor[1, 1, 0.85], StripOnInput -> False]}, {
                    "\"  77.  \""}, {
                    "\"  78.      def _consumer_from_type(self, \
wxf_type):\""}, {"\"  79.          try:\""}, {
                    "\"  80.              func = self._mapping[wxf_type]\""}, \
{"\"  81.          except KeyError:\""}, {
                    "\"  82.              raise WolframParserException(\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\"self\"", 
                    "\"<ExternalEvaluateConsumer globals=4 objects=6>\""}, {
                    "\"tokens\"", 
                    "\"<generator object WXFParser.tokens at \
0x1755b7e80>\""}, {"\"kwargs\"", "\"{}\""}, {"\"token\"", 
                    "\"WXFToken<b'f', data=None, len=2>\""}, {"\"consumer\"", 
                    "\"<bound method \
ExternalEvaluateConsumer.consume_function of <ExternalEvaluateConsumer \
globals=4 objects=6>>\""}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {"Columns" -> {{
                    Null}}, "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<ExternalEvaluateConsumer globals=4 objects=6>"}, {
                    "tokens", 
                    "<generator object WXFParser.tokens at 0x1755b7e80>"}, {
                    "kwargs", "{}"}, {"token", 
                    "WXFToken<b'f', data=None, len=2>"}, {
                    "consumer", 
                    "<bound method ExternalEvaluateConsumer.consume_function \
of <ExternalEvaluateConsumer globals=4 objects=6>>"}}, Background -> {
                    Null, {LightGray}}, Alignment -> Left, Frame -> 
                    LightGray]}, False]], DynamicModuleValues -> Automatic], 
                    Setting[#, {0}]& ]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless"], " in ", "next_expression"}], 
                    Column[{
                    
                    Column[{
                    "  69.          constants.WXF_CONSTANTS.RuleDelayed: \
\"consume_rule_delayed\",", "  70.      }", "  71.  ", 
                    "  72.      def next_expression(self, tokens, **kwargs):",
                     "  73.          \"\"\"Deserialize the next expression \
starting at the next token yield by `tokens`.\"\"\"", 
                    "  74.          token = next(tokens)", 
                    "  75.          consumer = \
self._consumer_from_type(token.wxf_type)", 
                    Item[
                    "  76.          return consumer(token, tokens, **kwargs)",
                     Background -> LightYellow], "  77.  ", 
                    "  78.      def _consumer_from_type(self, wxf_type):", 
                    "  79.          try:", 
                    "  80.              func = self._mapping[wxf_type]", 
                    "  81.          except KeyError:", 
                    "  82.              raise WolframParserException("}, 
                    Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<ExternalEvaluateConsumer globals=4 objects=6>"}, {
                    "tokens", 
                    "<generator object WXFParser.tokens at 0x1755b7e80>"}, {
                    "kwargs", "{}"}, {"token", 
                    "WXFToken<b'f', data=None, len=2>"}, {
                    "consumer", 
                    "<bound method ExternalEvaluateConsumer.consume_function \
of <ExternalEvaluateConsumer globals=4 objects=6>>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless", Evaluator -> Automatic, 
                    Method -> "Preemptive"], "\" in \"", 
                    "\"consume_function\""}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless", Evaluator -> Automatic, 
                    Method -> "Preemptive"], "\" in \"", 
                    "\"consume_function\""}, "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{"\" 319.  \""}, {
                    "\" 320.      def __init__(self, routes_registry={}, \
objects_registry={}, globals_registry={}):\""}, {
                    "\" 321.          self.objects_registry = \
registry(objects_registry)\""}, {
                    "\" 322.          self.globals_registry = \
registry(globals_registry)\""}, {
                    "\" 323.          self.routes_registry = \
registry(self.builtin_routes, **routes_registry)\""}, {"\" 324.  \""}, {
                    "\" 325.      def consume_function(self, *args, \
**kwargs):\""}, {
                    ItemBox[
                    "\" 326.          expr = super().consume_function(*args, \
**kwargs)\"", Background -> RGBColor[1, 1, 0.85], StripOnInput -> False]}, {
                    "\" 327.  \""}, {
                    "\" 328.          if check_wl_symbol(expr, \
self.hook_symbol):\""}, {
                    "\" 329.              assert len(expr.args) == 2\""}, {
                    "\" 330.              return \
self.dispatch_wl_object(*expr.args)\""}, {"\" 331.  \""}, {
                    "\" 332.          return expr\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\"self\"", 
                    "\"<ExternalEvaluateConsumer globals=4 objects=6>\""}, {
                    "\"args\"", 
                    "\"(<wolframclient.deserializers.wxf.wxfparser.WXFToken \
object at 0x17566bc40>, <generator object WXFParser.tokens at \
0x1755b7e80>)\""}, {"\"kwargs\"", "\"{}\""}, {"\"__class__\"", 
                    "\"<class \
'wolframclient.utils.externalevaluate.ExternalEvaluateConsumer'>\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Null}}, 
                    "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<ExternalEvaluateConsumer globals=4 objects=6>"}, {
                    "args", 
                    "(<wolframclient.deserializers.wxf.wxfparser.WXFToken \
object at 0x17566bc40>, <generator object WXFParser.tokens at \
0x1755b7e80>)"}, {"kwargs", "{}"}, {"__class__", 
                    "<class \
'wolframclient.utils.externalevaluate.ExternalEvaluateConsumer'>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless"], " in ", 
                    "consume_function"}], 
                    Column[{
                    
                    Column[{" 319.  ", 
                    " 320.      def __init__(self, routes_registry={}, \
objects_registry={}, globals_registry={}):", 
                    " 321.          self.objects_registry = \
registry(objects_registry)", 
                    " 322.          self.globals_registry = \
registry(globals_registry)", 
                    " 323.          self.routes_registry = \
registry(self.builtin_routes, **routes_registry)", " 324.  ", 
                    " 325.      def consume_function(self, *args, **kwargs):", 
                    Item[
                    " 326.          expr = super().consume_function(*args, \
**kwargs)", Background -> LightYellow], " 327.  ", 
                    " 328.          if check_wl_symbol(expr, \
self.hook_symbol):", " 329.              assert len(expr.args) == 2", 
                    " 330.              return \
self.dispatch_wl_object(*expr.args)", " 331.  ", 
                    " 332.          return expr"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<ExternalEvaluateConsumer globals=4 objects=6>"}, {
                    "args", 
                    "(<wolframclient.deserializers.wxf.wxfparser.WXFToken \
object at 0x17566bc40>, <generator object WXFParser.tokens at \
0x1755b7e80>)"}, {"kwargs", "{}"}, {"__class__", 
                    "<class \
'wolframclient.utils.externalevaluate.ExternalEvaluateConsumer'>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"consume_function\""}, 
                    "RowDefault"]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"consume_function\""}, 
                    "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{
                    "\"  94.          Return a :class:`list` if the head is \
symbol `List`, otherwise returns the result of \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`\""}, {"\"  95.          applied to the head and arguments.\""}, {
                    "\"  96.  \""}, {
                    "\"  97.          Usually custom parsing rules target \
Functions, but not List. To do so, it is recommended to override\""}, {
                    "\"  98.          \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`.\""}, {"\"  99.          \\\"\\\"\\\"\""}, {
                    "\" 100.          head = self.next_expression(tokens, \
**kwargs)\""}, {
                    ItemBox["\" 101.          args = tuple(\"", Background -> 
                    RGBColor[1, 1, 0.85], StripOnInput -> False]}, {
                    "\" 102.              self.next_expression(tokens, \
**kwargs) for i in range(current_token.length)\""}, {
                    "\" 103.          )\""}, {
                    "\" 104.          if head == self._LIST:\""}, {
                    "\" 105.              return args\""}, {
                    "\" 106.          else:\""}, {
                    "\" 107.              return self.build_function(head, \
args, **kwargs)\""}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\"self\"", 
                    "\"<ExternalEvaluateConsumer globals=4 objects=6>\""}, {
                    "\"current_token\"", 
                    "\"WXFToken<b'f', data=None, len=2>\""}, {"\"tokens\"", 
                    "\"<generator object WXFParser.tokens at \
0x1755b7e80>\""}, {"\"kwargs\"", "\"{}\""}, {"\"head\"", "\"List\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Null}}, 
                    "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<ExternalEvaluateConsumer globals=4 objects=6>"}, {
                    "current_token", "WXFToken<b'f', data=None, len=2>"}, {
                    "tokens", 
                    "<generator object WXFParser.tokens at 0x1755b7e80>"}, {
                    "kwargs", "{}"}, {"head", "List"}}, Background -> {
                    Null, {LightGray}}, Alignment -> Left, Frame -> 
                    LightGray]}, False]], DynamicModuleValues -> Automatic], 
                    Setting[#, {0}]& ]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless"], " in ", "consume_function"}], 
                    Column[{
                    
                    Column[{
                    "  94.          Return a :class:`list` if the head is \
symbol `List`, otherwise returns the result of \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`", "  95.          applied to the head and arguments.", "  96.  ", 
                    "  97.          Usually custom parsing rules target \
Functions, but not List. To do so, it is recommended to override", 
                    "  98.          \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`.", "  99.          \"\"\"", 
                    " 100.          head = self.next_expression(tokens, \
**kwargs)", 
                    Item[" 101.          args = tuple(", Background -> 
                    LightYellow], 
                    " 102.              self.next_expression(tokens, \
**kwargs) for i in range(current_token.length)", " 103.          )", 
                    " 104.          if head == self._LIST:", 
                    " 105.              return args", " 106.          else:", 
                    " 107.              return self.build_function(head, \
args, **kwargs)"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<ExternalEvaluateConsumer globals=4 objects=6>"}, {
                    "current_token", "WXFToken<b'f', data=None, len=2>"}, {
                    "tokens", 
                    "<generator object WXFParser.tokens at 0x1755b7e80>"}, {
                    "kwargs", "{}"}, {"head", "List"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"<genexpr>\""}, 
                    "RowDefault"]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"<genexpr>\""}, 
                    "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{
                    "\"  95.          applied to the head and arguments.\""}, \
{"\"  96.  \""}, {
                    "\"  97.          Usually custom parsing rules target \
Functions, but not List. To do so, it is recommended to override\""}, {
                    "\"  98.          \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`.\""}, {"\"  99.          \\\"\\\"\\\"\""}, {
                    "\" 100.          head = self.next_expression(tokens, \
**kwargs)\""}, {"\" 101.          args = tuple(\""}, {
                    ItemBox[
                    "\" 102.              self.next_expression(tokens, \
**kwargs) for i in range(current_token.length)\"", Background -> 
                    RGBColor[1, 1, 0.85], StripOnInput -> False]}, {
                    "\" 103.          )\""}, {
                    "\" 104.          if head == self._LIST:\""}, {
                    "\" 105.              return args\""}, {
                    "\" 106.          else:\""}, {
                    "\" 107.              return self.build_function(head, \
args, **kwargs)\""}, {"\" 108.  \""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\".0\"", 
                    "\"<range_iterator object at 0x1756879c0>\""}, {
                    "\"i\"", "\"0\""}, {"\"kwargs\"", "\"{}\""}, {
                    "\"self\"", 
                    "\"<ExternalEvaluateConsumer globals=4 objects=6>\""}, {
                    "\"tokens\"", 
                    "\"<generator object WXFParser.tokens at \
0x1755b7e80>\""}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Null}}, 
                    "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {".0", 
                    "<range_iterator object at 0x1756879c0>"}, {"i", "0"}, {
                    "kwargs", "{}"}, {"self", 
                    "<ExternalEvaluateConsumer globals=4 objects=6>"}, {
                    "tokens", 
                    "<generator object WXFParser.tokens at 0x1755b7e80>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless"], " in ", "<genexpr>"}], 
                    Column[{
                    Column[{
                    "  95.          applied to the head and arguments.", 
                    "  96.  ", 
                    "  97.          Usually custom parsing rules target \
Functions, but not List. To do so, it is recommended to override", 
                    "  98.          \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`.", "  99.          \"\"\"", 
                    " 100.          head = self.next_expression(tokens, \
**kwargs)", " 101.          args = tuple(", 
                    Item[
                    " 102.              self.next_expression(tokens, \
**kwargs) for i in range(current_token.length)", Background -> LightYellow], 
                    " 103.          )", 
                    " 104.          if head == self._LIST:", 
                    " 105.              return args", " 106.          else:", 
                    " 107.              return self.build_function(head, \
args, **kwargs)", " 108.  "}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {".0", 
                    "<range_iterator object at 0x1756879c0>"}, {"i", "0"}, {
                    "kwargs", "{}"}, {"self", 
                    "<ExternalEvaluateConsumer globals=4 objects=6>"}, {
                    "tokens", 
                    "<generator object WXFParser.tokens at 0x1755b7e80>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"next_expression\""}, 
                    "RowDefault"]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"next_expression\""}, 
                    "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{
                    "\"  69.          constants.WXF_CONSTANTS.RuleDelayed: \\\
\"consume_rule_delayed\\\",\""}, {"\"  70.      }\""}, {"\"  71.  \""}, {
                    "\"  72.      def next_expression(self, tokens, \
**kwargs):\""}, {
                    "\"  73.          \\\"\\\"\\\"Deserialize the next \
expression starting at the next token yield by `tokens`.\\\"\\\"\\\"\""}, {
                    "\"  74.          token = next(tokens)\""}, {
                    "\"  75.          consumer = \
self._consumer_from_type(token.wxf_type)\""}, {
                    ItemBox[
                    "\"  76.          return consumer(token, tokens, \
**kwargs)\"", Background -> RGBColor[1, 1, 0.85], StripOnInput -> False]}, {
                    "\"  77.  \""}, {
                    "\"  78.      def _consumer_from_type(self, \
wxf_type):\""}, {"\"  79.          try:\""}, {
                    "\"  80.              func = self._mapping[wxf_type]\""}, \
{"\"  81.          except KeyError:\""}, {
                    "\"  82.              raise WolframParserException(\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\"self\"", 
                    "\"<ExternalEvaluateConsumer globals=4 objects=6>\""}, {
                    "\"tokens\"", 
                    "\"<generator object WXFParser.tokens at \
0x1755b7e80>\""}, {"\"kwargs\"", "\"{}\""}, {"\"token\"", 
                    "\"WXFToken<b'f', data=None, len=2>\""}, {"\"consumer\"", 
                    "\"<bound method \
ExternalEvaluateConsumer.consume_function of <ExternalEvaluateConsumer \
globals=4 objects=6>>\""}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {"Columns" -> {{
                    Null}}, "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<ExternalEvaluateConsumer globals=4 objects=6>"}, {
                    "tokens", 
                    "<generator object WXFParser.tokens at 0x1755b7e80>"}, {
                    "kwargs", "{}"}, {"token", 
                    "WXFToken<b'f', data=None, len=2>"}, {
                    "consumer", 
                    "<bound method ExternalEvaluateConsumer.consume_function \
of <ExternalEvaluateConsumer globals=4 objects=6>>"}}, Background -> {
                    Null, {LightGray}}, Alignment -> Left, Frame -> 
                    LightGray]}, False]], DynamicModuleValues -> Automatic], 
                    Setting[#, {0}]& ]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless"], " in ", "next_expression"}], 
                    Column[{
                    
                    Column[{
                    "  69.          constants.WXF_CONSTANTS.RuleDelayed: \
\"consume_rule_delayed\",", "  70.      }", "  71.  ", 
                    "  72.      def next_expression(self, tokens, **kwargs):",
                     "  73.          \"\"\"Deserialize the next expression \
starting at the next token yield by `tokens`.\"\"\"", 
                    "  74.          token = next(tokens)", 
                    "  75.          consumer = \
self._consumer_from_type(token.wxf_type)", 
                    Item[
                    "  76.          return consumer(token, tokens, **kwargs)",
                     Background -> LightYellow], "  77.  ", 
                    "  78.      def _consumer_from_type(self, wxf_type):", 
                    "  79.          try:", 
                    "  80.              func = self._mapping[wxf_type]", 
                    "  81.          except KeyError:", 
                    "  82.              raise WolframParserException("}, 
                    Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<ExternalEvaluateConsumer globals=4 objects=6>"}, {
                    "tokens", 
                    "<generator object WXFParser.tokens at 0x1755b7e80>"}, {
                    "kwargs", "{}"}, {"token", 
                    "WXFToken<b'f', data=None, len=2>"}, {
                    "consumer", 
                    "<bound method ExternalEvaluateConsumer.consume_function \
of <ExternalEvaluateConsumer globals=4 objects=6>>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless", Evaluator -> Automatic, 
                    Method -> "Preemptive"], "\" in \"", 
                    "\"consume_function\""}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless", Evaluator -> Automatic, 
                    Method -> "Preemptive"], "\" in \"", 
                    "\"consume_function\""}, "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{
                    "\" 323.          self.routes_registry = \
registry(self.builtin_routes, **routes_registry)\""}, {"\" 324.  \""}, {
                    "\" 325.      def consume_function(self, *args, \
**kwargs):\""}, {
                    "\" 326.          expr = super().consume_function(*args, \
**kwargs)\""}, {"\" 327.  \""}, {
                    "\" 328.          if check_wl_symbol(expr, \
self.hook_symbol):\""}, {
                    "\" 329.              assert len(expr.args) == 2\""}, {
                    ItemBox[
                    "\" 330.              return \
self.dispatch_wl_object(*expr.args)\"", Background -> RGBColor[1, 1, 0.85], 
                    StripOnInput -> False]}, {"\" 331.  \""}, {
                    "\" 332.          return expr\""}, {"\" 333.  \""}, {
                    "\" 334.      def dispatch_wl_object(self, route, \
args):\""}, {
                    "\" 335.          return \
self.routes_registry[route](self, *args)\""}, {"\" 336.  \""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\"self\"", 
                    "\"<ExternalEvaluateConsumer globals=4 objects=6>\""}, {
                    "\"args\"", 
                    "\"(<wolframclient.deserializers.wxf.wxfparser.WXFToken \
object at 0x175668f40>, <generator object WXFParser.tokens at \
0x1755b7e80>)\""}, {"\"kwargs\"", "\"{}\""}, {"\"expr\"", 
                    "\"ExternalEvaluate`Private`ExternalEvaluateCommand['Call'\
, (<function edge_distance at 0x175616a20>, None, \
hypernetx.classes.Hypergraph.Hypergraph)]\""}, {"\"__class__\"", 
                    "\"<class \
'wolframclient.utils.externalevaluate.ExternalEvaluateConsumer'>\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Null}}, 
                    "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<ExternalEvaluateConsumer globals=4 objects=6>"}, {
                    "args", 
                    "(<wolframclient.deserializers.wxf.wxfparser.WXFToken \
object at 0x175668f40>, <generator object WXFParser.tokens at \
0x1755b7e80>)"}, {"kwargs", "{}"}, {"expr", 
                    "ExternalEvaluate`Private`ExternalEvaluateCommand['Call', \
(<function edge_distance at 0x175616a20>, None, \
hypernetx.classes.Hypergraph.Hypergraph)]"}, {"__class__", 
                    "<class \
'wolframclient.utils.externalevaluate.ExternalEvaluateConsumer'>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless"], " in ", 
                    "consume_function"}], 
                    Column[{
                    
                    Column[{
                    " 323.          self.routes_registry = \
registry(self.builtin_routes, **routes_registry)", " 324.  ", 
                    " 325.      def consume_function(self, *args, **kwargs):",
                     " 326.          expr = super().consume_function(*args, \
**kwargs)", " 327.  ", 
                    " 328.          if check_wl_symbol(expr, \
self.hook_symbol):", " 329.              assert len(expr.args) == 2", 
                    Item[
                    " 330.              return \
self.dispatch_wl_object(*expr.args)", Background -> LightYellow], " 331.  ", 
                    " 332.          return expr", " 333.  ", 
                    " 334.      def dispatch_wl_object(self, route, args):", 
                    " 335.          return self.routes_registry[route](self, \
*args)", " 336.  "}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<ExternalEvaluateConsumer globals=4 objects=6>"}, {
                    "args", 
                    "(<wolframclient.deserializers.wxf.wxfparser.WXFToken \
object at 0x175668f40>, <generator object WXFParser.tokens at \
0x1755b7e80>)"}, {"kwargs", "{}"}, {"expr", 
                    "ExternalEvaluate`Private`ExternalEvaluateCommand['Call', \
(<function edge_distance at 0x175616a20>, None, \
hypernetx.classes.Hypergraph.Hypergraph)]"}, {
                    "__class__", 
                    "<class \
'wolframclient.utils.externalevaluate.ExternalEvaluateConsumer'>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless", Evaluator -> Automatic, 
                    Method -> "Preemptive"], "\" in \"", 
                    "\"dispatch_wl_object\""}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless", Evaluator -> Automatic, 
                    Method -> "Preemptive"], "\" in \"", 
                    "\"dispatch_wl_object\""}, "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{
                    "\" 328.          if check_wl_symbol(expr, \
self.hook_symbol):\""}, {
                    "\" 329.              assert len(expr.args) == 2\""}, {
                    "\" 330.              return \
self.dispatch_wl_object(*expr.args)\""}, {"\" 331.  \""}, {
                    "\" 332.          return expr\""}, {"\" 333.  \""}, {
                    "\" 334.      def dispatch_wl_object(self, route, \
args):\""}, {
                    ItemBox[
                    "\" 335.          return \
self.routes_registry[route](self, *args)\"", Background -> 
                    RGBColor[1, 1, 0.85], StripOnInput -> False]}, {
                    "\" 336.  \""}, {"\" 337.      def __repr__(self):\""}, {
                    "\" 338.          return \\\"<{} globals={} objects={}>\\\
\".format(\""}, {
                    "\" 339.              self.__class__.__name__, \
len(self.globals_registry), len(self.objects_registry)\""}, {
                    "\" 340.          )\""}, {"\" 341.  \""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\"self\"", 
                    "\"<ExternalEvaluateConsumer globals=4 objects=6>\""}, {
                    "\"route\"", "\"Call\""}, {"\"args\"", 
                    "\"(<function edge_distance at 0x175616a20>, None, \
hypernetx.classes.Hypergraph.Hypergraph)\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Null}}, "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<ExternalEvaluateConsumer globals=4 objects=6>"}, {
                    "route", "Call"}, {"args", 
                    "(<function edge_distance at 0x175616a20>, None, \
hypernetx.classes.Hypergraph.Hypergraph)"}}, Background -> {
                    Null, {LightGray}}, Alignment -> Left, Frame -> 
                    LightGray]}, False]], DynamicModuleValues -> Automatic], 
                    Setting[#, {0}]& ]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless"], " in ", 
                    "dispatch_wl_object"}], 
                    Column[{
                    
                    Column[{
                    " 328.          if check_wl_symbol(expr, \
self.hook_symbol):", " 329.              assert len(expr.args) == 2", 
                    " 330.              return \
self.dispatch_wl_object(*expr.args)", " 331.  ", " 332.          return expr",
                     " 333.  ", 
                    " 334.      def dispatch_wl_object(self, route, args):", 
                    Item[
                    " 335.          return self.routes_registry[route](self, \
*args)", Background -> LightYellow], " 336.  ", 
                    " 337.      def __repr__(self):", 
                    " 338.          return \"<{} globals={} \
objects={}>\".format(", 
                    " 339.              self.__class__.__name__, \
len(self.globals_registry), len(self.objects_registry)", " 340.          )", 
                    " 341.  "}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<ExternalEvaluateConsumer globals=4 objects=6>"}, {
                    "route", "Call"}, {"args", 
                    "(<function edge_distance at 0x175616a20>, None, \
hypernetx.classes.Hypergraph.Hypergraph)"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = True}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless", Evaluator -> Automatic, 
                    Method -> "Preemptive"], "\" in \"", "\"Call\""}, 
                    "RowDefault"]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless", Evaluator -> Automatic, 
                    Method -> "Preemptive"], "\" in \"", "\"Call\""}, 
                    "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{"\" 245.  \""}, {"\" 246.  \""}, {
                    "\" 247.  @routes.register_function\""}, {
                    "\" 248.  def Call(consumer, result, *args):\""}, {
                    "\" 249.  \""}, {
                    "\" 250.      pos, kwargs = unpack_optionals(args)\""}, {
                    "\" 251.  \""}, {
                    ItemBox[
                    "\" 252.      return result(*pos, **kwargs)\"", 
                    Background -> RGBColor[1, 1, 0.85], StripOnInput -> 
                    False]}, {"\" 253.  \""}, {"\" 254.  \""}, {
                    "\" 255.  @routes.register_function\""}, {
                    "\" 256.  def MethodCall(consumer, result, names, *args):\
\""}, {"\" 257.      return Call(consumer, GetAttribute(consumer, result, \
names), *args)\""}, {"\" 258.  \""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\"consumer\"", 
                    "\"<ExternalEvaluateConsumer globals=4 objects=6>\""}, {
                    "\"result\"", 
                    "\"<function edge_distance at 0x175616a20>\""}, {
                    "\"args\"", 
                    "\"(None, hypernetx.classes.Hypergraph.Hypergraph,)\""}, {
                    "\"pos\"", 
                    "\"[None, hypernetx.classes.Hypergraph.Hypergraph]\""}, {
                    "\"kwargs\"", "\"{}\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Null}}, "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"consumer", 
                    "<ExternalEvaluateConsumer globals=4 objects=6>"}, {
                    "result", "<function edge_distance at 0x175616a20>"}, {
                    "args", 
                    "(None, hypernetx.classes.Hypergraph.Hypergraph,)"}, {
                    "pos", "[None, \
hypernetx.classes.Hypergraph.Hypergraph]"}, {"kwargs", "{}"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless"], " in ", "Call"}], 
                    Column[{
                    
                    Column[{" 245.  ", " 246.  ", 
                    " 247.  @routes.register_function", 
                    " 248.  def Call(consumer, result, *args):", " 249.  ", 
                    " 250.      pos, kwargs = unpack_optionals(args)", 
                    " 251.  ", 
                    Item[
                    " 252.      return result(*pos, **kwargs)", Background -> 
                    LightYellow], " 253.  ", " 254.  ", 
                    " 255.  @routes.register_function", 
                    " 256.  def MethodCall(consumer, result, names, *args):", 
                    " 257.      return Call(consumer, GetAttribute(consumer, \
result, names), *args)", " 258.  "}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"consumer", 
                    "<ExternalEvaluateConsumer globals=4 objects=6>"}, {
                    "result", "<function edge_distance at 0x175616a20>"}, {
                    "args", 
                    "(None, hypernetx.classes.Hypergraph.Hypergraph,)"}, {
                    "pos", "[None, \
hypernetx.classes.Hypergraph.Hypergraph]"}, {"kwargs", "{}"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, True]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = True}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Users/arnoudb/hypernetx/Python/Hypergraph/Hypergraph.\
py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Users/arnoudb/hypernetx/Python/Hypergraph/Hypergraph.\
py"], 
                    SystemOpen[
                    "/Users/arnoudb/hypernetx/Python/Hypergraph/Hypergraph.\
py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"edge_distance\""}, 
                    "RowDefault"]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Users/arnoudb/hypernetx/Python/Hypergraph/Hypergraph.\
py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Users/arnoudb/hypernetx/Python/Hypergraph/Hypergraph.\
py"], 
                    SystemOpen[
                    "/Users/arnoudb/hypernetx/Python/Hypergraph/Hypergraph.\
py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"edge_distance\""}, 
                    "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{"\"  63.  def edge_col(hg):\""}, {
                    "\"  64.      return hg.edge_col()\""}, {"\"  65.  \""}, {
                    "\"  66.  def edge_diameter(hg):\""}, {
                    "\"  67.      return hg.edge_diameter()\""}, {
                    "\"  68.  \""}, {"\"  69.  def edge_distance(hg):\""}, {
                    ItemBox[
                    "\"  70.      return hg.edge_distance()\"", Background -> 
                    RGBColor[1, 1, 0.85], StripOnInput -> False]}, {
                    "\"  71.  \""}, {"\"  72.  def edge_neighbors(hg):\""}, {
                    "\"  73.      return hg.edge_neighbors()\""}, {
                    "\"  74.  \""}, {"\"  75.  def edge_properties(hg):\""}, {
                    "\"  76.      return hg.edge_properties()\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\"hg\"", 
                    "\"None, <class \
'hypernetx.classes.Hypergraph.Hypergraph'>\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Null}}, "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"hg", 
                    "None, <class \
'hypernetx.classes.Hypergraph.Hypergraph'>"}}, Background -> {
                    Null, {LightGray}}, Alignment -> Left, Frame -> 
                    LightGray]}, False]], DynamicModuleValues -> Automatic], 
                    Setting[#, {0}]& ]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Users/arnoudb/hypernetx/Python/Hypergraph/Hypergraph.\
py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Users/arnoudb/hypernetx/Python/Hypergraph/Hypergraph.\
py"], 
                    SystemOpen[
                    "/Users/arnoudb/hypernetx/Python/Hypergraph/Hypergraph.\
py"]], Appearance -> "Frameless"], " in ", "edge_distance"}], 
                    Column[{
                    
                    Column[{"  63.  def edge_col(hg):", 
                    "  64.      return hg.edge_col()", "  65.  ", 
                    "  66.  def edge_diameter(hg):", 
                    "  67.      return hg.edge_diameter()", "  68.  ", 
                    "  69.  def edge_distance(hg):", 
                    Item[
                    "  70.      return hg.edge_distance()", Background -> 
                    LightYellow], "  71.  ", "  72.  def edge_neighbors(hg):",
                     "  73.      return hg.edge_neighbors()", "  74.  ", 
                    "  75.  def edge_properties(hg):", 
                    "  76.      return hg.edge_properties()"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"hg", 
                    "None, <class \
'hypernetx.classes.Hypergraph.Hypergraph'>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, True]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], FontFamily -> "Courier", StripOnInput -> 
                    False], ImageMargins -> 0]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    
                    Row[{"TypeError", " ", 
                    "Hypergraph.edge_distance() missing 2 required positional \
arguments: 'source' and 'target'"}], 
                    Style[
                    Column[{
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/language/\
decorators.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/language/\
decorators.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/language/\
decorators.py"]], Appearance -> "Frameless"], " in ", "safe_wl_execute"}], 
                    Column[{
                    
                    Column[{
                    "  14.      \"wl\": b'Failure[\"PythonFailure\", \
<|\"MessageTemplate\" -> \"Unexpected error occurred.\"|>]',", "  15.  }", 
                    "  16.  ", "  17.  ", 
                    "  18.  def safe_wl_execute(function, args=(), opts={}, \
export_opts={}, exception_class=None):", "  19.  ", "  20.      try:", 
                    Item[
                    "  21.          return export(function(*args, **opts), \
**export_opts)", Background -> LightYellow], 
                    "  22.      except Exception as export_exception:", 
                    "  23.          try:", "  24.              try:", 
                    "  25.  ", 
                    "  26.                  # The user can provide an \
exception class, and it can be broken, in which case we are running another", 
                    "  27.                  # try / except to return errors \
that are happening during class serialization"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "function", "<function handle_message at 0x103b78fe0>"}, {
                    "args", "(<zmq.Socket(zmq.PAIR) at 0x103b54c20>,)"}, {
                    "opts", 
                    "{'consumer': <ExternalEvaluateConsumer globals=4 \
objects=6>}"}, {"export_opts", 
                    "{'object_processor': <function \
start_zmq_loop.<locals>.<lambda> at 0x102e009a0>, 'target_format': 'wxf'}"}, {
                    "exception_class", "None"}, {
                    "export_exception", 
                    "Hypergraph.edge_distance() missing 2 required positional \
arguments: 'source' and 'target'"}}, Background -> {Null, {LightGray}}, 
                    Alignment -> Left, Frame -> LightGray]}]}]}, False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless"], " in ", 
                    "handle_message"}], 
                    Column[{
                    
                    Column[{
                    " 350.          self.socket.send(zmq.Frame(bytes))", 
                    " 351.  ", " 352.      def send_side_effect(self, expr):",
                     " 353.          \
self.write(export(self.keep_listening(expr), target_format=\"wxf\"))", 
                    " 354.  ", " 355.  ", 
                    " 356.  def handle_message(socket, consumer):", 
                    Item[
                    " 357.      result = \
binary_deserialize(socket.recv(copy=False).buffer, consumer=consumer)", 
                    Background -> LightYellow], " 358.  ", 
                    " 359.      sys.stdout.flush()", 
                    " 360.      return result", " 361.  ", " 362.  ", 
                    " 363.  def start_zmq_instance(port=None, \
write_to_stdout=True, **opts):"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "socket", "<zmq.Socket(zmq.PAIR) at 0x103b54c20>"}, {
                    "consumer", 
                    "<ExternalEvaluateConsumer globals=4 objects=6>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
__init__.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
__init__.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
__init__.py"]], Appearance -> "Frameless"], " in ", "binary_deserialize"}], 
                    Column[{
                    
                    Column[{"  33.  ", "  34.      \"\"\"", 
                    "  35.      parser = WXFParser(wxf_input)", 
                    "  36.      if consumer is None:", 
                    "  37.          consumer = WXFConsumerNumpy()", "  38.  ",
                     "  39.      try:", 
                    Item[
                    "  40.          o = \
consumer.next_expression(parser.tokens(), **kwargs)", Background -> 
                    LightYellow], "  41.      except StopIteration:", 
                    "  42.          raise WolframParserException(", 
                    "  43.              \"Input data does not represent a \
valid expression in WXF format. Expecting more input data.\"", 
                    "  44.          )", 
                    "  45.      if not \
parser.context.is_valid_final_state():", 
                    "  46.          raise WolframParserException("}, 
                    Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "wxf_input", 
                    "8:f\.02s0ExternalEvaluate`Private`\
ExternalEvaluateCommandS\n\
ReturnTypef\.02s\.04Listf\.02s0ExternalEvaluate`Private`\
ExternalEvaluateCommandS\.04Callf\.02s\.04Listf\.02s0ExternalEvaluate`Private`\
ExternalEvaluateCommandS\.05Fetchf\.01\.01\.01\.01\.01\.01\.01\.01s\.04ListL \
jau\.01\.01\.01\.01\.01\.01\.01\.01\.00\.00\.00f\.02s0ExternalEvaluate`\
Private`ExternalEvaluateCommandS\.05Fetchf\.01\.01\.01\.01\.01\.01\.01\.01s\
\.04ListLau\.01\.01\.01\.01\.01\.01\.01\.01\.00\.00\.00S\nExpression"}, {
                    "consumer", 
                    "<ExternalEvaluateConsumer globals=4 objects=6>"}, {
                    "kwargs", "{}"}, {
                    "parser", 
                    "<wolframclient.deserializers.wxf.wxfparser.WXFParser \
object at 0x1745d3690>"}}, Background -> {Null, {LightGray}}, Alignment -> 
                    Left, Frame -> LightGray]}]}]}, False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless"], " in ", "next_expression"}], 
                    Column[{
                    
                    Column[{
                    "  69.          constants.WXF_CONSTANTS.RuleDelayed: \
\"consume_rule_delayed\",", "  70.      }", "  71.  ", 
                    "  72.      def next_expression(self, tokens, **kwargs):",
                     "  73.          \"\"\"Deserialize the next expression \
starting at the next token yield by `tokens`.\"\"\"", 
                    "  74.          token = next(tokens)", 
                    "  75.          consumer = \
self._consumer_from_type(token.wxf_type)", 
                    Item[
                    "  76.          return consumer(token, tokens, **kwargs)",
                     Background -> LightYellow], "  77.  ", 
                    "  78.      def _consumer_from_type(self, wxf_type):", 
                    "  79.          try:", 
                    "  80.              func = self._mapping[wxf_type]", 
                    "  81.          except KeyError:", 
                    "  82.              raise WolframParserException("}, 
                    Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "self", 
                    "<ExternalEvaluateConsumer globals=4 objects=6>"}, {
                    "tokens", 
                    "<generator object WXFParser.tokens at 0x1755b7e80>"}, {
                    "kwargs", "{}"}, {
                    "token", "WXFToken<b'f', data=None, len=2>"}, {
                    "consumer", 
                    "<bound method ExternalEvaluateConsumer.consume_function \
of <ExternalEvaluateConsumer globals=4 objects=6>>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless"], " in ", 
                    "consume_function"}], 
                    Column[{
                    
                    Column[{" 319.  ", 
                    " 320.      def __init__(self, routes_registry={}, \
objects_registry={}, globals_registry={}):", 
                    " 321.          self.objects_registry = \
registry(objects_registry)", 
                    " 322.          self.globals_registry = \
registry(globals_registry)", 
                    " 323.          self.routes_registry = \
registry(self.builtin_routes, **routes_registry)", " 324.  ", 
                    " 325.      def consume_function(self, *args, **kwargs):", 
                    Item[
                    " 326.          expr = super().consume_function(*args, \
**kwargs)", Background -> LightYellow], " 327.  ", 
                    " 328.          if check_wl_symbol(expr, \
self.hook_symbol):", " 329.              assert len(expr.args) == 2", 
                    " 330.              return \
self.dispatch_wl_object(*expr.args)", " 331.  ", 
                    " 332.          return expr"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "self", 
                    "<ExternalEvaluateConsumer globals=4 objects=6>"}, {
                    "args", 
                    "(<wolframclient.deserializers.wxf.wxfparser.WXFToken \
object at 0x17566bb50>, <generator object WXFParser.tokens at \
0x1755b7e80>)"}, {"kwargs", "{}"}, {
                    "__class__", 
                    "<class \
'wolframclient.utils.externalevaluate.ExternalEvaluateConsumer'>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless"], " in ", "consume_function"}], 
                    Column[{
                    
                    Column[{
                    "  94.          Return a :class:`list` if the head is \
symbol `List`, otherwise returns the result of \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`", "  95.          applied to the head and arguments.", "  96.  ", 
                    "  97.          Usually custom parsing rules target \
Functions, but not List. To do so, it is recommended to override", 
                    "  98.          \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`.", "  99.          \"\"\"", 
                    " 100.          head = self.next_expression(tokens, \
**kwargs)", 
                    Item[
                    " 101.          args = tuple(", Background -> 
                    LightYellow], 
                    " 102.              self.next_expression(tokens, \
**kwargs) for i in range(current_token.length)", " 103.          )", 
                    " 104.          if head == self._LIST:", 
                    " 105.              return args", " 106.          else:", 
                    " 107.              return self.build_function(head, \
args, **kwargs)"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "self", 
                    "<ExternalEvaluateConsumer globals=4 objects=6>"}, {
                    "current_token", "WXFToken<b'f', data=None, len=2>"}, {
                    "tokens", 
                    "<generator object WXFParser.tokens at 0x1755b7e80>"}, {
                    "kwargs", "{}"}, {
                    "head", 
                    "ExternalEvaluate`Private`ExternalEvaluateCommand"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless"], " in ", "<genexpr>"}], 
                    Column[{
                    
                    Column[{
                    "  95.          applied to the head and arguments.", 
                    "  96.  ", 
                    "  97.          Usually custom parsing rules target \
Functions, but not List. To do so, it is recommended to override", 
                    "  98.          \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`.", "  99.          \"\"\"", 
                    " 100.          head = self.next_expression(tokens, \
**kwargs)", " 101.          args = tuple(", 
                    Item[
                    " 102.              self.next_expression(tokens, \
**kwargs) for i in range(current_token.length)", Background -> LightYellow], 
                    " 103.          )", 
                    " 104.          if head == self._LIST:", 
                    " 105.              return args", " 106.          else:", 
                    " 107.              return self.build_function(head, \
args, **kwargs)", " 108.  "}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    ".0", "<range_iterator object at 0x175687360>"}, {
                    "i", "1"}, {"kwargs", "{}"}, {
                    "self", 
                    "<ExternalEvaluateConsumer globals=4 objects=6>"}, {
                    "tokens", 
                    "<generator object WXFParser.tokens at 0x1755b7e80>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless"], " in ", "next_expression"}], 
                    Column[{
                    
                    Column[{
                    "  69.          constants.WXF_CONSTANTS.RuleDelayed: \
\"consume_rule_delayed\",", "  70.      }", "  71.  ", 
                    "  72.      def next_expression(self, tokens, **kwargs):",
                     "  73.          \"\"\"Deserialize the next expression \
starting at the next token yield by `tokens`.\"\"\"", 
                    "  74.          token = next(tokens)", 
                    "  75.          consumer = \
self._consumer_from_type(token.wxf_type)", 
                    Item[
                    "  76.          return consumer(token, tokens, **kwargs)",
                     Background -> LightYellow], "  77.  ", 
                    "  78.      def _consumer_from_type(self, wxf_type):", 
                    "  79.          try:", 
                    "  80.              func = self._mapping[wxf_type]", 
                    "  81.          except KeyError:", 
                    "  82.              raise WolframParserException("}, 
                    Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "self", 
                    "<ExternalEvaluateConsumer globals=4 objects=6>"}, {
                    "tokens", 
                    "<generator object WXFParser.tokens at 0x1755b7e80>"}, {
                    "kwargs", "{}"}, {
                    "token", "WXFToken<b'f', data=None, len=2>"}, {
                    "consumer", 
                    "<bound method ExternalEvaluateConsumer.consume_function \
of <ExternalEvaluateConsumer globals=4 objects=6>>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless"], " in ", 
                    "consume_function"}], 
                    Column[{
                    
                    Column[{" 319.  ", 
                    " 320.      def __init__(self, routes_registry={}, \
objects_registry={}, globals_registry={}):", 
                    " 321.          self.objects_registry = \
registry(objects_registry)", 
                    " 322.          self.globals_registry = \
registry(globals_registry)", 
                    " 323.          self.routes_registry = \
registry(self.builtin_routes, **routes_registry)", " 324.  ", 
                    " 325.      def consume_function(self, *args, **kwargs):", 
                    Item[
                    " 326.          expr = super().consume_function(*args, \
**kwargs)", Background -> LightYellow], " 327.  ", 
                    " 328.          if check_wl_symbol(expr, \
self.hook_symbol):", " 329.              assert len(expr.args) == 2", 
                    " 330.              return \
self.dispatch_wl_object(*expr.args)", " 331.  ", 
                    " 332.          return expr"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "self", 
                    "<ExternalEvaluateConsumer globals=4 objects=6>"}, {
                    "args", 
                    "(<wolframclient.deserializers.wxf.wxfparser.WXFToken \
object at 0x17566bc40>, <generator object WXFParser.tokens at \
0x1755b7e80>)"}, {"kwargs", "{}"}, {
                    "__class__", 
                    "<class \
'wolframclient.utils.externalevaluate.ExternalEvaluateConsumer'>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless"], " in ", "consume_function"}], 
                    Column[{
                    
                    Column[{
                    "  94.          Return a :class:`list` if the head is \
symbol `List`, otherwise returns the result of \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`", "  95.          applied to the head and arguments.", "  96.  ", 
                    "  97.          Usually custom parsing rules target \
Functions, but not List. To do so, it is recommended to override", 
                    "  98.          \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`.", "  99.          \"\"\"", 
                    " 100.          head = self.next_expression(tokens, \
**kwargs)", 
                    Item[
                    " 101.          args = tuple(", Background -> 
                    LightYellow], 
                    " 102.              self.next_expression(tokens, \
**kwargs) for i in range(current_token.length)", " 103.          )", 
                    " 104.          if head == self._LIST:", 
                    " 105.              return args", " 106.          else:", 
                    " 107.              return self.build_function(head, \
args, **kwargs)"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "self", 
                    "<ExternalEvaluateConsumer globals=4 objects=6>"}, {
                    "current_token", "WXFToken<b'f', data=None, len=2>"}, {
                    "tokens", 
                    "<generator object WXFParser.tokens at 0x1755b7e80>"}, {
                    "kwargs", "{}"}, {"head", "List"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless"], " in ", "<genexpr>"}], 
                    Column[{
                    
                    Column[{
                    "  95.          applied to the head and arguments.", 
                    "  96.  ", 
                    "  97.          Usually custom parsing rules target \
Functions, but not List. To do so, it is recommended to override", 
                    "  98.          \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`.", "  99.          \"\"\"", 
                    " 100.          head = self.next_expression(tokens, \
**kwargs)", " 101.          args = tuple(", 
                    Item[
                    " 102.              self.next_expression(tokens, \
**kwargs) for i in range(current_token.length)", Background -> LightYellow], 
                    " 103.          )", 
                    " 104.          if head == self._LIST:", 
                    " 105.              return args", " 106.          else:", 
                    " 107.              return self.build_function(head, \
args, **kwargs)", " 108.  "}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    ".0", "<range_iterator object at 0x1756879c0>"}, {
                    "i", "0"}, {"kwargs", "{}"}, {
                    "self", 
                    "<ExternalEvaluateConsumer globals=4 objects=6>"}, {
                    "tokens", 
                    "<generator object WXFParser.tokens at 0x1755b7e80>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless"], " in ", "next_expression"}], 
                    Column[{
                    
                    Column[{
                    "  69.          constants.WXF_CONSTANTS.RuleDelayed: \
\"consume_rule_delayed\",", "  70.      }", "  71.  ", 
                    "  72.      def next_expression(self, tokens, **kwargs):",
                     "  73.          \"\"\"Deserialize the next expression \
starting at the next token yield by `tokens`.\"\"\"", 
                    "  74.          token = next(tokens)", 
                    "  75.          consumer = \
self._consumer_from_type(token.wxf_type)", 
                    Item[
                    "  76.          return consumer(token, tokens, **kwargs)",
                     Background -> LightYellow], "  77.  ", 
                    "  78.      def _consumer_from_type(self, wxf_type):", 
                    "  79.          try:", 
                    "  80.              func = self._mapping[wxf_type]", 
                    "  81.          except KeyError:", 
                    "  82.              raise WolframParserException("}, 
                    Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "self", 
                    "<ExternalEvaluateConsumer globals=4 objects=6>"}, {
                    "tokens", 
                    "<generator object WXFParser.tokens at 0x1755b7e80>"}, {
                    "kwargs", "{}"}, {
                    "token", "WXFToken<b'f', data=None, len=2>"}, {
                    "consumer", 
                    "<bound method ExternalEvaluateConsumer.consume_function \
of <ExternalEvaluateConsumer globals=4 objects=6>>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless"], " in ", 
                    "consume_function"}], 
                    Column[{
                    
                    Column[{
                    " 323.          self.routes_registry = \
registry(self.builtin_routes, **routes_registry)", " 324.  ", 
                    " 325.      def consume_function(self, *args, **kwargs):",
                     " 326.          expr = super().consume_function(*args, \
**kwargs)", " 327.  ", 
                    " 328.          if check_wl_symbol(expr, \
self.hook_symbol):", " 329.              assert len(expr.args) == 2", 
                    Item[
                    " 330.              return \
self.dispatch_wl_object(*expr.args)", Background -> LightYellow], " 331.  ", 
                    " 332.          return expr", " 333.  ", 
                    " 334.      def dispatch_wl_object(self, route, args):", 
                    " 335.          return self.routes_registry[route](self, \
*args)", " 336.  "}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "self", 
                    "<ExternalEvaluateConsumer globals=4 objects=6>"}, {
                    "args", 
                    "(<wolframclient.deserializers.wxf.wxfparser.WXFToken \
object at 0x175668f40>, <generator object WXFParser.tokens at \
0x1755b7e80>)"}, {"kwargs", "{}"}, {
                    "expr", 
                    "ExternalEvaluate`Private`ExternalEvaluateCommand['Call', \
(<function edge_distance at 0x175616a20>, None, \
hypernetx.classes.Hypergraph.Hypergraph)]"}, {
                    "__class__", 
                    "<class \
'wolframclient.utils.externalevaluate.ExternalEvaluateConsumer'>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless"], " in ", 
                    "dispatch_wl_object"}], 
                    Column[{
                    
                    Column[{
                    " 328.          if check_wl_symbol(expr, \
self.hook_symbol):", " 329.              assert len(expr.args) == 2", 
                    " 330.              return \
self.dispatch_wl_object(*expr.args)", " 331.  ", " 332.          return expr",
                     " 333.  ", 
                    " 334.      def dispatch_wl_object(self, route, args):", 
                    Item[
                    " 335.          return self.routes_registry[route](self, \
*args)", Background -> LightYellow], " 336.  ", 
                    " 337.      def __repr__(self):", 
                    " 338.          return \"<{} globals={} \
objects={}>\".format(", 
                    " 339.              self.__class__.__name__, \
len(self.globals_registry), len(self.objects_registry)", " 340.          )", 
                    " 341.  "}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "self", 
                    "<ExternalEvaluateConsumer globals=4 objects=6>"}, {
                    "route", "Call"}, {
                    "args", 
                    "(<function edge_distance at 0x175616a20>, None, \
hypernetx.classes.Hypergraph.Hypergraph)"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless"], " in ", "Call"}], 
                    Column[{
                    
                    Column[{" 245.  ", " 246.  ", 
                    " 247.  @routes.register_function", 
                    " 248.  def Call(consumer, result, *args):", " 249.  ", 
                    " 250.      pos, kwargs = unpack_optionals(args)", 
                    " 251.  ", 
                    Item[
                    " 252.      return result(*pos, **kwargs)", Background -> 
                    LightYellow], " 253.  ", " 254.  ", 
                    " 255.  @routes.register_function", 
                    " 256.  def MethodCall(consumer, result, names, *args):", 
                    " 257.      return Call(consumer, GetAttribute(consumer, \
result, names), *args)", " 258.  "}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "consumer", 
                    "<ExternalEvaluateConsumer globals=4 objects=6>"}, {
                    "result", "<function edge_distance at 0x175616a20>"}, {
                    "args", 
                    "(None, hypernetx.classes.Hypergraph.Hypergraph,)"}, {
                    "pos", "[None, \
hypernetx.classes.Hypergraph.Hypergraph]"}, {"kwargs", "{}"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, True], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Users/arnoudb/hypernetx/Python/Hypergraph/Hypergraph.\
py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Users/arnoudb/hypernetx/Python/Hypergraph/Hypergraph.\
py"], 
                    SystemOpen[
                    "/Users/arnoudb/hypernetx/Python/Hypergraph/Hypergraph.\
py"]], Appearance -> "Frameless"], " in ", "edge_distance"}], 
                    Column[{
                    Column[{"  63.  def edge_col(hg):", 
                    "  64.      return hg.edge_col()", "  65.  ", 
                    "  66.  def edge_diameter(hg):", 
                    "  67.      return hg.edge_diameter()", "  68.  ", 
                    "  69.  def edge_distance(hg):", 
                    Item[
                    "  70.      return hg.edge_distance()", Background -> 
                    LightYellow], "  71.  ", "  72.  def edge_neighbors(hg):",
                     "  73.      return hg.edge_neighbors()", "  74.  ", 
                    "  75.  def edge_properties(hg):", 
                    "  76.      return hg.edge_properties()"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "hg", "None, <class \
'hypernetx.classes.Hypergraph.Hypergraph'>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, True]}], FontFamily -> 
                    "Courier"]}, True]], DynamicModuleValues -> Automatic], 
                    Setting[#, {0}]& ], HoldForm], "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  Failure[
  "PythonError", <|
   "MessageTemplate" :> 
    "Hypergraph.edge_distance() missing 2 required positional arguments: \
'source' and 'target'", "MessageParameters" :> <||>, "FailureCode" :> 
    "TypeError", "Traceback" :> OpenerView[{
       Row[{
        "TypeError", " ", 
         "Hypergraph.edge_distance() missing 2 required positional arguments: \
'source' and 'target'"}], 
       Style[
        Column[{
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/language/\
decorators.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/language/\
decorators.py"], 
                SystemOpen[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/language/\
decorators.py"]], Appearance -> "Frameless"], " in ", "safe_wl_execute"}], 
            Column[{
              
              Column[{"  14.      \"wl\": b'Failure[\"PythonFailure\", \
<|\"MessageTemplate\" -> \"Unexpected error occurred.\"|>]',", "  15.  }", 
                "  16.  ", "  17.  ", 
                "  18.  def safe_wl_execute(function, args=(), opts={}, \
export_opts={}, exception_class=None):", "  19.  ", "  20.      try:", 
                Item[
                "  21.          return export(function(*args, **opts), \
**export_opts)", Background -> LightYellow], 
                "  22.      except Exception as export_exception:", 
                "  23.          try:", "  24.              try:", "  25.  ", 
                "  26.                  # The user can provide an exception \
class, and it can be broken, in which case we are running another", 
                "  27.                  # try / except to return errors that \
are happening during class serialization"}, Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  "function", "<function handle_message at 0x103b78fe0>"}, {
                  "args", "(<zmq.Socket(zmq.PAIR) at 0x103b54c20>,)"}, {
                  "opts", 
                   "{'consumer': <ExternalEvaluateConsumer globals=4 \
objects=6>}"}, {"export_opts", 
                   "{'object_processor': <function \
start_zmq_loop.<locals>.<lambda> at 0x102e009a0>, 'target_format': 'wxf'}"}, {
                  "exception_class", "None"}, {
                  "export_exception", 
                   "Hypergraph.edge_distance() missing 2 required positional \
arguments: 'source' and 'target'"}}, Background -> {Null, {LightGray}}, 
                 Alignment -> Left, Frame -> LightGray]}]}]}, False], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                SystemOpen[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless"], " in ", 
              "handle_message"}], 
            Column[{
              
              Column[{" 350.          self.socket.send(zmq.Frame(bytes))", 
                " 351.  ", " 352.      def send_side_effect(self, expr):", 
                " 353.          self.write(export(self.keep_listening(expr), \
target_format=\"wxf\"))", " 354.  ", " 355.  ", 
                " 356.  def handle_message(socket, consumer):", 
                Item[
                " 357.      result = \
binary_deserialize(socket.recv(copy=False).buffer, consumer=consumer)", 
                 Background -> LightYellow], " 358.  ", 
                " 359.      sys.stdout.flush()", " 360.      return result", 
                " 361.  ", " 362.  ", 
                " 363.  def start_zmq_instance(port=None, \
write_to_stdout=True, **opts):"}, Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  "socket", "<zmq.Socket(zmq.PAIR) at 0x103b54c20>"}, {
                  "consumer", 
                   "<ExternalEvaluateConsumer globals=4 objects=6>"}}, 
                 Background -> {Null, {LightGray}}, Alignment -> Left, Frame -> 
                 LightGray]}]}]}, False], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
__init__.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
__init__.py"], 
                SystemOpen[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
__init__.py"]], Appearance -> "Frameless"], " in ", "binary_deserialize"}], 
            Column[{
              
              Column[{"  33.  ", "  34.      \"\"\"", 
                "  35.      parser = WXFParser(wxf_input)", 
                "  36.      if consumer is None:", 
                "  37.          consumer = WXFConsumerNumpy()", "  38.  ", 
                "  39.      try:", 
                Item[
                "  40.          o = consumer.next_expression(parser.tokens(), \
**kwargs)", Background -> LightYellow], "  41.      except StopIteration:", 
                "  42.          raise WolframParserException(", 
                "  43.              \"Input data does not represent a valid \
expression in WXF format. Expecting more input data.\"", "  44.          )", 
                "  45.      if not parser.context.is_valid_final_state():", 
                "  46.          raise WolframParserException("}, 
               Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  "wxf_input", 
                   "8:f\.02s0ExternalEvaluate`Private`\
ExternalEvaluateCommandS\n\
ReturnTypef\.02s\.04Listf\.02s0ExternalEvaluate`Private`\
ExternalEvaluateCommandS\.04Callf\.02s\.04Listf\.02s0ExternalEvaluate`Private`\
ExternalEvaluateCommandS\.05Fetchf\.01\.01\.01\.01\.01\.01\.01\.01s\.04ListL \
jau\.01\.01\.01\.01\.01\.01\.01\.01\.00\.00\.00f\.02s0ExternalEvaluate`\
Private`ExternalEvaluateCommandS\.05Fetchf\.01\.01\.01\.01\.01\.01\.01\.01s\
\.04ListLau\.01\.01\.01\.01\.01\.01\.01\.01\.00\.00\.00S\nExpression"}, {
                  "consumer", 
                   "<ExternalEvaluateConsumer globals=4 objects=6>"}, {
                  "kwargs", "{}"}, {
                  "parser", 
                   "<wolframclient.deserializers.wxf.wxfparser.WXFParser \
object at 0x1745d3690>"}}, Background -> {Null, {LightGray}}, Alignment -> 
                 Left, Frame -> LightGray]}]}]}, False], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                SystemOpen[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless"], " in ", "next_expression"}], 
            Column[{
              
              Column[{"  69.          constants.WXF_CONSTANTS.RuleDelayed: \
\"consume_rule_delayed\",", "  70.      }", "  71.  ", 
                "  72.      def next_expression(self, tokens, **kwargs):", 
                "  73.          \"\"\"Deserialize the next expression \
starting at the next token yield by `tokens`.\"\"\"", 
                "  74.          token = next(tokens)", 
                "  75.          consumer = \
self._consumer_from_type(token.wxf_type)", 
                Item[
                "  76.          return consumer(token, tokens, **kwargs)", 
                 Background -> LightYellow], "  77.  ", 
                "  78.      def _consumer_from_type(self, wxf_type):", 
                "  79.          try:", 
                "  80.              func = self._mapping[wxf_type]", 
                "  81.          except KeyError:", 
                "  82.              raise WolframParserException("}, 
               Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  "self", "<ExternalEvaluateConsumer globals=4 objects=6>"}, {
                  "tokens", 
                   "<generator object WXFParser.tokens at 0x1755b7e80>"}, {
                  "kwargs", "{}"}, {
                  "token", "WXFToken<b'f', data=None, len=2>"}, {
                  "consumer", 
                   "<bound method ExternalEvaluateConsumer.consume_function \
of <ExternalEvaluateConsumer globals=4 objects=6>>"}}, 
                 Background -> {Null, {LightGray}}, Alignment -> Left, Frame -> 
                 LightGray]}]}]}, False], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                SystemOpen[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless"], " in ", 
              "consume_function"}], 
            Column[{
              
              Column[{" 319.  ", 
                " 320.      def __init__(self, routes_registry={}, \
objects_registry={}, globals_registry={}):", 
                " 321.          self.objects_registry = \
registry(objects_registry)", 
                " 322.          self.globals_registry = \
registry(globals_registry)", 
                " 323.          self.routes_registry = \
registry(self.builtin_routes, **routes_registry)", " 324.  ", 
                " 325.      def consume_function(self, *args, **kwargs):", 
                Item[
                " 326.          expr = super().consume_function(*args, \
**kwargs)", Background -> LightYellow], " 327.  ", 
                " 328.          if check_wl_symbol(expr, self.hook_symbol):", 
                " 329.              assert len(expr.args) == 2", 
                " 330.              return \
self.dispatch_wl_object(*expr.args)", " 331.  ", 
                " 332.          return expr"}, Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  "self", "<ExternalEvaluateConsumer globals=4 objects=6>"}, {
                  "args", 
                   "(<wolframclient.deserializers.wxf.wxfparser.WXFToken \
object at 0x17566bb50>, <generator object WXFParser.tokens at \
0x1755b7e80>)"}, {"kwargs", "{}"}, {
                  "__class__", 
                   "<class \
'wolframclient.utils.externalevaluate.ExternalEvaluateConsumer'>"}}, 
                 Background -> {Null, {LightGray}}, Alignment -> Left, Frame -> 
                 LightGray]}]}]}, False], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                SystemOpen[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless"], " in ", "consume_function"}], 
            Column[{
              
              Column[{"  94.          Return a :class:`list` if the head is \
symbol `List`, otherwise returns the result of \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`", "  95.          applied to the head and arguments.", "  96.  ", 
                "  97.          Usually custom parsing rules target \
Functions, but not List. To do so, it is recommended to override", 
                "  98.          \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`.", "  99.          \"\"\"", 
                " 100.          head = self.next_expression(tokens, \
**kwargs)", 
                Item[
                " 101.          args = tuple(", Background -> LightYellow], 
                " 102.              self.next_expression(tokens, **kwargs) \
for i in range(current_token.length)", " 103.          )", 
                " 104.          if head == self._LIST:", 
                " 105.              return args", " 106.          else:", 
                " 107.              return self.build_function(head, args, \
**kwargs)"}, Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  "self", "<ExternalEvaluateConsumer globals=4 objects=6>"}, {
                  "current_token", "WXFToken<b'f', data=None, len=2>"}, {
                  "tokens", 
                   "<generator object WXFParser.tokens at 0x1755b7e80>"}, {
                  "kwargs", "{}"}, {
                  "head", 
                   "ExternalEvaluate`Private`ExternalEvaluateCommand"}}, 
                 Background -> {Null, {LightGray}}, Alignment -> Left, Frame -> 
                 LightGray]}]}]}, False], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                SystemOpen[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless"], " in ", "<genexpr>"}], 
            Column[{
              
              Column[{"  95.          applied to the head and arguments.", 
                "  96.  ", 
                "  97.          Usually custom parsing rules target \
Functions, but not List. To do so, it is recommended to override", 
                "  98.          \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`.", "  99.          \"\"\"", 
                " 100.          head = self.next_expression(tokens, \
**kwargs)", " 101.          args = tuple(", 
                Item[
                " 102.              self.next_expression(tokens, **kwargs) \
for i in range(current_token.length)", Background -> LightYellow], 
                " 103.          )", " 104.          if head == self._LIST:", 
                " 105.              return args", " 106.          else:", 
                " 107.              return self.build_function(head, args, \
**kwargs)", " 108.  "}, Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  ".0", "<range_iterator object at 0x175687360>"}, {
                  "i", "1"}, {"kwargs", "{}"}, {
                  "self", "<ExternalEvaluateConsumer globals=4 objects=6>"}, {
                  "tokens", 
                   "<generator object WXFParser.tokens at 0x1755b7e80>"}}, 
                 Background -> {Null, {LightGray}}, Alignment -> Left, Frame -> 
                 LightGray]}]}]}, False], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                SystemOpen[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless"], " in ", "next_expression"}], 
            Column[{
              
              Column[{"  69.          constants.WXF_CONSTANTS.RuleDelayed: \
\"consume_rule_delayed\",", "  70.      }", "  71.  ", 
                "  72.      def next_expression(self, tokens, **kwargs):", 
                "  73.          \"\"\"Deserialize the next expression \
starting at the next token yield by `tokens`.\"\"\"", 
                "  74.          token = next(tokens)", 
                "  75.          consumer = \
self._consumer_from_type(token.wxf_type)", 
                Item[
                "  76.          return consumer(token, tokens, **kwargs)", 
                 Background -> LightYellow], "  77.  ", 
                "  78.      def _consumer_from_type(self, wxf_type):", 
                "  79.          try:", 
                "  80.              func = self._mapping[wxf_type]", 
                "  81.          except KeyError:", 
                "  82.              raise WolframParserException("}, 
               Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  "self", "<ExternalEvaluateConsumer globals=4 objects=6>"}, {
                  "tokens", 
                   "<generator object WXFParser.tokens at 0x1755b7e80>"}, {
                  "kwargs", "{}"}, {
                  "token", "WXFToken<b'f', data=None, len=2>"}, {
                  "consumer", 
                   "<bound method ExternalEvaluateConsumer.consume_function \
of <ExternalEvaluateConsumer globals=4 objects=6>>"}}, 
                 Background -> {Null, {LightGray}}, Alignment -> Left, Frame -> 
                 LightGray]}]}]}, False], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                SystemOpen[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless"], " in ", 
              "consume_function"}], 
            Column[{
              
              Column[{" 319.  ", 
                " 320.      def __init__(self, routes_registry={}, \
objects_registry={}, globals_registry={}):", 
                " 321.          self.objects_registry = \
registry(objects_registry)", 
                " 322.          self.globals_registry = \
registry(globals_registry)", 
                " 323.          self.routes_registry = \
registry(self.builtin_routes, **routes_registry)", " 324.  ", 
                " 325.      def consume_function(self, *args, **kwargs):", 
                Item[
                " 326.          expr = super().consume_function(*args, \
**kwargs)", Background -> LightYellow], " 327.  ", 
                " 328.          if check_wl_symbol(expr, self.hook_symbol):", 
                " 329.              assert len(expr.args) == 2", 
                " 330.              return \
self.dispatch_wl_object(*expr.args)", " 331.  ", 
                " 332.          return expr"}, Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  "self", "<ExternalEvaluateConsumer globals=4 objects=6>"}, {
                  "args", 
                   "(<wolframclient.deserializers.wxf.wxfparser.WXFToken \
object at 0x17566bc40>, <generator object WXFParser.tokens at \
0x1755b7e80>)"}, {"kwargs", "{}"}, {
                  "__class__", 
                   "<class \
'wolframclient.utils.externalevaluate.ExternalEvaluateConsumer'>"}}, 
                 Background -> {Null, {LightGray}}, Alignment -> Left, Frame -> 
                 LightGray]}]}]}, False], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                SystemOpen[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless"], " in ", "consume_function"}], 
            Column[{
              
              Column[{"  94.          Return a :class:`list` if the head is \
symbol `List`, otherwise returns the result of \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`", "  95.          applied to the head and arguments.", "  96.  ", 
                "  97.          Usually custom parsing rules target \
Functions, but not List. To do so, it is recommended to override", 
                "  98.          \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`.", "  99.          \"\"\"", 
                " 100.          head = self.next_expression(tokens, \
**kwargs)", 
                Item[
                " 101.          args = tuple(", Background -> LightYellow], 
                " 102.              self.next_expression(tokens, **kwargs) \
for i in range(current_token.length)", " 103.          )", 
                " 104.          if head == self._LIST:", 
                " 105.              return args", " 106.          else:", 
                " 107.              return self.build_function(head, args, \
**kwargs)"}, Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  "self", "<ExternalEvaluateConsumer globals=4 objects=6>"}, {
                  "current_token", "WXFToken<b'f', data=None, len=2>"}, {
                  "tokens", 
                   "<generator object WXFParser.tokens at 0x1755b7e80>"}, {
                  "kwargs", "{}"}, {"head", "List"}}, 
                 Background -> {Null, {LightGray}}, Alignment -> Left, Frame -> 
                 LightGray]}]}]}, False], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                SystemOpen[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless"], " in ", "<genexpr>"}], 
            Column[{
              
              Column[{"  95.          applied to the head and arguments.", 
                "  96.  ", 
                "  97.          Usually custom parsing rules target \
Functions, but not List. To do so, it is recommended to override", 
                "  98.          \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`.", "  99.          \"\"\"", 
                " 100.          head = self.next_expression(tokens, \
**kwargs)", " 101.          args = tuple(", 
                Item[
                " 102.              self.next_expression(tokens, **kwargs) \
for i in range(current_token.length)", Background -> LightYellow], 
                " 103.          )", " 104.          if head == self._LIST:", 
                " 105.              return args", " 106.          else:", 
                " 107.              return self.build_function(head, args, \
**kwargs)", " 108.  "}, Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  ".0", "<range_iterator object at 0x1756879c0>"}, {
                  "i", "0"}, {"kwargs", "{}"}, {
                  "self", "<ExternalEvaluateConsumer globals=4 objects=6>"}, {
                  "tokens", 
                   "<generator object WXFParser.tokens at 0x1755b7e80>"}}, 
                 Background -> {Null, {LightGray}}, Alignment -> Left, Frame -> 
                 LightGray]}]}]}, False], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                SystemOpen[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless"], " in ", "next_expression"}], 
            Column[{
              
              Column[{"  69.          constants.WXF_CONSTANTS.RuleDelayed: \
\"consume_rule_delayed\",", "  70.      }", "  71.  ", 
                "  72.      def next_expression(self, tokens, **kwargs):", 
                "  73.          \"\"\"Deserialize the next expression \
starting at the next token yield by `tokens`.\"\"\"", 
                "  74.          token = next(tokens)", 
                "  75.          consumer = \
self._consumer_from_type(token.wxf_type)", 
                Item[
                "  76.          return consumer(token, tokens, **kwargs)", 
                 Background -> LightYellow], "  77.  ", 
                "  78.      def _consumer_from_type(self, wxf_type):", 
                "  79.          try:", 
                "  80.              func = self._mapping[wxf_type]", 
                "  81.          except KeyError:", 
                "  82.              raise WolframParserException("}, 
               Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  "self", "<ExternalEvaluateConsumer globals=4 objects=6>"}, {
                  "tokens", 
                   "<generator object WXFParser.tokens at 0x1755b7e80>"}, {
                  "kwargs", "{}"}, {
                  "token", "WXFToken<b'f', data=None, len=2>"}, {
                  "consumer", 
                   "<bound method ExternalEvaluateConsumer.consume_function \
of <ExternalEvaluateConsumer globals=4 objects=6>>"}}, 
                 Background -> {Null, {LightGray}}, Alignment -> Left, Frame -> 
                 LightGray]}]}]}, False], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                SystemOpen[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless"], " in ", 
              "consume_function"}], 
            Column[{
              
              Column[{" 323.          self.routes_registry = \
registry(self.builtin_routes, **routes_registry)", " 324.  ", 
                " 325.      def consume_function(self, *args, **kwargs):", 
                " 326.          expr = super().consume_function(*args, \
**kwargs)", " 327.  ", 
                " 328.          if check_wl_symbol(expr, self.hook_symbol):", 
                " 329.              assert len(expr.args) == 2", 
                Item[
                " 330.              return \
self.dispatch_wl_object(*expr.args)", Background -> LightYellow], " 331.  ", 
                " 332.          return expr", " 333.  ", 
                " 334.      def dispatch_wl_object(self, route, args):", 
                " 335.          return self.routes_registry[route](self, \
*args)", " 336.  "}, Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  "self", "<ExternalEvaluateConsumer globals=4 objects=6>"}, {
                  "args", 
                   "(<wolframclient.deserializers.wxf.wxfparser.WXFToken \
object at 0x175668f40>, <generator object WXFParser.tokens at \
0x1755b7e80>)"}, {"kwargs", "{}"}, {
                  "expr", 
                   "ExternalEvaluate`Private`ExternalEvaluateCommand['Call', \
(<function edge_distance at 0x175616a20>, None, \
hypernetx.classes.Hypergraph.Hypergraph)]"}, {
                  "__class__", 
                   "<class \
'wolframclient.utils.externalevaluate.ExternalEvaluateConsumer'>"}}, 
                 Background -> {Null, {LightGray}}, Alignment -> Left, Frame -> 
                 LightGray]}]}]}, False], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                SystemOpen[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless"], " in ", 
              "dispatch_wl_object"}], 
            Column[{
              
              Column[{" 328.          if check_wl_symbol(expr, \
self.hook_symbol):", " 329.              assert len(expr.args) == 2", 
                " 330.              return \
self.dispatch_wl_object(*expr.args)", " 331.  ", " 332.          return expr",
                 " 333.  ", 
                " 334.      def dispatch_wl_object(self, route, args):", 
                Item[
                " 335.          return self.routes_registry[route](self, \
*args)", Background -> LightYellow], " 336.  ", 
                " 337.      def __repr__(self):", 
                " 338.          return \"<{} globals={} \
objects={}>\".format(", 
                " 339.              self.__class__.__name__, \
len(self.globals_registry), len(self.objects_registry)", " 340.          )", 
                " 341.  "}, Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  "self", "<ExternalEvaluateConsumer globals=4 objects=6>"}, {
                  "route", "Call"}, {
                  "args", 
                   "(<function edge_distance at 0x175616a20>, None, \
hypernetx.classes.Hypergraph.Hypergraph)"}}, 
                 Background -> {Null, {LightGray}}, Alignment -> Left, Frame -> 
                 LightGray]}]}]}, False], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                SystemOpen[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless"], " in ", "Call"}], 
            Column[{
              
              Column[{" 245.  ", " 246.  ", 
                " 247.  @routes.register_function", 
                " 248.  def Call(consumer, result, *args):", " 249.  ", 
                " 250.      pos, kwargs = unpack_optionals(args)", " 251.  ", 
                
                Item[
                " 252.      return result(*pos, **kwargs)", Background -> 
                 LightYellow], " 253.  ", " 254.  ", 
                " 255.  @routes.register_function", 
                " 256.  def MethodCall(consumer, result, names, *args):", 
                " 257.      return Call(consumer, GetAttribute(consumer, \
result, names), *args)", " 258.  "}, Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  "consumer", 
                   "<ExternalEvaluateConsumer globals=4 objects=6>"}, {
                  "result", "<function edge_distance at 0x175616a20>"}, {
                  "args", 
                   "(None, hypernetx.classes.Hypergraph.Hypergraph,)"}, {
                  "pos", "[None, hypernetx.classes.Hypergraph.Hypergraph]"}, {
                  "kwargs", "{}"}}, Background -> {Null, {LightGray}}, 
                 Alignment -> Left, Frame -> LightGray]}]}]}, True], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Users/arnoudb/hypernetx/Python/Hypergraph/Hypergraph.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Users/arnoudb/hypernetx/Python/Hypergraph/Hypergraph.py"], 
                SystemOpen[
                "/Users/arnoudb/hypernetx/Python/Hypergraph/Hypergraph.py"]], 
               Appearance -> "Frameless"], " in ", "edge_distance"}], 
            Column[{
              
              Column[{"  63.  def edge_col(hg):", 
                "  64.      return hg.edge_col()", "  65.  ", 
                "  66.  def edge_diameter(hg):", 
                "  67.      return hg.edge_diameter()", "  68.  ", 
                "  69.  def edge_distance(hg):", 
                Item[
                "  70.      return hg.edge_distance()", Background -> 
                 LightYellow], "  71.  ", "  72.  def edge_neighbors(hg):", 
                "  73.      return hg.edge_neighbors()", "  74.  ", 
                "  75.  def edge_properties(hg):", 
                "  76.      return hg.edge_properties()"}, Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  "hg", "None, <class \
'hypernetx.classes.Hypergraph.Hypergraph'>"}}, 
                 Background -> {Null, {LightGray}}, Alignment -> Left, Frame -> 
                 LightGray]}]}]}, True]}], FontFamily -> "Courier"]}, True]|>],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.922802251743052*^9},
 CellLabel->"Out[9]=",ExpressionUUID->"37e9441a-f3b5-422f-8b28-feb6d80437ad"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"HypergraphEdgeNeighbors", "[", "hg", "]"}]], "Input",
 CellChangeTimes->{{3.9228022006220617`*^9, 3.9228022642717123`*^9}},
 CellLabel->"In[10]:=",ExpressionUUID->"b134d811-5bce-4b52-8329-31849bb3882d"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["Failure",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            FrameBox[
             StyleBox["\"\[WarningSign]\"", 
              Directive["Message", 35], StripOnInput -> False], 
             ContentPadding -> False, FrameStyle -> None, 
             FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
            GridBox[{{
               TagBox[
                GridBox[{{
                   TagBox["\"Message: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                   "\"Hypergraph.edge_neighbors() missing 1 required \
positional argument: 'edge'\"", "SummaryItem"]}}, 
                 GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                 GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                 GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}, {
               TagBox[
                GridBox[{{
                   TagBox["\"Tag: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["\"PythonError\"", "SummaryItem"]}}, 
                 GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                 GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                 GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            FrameBox[
             StyleBox["\"\[WarningSign]\"", 
              Directive["Message", 35], StripOnInput -> False], 
             ContentPadding -> False, FrameStyle -> None, 
             FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
            GridBox[{{
               TagBox[
                GridBox[{{
                   TagBox["\"Message: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                   "\"Hypergraph.edge_neighbors() missing 1 required \
positional argument: 'edge'\"", "SummaryItem"]}}, 
                 GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                 GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                 GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}, {
               TagBox[
                GridBox[{{
                   TagBox["\"Tag: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["\"PythonError\"", "SummaryItem"]}}, 
                 GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                 GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                 GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}, {
               RowBox[{
                 TagBox[
                  TemplateBox[{"\"FailureCode\"", "\": \""}, "RowDefault"], 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox[
                  TagBox["\"TypeError\"", HoldForm], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                  TemplateBox[{"\"Traceback\"", "\": \""}, "RowDefault"], 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   TagBox[
                    DynamicModuleBox[{Typeset`var$$ = True}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    
                    TemplateBox[{
                    "\"TypeError\"", "\" \"", 
                    "\"Hypergraph.edge_neighbors() missing 1 required \
positional argument: 'edge'\""}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    
                    TemplateBox[{
                    "\"TypeError\"", "\" \"", 
                    "\"Hypergraph.edge_neighbors() missing 1 required \
positional argument: 'edge'\""}, "RowDefault"]}, {"", 
                    PaneBox[
                    StyleBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/language/\
decorators.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/language/\
decorators.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/language/\
decorators.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"safe_wl_execute\""}, 
                    "RowDefault"]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/language/\
decorators.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/language/\
decorators.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/language/\
decorators.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"safe_wl_execute\""}, 
                    "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{
                    "\"  14.      \\\"wl\\\": \
b'Failure[\\\"PythonFailure\\\", <|\\\"MessageTemplate\\\" -> \\\"Unexpected \
error occurred.\\\"|>]',\""}, {"\"  15.  }\""}, {"\"  16.  \""}, {
                    "\"  17.  \""}, {
                    "\"  18.  def safe_wl_execute(function, args=(), opts={}, \
export_opts={}, exception_class=None):\""}, {"\"  19.  \""}, {
                    "\"  20.      try:\""}, {
                    ItemBox[
                    "\"  21.          return export(function(*args, **opts), \
**export_opts)\"", Background -> RGBColor[1, 1, 0.85], StripOnInput -> 
                    False]}, {
                    "\"  22.      except Exception as export_exception:\""}, {
                    "\"  23.          try:\""}, {
                    "\"  24.              try:\""}, {"\"  25.  \""}, {
                    "\"  26.                  # The user can provide an \
exception class, and it can be broken, in which case we are running \
another\""}, {
                    "\"  27.                  # try / except to return errors \
that are happening during class serialization\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\"function\"", 
                    "\"<function handle_message at 0x103b78fe0>\""}, {
                    "\"args\"", 
                    "\"(<zmq.Socket(zmq.PAIR) at 0x103b54c20>,)\""}, {
                    "\"opts\"", 
                    "\"{'consumer': <ExternalEvaluateConsumer globals=4 \
objects=7>}\""}, {"\"export_opts\"", 
                    "\"{'object_processor': <function \
start_zmq_loop.<locals>.<lambda> at 0x102e009a0>, 'target_format': \
'wxf'}\""}, {"\"exception_class\"", "\"None\""}, {"\"export_exception\"", 
                    "\"Hypergraph.edge_neighbors() missing 1 required \
positional argument: 'edge'\""}}, GridBoxAlignment -> {"Columns" -> {{Left}}},
                     AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Null}}, "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"function", 
                    "<function handle_message at 0x103b78fe0>"}, {
                    "args", "(<zmq.Socket(zmq.PAIR) at 0x103b54c20>,)"}, {
                    "opts", 
                    "{'consumer': <ExternalEvaluateConsumer globals=4 \
objects=7>}"}, {"export_opts", 
                    "{'object_processor': <function \
start_zmq_loop.<locals>.<lambda> at 0x102e009a0>, 'target_format': 'wxf'}"}, {
                    "exception_class", "None"}, {"export_exception", 
                    "Hypergraph.edge_neighbors() missing 1 required \
positional argument: 'edge'"}}, Background -> {Null, {LightGray}}, Alignment -> 
                    Left, Frame -> LightGray]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/language/\
decorators.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/language/\
decorators.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/language/\
decorators.py"]], Appearance -> "Frameless"], " in ", "safe_wl_execute"}], 
                    Column[{
                    
                    Column[{
                    "  14.      \"wl\": b'Failure[\"PythonFailure\", \
<|\"MessageTemplate\" -> \"Unexpected error occurred.\"|>]',", "  15.  }", 
                    "  16.  ", "  17.  ", 
                    "  18.  def safe_wl_execute(function, args=(), opts={}, \
export_opts={}, exception_class=None):", "  19.  ", "  20.      try:", 
                    Item[
                    "  21.          return export(function(*args, **opts), \
**export_opts)", Background -> LightYellow], 
                    "  22.      except Exception as export_exception:", 
                    "  23.          try:", "  24.              try:", 
                    "  25.  ", 
                    "  26.                  # The user can provide an \
exception class, and it can be broken, in which case we are running another", 
                    "  27.                  # try / except to return errors \
that are happening during class serialization"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"function", 
                    "<function handle_message at 0x103b78fe0>"}, {
                    "args", "(<zmq.Socket(zmq.PAIR) at 0x103b54c20>,)"}, {
                    "opts", 
                    "{'consumer': <ExternalEvaluateConsumer globals=4 \
objects=7>}"}, {"export_opts", 
                    "{'object_processor': <function \
start_zmq_loop.<locals>.<lambda> at 0x102e009a0>, 'target_format': 'wxf'}"}, {
                    "exception_class", "None"}, {
                    "export_exception", 
                    "Hypergraph.edge_neighbors() missing 1 required \
positional argument: 'edge'"}}, Background -> {Null, {LightGray}}, Alignment -> 
                    Left, Frame -> LightGray]}]}]}, False]], 
                    DynamicModuleValues -> Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless", Evaluator -> Automatic, 
                    Method -> "Preemptive"], "\" in \"", 
                    "\"handle_message\""}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless", Evaluator -> Automatic, 
                    Method -> "Preemptive"], "\" in \"", 
                    "\"handle_message\""}, "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{
                    "\" 350.          self.socket.send(zmq.Frame(bytes))\""}, \
{"\" 351.  \""}, {"\" 352.      def send_side_effect(self, expr):\""}, {
                    "\" 353.          \
self.write(export(self.keep_listening(expr), target_format=\\\"wxf\\\"))\""}, \
{"\" 354.  \""}, {"\" 355.  \""}, {
                    "\" 356.  def handle_message(socket, consumer):\""}, {
                    ItemBox[
                    "\" 357.      result = \
binary_deserialize(socket.recv(copy=False).buffer, consumer=consumer)\"", 
                    Background -> RGBColor[1, 1, 0.85], StripOnInput -> 
                    False]}, {"\" 358.  \""}, {
                    "\" 359.      sys.stdout.flush()\""}, {
                    "\" 360.      return result\""}, {"\" 361.  \""}, {
                    "\" 362.  \""}, {
                    "\" 363.  def start_zmq_instance(port=None, \
write_to_stdout=True, **opts):\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\"socket\"", 
                    "\"<zmq.Socket(zmq.PAIR) at 0x103b54c20>\""}, {
                    "\"consumer\"", 
                    "\"<ExternalEvaluateConsumer globals=4 objects=7>\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Null}}, 
                    "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"socket", 
                    "<zmq.Socket(zmq.PAIR) at 0x103b54c20>"}, {
                    "consumer", 
                    "<ExternalEvaluateConsumer globals=4 objects=7>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless"], " in ", 
                    "handle_message"}], 
                    Column[{
                    
                    Column[{
                    " 350.          self.socket.send(zmq.Frame(bytes))", 
                    " 351.  ", " 352.      def send_side_effect(self, expr):",
                     " 353.          \
self.write(export(self.keep_listening(expr), target_format=\"wxf\"))", 
                    " 354.  ", " 355.  ", 
                    " 356.  def handle_message(socket, consumer):", 
                    Item[
                    " 357.      result = \
binary_deserialize(socket.recv(copy=False).buffer, consumer=consumer)", 
                    Background -> LightYellow], " 358.  ", 
                    " 359.      sys.stdout.flush()", 
                    " 360.      return result", " 361.  ", " 362.  ", 
                    " 363.  def start_zmq_instance(port=None, \
write_to_stdout=True, **opts):"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"socket", 
                    "<zmq.Socket(zmq.PAIR) at 0x103b54c20>"}, {
                    "consumer", 
                    "<ExternalEvaluateConsumer globals=4 objects=7>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
__init__.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
__init__.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
__init__.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"binary_deserialize\""}, 
                    "RowDefault"]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
__init__.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
__init__.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
__init__.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"binary_deserialize\""}, 
                    "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{"\"  33.  \""}, {
                    "\"  34.      \\\"\\\"\\\"\""}, {
                    "\"  35.      parser = WXFParser(wxf_input)\""}, {
                    "\"  36.      if consumer is None:\""}, {
                    "\"  37.          consumer = WXFConsumerNumpy()\""}, {
                    "\"  38.  \""}, {"\"  39.      try:\""}, {
                    ItemBox[
                    "\"  40.          o = \
consumer.next_expression(parser.tokens(), **kwargs)\"", Background -> 
                    RGBColor[1, 1, 0.85], StripOnInput -> False]}, {
                    "\"  41.      except StopIteration:\""}, {
                    "\"  42.          raise WolframParserException(\""}, {
                    "\"  43.              \\\"Input data does not represent a \
valid expression in WXF format. Expecting more input data.\\\"\""}, {
                    "\"  44.          )\""}, {
                    "\"  45.      if not \
parser.context.is_valid_final_state():\""}, {
                    "\"  46.          raise WolframParserException(\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\"wxf_input\"", 
                    "\"8:f\.02s0ExternalEvaluate`Private`\
ExternalEvaluateCommandS\\nReturnTypef\.02s\.04Listf\.02s0ExternalEvaluate`\
Private`ExternalEvaluateCommandS\.04Callf\.02s\.04Listf\.02s0ExternalEvaluate`\
Private`ExternalEvaluateCommandS\.05Fetchf\.01\.01\.01\.01\.01\.01\.01\.01s\
\.04ListLjau\.01\.01\.01\.01\.01\.01\.01\.01\.00\.00\.00f\.02\
s0ExternalEvaluate`Private`ExternalEvaluateCommandS\.05Fetchf\.01\.01\.01\.01\
\.01\.01\.01\.01s\.04ListLau\.01\.01\.01\.01\.01\.01\.01\.01\.00\.00\.00S\\\
nExpression\""}, {"\"consumer\"", 
                    "\"<ExternalEvaluateConsumer globals=4 objects=7>\""}, {
                    "\"kwargs\"", "\"{}\""}, {"\"parser\"", 
                    "\"<wolframclient.deserializers.wxf.wxfparser.WXFParser \
object at 0x174b3ead0>\""}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {"Columns" -> {{
                    Null}}, "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"wxf_input", 
                    "8:f\.02s0ExternalEvaluate`Private`\
ExternalEvaluateCommandS\n\
ReturnTypef\.02s\.04Listf\.02s0ExternalEvaluate`Private`\
ExternalEvaluateCommandS\.04Callf\.02s\.04Listf\.02s0ExternalEvaluate`Private`\
ExternalEvaluateCommandS\.05Fetchf\.01\.01\.01\.01\.01\.01\.01\.01s\.04\
ListLjau\.01\.01\.01\.01\.01\.01\.01\.01\.00\.00\.00f\.02s0ExternalEvaluate`\
Private`ExternalEvaluateCommandS\.05Fetchf\.01\.01\.01\.01\.01\.01\.01\.01s\
\.04ListLau\.01\.01\.01\.01\.01\.01\.01\.01\.00\.00\.00S\nExpression"}, {
                    "consumer", 
                    "<ExternalEvaluateConsumer globals=4 objects=7>"}, {
                    "kwargs", "{}"}, {"parser", 
                    "<wolframclient.deserializers.wxf.wxfparser.WXFParser \
object at 0x174b3ead0>"}}, Background -> {Null, {LightGray}}, Alignment -> 
                    Left, Frame -> LightGray]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
__init__.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
__init__.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
__init__.py"]], Appearance -> "Frameless"], " in ", "binary_deserialize"}], 
                    Column[{
                    
                    Column[{"  33.  ", "  34.      \"\"\"", 
                    "  35.      parser = WXFParser(wxf_input)", 
                    "  36.      if consumer is None:", 
                    "  37.          consumer = WXFConsumerNumpy()", "  38.  ",
                     "  39.      try:", 
                    Item[
                    "  40.          o = \
consumer.next_expression(parser.tokens(), **kwargs)", Background -> 
                    LightYellow], "  41.      except StopIteration:", 
                    "  42.          raise WolframParserException(", 
                    "  43.              \"Input data does not represent a \
valid expression in WXF format. Expecting more input data.\"", 
                    "  44.          )", 
                    "  45.      if not \
parser.context.is_valid_final_state():", 
                    "  46.          raise WolframParserException("}, 
                    Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"wxf_input", 
                    "8:f\.02s0ExternalEvaluate`Private`\
ExternalEvaluateCommandS\n\
ReturnTypef\.02s\.04Listf\.02s0ExternalEvaluate`Private`\
ExternalEvaluateCommandS\.04Callf\.02s\.04Listf\.02s0ExternalEvaluate`Private`\
ExternalEvaluateCommandS\.05Fetchf\.01\.01\.01\.01\.01\.01\.01\.01s\.04\
ListLjau\.01\.01\.01\.01\.01\.01\.01\.01\.00\.00\.00f\.02s0ExternalEvaluate`\
Private`ExternalEvaluateCommandS\.05Fetchf\.01\.01\.01\.01\.01\.01\.01\.01s\
\.04ListLau\.01\.01\.01\.01\.01\.01\.01\.01\.00\.00\.00S\nExpression"}, {
                    "consumer", 
                    "<ExternalEvaluateConsumer globals=4 objects=7>"}, {
                    "kwargs", "{}"}, {"parser", 
                    "<wolframclient.deserializers.wxf.wxfparser.WXFParser \
object at 0x174b3ead0>"}}, Background -> {Null, {LightGray}}, Alignment -> 
                    Left, Frame -> LightGray]}]}]}, False]], 
                    DynamicModuleValues -> Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"next_expression\""}, 
                    "RowDefault"]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"next_expression\""}, 
                    "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{
                    "\"  69.          constants.WXF_CONSTANTS.RuleDelayed: \\\
\"consume_rule_delayed\\\",\""}, {"\"  70.      }\""}, {"\"  71.  \""}, {
                    "\"  72.      def next_expression(self, tokens, \
**kwargs):\""}, {
                    "\"  73.          \\\"\\\"\\\"Deserialize the next \
expression starting at the next token yield by `tokens`.\\\"\\\"\\\"\""}, {
                    "\"  74.          token = next(tokens)\""}, {
                    "\"  75.          consumer = \
self._consumer_from_type(token.wxf_type)\""}, {
                    ItemBox[
                    "\"  76.          return consumer(token, tokens, \
**kwargs)\"", Background -> RGBColor[1, 1, 0.85], StripOnInput -> False]}, {
                    "\"  77.  \""}, {
                    "\"  78.      def _consumer_from_type(self, \
wxf_type):\""}, {"\"  79.          try:\""}, {
                    "\"  80.              func = self._mapping[wxf_type]\""}, \
{"\"  81.          except KeyError:\""}, {
                    "\"  82.              raise WolframParserException(\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\"self\"", 
                    "\"<ExternalEvaluateConsumer globals=4 objects=7>\""}, {
                    "\"tokens\"", 
                    "\"<generator object WXFParser.tokens at \
0x175660f40>\""}, {"\"kwargs\"", "\"{}\""}, {"\"token\"", 
                    "\"WXFToken<b'f', data=None, len=2>\""}, {"\"consumer\"", 
                    "\"<bound method \
ExternalEvaluateConsumer.consume_function of <ExternalEvaluateConsumer \
globals=4 objects=7>>\""}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {"Columns" -> {{
                    Null}}, "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<ExternalEvaluateConsumer globals=4 objects=7>"}, {
                    "tokens", 
                    "<generator object WXFParser.tokens at 0x175660f40>"}, {
                    "kwargs", "{}"}, {"token", 
                    "WXFToken<b'f', data=None, len=2>"}, {
                    "consumer", 
                    "<bound method ExternalEvaluateConsumer.consume_function \
of <ExternalEvaluateConsumer globals=4 objects=7>>"}}, Background -> {
                    Null, {LightGray}}, Alignment -> Left, Frame -> 
                    LightGray]}, False]], DynamicModuleValues -> Automatic], 
                    Setting[#, {0}]& ]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless"], " in ", "next_expression"}], 
                    Column[{
                    
                    Column[{
                    "  69.          constants.WXF_CONSTANTS.RuleDelayed: \
\"consume_rule_delayed\",", "  70.      }", "  71.  ", 
                    "  72.      def next_expression(self, tokens, **kwargs):",
                     "  73.          \"\"\"Deserialize the next expression \
starting at the next token yield by `tokens`.\"\"\"", 
                    "  74.          token = next(tokens)", 
                    "  75.          consumer = \
self._consumer_from_type(token.wxf_type)", 
                    Item[
                    "  76.          return consumer(token, tokens, **kwargs)",
                     Background -> LightYellow], "  77.  ", 
                    "  78.      def _consumer_from_type(self, wxf_type):", 
                    "  79.          try:", 
                    "  80.              func = self._mapping[wxf_type]", 
                    "  81.          except KeyError:", 
                    "  82.              raise WolframParserException("}, 
                    Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<ExternalEvaluateConsumer globals=4 objects=7>"}, {
                    "tokens", 
                    "<generator object WXFParser.tokens at 0x175660f40>"}, {
                    "kwargs", "{}"}, {"token", 
                    "WXFToken<b'f', data=None, len=2>"}, {
                    "consumer", 
                    "<bound method ExternalEvaluateConsumer.consume_function \
of <ExternalEvaluateConsumer globals=4 objects=7>>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless", Evaluator -> Automatic, 
                    Method -> "Preemptive"], "\" in \"", 
                    "\"consume_function\""}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless", Evaluator -> Automatic, 
                    Method -> "Preemptive"], "\" in \"", 
                    "\"consume_function\""}, "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{"\" 319.  \""}, {
                    "\" 320.      def __init__(self, routes_registry={}, \
objects_registry={}, globals_registry={}):\""}, {
                    "\" 321.          self.objects_registry = \
registry(objects_registry)\""}, {
                    "\" 322.          self.globals_registry = \
registry(globals_registry)\""}, {
                    "\" 323.          self.routes_registry = \
registry(self.builtin_routes, **routes_registry)\""}, {"\" 324.  \""}, {
                    "\" 325.      def consume_function(self, *args, \
**kwargs):\""}, {
                    ItemBox[
                    "\" 326.          expr = super().consume_function(*args, \
**kwargs)\"", Background -> RGBColor[1, 1, 0.85], StripOnInput -> False]}, {
                    "\" 327.  \""}, {
                    "\" 328.          if check_wl_symbol(expr, \
self.hook_symbol):\""}, {
                    "\" 329.              assert len(expr.args) == 2\""}, {
                    "\" 330.              return \
self.dispatch_wl_object(*expr.args)\""}, {"\" 331.  \""}, {
                    "\" 332.          return expr\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\"self\"", 
                    "\"<ExternalEvaluateConsumer globals=4 objects=7>\""}, {
                    "\"args\"", 
                    "\"(<wolframclient.deserializers.wxf.wxfparser.WXFToken \
object at 0x175647240>, <generator object WXFParser.tokens at \
0x175660f40>)\""}, {"\"kwargs\"", "\"{}\""}, {"\"__class__\"", 
                    "\"<class \
'wolframclient.utils.externalevaluate.ExternalEvaluateConsumer'>\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Null}}, 
                    "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<ExternalEvaluateConsumer globals=4 objects=7>"}, {
                    "args", 
                    "(<wolframclient.deserializers.wxf.wxfparser.WXFToken \
object at 0x175647240>, <generator object WXFParser.tokens at \
0x175660f40>)"}, {"kwargs", "{}"}, {"__class__", 
                    "<class \
'wolframclient.utils.externalevaluate.ExternalEvaluateConsumer'>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless"], " in ", 
                    "consume_function"}], 
                    Column[{
                    
                    Column[{" 319.  ", 
                    " 320.      def __init__(self, routes_registry={}, \
objects_registry={}, globals_registry={}):", 
                    " 321.          self.objects_registry = \
registry(objects_registry)", 
                    " 322.          self.globals_registry = \
registry(globals_registry)", 
                    " 323.          self.routes_registry = \
registry(self.builtin_routes, **routes_registry)", " 324.  ", 
                    " 325.      def consume_function(self, *args, **kwargs):", 
                    Item[
                    " 326.          expr = super().consume_function(*args, \
**kwargs)", Background -> LightYellow], " 327.  ", 
                    " 328.          if check_wl_symbol(expr, \
self.hook_symbol):", " 329.              assert len(expr.args) == 2", 
                    " 330.              return \
self.dispatch_wl_object(*expr.args)", " 331.  ", 
                    " 332.          return expr"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<ExternalEvaluateConsumer globals=4 objects=7>"}, {
                    "args", 
                    "(<wolframclient.deserializers.wxf.wxfparser.WXFToken \
object at 0x175647240>, <generator object WXFParser.tokens at \
0x175660f40>)"}, {"kwargs", "{}"}, {"__class__", 
                    "<class \
'wolframclient.utils.externalevaluate.ExternalEvaluateConsumer'>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"consume_function\""}, 
                    "RowDefault"]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"consume_function\""}, 
                    "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{
                    "\"  94.          Return a :class:`list` if the head is \
symbol `List`, otherwise returns the result of \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`\""}, {"\"  95.          applied to the head and arguments.\""}, {
                    "\"  96.  \""}, {
                    "\"  97.          Usually custom parsing rules target \
Functions, but not List. To do so, it is recommended to override\""}, {
                    "\"  98.          \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`.\""}, {"\"  99.          \\\"\\\"\\\"\""}, {
                    "\" 100.          head = self.next_expression(tokens, \
**kwargs)\""}, {
                    ItemBox["\" 101.          args = tuple(\"", Background -> 
                    RGBColor[1, 1, 0.85], StripOnInput -> False]}, {
                    "\" 102.              self.next_expression(tokens, \
**kwargs) for i in range(current_token.length)\""}, {
                    "\" 103.          )\""}, {
                    "\" 104.          if head == self._LIST:\""}, {
                    "\" 105.              return args\""}, {
                    "\" 106.          else:\""}, {
                    "\" 107.              return self.build_function(head, \
args, **kwargs)\""}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\"self\"", 
                    "\"<ExternalEvaluateConsumer globals=4 objects=7>\""}, {
                    "\"current_token\"", 
                    "\"WXFToken<b'f', data=None, len=2>\""}, {"\"tokens\"", 
                    "\"<generator object WXFParser.tokens at \
0x175660f40>\""}, {"\"kwargs\"", "\"{}\""}, {"\"head\"", 
                    "\"ExternalEvaluate`Private`ExternalEvaluateCommand\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Null}}, 
                    "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<ExternalEvaluateConsumer globals=4 objects=7>"}, {
                    "current_token", "WXFToken<b'f', data=None, len=2>"}, {
                    "tokens", 
                    "<generator object WXFParser.tokens at 0x175660f40>"}, {
                    "kwargs", "{}"}, {"head", 
                    "ExternalEvaluate`Private`ExternalEvaluateCommand"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless"], " in ", "consume_function"}], 
                    Column[{
                    
                    Column[{
                    "  94.          Return a :class:`list` if the head is \
symbol `List`, otherwise returns the result of \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`", "  95.          applied to the head and arguments.", "  96.  ", 
                    "  97.          Usually custom parsing rules target \
Functions, but not List. To do so, it is recommended to override", 
                    "  98.          \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`.", "  99.          \"\"\"", 
                    " 100.          head = self.next_expression(tokens, \
**kwargs)", 
                    Item[" 101.          args = tuple(", Background -> 
                    LightYellow], 
                    " 102.              self.next_expression(tokens, \
**kwargs) for i in range(current_token.length)", " 103.          )", 
                    " 104.          if head == self._LIST:", 
                    " 105.              return args", " 106.          else:", 
                    " 107.              return self.build_function(head, \
args, **kwargs)"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<ExternalEvaluateConsumer globals=4 objects=7>"}, {
                    "current_token", "WXFToken<b'f', data=None, len=2>"}, {
                    "tokens", 
                    "<generator object WXFParser.tokens at 0x175660f40>"}, {
                    "kwargs", "{}"}, {"head", 
                    "ExternalEvaluate`Private`ExternalEvaluateCommand"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"<genexpr>\""}, 
                    "RowDefault"]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"<genexpr>\""}, 
                    "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{
                    "\"  95.          applied to the head and arguments.\""}, \
{"\"  96.  \""}, {
                    "\"  97.          Usually custom parsing rules target \
Functions, but not List. To do so, it is recommended to override\""}, {
                    "\"  98.          \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`.\""}, {"\"  99.          \\\"\\\"\\\"\""}, {
                    "\" 100.          head = self.next_expression(tokens, \
**kwargs)\""}, {"\" 101.          args = tuple(\""}, {
                    ItemBox[
                    "\" 102.              self.next_expression(tokens, \
**kwargs) for i in range(current_token.length)\"", Background -> 
                    RGBColor[1, 1, 0.85], StripOnInput -> False]}, {
                    "\" 103.          )\""}, {
                    "\" 104.          if head == self._LIST:\""}, {
                    "\" 105.              return args\""}, {
                    "\" 106.          else:\""}, {
                    "\" 107.              return self.build_function(head, \
args, **kwargs)\""}, {"\" 108.  \""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\".0\"", 
                    "\"<range_iterator object at 0x1756735a0>\""}, {
                    "\"i\"", "\"1\""}, {"\"kwargs\"", "\"{}\""}, {
                    "\"self\"", 
                    "\"<ExternalEvaluateConsumer globals=4 objects=7>\""}, {
                    "\"tokens\"", 
                    "\"<generator object WXFParser.tokens at \
0x175660f40>\""}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Null}}, 
                    "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {".0", 
                    "<range_iterator object at 0x1756735a0>"}, {"i", "1"}, {
                    "kwargs", "{}"}, {"self", 
                    "<ExternalEvaluateConsumer globals=4 objects=7>"}, {
                    "tokens", 
                    "<generator object WXFParser.tokens at 0x175660f40>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless"], " in ", "<genexpr>"}], 
                    Column[{
                    
                    Column[{
                    "  95.          applied to the head and arguments.", 
                    "  96.  ", 
                    "  97.          Usually custom parsing rules target \
Functions, but not List. To do so, it is recommended to override", 
                    "  98.          \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`.", "  99.          \"\"\"", 
                    " 100.          head = self.next_expression(tokens, \
**kwargs)", " 101.          args = tuple(", 
                    Item[
                    " 102.              self.next_expression(tokens, \
**kwargs) for i in range(current_token.length)", Background -> LightYellow], 
                    " 103.          )", 
                    " 104.          if head == self._LIST:", 
                    " 105.              return args", " 106.          else:", 
                    " 107.              return self.build_function(head, \
args, **kwargs)", " 108.  "}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {".0", 
                    "<range_iterator object at 0x1756735a0>"}, {"i", "1"}, {
                    "kwargs", "{}"}, {"self", 
                    "<ExternalEvaluateConsumer globals=4 objects=7>"}, {
                    "tokens", 
                    "<generator object WXFParser.tokens at 0x175660f40>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"next_expression\""}, 
                    "RowDefault"]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"next_expression\""}, 
                    "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{
                    "\"  69.          constants.WXF_CONSTANTS.RuleDelayed: \\\
\"consume_rule_delayed\\\",\""}, {"\"  70.      }\""}, {"\"  71.  \""}, {
                    "\"  72.      def next_expression(self, tokens, \
**kwargs):\""}, {
                    "\"  73.          \\\"\\\"\\\"Deserialize the next \
expression starting at the next token yield by `tokens`.\\\"\\\"\\\"\""}, {
                    "\"  74.          token = next(tokens)\""}, {
                    "\"  75.          consumer = \
self._consumer_from_type(token.wxf_type)\""}, {
                    ItemBox[
                    "\"  76.          return consumer(token, tokens, \
**kwargs)\"", Background -> RGBColor[1, 1, 0.85], StripOnInput -> False]}, {
                    "\"  77.  \""}, {
                    "\"  78.      def _consumer_from_type(self, \
wxf_type):\""}, {"\"  79.          try:\""}, {
                    "\"  80.              func = self._mapping[wxf_type]\""}, \
{"\"  81.          except KeyError:\""}, {
                    "\"  82.              raise WolframParserException(\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\"self\"", 
                    "\"<ExternalEvaluateConsumer globals=4 objects=7>\""}, {
                    "\"tokens\"", 
                    "\"<generator object WXFParser.tokens at \
0x175660f40>\""}, {"\"kwargs\"", "\"{}\""}, {"\"token\"", 
                    "\"WXFToken<b'f', data=None, len=2>\""}, {"\"consumer\"", 
                    "\"<bound method \
ExternalEvaluateConsumer.consume_function of <ExternalEvaluateConsumer \
globals=4 objects=7>>\""}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {"Columns" -> {{
                    Null}}, "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<ExternalEvaluateConsumer globals=4 objects=7>"}, {
                    "tokens", 
                    "<generator object WXFParser.tokens at 0x175660f40>"}, {
                    "kwargs", "{}"}, {"token", 
                    "WXFToken<b'f', data=None, len=2>"}, {
                    "consumer", 
                    "<bound method ExternalEvaluateConsumer.consume_function \
of <ExternalEvaluateConsumer globals=4 objects=7>>"}}, Background -> {
                    Null, {LightGray}}, Alignment -> Left, Frame -> 
                    LightGray]}, False]], DynamicModuleValues -> Automatic], 
                    Setting[#, {0}]& ]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless"], " in ", "next_expression"}], 
                    Column[{
                    
                    Column[{
                    "  69.          constants.WXF_CONSTANTS.RuleDelayed: \
\"consume_rule_delayed\",", "  70.      }", "  71.  ", 
                    "  72.      def next_expression(self, tokens, **kwargs):",
                     "  73.          \"\"\"Deserialize the next expression \
starting at the next token yield by `tokens`.\"\"\"", 
                    "  74.          token = next(tokens)", 
                    "  75.          consumer = \
self._consumer_from_type(token.wxf_type)", 
                    Item[
                    "  76.          return consumer(token, tokens, **kwargs)",
                     Background -> LightYellow], "  77.  ", 
                    "  78.      def _consumer_from_type(self, wxf_type):", 
                    "  79.          try:", 
                    "  80.              func = self._mapping[wxf_type]", 
                    "  81.          except KeyError:", 
                    "  82.              raise WolframParserException("}, 
                    Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<ExternalEvaluateConsumer globals=4 objects=7>"}, {
                    "tokens", 
                    "<generator object WXFParser.tokens at 0x175660f40>"}, {
                    "kwargs", "{}"}, {"token", 
                    "WXFToken<b'f', data=None, len=2>"}, {
                    "consumer", 
                    "<bound method ExternalEvaluateConsumer.consume_function \
of <ExternalEvaluateConsumer globals=4 objects=7>>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless", Evaluator -> Automatic, 
                    Method -> "Preemptive"], "\" in \"", 
                    "\"consume_function\""}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless", Evaluator -> Automatic, 
                    Method -> "Preemptive"], "\" in \"", 
                    "\"consume_function\""}, "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{"\" 319.  \""}, {
                    "\" 320.      def __init__(self, routes_registry={}, \
objects_registry={}, globals_registry={}):\""}, {
                    "\" 321.          self.objects_registry = \
registry(objects_registry)\""}, {
                    "\" 322.          self.globals_registry = \
registry(globals_registry)\""}, {
                    "\" 323.          self.routes_registry = \
registry(self.builtin_routes, **routes_registry)\""}, {"\" 324.  \""}, {
                    "\" 325.      def consume_function(self, *args, \
**kwargs):\""}, {
                    ItemBox[
                    "\" 326.          expr = super().consume_function(*args, \
**kwargs)\"", Background -> RGBColor[1, 1, 0.85], StripOnInput -> False]}, {
                    "\" 327.  \""}, {
                    "\" 328.          if check_wl_symbol(expr, \
self.hook_symbol):\""}, {
                    "\" 329.              assert len(expr.args) == 2\""}, {
                    "\" 330.              return \
self.dispatch_wl_object(*expr.args)\""}, {"\" 331.  \""}, {
                    "\" 332.          return expr\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\"self\"", 
                    "\"<ExternalEvaluateConsumer globals=4 objects=7>\""}, {
                    "\"args\"", 
                    "\"(<wolframclient.deserializers.wxf.wxfparser.WXFToken \
object at 0x175647ec0>, <generator object WXFParser.tokens at \
0x175660f40>)\""}, {"\"kwargs\"", "\"{}\""}, {"\"__class__\"", 
                    "\"<class \
'wolframclient.utils.externalevaluate.ExternalEvaluateConsumer'>\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Null}}, 
                    "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<ExternalEvaluateConsumer globals=4 objects=7>"}, {
                    "args", 
                    "(<wolframclient.deserializers.wxf.wxfparser.WXFToken \
object at 0x175647ec0>, <generator object WXFParser.tokens at \
0x175660f40>)"}, {"kwargs", "{}"}, {"__class__", 
                    "<class \
'wolframclient.utils.externalevaluate.ExternalEvaluateConsumer'>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless"], " in ", 
                    "consume_function"}], 
                    Column[{
                    
                    Column[{" 319.  ", 
                    " 320.      def __init__(self, routes_registry={}, \
objects_registry={}, globals_registry={}):", 
                    " 321.          self.objects_registry = \
registry(objects_registry)", 
                    " 322.          self.globals_registry = \
registry(globals_registry)", 
                    " 323.          self.routes_registry = \
registry(self.builtin_routes, **routes_registry)", " 324.  ", 
                    " 325.      def consume_function(self, *args, **kwargs):", 
                    Item[
                    " 326.          expr = super().consume_function(*args, \
**kwargs)", Background -> LightYellow], " 327.  ", 
                    " 328.          if check_wl_symbol(expr, \
self.hook_symbol):", " 329.              assert len(expr.args) == 2", 
                    " 330.              return \
self.dispatch_wl_object(*expr.args)", " 331.  ", 
                    " 332.          return expr"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<ExternalEvaluateConsumer globals=4 objects=7>"}, {
                    "args", 
                    "(<wolframclient.deserializers.wxf.wxfparser.WXFToken \
object at 0x175647ec0>, <generator object WXFParser.tokens at \
0x175660f40>)"}, {"kwargs", "{}"}, {"__class__", 
                    "<class \
'wolframclient.utils.externalevaluate.ExternalEvaluateConsumer'>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"consume_function\""}, 
                    "RowDefault"]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"consume_function\""}, 
                    "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{
                    "\"  94.          Return a :class:`list` if the head is \
symbol `List`, otherwise returns the result of \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`\""}, {"\"  95.          applied to the head and arguments.\""}, {
                    "\"  96.  \""}, {
                    "\"  97.          Usually custom parsing rules target \
Functions, but not List. To do so, it is recommended to override\""}, {
                    "\"  98.          \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`.\""}, {"\"  99.          \\\"\\\"\\\"\""}, {
                    "\" 100.          head = self.next_expression(tokens, \
**kwargs)\""}, {
                    ItemBox["\" 101.          args = tuple(\"", Background -> 
                    RGBColor[1, 1, 0.85], StripOnInput -> False]}, {
                    "\" 102.              self.next_expression(tokens, \
**kwargs) for i in range(current_token.length)\""}, {
                    "\" 103.          )\""}, {
                    "\" 104.          if head == self._LIST:\""}, {
                    "\" 105.              return args\""}, {
                    "\" 106.          else:\""}, {
                    "\" 107.              return self.build_function(head, \
args, **kwargs)\""}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\"self\"", 
                    "\"<ExternalEvaluateConsumer globals=4 objects=7>\""}, {
                    "\"current_token\"", 
                    "\"WXFToken<b'f', data=None, len=2>\""}, {"\"tokens\"", 
                    "\"<generator object WXFParser.tokens at \
0x175660f40>\""}, {"\"kwargs\"", "\"{}\""}, {"\"head\"", "\"List\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Null}}, 
                    "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<ExternalEvaluateConsumer globals=4 objects=7>"}, {
                    "current_token", "WXFToken<b'f', data=None, len=2>"}, {
                    "tokens", 
                    "<generator object WXFParser.tokens at 0x175660f40>"}, {
                    "kwargs", "{}"}, {"head", "List"}}, Background -> {
                    Null, {LightGray}}, Alignment -> Left, Frame -> 
                    LightGray]}, False]], DynamicModuleValues -> Automatic], 
                    Setting[#, {0}]& ]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless"], " in ", "consume_function"}], 
                    Column[{
                    
                    Column[{
                    "  94.          Return a :class:`list` if the head is \
symbol `List`, otherwise returns the result of \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`", "  95.          applied to the head and arguments.", "  96.  ", 
                    "  97.          Usually custom parsing rules target \
Functions, but not List. To do so, it is recommended to override", 
                    "  98.          \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`.", "  99.          \"\"\"", 
                    " 100.          head = self.next_expression(tokens, \
**kwargs)", 
                    Item[" 101.          args = tuple(", Background -> 
                    LightYellow], 
                    " 102.              self.next_expression(tokens, \
**kwargs) for i in range(current_token.length)", " 103.          )", 
                    " 104.          if head == self._LIST:", 
                    " 105.              return args", " 106.          else:", 
                    " 107.              return self.build_function(head, \
args, **kwargs)"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<ExternalEvaluateConsumer globals=4 objects=7>"}, {
                    "current_token", "WXFToken<b'f', data=None, len=2>"}, {
                    "tokens", 
                    "<generator object WXFParser.tokens at 0x175660f40>"}, {
                    "kwargs", "{}"}, {"head", "List"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"<genexpr>\""}, 
                    "RowDefault"]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"<genexpr>\""}, 
                    "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{
                    "\"  95.          applied to the head and arguments.\""}, \
{"\"  96.  \""}, {
                    "\"  97.          Usually custom parsing rules target \
Functions, but not List. To do so, it is recommended to override\""}, {
                    "\"  98.          \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`.\""}, {"\"  99.          \\\"\\\"\\\"\""}, {
                    "\" 100.          head = self.next_expression(tokens, \
**kwargs)\""}, {"\" 101.          args = tuple(\""}, {
                    ItemBox[
                    "\" 102.              self.next_expression(tokens, \
**kwargs) for i in range(current_token.length)\"", Background -> 
                    RGBColor[1, 1, 0.85], StripOnInput -> False]}, {
                    "\" 103.          )\""}, {
                    "\" 104.          if head == self._LIST:\""}, {
                    "\" 105.              return args\""}, {
                    "\" 106.          else:\""}, {
                    "\" 107.              return self.build_function(head, \
args, **kwargs)\""}, {"\" 108.  \""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\".0\"", 
                    "\"<range_iterator object at 0x1756733f0>\""}, {
                    "\"i\"", "\"0\""}, {"\"kwargs\"", "\"{}\""}, {
                    "\"self\"", 
                    "\"<ExternalEvaluateConsumer globals=4 objects=7>\""}, {
                    "\"tokens\"", 
                    "\"<generator object WXFParser.tokens at \
0x175660f40>\""}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Null}}, 
                    "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {".0", 
                    "<range_iterator object at 0x1756733f0>"}, {"i", "0"}, {
                    "kwargs", "{}"}, {"self", 
                    "<ExternalEvaluateConsumer globals=4 objects=7>"}, {
                    "tokens", 
                    "<generator object WXFParser.tokens at 0x175660f40>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless"], " in ", "<genexpr>"}], 
                    Column[{
                    
                    Column[{
                    "  95.          applied to the head and arguments.", 
                    "  96.  ", 
                    "  97.          Usually custom parsing rules target \
Functions, but not List. To do so, it is recommended to override", 
                    "  98.          \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`.", "  99.          \"\"\"", 
                    " 100.          head = self.next_expression(tokens, \
**kwargs)", " 101.          args = tuple(", 
                    Item[
                    " 102.              self.next_expression(tokens, \
**kwargs) for i in range(current_token.length)", Background -> LightYellow], 
                    " 103.          )", 
                    " 104.          if head == self._LIST:", 
                    " 105.              return args", " 106.          else:", 
                    " 107.              return self.build_function(head, \
args, **kwargs)", " 108.  "}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {".0", 
                    "<range_iterator object at 0x1756733f0>"}, {"i", "0"}, {
                    "kwargs", "{}"}, {"self", 
                    "<ExternalEvaluateConsumer globals=4 objects=7>"}, {
                    "tokens", 
                    "<generator object WXFParser.tokens at 0x175660f40>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"next_expression\""}, 
                    "RowDefault"]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"next_expression\""}, 
                    "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{
                    "\"  69.          constants.WXF_CONSTANTS.RuleDelayed: \\\
\"consume_rule_delayed\\\",\""}, {"\"  70.      }\""}, {"\"  71.  \""}, {
                    "\"  72.      def next_expression(self, tokens, \
**kwargs):\""}, {
                    "\"  73.          \\\"\\\"\\\"Deserialize the next \
expression starting at the next token yield by `tokens`.\\\"\\\"\\\"\""}, {
                    "\"  74.          token = next(tokens)\""}, {
                    "\"  75.          consumer = \
self._consumer_from_type(token.wxf_type)\""}, {
                    ItemBox[
                    "\"  76.          return consumer(token, tokens, \
**kwargs)\"", Background -> RGBColor[1, 1, 0.85], StripOnInput -> False]}, {
                    "\"  77.  \""}, {
                    "\"  78.      def _consumer_from_type(self, \
wxf_type):\""}, {"\"  79.          try:\""}, {
                    "\"  80.              func = self._mapping[wxf_type]\""}, \
{"\"  81.          except KeyError:\""}, {
                    "\"  82.              raise WolframParserException(\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\"self\"", 
                    "\"<ExternalEvaluateConsumer globals=4 objects=7>\""}, {
                    "\"tokens\"", 
                    "\"<generator object WXFParser.tokens at \
0x175660f40>\""}, {"\"kwargs\"", "\"{}\""}, {"\"token\"", 
                    "\"WXFToken<b'f', data=None, len=2>\""}, {"\"consumer\"", 
                    "\"<bound method \
ExternalEvaluateConsumer.consume_function of <ExternalEvaluateConsumer \
globals=4 objects=7>>\""}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {"Columns" -> {{
                    Null}}, "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<ExternalEvaluateConsumer globals=4 objects=7>"}, {
                    "tokens", 
                    "<generator object WXFParser.tokens at 0x175660f40>"}, {
                    "kwargs", "{}"}, {"token", 
                    "WXFToken<b'f', data=None, len=2>"}, {
                    "consumer", 
                    "<bound method ExternalEvaluateConsumer.consume_function \
of <ExternalEvaluateConsumer globals=4 objects=7>>"}}, Background -> {
                    Null, {LightGray}}, Alignment -> Left, Frame -> 
                    LightGray]}, False]], DynamicModuleValues -> Automatic], 
                    Setting[#, {0}]& ]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless"], " in ", "next_expression"}], 
                    Column[{
                    
                    Column[{
                    "  69.          constants.WXF_CONSTANTS.RuleDelayed: \
\"consume_rule_delayed\",", "  70.      }", "  71.  ", 
                    "  72.      def next_expression(self, tokens, **kwargs):",
                     "  73.          \"\"\"Deserialize the next expression \
starting at the next token yield by `tokens`.\"\"\"", 
                    "  74.          token = next(tokens)", 
                    "  75.          consumer = \
self._consumer_from_type(token.wxf_type)", 
                    Item[
                    "  76.          return consumer(token, tokens, **kwargs)",
                     Background -> LightYellow], "  77.  ", 
                    "  78.      def _consumer_from_type(self, wxf_type):", 
                    "  79.          try:", 
                    "  80.              func = self._mapping[wxf_type]", 
                    "  81.          except KeyError:", 
                    "  82.              raise WolframParserException("}, 
                    Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<ExternalEvaluateConsumer globals=4 objects=7>"}, {
                    "tokens", 
                    "<generator object WXFParser.tokens at 0x175660f40>"}, {
                    "kwargs", "{}"}, {"token", 
                    "WXFToken<b'f', data=None, len=2>"}, {
                    "consumer", 
                    "<bound method ExternalEvaluateConsumer.consume_function \
of <ExternalEvaluateConsumer globals=4 objects=7>>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless", Evaluator -> Automatic, 
                    Method -> "Preemptive"], "\" in \"", 
                    "\"consume_function\""}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless", Evaluator -> Automatic, 
                    Method -> "Preemptive"], "\" in \"", 
                    "\"consume_function\""}, "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{
                    "\" 323.          self.routes_registry = \
registry(self.builtin_routes, **routes_registry)\""}, {"\" 324.  \""}, {
                    "\" 325.      def consume_function(self, *args, \
**kwargs):\""}, {
                    "\" 326.          expr = super().consume_function(*args, \
**kwargs)\""}, {"\" 327.  \""}, {
                    "\" 328.          if check_wl_symbol(expr, \
self.hook_symbol):\""}, {
                    "\" 329.              assert len(expr.args) == 2\""}, {
                    ItemBox[
                    "\" 330.              return \
self.dispatch_wl_object(*expr.args)\"", Background -> RGBColor[1, 1, 0.85], 
                    StripOnInput -> False]}, {"\" 331.  \""}, {
                    "\" 332.          return expr\""}, {"\" 333.  \""}, {
                    "\" 334.      def dispatch_wl_object(self, route, \
args):\""}, {
                    "\" 335.          return \
self.routes_registry[route](self, *args)\""}, {"\" 336.  \""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\"self\"", 
                    "\"<ExternalEvaluateConsumer globals=4 objects=7>\""}, {
                    "\"args\"", 
                    "\"(<wolframclient.deserializers.wxf.wxfparser.WXFToken \
object at 0x1756459e0>, <generator object WXFParser.tokens at \
0x175660f40>)\""}, {"\"kwargs\"", "\"{}\""}, {"\"expr\"", 
                    "\"ExternalEvaluate`Private`ExternalEvaluateCommand['Call'\
, (<function edge_neighbors at 0x175616ac0>, None, \
hypernetx.classes.Hypergraph.Hypergraph)]\""}, {"\"__class__\"", 
                    "\"<class \
'wolframclient.utils.externalevaluate.ExternalEvaluateConsumer'>\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Null}}, 
                    "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<ExternalEvaluateConsumer globals=4 objects=7>"}, {
                    "args", 
                    "(<wolframclient.deserializers.wxf.wxfparser.WXFToken \
object at 0x1756459e0>, <generator object WXFParser.tokens at \
0x175660f40>)"}, {"kwargs", "{}"}, {"expr", 
                    "ExternalEvaluate`Private`ExternalEvaluateCommand['Call', \
(<function edge_neighbors at 0x175616ac0>, None, \
hypernetx.classes.Hypergraph.Hypergraph)]"}, {"__class__", 
                    "<class \
'wolframclient.utils.externalevaluate.ExternalEvaluateConsumer'>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless"], " in ", 
                    "consume_function"}], 
                    Column[{
                    
                    Column[{
                    " 323.          self.routes_registry = \
registry(self.builtin_routes, **routes_registry)", " 324.  ", 
                    " 325.      def consume_function(self, *args, **kwargs):",
                     " 326.          expr = super().consume_function(*args, \
**kwargs)", " 327.  ", 
                    " 328.          if check_wl_symbol(expr, \
self.hook_symbol):", " 329.              assert len(expr.args) == 2", 
                    Item[
                    " 330.              return \
self.dispatch_wl_object(*expr.args)", Background -> LightYellow], " 331.  ", 
                    " 332.          return expr", " 333.  ", 
                    " 334.      def dispatch_wl_object(self, route, args):", 
                    " 335.          return self.routes_registry[route](self, \
*args)", " 336.  "}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<ExternalEvaluateConsumer globals=4 objects=7>"}, {
                    "args", 
                    "(<wolframclient.deserializers.wxf.wxfparser.WXFToken \
object at 0x1756459e0>, <generator object WXFParser.tokens at \
0x175660f40>)"}, {"kwargs", "{}"}, {"expr", 
                    "ExternalEvaluate`Private`ExternalEvaluateCommand['Call', \
(<function edge_neighbors at 0x175616ac0>, None, \
hypernetx.classes.Hypergraph.Hypergraph)]"}, {
                    "__class__", 
                    "<class \
'wolframclient.utils.externalevaluate.ExternalEvaluateConsumer'>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless", Evaluator -> Automatic, 
                    Method -> "Preemptive"], "\" in \"", 
                    "\"dispatch_wl_object\""}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless", Evaluator -> Automatic, 
                    Method -> "Preemptive"], "\" in \"", 
                    "\"dispatch_wl_object\""}, "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{
                    "\" 328.          if check_wl_symbol(expr, \
self.hook_symbol):\""}, {
                    "\" 329.              assert len(expr.args) == 2\""}, {
                    "\" 330.              return \
self.dispatch_wl_object(*expr.args)\""}, {"\" 331.  \""}, {
                    "\" 332.          return expr\""}, {"\" 333.  \""}, {
                    "\" 334.      def dispatch_wl_object(self, route, \
args):\""}, {
                    ItemBox[
                    "\" 335.          return \
self.routes_registry[route](self, *args)\"", Background -> 
                    RGBColor[1, 1, 0.85], StripOnInput -> False]}, {
                    "\" 336.  \""}, {"\" 337.      def __repr__(self):\""}, {
                    "\" 338.          return \\\"<{} globals={} objects={}>\\\
\".format(\""}, {
                    "\" 339.              self.__class__.__name__, \
len(self.globals_registry), len(self.objects_registry)\""}, {
                    "\" 340.          )\""}, {"\" 341.  \""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\"self\"", 
                    "\"<ExternalEvaluateConsumer globals=4 objects=7>\""}, {
                    "\"route\"", "\"Call\""}, {"\"args\"", 
                    "\"(<function edge_neighbors at 0x175616ac0>, None, \
hypernetx.classes.Hypergraph.Hypergraph)\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Null}}, "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<ExternalEvaluateConsumer globals=4 objects=7>"}, {
                    "route", "Call"}, {"args", 
                    "(<function edge_neighbors at 0x175616ac0>, None, \
hypernetx.classes.Hypergraph.Hypergraph)"}}, Background -> {
                    Null, {LightGray}}, Alignment -> Left, Frame -> 
                    LightGray]}, False]], DynamicModuleValues -> Automatic], 
                    Setting[#, {0}]& ]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless"], " in ", 
                    "dispatch_wl_object"}], 
                    Column[{
                    
                    Column[{
                    " 328.          if check_wl_symbol(expr, \
self.hook_symbol):", " 329.              assert len(expr.args) == 2", 
                    " 330.              return \
self.dispatch_wl_object(*expr.args)", " 331.  ", " 332.          return expr",
                     " 333.  ", 
                    " 334.      def dispatch_wl_object(self, route, args):", 
                    Item[
                    " 335.          return self.routes_registry[route](self, \
*args)", Background -> LightYellow], " 336.  ", 
                    " 337.      def __repr__(self):", 
                    " 338.          return \"<{} globals={} \
objects={}>\".format(", 
                    " 339.              self.__class__.__name__, \
len(self.globals_registry), len(self.objects_registry)", " 340.          )", 
                    " 341.  "}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<ExternalEvaluateConsumer globals=4 objects=7>"}, {
                    "route", "Call"}, {"args", 
                    "(<function edge_neighbors at 0x175616ac0>, None, \
hypernetx.classes.Hypergraph.Hypergraph)"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = True}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless", Evaluator -> Automatic, 
                    Method -> "Preemptive"], "\" in \"", "\"Call\""}, 
                    "RowDefault"]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless", Evaluator -> Automatic, 
                    Method -> "Preemptive"], "\" in \"", "\"Call\""}, 
                    "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{"\" 245.  \""}, {"\" 246.  \""}, {
                    "\" 247.  @routes.register_function\""}, {
                    "\" 248.  def Call(consumer, result, *args):\""}, {
                    "\" 249.  \""}, {
                    "\" 250.      pos, kwargs = unpack_optionals(args)\""}, {
                    "\" 251.  \""}, {
                    ItemBox[
                    "\" 252.      return result(*pos, **kwargs)\"", 
                    Background -> RGBColor[1, 1, 0.85], StripOnInput -> 
                    False]}, {"\" 253.  \""}, {"\" 254.  \""}, {
                    "\" 255.  @routes.register_function\""}, {
                    "\" 256.  def MethodCall(consumer, result, names, *args):\
\""}, {"\" 257.      return Call(consumer, GetAttribute(consumer, result, \
names), *args)\""}, {"\" 258.  \""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\"consumer\"", 
                    "\"<ExternalEvaluateConsumer globals=4 objects=7>\""}, {
                    "\"result\"", 
                    "\"<function edge_neighbors at 0x175616ac0>\""}, {
                    "\"args\"", 
                    "\"(None, hypernetx.classes.Hypergraph.Hypergraph,)\""}, {
                    "\"pos\"", 
                    "\"[None, hypernetx.classes.Hypergraph.Hypergraph]\""}, {
                    "\"kwargs\"", "\"{}\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Null}}, "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"consumer", 
                    "<ExternalEvaluateConsumer globals=4 objects=7>"}, {
                    "result", "<function edge_neighbors at 0x175616ac0>"}, {
                    "args", 
                    "(None, hypernetx.classes.Hypergraph.Hypergraph,)"}, {
                    "pos", "[None, \
hypernetx.classes.Hypergraph.Hypergraph]"}, {"kwargs", "{}"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless"], " in ", "Call"}], 
                    Column[{
                    
                    Column[{" 245.  ", " 246.  ", 
                    " 247.  @routes.register_function", 
                    " 248.  def Call(consumer, result, *args):", " 249.  ", 
                    " 250.      pos, kwargs = unpack_optionals(args)", 
                    " 251.  ", 
                    Item[
                    " 252.      return result(*pos, **kwargs)", Background -> 
                    LightYellow], " 253.  ", " 254.  ", 
                    " 255.  @routes.register_function", 
                    " 256.  def MethodCall(consumer, result, names, *args):", 
                    " 257.      return Call(consumer, GetAttribute(consumer, \
result, names), *args)", " 258.  "}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"consumer", 
                    "<ExternalEvaluateConsumer globals=4 objects=7>"}, {
                    "result", "<function edge_neighbors at 0x175616ac0>"}, {
                    "args", 
                    "(None, hypernetx.classes.Hypergraph.Hypergraph,)"}, {
                    "pos", "[None, \
hypernetx.classes.Hypergraph.Hypergraph]"}, {"kwargs", "{}"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, True]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = True}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Users/arnoudb/hypernetx/Python/Hypergraph/Hypergraph.\
py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Users/arnoudb/hypernetx/Python/Hypergraph/Hypergraph.\
py"], 
                    SystemOpen[
                    "/Users/arnoudb/hypernetx/Python/Hypergraph/Hypergraph.\
py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"edge_neighbors\""}, 
                    "RowDefault"]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Users/arnoudb/hypernetx/Python/Hypergraph/Hypergraph.\
py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Users/arnoudb/hypernetx/Python/Hypergraph/Hypergraph.\
py"], 
                    SystemOpen[
                    "/Users/arnoudb/hypernetx/Python/Hypergraph/Hypergraph.\
py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"edge_neighbors\""}, 
                    "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{"\"  66.  def edge_diameter(hg):\""}, {
                    "\"  67.      return hg.edge_diameter()\""}, {
                    "\"  68.  \""}, {"\"  69.  def edge_distance(hg):\""}, {
                    "\"  70.      return hg.edge_distance()\""}, {
                    "\"  71.  \""}, {"\"  72.  def edge_neighbors(hg):\""}, {
                    ItemBox[
                    "\"  73.      return hg.edge_neighbors()\"", Background -> 
                    RGBColor[1, 1, 0.85], StripOnInput -> False]}, {
                    "\"  74.  \""}, {"\"  75.  def edge_properties(hg):\""}, {
                    "\"  76.      return hg.edge_properties()\""}, {
                    "\"  77.  \""}, {"\"  78.  def edge_props(hg):\""}, {
                    "\"  79.      return hg.edge_props()\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\"hg\"", 
                    "\"None, <class \
'hypernetx.classes.Hypergraph.Hypergraph'>\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Null}}, "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"hg", 
                    "None, <class \
'hypernetx.classes.Hypergraph.Hypergraph'>"}}, Background -> {
                    Null, {LightGray}}, Alignment -> Left, Frame -> 
                    LightGray]}, False]], DynamicModuleValues -> Automatic], 
                    Setting[#, {0}]& ]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Users/arnoudb/hypernetx/Python/Hypergraph/Hypergraph.\
py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Users/arnoudb/hypernetx/Python/Hypergraph/Hypergraph.\
py"], 
                    SystemOpen[
                    "/Users/arnoudb/hypernetx/Python/Hypergraph/Hypergraph.\
py"]], Appearance -> "Frameless"], " in ", "edge_neighbors"}], 
                    Column[{
                    
                    Column[{"  66.  def edge_diameter(hg):", 
                    "  67.      return hg.edge_diameter()", "  68.  ", 
                    "  69.  def edge_distance(hg):", 
                    "  70.      return hg.edge_distance()", "  71.  ", 
                    "  72.  def edge_neighbors(hg):", 
                    Item[
                    "  73.      return hg.edge_neighbors()", Background -> 
                    LightYellow], "  74.  ", 
                    "  75.  def edge_properties(hg):", 
                    "  76.      return hg.edge_properties()", "  77.  ", 
                    "  78.  def edge_props(hg):", 
                    "  79.      return hg.edge_props()"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"hg", 
                    "None, <class \
'hypernetx.classes.Hypergraph.Hypergraph'>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, True]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], FontFamily -> "Courier", StripOnInput -> 
                    False], ImageMargins -> 0]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    
                    Row[{"TypeError", " ", 
                    "Hypergraph.edge_neighbors() missing 1 required \
positional argument: 'edge'"}], 
                    Style[
                    Column[{
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/language/\
decorators.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/language/\
decorators.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/language/\
decorators.py"]], Appearance -> "Frameless"], " in ", "safe_wl_execute"}], 
                    Column[{
                    
                    Column[{
                    "  14.      \"wl\": b'Failure[\"PythonFailure\", \
<|\"MessageTemplate\" -> \"Unexpected error occurred.\"|>]',", "  15.  }", 
                    "  16.  ", "  17.  ", 
                    "  18.  def safe_wl_execute(function, args=(), opts={}, \
export_opts={}, exception_class=None):", "  19.  ", "  20.      try:", 
                    Item[
                    "  21.          return export(function(*args, **opts), \
**export_opts)", Background -> LightYellow], 
                    "  22.      except Exception as export_exception:", 
                    "  23.          try:", "  24.              try:", 
                    "  25.  ", 
                    "  26.                  # The user can provide an \
exception class, and it can be broken, in which case we are running another", 
                    "  27.                  # try / except to return errors \
that are happening during class serialization"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "function", "<function handle_message at 0x103b78fe0>"}, {
                    "args", "(<zmq.Socket(zmq.PAIR) at 0x103b54c20>,)"}, {
                    "opts", 
                    "{'consumer': <ExternalEvaluateConsumer globals=4 \
objects=7>}"}, {"export_opts", 
                    "{'object_processor': <function \
start_zmq_loop.<locals>.<lambda> at 0x102e009a0>, 'target_format': 'wxf'}"}, {
                    "exception_class", "None"}, {
                    "export_exception", 
                    "Hypergraph.edge_neighbors() missing 1 required \
positional argument: 'edge'"}}, Background -> {Null, {LightGray}}, Alignment -> 
                    Left, Frame -> LightGray]}]}]}, False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless"], " in ", 
                    "handle_message"}], 
                    Column[{
                    
                    Column[{
                    " 350.          self.socket.send(zmq.Frame(bytes))", 
                    " 351.  ", " 352.      def send_side_effect(self, expr):",
                     " 353.          \
self.write(export(self.keep_listening(expr), target_format=\"wxf\"))", 
                    " 354.  ", " 355.  ", 
                    " 356.  def handle_message(socket, consumer):", 
                    Item[
                    " 357.      result = \
binary_deserialize(socket.recv(copy=False).buffer, consumer=consumer)", 
                    Background -> LightYellow], " 358.  ", 
                    " 359.      sys.stdout.flush()", 
                    " 360.      return result", " 361.  ", " 362.  ", 
                    " 363.  def start_zmq_instance(port=None, \
write_to_stdout=True, **opts):"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "socket", "<zmq.Socket(zmq.PAIR) at 0x103b54c20>"}, {
                    "consumer", 
                    "<ExternalEvaluateConsumer globals=4 objects=7>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
__init__.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
__init__.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
__init__.py"]], Appearance -> "Frameless"], " in ", "binary_deserialize"}], 
                    Column[{
                    
                    Column[{"  33.  ", "  34.      \"\"\"", 
                    "  35.      parser = WXFParser(wxf_input)", 
                    "  36.      if consumer is None:", 
                    "  37.          consumer = WXFConsumerNumpy()", "  38.  ",
                     "  39.      try:", 
                    Item[
                    "  40.          o = \
consumer.next_expression(parser.tokens(), **kwargs)", Background -> 
                    LightYellow], "  41.      except StopIteration:", 
                    "  42.          raise WolframParserException(", 
                    "  43.              \"Input data does not represent a \
valid expression in WXF format. Expecting more input data.\"", 
                    "  44.          )", 
                    "  45.      if not \
parser.context.is_valid_final_state():", 
                    "  46.          raise WolframParserException("}, 
                    Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "wxf_input", 
                    "8:f\.02s0ExternalEvaluate`Private`\
ExternalEvaluateCommandS\n\
ReturnTypef\.02s\.04Listf\.02s0ExternalEvaluate`Private`\
ExternalEvaluateCommandS\.04Callf\.02s\.04Listf\.02s0ExternalEvaluate`Private`\
ExternalEvaluateCommandS\.05Fetchf\.01\.01\.01\.01\.01\.01\.01\.01s\.04\
ListLjau\.01\.01\.01\.01\.01\.01\.01\.01\.00\.00\.00f\.02s0ExternalEvaluate`\
Private`ExternalEvaluateCommandS\.05Fetchf\.01\.01\.01\.01\.01\.01\.01\.01s\
\.04ListLau\.01\.01\.01\.01\.01\.01\.01\.01\.00\.00\.00S\nExpression"}, {
                    "consumer", 
                    "<ExternalEvaluateConsumer globals=4 objects=7>"}, {
                    "kwargs", "{}"}, {
                    "parser", 
                    "<wolframclient.deserializers.wxf.wxfparser.WXFParser \
object at 0x174b3ead0>"}}, Background -> {Null, {LightGray}}, Alignment -> 
                    Left, Frame -> LightGray]}]}]}, False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless"], " in ", "next_expression"}], 
                    Column[{
                    
                    Column[{
                    "  69.          constants.WXF_CONSTANTS.RuleDelayed: \
\"consume_rule_delayed\",", "  70.      }", "  71.  ", 
                    "  72.      def next_expression(self, tokens, **kwargs):",
                     "  73.          \"\"\"Deserialize the next expression \
starting at the next token yield by `tokens`.\"\"\"", 
                    "  74.          token = next(tokens)", 
                    "  75.          consumer = \
self._consumer_from_type(token.wxf_type)", 
                    Item[
                    "  76.          return consumer(token, tokens, **kwargs)",
                     Background -> LightYellow], "  77.  ", 
                    "  78.      def _consumer_from_type(self, wxf_type):", 
                    "  79.          try:", 
                    "  80.              func = self._mapping[wxf_type]", 
                    "  81.          except KeyError:", 
                    "  82.              raise WolframParserException("}, 
                    Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "self", 
                    "<ExternalEvaluateConsumer globals=4 objects=7>"}, {
                    "tokens", 
                    "<generator object WXFParser.tokens at 0x175660f40>"}, {
                    "kwargs", "{}"}, {
                    "token", "WXFToken<b'f', data=None, len=2>"}, {
                    "consumer", 
                    "<bound method ExternalEvaluateConsumer.consume_function \
of <ExternalEvaluateConsumer globals=4 objects=7>>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless"], " in ", 
                    "consume_function"}], 
                    Column[{
                    
                    Column[{" 319.  ", 
                    " 320.      def __init__(self, routes_registry={}, \
objects_registry={}, globals_registry={}):", 
                    " 321.          self.objects_registry = \
registry(objects_registry)", 
                    " 322.          self.globals_registry = \
registry(globals_registry)", 
                    " 323.          self.routes_registry = \
registry(self.builtin_routes, **routes_registry)", " 324.  ", 
                    " 325.      def consume_function(self, *args, **kwargs):", 
                    Item[
                    " 326.          expr = super().consume_function(*args, \
**kwargs)", Background -> LightYellow], " 327.  ", 
                    " 328.          if check_wl_symbol(expr, \
self.hook_symbol):", " 329.              assert len(expr.args) == 2", 
                    " 330.              return \
self.dispatch_wl_object(*expr.args)", " 331.  ", 
                    " 332.          return expr"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "self", 
                    "<ExternalEvaluateConsumer globals=4 objects=7>"}, {
                    "args", 
                    "(<wolframclient.deserializers.wxf.wxfparser.WXFToken \
object at 0x175647240>, <generator object WXFParser.tokens at \
0x175660f40>)"}, {"kwargs", "{}"}, {
                    "__class__", 
                    "<class \
'wolframclient.utils.externalevaluate.ExternalEvaluateConsumer'>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless"], " in ", "consume_function"}], 
                    Column[{
                    
                    Column[{
                    "  94.          Return a :class:`list` if the head is \
symbol `List`, otherwise returns the result of \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`", "  95.          applied to the head and arguments.", "  96.  ", 
                    "  97.          Usually custom parsing rules target \
Functions, but not List. To do so, it is recommended to override", 
                    "  98.          \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`.", "  99.          \"\"\"", 
                    " 100.          head = self.next_expression(tokens, \
**kwargs)", 
                    Item[
                    " 101.          args = tuple(", Background -> 
                    LightYellow], 
                    " 102.              self.next_expression(tokens, \
**kwargs) for i in range(current_token.length)", " 103.          )", 
                    " 104.          if head == self._LIST:", 
                    " 105.              return args", " 106.          else:", 
                    " 107.              return self.build_function(head, \
args, **kwargs)"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "self", 
                    "<ExternalEvaluateConsumer globals=4 objects=7>"}, {
                    "current_token", "WXFToken<b'f', data=None, len=2>"}, {
                    "tokens", 
                    "<generator object WXFParser.tokens at 0x175660f40>"}, {
                    "kwargs", "{}"}, {
                    "head", 
                    "ExternalEvaluate`Private`ExternalEvaluateCommand"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless"], " in ", "<genexpr>"}], 
                    Column[{
                    
                    Column[{
                    "  95.          applied to the head and arguments.", 
                    "  96.  ", 
                    "  97.          Usually custom parsing rules target \
Functions, but not List. To do so, it is recommended to override", 
                    "  98.          \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`.", "  99.          \"\"\"", 
                    " 100.          head = self.next_expression(tokens, \
**kwargs)", " 101.          args = tuple(", 
                    Item[
                    " 102.              self.next_expression(tokens, \
**kwargs) for i in range(current_token.length)", Background -> LightYellow], 
                    " 103.          )", 
                    " 104.          if head == self._LIST:", 
                    " 105.              return args", " 106.          else:", 
                    " 107.              return self.build_function(head, \
args, **kwargs)", " 108.  "}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    ".0", "<range_iterator object at 0x1756735a0>"}, {
                    "i", "1"}, {"kwargs", "{}"}, {
                    "self", 
                    "<ExternalEvaluateConsumer globals=4 objects=7>"}, {
                    "tokens", 
                    "<generator object WXFParser.tokens at 0x175660f40>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless"], " in ", "next_expression"}], 
                    Column[{
                    
                    Column[{
                    "  69.          constants.WXF_CONSTANTS.RuleDelayed: \
\"consume_rule_delayed\",", "  70.      }", "  71.  ", 
                    "  72.      def next_expression(self, tokens, **kwargs):",
                     "  73.          \"\"\"Deserialize the next expression \
starting at the next token yield by `tokens`.\"\"\"", 
                    "  74.          token = next(tokens)", 
                    "  75.          consumer = \
self._consumer_from_type(token.wxf_type)", 
                    Item[
                    "  76.          return consumer(token, tokens, **kwargs)",
                     Background -> LightYellow], "  77.  ", 
                    "  78.      def _consumer_from_type(self, wxf_type):", 
                    "  79.          try:", 
                    "  80.              func = self._mapping[wxf_type]", 
                    "  81.          except KeyError:", 
                    "  82.              raise WolframParserException("}, 
                    Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "self", 
                    "<ExternalEvaluateConsumer globals=4 objects=7>"}, {
                    "tokens", 
                    "<generator object WXFParser.tokens at 0x175660f40>"}, {
                    "kwargs", "{}"}, {
                    "token", "WXFToken<b'f', data=None, len=2>"}, {
                    "consumer", 
                    "<bound method ExternalEvaluateConsumer.consume_function \
of <ExternalEvaluateConsumer globals=4 objects=7>>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless"], " in ", 
                    "consume_function"}], 
                    Column[{
                    
                    Column[{" 319.  ", 
                    " 320.      def __init__(self, routes_registry={}, \
objects_registry={}, globals_registry={}):", 
                    " 321.          self.objects_registry = \
registry(objects_registry)", 
                    " 322.          self.globals_registry = \
registry(globals_registry)", 
                    " 323.          self.routes_registry = \
registry(self.builtin_routes, **routes_registry)", " 324.  ", 
                    " 325.      def consume_function(self, *args, **kwargs):", 
                    Item[
                    " 326.          expr = super().consume_function(*args, \
**kwargs)", Background -> LightYellow], " 327.  ", 
                    " 328.          if check_wl_symbol(expr, \
self.hook_symbol):", " 329.              assert len(expr.args) == 2", 
                    " 330.              return \
self.dispatch_wl_object(*expr.args)", " 331.  ", 
                    " 332.          return expr"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "self", 
                    "<ExternalEvaluateConsumer globals=4 objects=7>"}, {
                    "args", 
                    "(<wolframclient.deserializers.wxf.wxfparser.WXFToken \
object at 0x175647ec0>, <generator object WXFParser.tokens at \
0x175660f40>)"}, {"kwargs", "{}"}, {
                    "__class__", 
                    "<class \
'wolframclient.utils.externalevaluate.ExternalEvaluateConsumer'>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless"], " in ", "consume_function"}], 
                    Column[{
                    
                    Column[{
                    "  94.          Return a :class:`list` if the head is \
symbol `List`, otherwise returns the result of \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`", "  95.          applied to the head and arguments.", "  96.  ", 
                    "  97.          Usually custom parsing rules target \
Functions, but not List. To do so, it is recommended to override", 
                    "  98.          \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`.", "  99.          \"\"\"", 
                    " 100.          head = self.next_expression(tokens, \
**kwargs)", 
                    Item[
                    " 101.          args = tuple(", Background -> 
                    LightYellow], 
                    " 102.              self.next_expression(tokens, \
**kwargs) for i in range(current_token.length)", " 103.          )", 
                    " 104.          if head == self._LIST:", 
                    " 105.              return args", " 106.          else:", 
                    " 107.              return self.build_function(head, \
args, **kwargs)"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "self", 
                    "<ExternalEvaluateConsumer globals=4 objects=7>"}, {
                    "current_token", "WXFToken<b'f', data=None, len=2>"}, {
                    "tokens", 
                    "<generator object WXFParser.tokens at 0x175660f40>"}, {
                    "kwargs", "{}"}, {"head", "List"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless"], " in ", "<genexpr>"}], 
                    Column[{
                    
                    Column[{
                    "  95.          applied to the head and arguments.", 
                    "  96.  ", 
                    "  97.          Usually custom parsing rules target \
Functions, but not List. To do so, it is recommended to override", 
                    "  98.          \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`.", "  99.          \"\"\"", 
                    " 100.          head = self.next_expression(tokens, \
**kwargs)", " 101.          args = tuple(", 
                    Item[
                    " 102.              self.next_expression(tokens, \
**kwargs) for i in range(current_token.length)", Background -> LightYellow], 
                    " 103.          )", 
                    " 104.          if head == self._LIST:", 
                    " 105.              return args", " 106.          else:", 
                    " 107.              return self.build_function(head, \
args, **kwargs)", " 108.  "}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    ".0", "<range_iterator object at 0x1756733f0>"}, {
                    "i", "0"}, {"kwargs", "{}"}, {
                    "self", 
                    "<ExternalEvaluateConsumer globals=4 objects=7>"}, {
                    "tokens", 
                    "<generator object WXFParser.tokens at 0x175660f40>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless"], " in ", "next_expression"}], 
                    Column[{
                    
                    Column[{
                    "  69.          constants.WXF_CONSTANTS.RuleDelayed: \
\"consume_rule_delayed\",", "  70.      }", "  71.  ", 
                    "  72.      def next_expression(self, tokens, **kwargs):",
                     "  73.          \"\"\"Deserialize the next expression \
starting at the next token yield by `tokens`.\"\"\"", 
                    "  74.          token = next(tokens)", 
                    "  75.          consumer = \
self._consumer_from_type(token.wxf_type)", 
                    Item[
                    "  76.          return consumer(token, tokens, **kwargs)",
                     Background -> LightYellow], "  77.  ", 
                    "  78.      def _consumer_from_type(self, wxf_type):", 
                    "  79.          try:", 
                    "  80.              func = self._mapping[wxf_type]", 
                    "  81.          except KeyError:", 
                    "  82.              raise WolframParserException("}, 
                    Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "self", 
                    "<ExternalEvaluateConsumer globals=4 objects=7>"}, {
                    "tokens", 
                    "<generator object WXFParser.tokens at 0x175660f40>"}, {
                    "kwargs", "{}"}, {
                    "token", "WXFToken<b'f', data=None, len=2>"}, {
                    "consumer", 
                    "<bound method ExternalEvaluateConsumer.consume_function \
of <ExternalEvaluateConsumer globals=4 objects=7>>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless"], " in ", 
                    "consume_function"}], 
                    Column[{
                    
                    Column[{
                    " 323.          self.routes_registry = \
registry(self.builtin_routes, **routes_registry)", " 324.  ", 
                    " 325.      def consume_function(self, *args, **kwargs):",
                     " 326.          expr = super().consume_function(*args, \
**kwargs)", " 327.  ", 
                    " 328.          if check_wl_symbol(expr, \
self.hook_symbol):", " 329.              assert len(expr.args) == 2", 
                    Item[
                    " 330.              return \
self.dispatch_wl_object(*expr.args)", Background -> LightYellow], " 331.  ", 
                    " 332.          return expr", " 333.  ", 
                    " 334.      def dispatch_wl_object(self, route, args):", 
                    " 335.          return self.routes_registry[route](self, \
*args)", " 336.  "}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "self", 
                    "<ExternalEvaluateConsumer globals=4 objects=7>"}, {
                    "args", 
                    "(<wolframclient.deserializers.wxf.wxfparser.WXFToken \
object at 0x1756459e0>, <generator object WXFParser.tokens at \
0x175660f40>)"}, {"kwargs", "{}"}, {
                    "expr", 
                    "ExternalEvaluate`Private`ExternalEvaluateCommand['Call', \
(<function edge_neighbors at 0x175616ac0>, None, \
hypernetx.classes.Hypergraph.Hypergraph)]"}, {
                    "__class__", 
                    "<class \
'wolframclient.utils.externalevaluate.ExternalEvaluateConsumer'>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless"], " in ", 
                    "dispatch_wl_object"}], 
                    Column[{
                    
                    Column[{
                    " 328.          if check_wl_symbol(expr, \
self.hook_symbol):", " 329.              assert len(expr.args) == 2", 
                    " 330.              return \
self.dispatch_wl_object(*expr.args)", " 331.  ", " 332.          return expr",
                     " 333.  ", 
                    " 334.      def dispatch_wl_object(self, route, args):", 
                    Item[
                    " 335.          return self.routes_registry[route](self, \
*args)", Background -> LightYellow], " 336.  ", 
                    " 337.      def __repr__(self):", 
                    " 338.          return \"<{} globals={} \
objects={}>\".format(", 
                    " 339.              self.__class__.__name__, \
len(self.globals_registry), len(self.objects_registry)", " 340.          )", 
                    " 341.  "}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "self", 
                    "<ExternalEvaluateConsumer globals=4 objects=7>"}, {
                    "route", "Call"}, {
                    "args", 
                    "(<function edge_neighbors at 0x175616ac0>, None, \
hypernetx.classes.Hypergraph.Hypergraph)"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless"], " in ", "Call"}], 
                    Column[{
                    
                    Column[{" 245.  ", " 246.  ", 
                    " 247.  @routes.register_function", 
                    " 248.  def Call(consumer, result, *args):", " 249.  ", 
                    " 250.      pos, kwargs = unpack_optionals(args)", 
                    " 251.  ", 
                    Item[
                    " 252.      return result(*pos, **kwargs)", Background -> 
                    LightYellow], " 253.  ", " 254.  ", 
                    " 255.  @routes.register_function", 
                    " 256.  def MethodCall(consumer, result, names, *args):", 
                    " 257.      return Call(consumer, GetAttribute(consumer, \
result, names), *args)", " 258.  "}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "consumer", 
                    "<ExternalEvaluateConsumer globals=4 objects=7>"}, {
                    "result", "<function edge_neighbors at 0x175616ac0>"}, {
                    "args", 
                    "(None, hypernetx.classes.Hypergraph.Hypergraph,)"}, {
                    "pos", "[None, \
hypernetx.classes.Hypergraph.Hypergraph]"}, {"kwargs", "{}"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, True], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Users/arnoudb/hypernetx/Python/Hypergraph/Hypergraph.\
py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Users/arnoudb/hypernetx/Python/Hypergraph/Hypergraph.\
py"], 
                    SystemOpen[
                    "/Users/arnoudb/hypernetx/Python/Hypergraph/Hypergraph.\
py"]], Appearance -> "Frameless"], " in ", "edge_neighbors"}], 
                    Column[{
                    
                    Column[{"  66.  def edge_diameter(hg):", 
                    "  67.      return hg.edge_diameter()", "  68.  ", 
                    "  69.  def edge_distance(hg):", 
                    "  70.      return hg.edge_distance()", "  71.  ", 
                    "  72.  def edge_neighbors(hg):", 
                    Item[
                    "  73.      return hg.edge_neighbors()", Background -> 
                    LightYellow], "  74.  ", 
                    "  75.  def edge_properties(hg):", 
                    "  76.      return hg.edge_properties()", "  77.  ", 
                    "  78.  def edge_props(hg):", 
                    "  79.      return hg.edge_props()"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "hg", "None, <class \
'hypernetx.classes.Hypergraph.Hypergraph'>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, True]}], FontFamily -> 
                    "Courier"]}, True]], DynamicModuleValues -> Automatic], 
                    Setting[#, {0}]& ], HoldForm], "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  Failure[
  "PythonError", <|
   "MessageTemplate" :> 
    "Hypergraph.edge_neighbors() missing 1 required positional argument: \
'edge'", "MessageParameters" :> <||>, "FailureCode" :> "TypeError", 
    "Traceback" :> OpenerView[{
       Row[{
        "TypeError", " ", 
         "Hypergraph.edge_neighbors() missing 1 required positional argument: \
'edge'"}], 
       Style[
        Column[{
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/language/\
decorators.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/language/\
decorators.py"], 
                SystemOpen[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/language/\
decorators.py"]], Appearance -> "Frameless"], " in ", "safe_wl_execute"}], 
            Column[{
              
              Column[{"  14.      \"wl\": b'Failure[\"PythonFailure\", \
<|\"MessageTemplate\" -> \"Unexpected error occurred.\"|>]',", "  15.  }", 
                "  16.  ", "  17.  ", 
                "  18.  def safe_wl_execute(function, args=(), opts={}, \
export_opts={}, exception_class=None):", "  19.  ", "  20.      try:", 
                Item[
                "  21.          return export(function(*args, **opts), \
**export_opts)", Background -> LightYellow], 
                "  22.      except Exception as export_exception:", 
                "  23.          try:", "  24.              try:", "  25.  ", 
                "  26.                  # The user can provide an exception \
class, and it can be broken, in which case we are running another", 
                "  27.                  # try / except to return errors that \
are happening during class serialization"}, Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  "function", "<function handle_message at 0x103b78fe0>"}, {
                  "args", "(<zmq.Socket(zmq.PAIR) at 0x103b54c20>,)"}, {
                  "opts", 
                   "{'consumer': <ExternalEvaluateConsumer globals=4 \
objects=7>}"}, {"export_opts", 
                   "{'object_processor': <function \
start_zmq_loop.<locals>.<lambda> at 0x102e009a0>, 'target_format': 'wxf'}"}, {
                  "exception_class", "None"}, {
                  "export_exception", 
                   "Hypergraph.edge_neighbors() missing 1 required positional \
argument: 'edge'"}}, Background -> {Null, {LightGray}}, Alignment -> Left, 
                 Frame -> LightGray]}]}]}, False], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                SystemOpen[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless"], " in ", 
              "handle_message"}], 
            Column[{
              
              Column[{" 350.          self.socket.send(zmq.Frame(bytes))", 
                " 351.  ", " 352.      def send_side_effect(self, expr):", 
                " 353.          self.write(export(self.keep_listening(expr), \
target_format=\"wxf\"))", " 354.  ", " 355.  ", 
                " 356.  def handle_message(socket, consumer):", 
                Item[
                " 357.      result = \
binary_deserialize(socket.recv(copy=False).buffer, consumer=consumer)", 
                 Background -> LightYellow], " 358.  ", 
                " 359.      sys.stdout.flush()", " 360.      return result", 
                " 361.  ", " 362.  ", 
                " 363.  def start_zmq_instance(port=None, \
write_to_stdout=True, **opts):"}, Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  "socket", "<zmq.Socket(zmq.PAIR) at 0x103b54c20>"}, {
                  "consumer", 
                   "<ExternalEvaluateConsumer globals=4 objects=7>"}}, 
                 Background -> {Null, {LightGray}}, Alignment -> Left, Frame -> 
                 LightGray]}]}]}, False], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
__init__.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
__init__.py"], 
                SystemOpen[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
__init__.py"]], Appearance -> "Frameless"], " in ", "binary_deserialize"}], 
            Column[{
              
              Column[{"  33.  ", "  34.      \"\"\"", 
                "  35.      parser = WXFParser(wxf_input)", 
                "  36.      if consumer is None:", 
                "  37.          consumer = WXFConsumerNumpy()", "  38.  ", 
                "  39.      try:", 
                Item[
                "  40.          o = consumer.next_expression(parser.tokens(), \
**kwargs)", Background -> LightYellow], "  41.      except StopIteration:", 
                "  42.          raise WolframParserException(", 
                "  43.              \"Input data does not represent a valid \
expression in WXF format. Expecting more input data.\"", "  44.          )", 
                "  45.      if not parser.context.is_valid_final_state():", 
                "  46.          raise WolframParserException("}, 
               Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  "wxf_input", 
                   "8:f\.02s0ExternalEvaluate`Private`\
ExternalEvaluateCommandS\n\
ReturnTypef\.02s\.04Listf\.02s0ExternalEvaluate`Private`\
ExternalEvaluateCommandS\.04Callf\.02s\.04Listf\.02s0ExternalEvaluate`Private`\
ExternalEvaluateCommandS\.05Fetchf\.01\.01\.01\.01\.01\.01\.01\.01s\.04\
ListLjau\.01\.01\.01\.01\.01\.01\.01\.01\.00\.00\.00f\.02s0ExternalEvaluate`\
Private`ExternalEvaluateCommandS\.05Fetchf\.01\.01\.01\.01\.01\.01\.01\.01s\
\.04ListLau\.01\.01\.01\.01\.01\.01\.01\.01\.00\.00\.00S\nExpression"}, {
                  "consumer", 
                   "<ExternalEvaluateConsumer globals=4 objects=7>"}, {
                  "kwargs", "{}"}, {
                  "parser", 
                   "<wolframclient.deserializers.wxf.wxfparser.WXFParser \
object at 0x174b3ead0>"}}, Background -> {Null, {LightGray}}, Alignment -> 
                 Left, Frame -> LightGray]}]}]}, False], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                SystemOpen[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless"], " in ", "next_expression"}], 
            Column[{
              
              Column[{"  69.          constants.WXF_CONSTANTS.RuleDelayed: \
\"consume_rule_delayed\",", "  70.      }", "  71.  ", 
                "  72.      def next_expression(self, tokens, **kwargs):", 
                "  73.          \"\"\"Deserialize the next expression \
starting at the next token yield by `tokens`.\"\"\"", 
                "  74.          token = next(tokens)", 
                "  75.          consumer = \
self._consumer_from_type(token.wxf_type)", 
                Item[
                "  76.          return consumer(token, tokens, **kwargs)", 
                 Background -> LightYellow], "  77.  ", 
                "  78.      def _consumer_from_type(self, wxf_type):", 
                "  79.          try:", 
                "  80.              func = self._mapping[wxf_type]", 
                "  81.          except KeyError:", 
                "  82.              raise WolframParserException("}, 
               Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  "self", "<ExternalEvaluateConsumer globals=4 objects=7>"}, {
                  "tokens", 
                   "<generator object WXFParser.tokens at 0x175660f40>"}, {
                  "kwargs", "{}"}, {
                  "token", "WXFToken<b'f', data=None, len=2>"}, {
                  "consumer", 
                   "<bound method ExternalEvaluateConsumer.consume_function \
of <ExternalEvaluateConsumer globals=4 objects=7>>"}}, 
                 Background -> {Null, {LightGray}}, Alignment -> Left, Frame -> 
                 LightGray]}]}]}, False], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                SystemOpen[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless"], " in ", 
              "consume_function"}], 
            Column[{
              
              Column[{" 319.  ", 
                " 320.      def __init__(self, routes_registry={}, \
objects_registry={}, globals_registry={}):", 
                " 321.          self.objects_registry = \
registry(objects_registry)", 
                " 322.          self.globals_registry = \
registry(globals_registry)", 
                " 323.          self.routes_registry = \
registry(self.builtin_routes, **routes_registry)", " 324.  ", 
                " 325.      def consume_function(self, *args, **kwargs):", 
                Item[
                " 326.          expr = super().consume_function(*args, \
**kwargs)", Background -> LightYellow], " 327.  ", 
                " 328.          if check_wl_symbol(expr, self.hook_symbol):", 
                " 329.              assert len(expr.args) == 2", 
                
                " 330.              return \
self.dispatch_wl_object(*expr.args)", " 331.  ", 
                " 332.          return expr"}, Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  "self", "<ExternalEvaluateConsumer globals=4 objects=7>"}, {
                  "args", 
                   "(<wolframclient.deserializers.wxf.wxfparser.WXFToken \
object at 0x175647240>, <generator object WXFParser.tokens at \
0x175660f40>)"}, {"kwargs", "{}"}, {
                  "__class__", 
                   "<class \
'wolframclient.utils.externalevaluate.ExternalEvaluateConsumer'>"}}, 
                 Background -> {Null, {LightGray}}, Alignment -> Left, Frame -> 
                 LightGray]}]}]}, False], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                SystemOpen[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless"], " in ", "consume_function"}], 
            Column[{
              
              Column[{"  94.          Return a :class:`list` if the head is \
symbol `List`, otherwise returns the result of \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`", "  95.          applied to the head and arguments.", "  96.  ", 
                "  97.          Usually custom parsing rules target \
Functions, but not List. To do so, it is recommended to override", 
                "  98.          \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`.", "  99.          \"\"\"", 
                " 100.          head = self.next_expression(tokens, \
**kwargs)", 
                Item[
                " 101.          args = tuple(", Background -> LightYellow], 
                " 102.              self.next_expression(tokens, **kwargs) \
for i in range(current_token.length)", " 103.          )", 
                " 104.          if head == self._LIST:", 
                " 105.              return args", " 106.          else:", 
                " 107.              return self.build_function(head, args, \
**kwargs)"}, Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  "self", "<ExternalEvaluateConsumer globals=4 objects=7>"}, {
                  "current_token", "WXFToken<b'f', data=None, len=2>"}, {
                  "tokens", 
                   "<generator object WXFParser.tokens at 0x175660f40>"}, {
                  "kwargs", "{}"}, {
                  "head", 
                   "ExternalEvaluate`Private`ExternalEvaluateCommand"}}, 
                 Background -> {Null, {LightGray}}, Alignment -> Left, Frame -> 
                 LightGray]}]}]}, False], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                SystemOpen[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless"], " in ", "<genexpr>"}], 
            Column[{
              
              Column[{"  95.          applied to the head and arguments.", 
                "  96.  ", 
                "  97.          Usually custom parsing rules target \
Functions, but not List. To do so, it is recommended to override", 
                "  98.          \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`.", "  99.          \"\"\"", 
                " 100.          head = self.next_expression(tokens, \
**kwargs)", " 101.          args = tuple(", 
                Item[
                " 102.              self.next_expression(tokens, **kwargs) \
for i in range(current_token.length)", Background -> LightYellow], 
                " 103.          )", " 104.          if head == self._LIST:", 
                " 105.              return args", " 106.          else:", 
                " 107.              return self.build_function(head, args, \
**kwargs)", " 108.  "}, Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  ".0", "<range_iterator object at 0x1756735a0>"}, {
                  "i", "1"}, {"kwargs", "{}"}, {
                  "self", "<ExternalEvaluateConsumer globals=4 objects=7>"}, {
                  "tokens", 
                   "<generator object WXFParser.tokens at 0x175660f40>"}}, 
                 Background -> {Null, {LightGray}}, Alignment -> Left, Frame -> 
                 LightGray]}]}]}, False], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                SystemOpen[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless"], " in ", "next_expression"}], 
            Column[{
              
              Column[{"  69.          constants.WXF_CONSTANTS.RuleDelayed: \
\"consume_rule_delayed\",", "  70.      }", "  71.  ", 
                "  72.      def next_expression(self, tokens, **kwargs):", 
                "  73.          \"\"\"Deserialize the next expression \
starting at the next token yield by `tokens`.\"\"\"", 
                "  74.          token = next(tokens)", 
                "  75.          consumer = \
self._consumer_from_type(token.wxf_type)", 
                Item[
                "  76.          return consumer(token, tokens, **kwargs)", 
                 Background -> LightYellow], "  77.  ", 
                "  78.      def _consumer_from_type(self, wxf_type):", 
                "  79.          try:", 
                "  80.              func = self._mapping[wxf_type]", 
                "  81.          except KeyError:", 
                "  82.              raise WolframParserException("}, 
               Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  "self", "<ExternalEvaluateConsumer globals=4 objects=7>"}, {
                  "tokens", 
                   "<generator object WXFParser.tokens at 0x175660f40>"}, {
                  "kwargs", "{}"}, {
                  "token", "WXFToken<b'f', data=None, len=2>"}, {
                  "consumer", 
                   "<bound method ExternalEvaluateConsumer.consume_function \
of <ExternalEvaluateConsumer globals=4 objects=7>>"}}, 
                 Background -> {Null, {LightGray}}, Alignment -> Left, Frame -> 
                 LightGray]}]}]}, False], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                SystemOpen[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless"], " in ", 
              "consume_function"}], 
            Column[{
              
              Column[{" 319.  ", 
                " 320.      def __init__(self, routes_registry={}, \
objects_registry={}, globals_registry={}):", 
                " 321.          self.objects_registry = \
registry(objects_registry)", 
                " 322.          self.globals_registry = \
registry(globals_registry)", 
                " 323.          self.routes_registry = \
registry(self.builtin_routes, **routes_registry)", " 324.  ", 
                " 325.      def consume_function(self, *args, **kwargs):", 
                Item[
                " 326.          expr = super().consume_function(*args, \
**kwargs)", Background -> LightYellow], " 327.  ", 
                " 328.          if check_wl_symbol(expr, self.hook_symbol):", 
                " 329.              assert len(expr.args) == 2", 
                " 330.              return \
self.dispatch_wl_object(*expr.args)", " 331.  ", 
                " 332.          return expr"}, Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  "self", "<ExternalEvaluateConsumer globals=4 objects=7>"}, {
                  "args", 
                   "(<wolframclient.deserializers.wxf.wxfparser.WXFToken \
object at 0x175647ec0>, <generator object WXFParser.tokens at \
0x175660f40>)"}, {"kwargs", "{}"}, {
                  "__class__", 
                   "<class \
'wolframclient.utils.externalevaluate.ExternalEvaluateConsumer'>"}}, 
                 Background -> {Null, {LightGray}}, Alignment -> Left, Frame -> 
                 LightGray]}]}]}, False], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                SystemOpen[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless"], " in ", "consume_function"}], 
            Column[{
              
              Column[{"  94.          Return a :class:`list` if the head is \
symbol `List`, otherwise returns the result of \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`", "  95.          applied to the head and arguments.", "  96.  ", 
                "  97.          Usually custom parsing rules target \
Functions, but not List. To do so, it is recommended to override", 
                "  98.          \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`.", "  99.          \"\"\"", 
                " 100.          head = self.next_expression(tokens, \
**kwargs)", 
                Item[
                " 101.          args = tuple(", Background -> LightYellow], 
                " 102.              self.next_expression(tokens, **kwargs) \
for i in range(current_token.length)", " 103.          )", 
                " 104.          if head == self._LIST:", 
                " 105.              return args", " 106.          else:", 
                " 107.              return self.build_function(head, args, \
**kwargs)"}, Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  "self", "<ExternalEvaluateConsumer globals=4 objects=7>"}, {
                  "current_token", "WXFToken<b'f', data=None, len=2>"}, {
                  "tokens", 
                   "<generator object WXFParser.tokens at 0x175660f40>"}, {
                  "kwargs", "{}"}, {"head", "List"}}, 
                 Background -> {Null, {LightGray}}, Alignment -> Left, Frame -> 
                 LightGray]}]}]}, False], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                SystemOpen[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless"], " in ", "<genexpr>"}], 
            Column[{
              
              Column[{"  95.          applied to the head and arguments.", 
                "  96.  ", 
                "  97.          Usually custom parsing rules target \
Functions, but not List. To do so, it is recommended to override", 
                "  98.          \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`.", "  99.          \"\"\"", 
                " 100.          head = self.next_expression(tokens, \
**kwargs)", " 101.          args = tuple(", 
                Item[
                " 102.              self.next_expression(tokens, **kwargs) \
for i in range(current_token.length)", Background -> LightYellow], 
                " 103.          )", " 104.          if head == self._LIST:", 
                " 105.              return args", " 106.          else:", 
                " 107.              return self.build_function(head, args, \
**kwargs)", " 108.  "}, Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  ".0", "<range_iterator object at 0x1756733f0>"}, {
                  "i", "0"}, {"kwargs", "{}"}, {
                  "self", "<ExternalEvaluateConsumer globals=4 objects=7>"}, {
                  "tokens", 
                   "<generator object WXFParser.tokens at 0x175660f40>"}}, 
                 Background -> {Null, {LightGray}}, Alignment -> Left, Frame -> 
                 LightGray]}]}]}, False], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                SystemOpen[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless"], " in ", "next_expression"}], 
            Column[{
              
              Column[{"  69.          constants.WXF_CONSTANTS.RuleDelayed: \
\"consume_rule_delayed\",", "  70.      }", "  71.  ", 
                "  72.      def next_expression(self, tokens, **kwargs):", 
                "  73.          \"\"\"Deserialize the next expression \
starting at the next token yield by `tokens`.\"\"\"", 
                "  74.          token = next(tokens)", 
                "  75.          consumer = \
self._consumer_from_type(token.wxf_type)", 
                Item[
                "  76.          return consumer(token, tokens, **kwargs)", 
                 Background -> LightYellow], "  77.  ", 
                "  78.      def _consumer_from_type(self, wxf_type):", 
                "  79.          try:", 
                "  80.              func = self._mapping[wxf_type]", 
                "  81.          except KeyError:", 
                "  82.              raise WolframParserException("}, 
               Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  "self", "<ExternalEvaluateConsumer globals=4 objects=7>"}, {
                  "tokens", 
                   "<generator object WXFParser.tokens at 0x175660f40>"}, {
                  "kwargs", "{}"}, {
                  "token", "WXFToken<b'f', data=None, len=2>"}, {
                  "consumer", 
                   "<bound method ExternalEvaluateConsumer.consume_function \
of <ExternalEvaluateConsumer globals=4 objects=7>>"}}, 
                 Background -> {Null, {LightGray}}, Alignment -> Left, Frame -> 
                 LightGray]}]}]}, False], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                SystemOpen[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless"], " in ", 
              "consume_function"}], 
            Column[{
              
              Column[{" 323.          self.routes_registry = \
registry(self.builtin_routes, **routes_registry)", " 324.  ", 
                " 325.      def consume_function(self, *args, **kwargs):", 
                " 326.          expr = super().consume_function(*args, \
**kwargs)", " 327.  ", 
                " 328.          if check_wl_symbol(expr, self.hook_symbol):", 
                " 329.              assert len(expr.args) == 2", 
                Item[
                " 330.              return \
self.dispatch_wl_object(*expr.args)", Background -> LightYellow], " 331.  ", 
                " 332.          return expr", " 333.  ", 
                " 334.      def dispatch_wl_object(self, route, args):", 
                " 335.          return self.routes_registry[route](self, \
*args)", " 336.  "}, Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  "self", "<ExternalEvaluateConsumer globals=4 objects=7>"}, {
                  "args", 
                   "(<wolframclient.deserializers.wxf.wxfparser.WXFToken \
object at 0x1756459e0>, <generator object WXFParser.tokens at \
0x175660f40>)"}, {"kwargs", "{}"}, {
                  "expr", 
                   "ExternalEvaluate`Private`ExternalEvaluateCommand['Call', \
(<function edge_neighbors at 0x175616ac0>, None, \
hypernetx.classes.Hypergraph.Hypergraph)]"}, {
                  "__class__", 
                   "<class \
'wolframclient.utils.externalevaluate.ExternalEvaluateConsumer'>"}}, 
                 Background -> {Null, {LightGray}}, Alignment -> Left, Frame -> 
                 LightGray]}]}]}, False], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                SystemOpen[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless"], " in ", 
              "dispatch_wl_object"}], 
            Column[{
              
              Column[{" 328.          if check_wl_symbol(expr, \
self.hook_symbol):", " 329.              assert len(expr.args) == 2", 
                " 330.              return \
self.dispatch_wl_object(*expr.args)", " 331.  ", " 332.          return expr",
                 " 333.  ", 
                " 334.      def dispatch_wl_object(self, route, args):", 
                Item[
                " 335.          return self.routes_registry[route](self, \
*args)", Background -> LightYellow], " 336.  ", 
                " 337.      def __repr__(self):", 
                " 338.          return \"<{} globals={} \
objects={}>\".format(", 
                " 339.              self.__class__.__name__, \
len(self.globals_registry), len(self.objects_registry)", " 340.          )", 
                " 341.  "}, Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  "self", "<ExternalEvaluateConsumer globals=4 objects=7>"}, {
                  "route", "Call"}, {
                  "args", 
                   "(<function edge_neighbors at 0x175616ac0>, None, \
hypernetx.classes.Hypergraph.Hypergraph)"}}, 
                 Background -> {Null, {LightGray}}, Alignment -> Left, Frame -> 
                 LightGray]}]}]}, False], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                SystemOpen[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless"], " in ", "Call"}], 
            Column[{
              
              Column[{" 245.  ", " 246.  ", 
                " 247.  @routes.register_function", 
                " 248.  def Call(consumer, result, *args):", " 249.  ", 
                " 250.      pos, kwargs = unpack_optionals(args)", " 251.  ", 
                
                Item[
                " 252.      return result(*pos, **kwargs)", Background -> 
                 LightYellow], " 253.  ", " 254.  ", 
                " 255.  @routes.register_function", 
                " 256.  def MethodCall(consumer, result, names, *args):", 
                " 257.      return Call(consumer, GetAttribute(consumer, \
result, names), *args)", " 258.  "}, Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  "consumer", 
                   "<ExternalEvaluateConsumer globals=4 objects=7>"}, {
                  "result", "<function edge_neighbors at 0x175616ac0>"}, {
                  "args", 
                   "(None, hypernetx.classes.Hypergraph.Hypergraph,)"}, {
                  "pos", "[None, hypernetx.classes.Hypergraph.Hypergraph]"}, {
                  "kwargs", "{}"}}, Background -> {Null, {LightGray}}, 
                 Alignment -> Left, Frame -> LightGray]}]}]}, True], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Users/arnoudb/hypernetx/Python/Hypergraph/Hypergraph.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Users/arnoudb/hypernetx/Python/Hypergraph/Hypergraph.py"], 
                SystemOpen[
                "/Users/arnoudb/hypernetx/Python/Hypergraph/Hypergraph.py"]], 
               Appearance -> "Frameless"], " in ", "edge_neighbors"}], 
            Column[{
              
              Column[{"  66.  def edge_diameter(hg):", 
                "  67.      return hg.edge_diameter()", "  68.  ", 
                "  69.  def edge_distance(hg):", 
                "  70.      return hg.edge_distance()", "  71.  ", 
                "  72.  def edge_neighbors(hg):", 
                Item[
                "  73.      return hg.edge_neighbors()", Background -> 
                 LightYellow], "  74.  ", "  75.  def edge_properties(hg):", 
                "  76.      return hg.edge_properties()", "  77.  ", 
                "  78.  def edge_props(hg):", 
                "  79.      return hg.edge_props()"}, Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  "hg", "None, <class \
'hypernetx.classes.Hypergraph.Hypergraph'>"}}, 
                 Background -> {Null, {LightGray}}, Alignment -> Left, Frame -> 
                 LightGray]}]}]}, True]}], FontFamily -> "Courier"]}, True]|>],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.9228022647478333`*^9},
 CellLabel->"Out[10]=",ExpressionUUID->"3c1f0096-ea73-422b-9832-a2c44f8e7346"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"HypergraphEdges", "[", "hg", "]"}]], "Input",
 CellChangeTimes->{{3.9228022006220617`*^9, 3.922802278861539*^9}},
 CellLabel->"In[11]:=",ExpressionUUID->"77a1f17a-189d-470c-9cb6-7dd95a44237e"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["ExternalObject",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"], 
               ImageSizeCache -> {10.6984921875, {0., 10.6984921875}}], 
              Appearance -> None, BaseStyle -> {}, 
              ButtonFunction :> (Typeset`open$$ = True), Evaluator -> 
              Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{
              Thickness[0.05], {
               FaceForm[{
                 RGBColor[1., 1., 1.], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 
                 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {
                 1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
                 3}, {0, 1, 0}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}}, {{1, 4, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                 0}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 
                 3}, {1, 3, 3}}}, {{{7.5718000000000005`, 17.7334}, {7.0998, 
                 17.7334}, {6.7168, 17.342399999999998`}, {6.7168, 16.8624}, {
                 6.7168, 16.3854}, {7.0998, 15.997399999999999`}, {
                 7.5718000000000005`, 15.997399999999999`}, {
                 8.043800000000001, 15.997399999999999`}, {8.4268, 16.3854}, {
                 8.4268, 16.8624}, {8.4268, 17.342399999999998`}, {
                 8.043800000000001, 17.7334}, {7.5718000000000005`, 
                 17.7334}}, CompressedData["
1:eJxTTMoPSmViYGBQAWIQvXD12hvxZbwODSxH+w2/izl86QsuUZnOAuezVHCr
aNT9se+5ncGQzyjl8EZ2+QsPve/2X6bfndzeKu/Qst2h6dHxD/ZfvSLbLMSU
4fz1U1I7kmVV4erNVtuFRxdqOCRs3P9mns0fe98WXv/1ItoOR9qWh58yYnP4
+AVowA4dh6z8D60nQwTg/EsTY/45/1KG87O1v02/K6zi8O7kYae1L3UdBLi3
Lqs8Lubw+zRQhEnPwdnuxc01v8QcGtQOtS2fbgDng2w5ctHQgc1E0MzGVsLB
+wS77exSIwfP/bWyFunyDs2BnnMbjhk5+CzjclP9quCwVMdZ5vUjI4cJhuW6
ivFKDqbvLVzdPxk5JIYEqS84qezgLyeW5fvZyGHaJp7CNacRfAOQAamqcD63
m2op0y01h3aQA54YOZx6ar/kvp0G3D4rZa/q5vVaEPMnQe0v1XG4bgIUWG4I
58P8A+M/mCO4dC+jJpy/M5vz54Llag73gLESNVkLEm/7VBwOWgItcNaA86PE
t19kiJOH80OmKfaVFkrC+ZbpLpn5BSIOx3JNGrY7KMH5UZf3PBaZKwfnw9IH
AO506oE=
                 "], {{12.401800000000001`, 4.1044}, {11.9298, 4.1044}, {
                 11.5458, 3.7164}, {11.5458, 3.2394}, {11.5458, 
                 2.7593999999999994`}, {11.9298, 2.369399999999999}, {
                 12.401800000000001`, 2.369399999999999}, {
                 12.872800000000002`, 2.369399999999999}, {13.2568, 
                 2.7593999999999994`}, {13.2568, 3.2394}, {13.2568, 3.7164}, {
                 12.872800000000002`, 4.1044}, {12.401800000000001`, 
                 4.1044}}, CompressedData["
1:eJxTTMoPSmViYGBQAWIQ/Uei+LrQJ2UHhUNty8NPfbBfaXrW2m+iEpyvdVrg
+C4LRYcC3899wSWf7M+tOn81LEfe4cBGvbzFjN/sb635FZPrKuPgUPST/+X2
n/bOdi9urvkl5sARP8NHtIfRAcY/smKJn4MwD5y/aIv5j0MpcnB+rknDdocm
RQepRxHi2y9KOeyeNoG/qkzZIQrIY4iTh/MPWip7VTtrwPkuv96+PmCpDedf
mhjzz3mXroPFtaO5JgxqcP6DOYJL9zJqwvldfU8+yV/ScWBbPMmKMdfA4eMX
r8i2HToOE/mrzFbXGcL5GnU9O7M1jRympHYkx8ZoO9z8AJIwcjBbbRceXajh
0Pzo+Izd34wc3p087LT2pQqcL7R070HxNCWH+TY6V2YB1SeEBKkv6JR3kKlJ
NAoVAKo/APTIb0kHkDMbphs6NLAc7Tf8LgZ3D4wPdu8vZTgfSJbrPlR2WNC5
4eHLqSIOz+yX3N/Xp+OQF1a7bluSiIPPMi431VIdeHjD+CLAYLzHxOQwi0N6
XpymlsMFzgylnIpf9lURK4AxrgGPT3B47lRzWNAU6Dm34ZP94ZRVQKerwtMD
enoBAPI7A7I=
                 "]}]}, {
               FaceForm[{
                 RGBColor[0.20800000000000002`, 0.514, 0.6859999999999999], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}}, {{1, 4, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                 0}, {1, 3, 3}, {1, 3, 3}}}, {{{7.5718000000000005`, 
                 17.6836}, {8.014800000000001, 17.6836}, {8.3778, 17.3156}, {
                 8.3778, 16.862599999999997`}, {8.3778, 16.4116}, {
                 8.014800000000001, 16.046599999999998`}, {
                 7.5718000000000005`, 16.046599999999998`}, {7.1268, 
                 16.046599999999998`}, {6.7658000000000005`, 16.4116}, {
                 6.7658000000000005`, 16.862599999999997`}, {
                 6.7658000000000005`, 17.3156}, {7.1268, 17.6836}, {
                 7.5718000000000005`, 17.6836}}, CompressedData["
1:eJxTTMoPSmViYGBQBWIQnRgSpL7gpLLDYxHZk0//GzmYnbX2uxio5NBvWK6r
COQ7nU+7+vyVgsOa7tsZDO+NHKLEt19kiJN3EPMI+CNx2cgh6fBl7VRJCYd/
zr/evm4wchDg3rqs8riYQ2vU5T2PrxjC+XxzjBdtmW4A59fKWqS7vNR1uDQx
BqhVGYMPVKRpdUkHrh7Gb5l3dtX5UAE4v+gn/8vt69ng/DOHndZm3vttD+YH
aTt8OAkS+Gb/aUNA9qxyDQeec5KBt6Q/2N/XnbDgh6GqgwTQ2/ZL3tt77Ae6
QF0Zrv6Nhat7UaW8wxWXGx++eP223xet4PgxWcqBJ0Mpp6KK2aFlefgpoyNi
DgtXr70RX8YL5wcBbZmzSASDP2llU6DnXDk4/4fhs3WqKkoOb/V3q/N3Szq0
nQw5uGKJCjx8YfyDlspe1c4acL5XdbO+zzItOP+Z/ZL7+/p0HJR2/mn/MlsN
zgfybl9n1ITzYeEP4wNjvXPDQUOHa8+ztL9N13IARW/+QiO4fbD4haQPNYfO
DQ9fTv1k5NADUueoColvBmMH9PQDAFGHDrQ=
                 "]}]}, {
               FaceForm[{
                 RGBColor[0.976, 0.8430000000000001, 0.353], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}}, {{0, 2, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {
                 0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}}}, {{{12.4014, 4.0552}, {12.846400000000001`, 4.0552}, {
                 13.2074, 3.6902}, {13.2074, 3.2392000000000003`}, {13.2074, 
                 2.7862}, {12.846400000000001`, 2.4182}, {12.4014, 2.4182}, {
                 11.958400000000001`, 2.4182}, {11.595400000000001`, 
                 2.7862}, {11.595400000000001`, 3.2392000000000003`}, {
                 11.595400000000001`, 3.6902}, {11.958400000000001`, 
                 4.0552}, {12.4014, 4.0552}}, CompressedData["
1:eJxTTMoPSmViYGBQBGIQ3bszm/PnAl2HgsWMe1gv6TjA+Ec26uUtZtSE819t
X8/8nEfNISJ64/43ctoOlq7uRT/7lR06k2PvuDlrwPkvs7S/TY+Vh/MvpF19
nrVaCs6fH6d5WuC4mMNLkHk9inB+1r3Crr4UOTi/LerynsciPAh5hvxGlqNM
Dr8OpaxKuCLlcO96Y7HblF/2MPtesZgImtl8tde5MuuZbLqSw52tLTUXNr+1
/3363cnDTKoOCo4fk8/EvraHuRem3j4c6KEcLQel5HdRTna/7Ndlghyi4zCL
Q3penCaTA4wPcw+Mn7H5VfHWqSIO6sGsiyf9UsbgG2itFL5wRAyuHsYH+zvH
AM6PATlsjSGcbwwKeGUjhzV2QIfZSzn8sSo41zHJyKGuBxgRlfIOGUo5FVWs
xg62s0Pnr85VcljVFOg5l8HYoX15+CkjFlW4+l23uv6mlms4/OIH2uhs5BAg
J5bl+1kLYj/QPlh8w9wD4wMA37PnHw==
                 "]}]}}, AspectRatio -> Automatic, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], PlotRange -> {{0., 20.}, {0., 20.}}], 
            GridBox[{{
               RowBox[{
                 TagBox["\"System: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Python\"", "SummaryItem"]}], 
               RowBox[{
                 TagBox["\"IsModule: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["False", "SummaryItem"]}], ""}, {
               RowBox[{
                 TagBox["\"IsClass: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["False", "SummaryItem"]}], 
               RowBox[{
                 TagBox["\"IsFunction: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["False", "SummaryItem"]}], "\[SpanFromLeft]"}}, 
             AutoDelete -> False, 
             BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {
              "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, AutoDelete -> 
          False, BaselinePosition -> {1, 1}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], True -> 
        GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"], 
               ImageSizeCache -> {10.6984921875, {0., 10.6984921875}}], 
              Appearance -> None, BaseStyle -> {}, 
              ButtonFunction :> (Typeset`open$$ = False), Evaluator -> 
              Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{
              Thickness[0.05], {
               FaceForm[{
                 RGBColor[1., 1., 1.], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 
                 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {
                 1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
                 3}, {0, 1, 0}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}}, {{1, 4, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                 0}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 
                 3}, {1, 3, 3}}}, {{{7.5718000000000005`, 17.7334}, {7.0998, 
                 17.7334}, {6.7168, 17.342399999999998`}, {6.7168, 16.8624}, {
                 6.7168, 16.3854}, {7.0998, 15.997399999999999`}, {
                 7.5718000000000005`, 15.997399999999999`}, {
                 8.043800000000001, 15.997399999999999`}, {8.4268, 16.3854}, {
                 8.4268, 16.8624}, {8.4268, 17.342399999999998`}, {
                 8.043800000000001, 17.7334}, {7.5718000000000005`, 
                 17.7334}}, CompressedData["
1:eJxTTMoPSmViYGBQAWIQvXD12hvxZbwODSxH+w2/izl86QsuUZnOAuezVHCr
aNT9se+5ncGQzyjl8EZ2+QsPve/2X6bfndzeKu/Qst2h6dHxD/ZfvSLbLMSU
4fz1U1I7kmVV4erNVtuFRxdqOCRs3P9mns0fe98WXv/1ItoOR9qWh58yYnP4
+AVowA4dh6z8D60nQwTg/EsTY/45/1KG87O1v02/K6zi8O7kYae1L3UdBLi3
Lqs8Lubw+zRQhEnPwdnuxc01v8QcGtQOtS2fbgDng2w5ctHQgc1E0MzGVsLB
+wS77exSIwfP/bWyFunyDs2BnnMbjhk5+CzjclP9quCwVMdZ5vUjI4cJhuW6
ivFKDqbvLVzdPxk5JIYEqS84qezgLyeW5fvZyGHaJp7CNacRfAOQAamqcD63
m2op0y01h3aQA54YOZx6ar/kvp0G3D4rZa/q5vVaEPMnQe0v1XG4bgIUWG4I
58P8A+M/mCO4dC+jJpy/M5vz54Llag73gLESNVkLEm/7VBwOWgItcNaA86PE
t19kiJOH80OmKfaVFkrC+ZbpLpn5BSIOx3JNGrY7KMH5UZf3PBaZKwfnw9IH
AO506oE=
                 "], {{12.401800000000001`, 4.1044}, {11.9298, 4.1044}, {
                 11.5458, 3.7164}, {11.5458, 3.2394}, {11.5458, 
                 2.7593999999999994`}, {11.9298, 2.369399999999999}, {
                 12.401800000000001`, 2.369399999999999}, {
                 12.872800000000002`, 2.369399999999999}, {13.2568, 
                 2.7593999999999994`}, {13.2568, 3.2394}, {13.2568, 3.7164}, {
                 12.872800000000002`, 4.1044}, {12.401800000000001`, 
                 4.1044}}, CompressedData["
1:eJxTTMoPSmViYGBQAWIQ/Uei+LrQJ2UHhUNty8NPfbBfaXrW2m+iEpyvdVrg
+C4LRYcC3899wSWf7M+tOn81LEfe4cBGvbzFjN/sb635FZPrKuPgUPST/+X2
n/bOdi9urvkl5sARP8NHtIfRAcY/smKJn4MwD5y/aIv5j0MpcnB+rknDdocm
RQepRxHi2y9KOeyeNoG/qkzZIQrIY4iTh/MPWip7VTtrwPkuv96+PmCpDedf
mhjzz3mXroPFtaO5JgxqcP6DOYJL9zJqwvldfU8+yV/ScWBbPMmKMdfA4eMX
r8i2HToOE/mrzFbXGcL5GnU9O7M1jRympHYkx8ZoO9z8AJIwcjBbbRceXajh
0Pzo+Izd34wc3p087LT2pQqcL7R070HxNCWH+TY6V2YB1SeEBKkv6JR3kKlJ
NAoVAKo/APTIb0kHkDMbphs6NLAc7Tf8LgZ3D4wPdu8vZTgfSJbrPlR2WNC5
4eHLqSIOz+yX3N/Xp+OQF1a7bluSiIPPMi431VIdeHjD+CLAYLzHxOQwi0N6
XpymlsMFzgylnIpf9lURK4AxrgGPT3B47lRzWNAU6Dm34ZP94ZRVQKerwtMD
enoBAPI7A7I=
                 "]}]}, {
               FaceForm[{
                 RGBColor[0.20800000000000002`, 0.514, 0.6859999999999999], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}}, {{1, 4, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                 0}, {1, 3, 3}, {1, 3, 3}}}, {{{7.5718000000000005`, 
                 17.6836}, {8.014800000000001, 17.6836}, {8.3778, 17.3156}, {
                 8.3778, 16.862599999999997`}, {8.3778, 16.4116}, {
                 8.014800000000001, 16.046599999999998`}, {
                 7.5718000000000005`, 16.046599999999998`}, {7.1268, 
                 16.046599999999998`}, {6.7658000000000005`, 16.4116}, {
                 6.7658000000000005`, 16.862599999999997`}, {
                 6.7658000000000005`, 17.3156}, {7.1268, 17.6836}, {
                 7.5718000000000005`, 17.6836}}, CompressedData["
1:eJxTTMoPSmViYGBQBWIQnRgSpL7gpLLDYxHZk0//GzmYnbX2uxio5NBvWK6r
COQ7nU+7+vyVgsOa7tsZDO+NHKLEt19kiJN3EPMI+CNx2cgh6fBl7VRJCYd/
zr/evm4wchDg3rqs8riYQ2vU5T2PrxjC+XxzjBdtmW4A59fKWqS7vNR1uDQx
BqhVGYMPVKRpdUkHrh7Gb5l3dtX5UAE4v+gn/8vt69ng/DOHndZm3vttD+YH
aTt8OAkS+Gb/aUNA9qxyDQeec5KBt6Q/2N/XnbDgh6GqgwTQ2/ZL3tt77Ae6
QF0Zrv6Nhat7UaW8wxWXGx++eP223xet4PgxWcqBJ0Mpp6KK2aFlefgpoyNi
DgtXr70RX8YL5wcBbZmzSASDP2llU6DnXDk4/4fhs3WqKkoOb/V3q/N3Szq0
nQw5uGKJCjx8YfyDlspe1c4acL5XdbO+zzItOP+Z/ZL7+/p0HJR2/mn/MlsN
zgfybl9n1ITzYeEP4wNjvXPDQUOHa8+ztL9N13IARW/+QiO4fbD4haQPNYfO
DQ9fTv1k5NADUueoColvBmMH9PQDAFGHDrQ=
                 "]}]}, {
               FaceForm[{
                 RGBColor[0.976, 0.8430000000000001, 0.353], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}}, {{0, 2, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {
                 0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}}}, {{{12.4014, 4.0552}, {12.846400000000001`, 4.0552}, {
                 13.2074, 3.6902}, {13.2074, 3.2392000000000003`}, {13.2074, 
                 2.7862}, {12.846400000000001`, 2.4182}, {12.4014, 2.4182}, {
                 11.958400000000001`, 2.4182}, {11.595400000000001`, 
                 2.7862}, {11.595400000000001`, 3.2392000000000003`}, {
                 11.595400000000001`, 3.6902}, {11.958400000000001`, 
                 4.0552}, {12.4014, 4.0552}}, CompressedData["
1:eJxTTMoPSmViYGBQBGIQ3bszm/PnAl2HgsWMe1gv6TjA+Ec26uUtZtSE819t
X8/8nEfNISJ64/43ctoOlq7uRT/7lR06k2PvuDlrwPkvs7S/TY+Vh/MvpF19
nrVaCs6fH6d5WuC4mMNLkHk9inB+1r3Crr4UOTi/LerynsciPAh5hvxGlqNM
Dr8OpaxKuCLlcO96Y7HblF/2MPtesZgImtl8tde5MuuZbLqSw52tLTUXNr+1
/3363cnDTKoOCo4fk8/EvraHuRem3j4c6KEcLQel5HdRTna/7Ndlghyi4zCL
Q3penCaTA4wPcw+Mn7H5VfHWqSIO6sGsiyf9UsbgG2itFL5wRAyuHsYH+zvH
AM6PATlsjSGcbwwKeGUjhzV2QIfZSzn8sSo41zHJyKGuBxgRlfIOGUo5FVWs
xg62s0Pnr85VcljVFOg5l8HYoX15+CkjFlW4+l23uv6mlms4/OIH2uhs5BAg
J5bl+1kLYj/QPlh8w9wD4wMA37PnHw==
                 "]}]}}, AspectRatio -> Automatic, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], PlotRange -> {{0., 20.}, {0., 20.}}], 
            GridBox[{{
               RowBox[{
                 TagBox["\"System: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Python\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"IsModule: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["False", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"IsClass: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["False", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"IsFunction: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["False", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"IsMethod: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["False", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"IsCallable: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["False", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Status: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Evaluated\"", "SummaryItem"]}]}}, AutoDelete -> 
             False, BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {
              "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, AutoDelete -> 
          False, BaselinePosition -> {1, 1}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  ExternalObject[
   ExternalSessionObject["fd26fdd6-5bb2-4bd9-b112-e6dee26634f0"], 
   ExternalEvaluate`RPC["Fetch", {6264736544}], <|
   "IsModule" -> False, "IsClass" -> False, "IsFunction" -> False, "IsMethod" -> 
    False, "IsCallable" -> False|>],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.922802279165249*^9},
 CellLabel->"Out[11]=",ExpressionUUID->"4f6dce20-ffa7-4da9-a944-688c816650ed"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"HypergraphName", "[", "hg", "]"}]], "Input",
 CellChangeTimes->{{3.9228022006220617`*^9, 3.922802303433174*^9}},
 CellLabel->"In[13]:=",ExpressionUUID->"d71a5e14-7d04-4190-8e99-87713f839c04"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"HypergraphSize", "[", "hg", "]"}]], "Input",
 CellChangeTimes->{{3.9228022006220617`*^9, 3.9228023237263117`*^9}},
 CellLabel->"In[14]:=",ExpressionUUID->"4bf62deb-8929-4ba5-bf60-8230d44f0d43"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["Failure",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            FrameBox[
             StyleBox["\"\[WarningSign]\"", 
              Directive["Message", 35], StripOnInput -> False], 
             ContentPadding -> False, FrameStyle -> None, 
             FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
            GridBox[{{
               TagBox[
                GridBox[{{
                   TagBox["\"Message: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                   "\"Hypergraph.size() missing 1 required positional \
argument: 'edge'\"", "SummaryItem"]}}, 
                 GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                 GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                 GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}, {
               TagBox[
                GridBox[{{
                   TagBox["\"Tag: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["\"PythonError\"", "SummaryItem"]}}, 
                 GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                 GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                 GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            FrameBox[
             StyleBox["\"\[WarningSign]\"", 
              Directive["Message", 35], StripOnInput -> False], 
             ContentPadding -> False, FrameStyle -> None, 
             FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
            GridBox[{{
               TagBox[
                GridBox[{{
                   TagBox["\"Message: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                   "\"Hypergraph.size() missing 1 required positional \
argument: 'edge'\"", "SummaryItem"]}}, 
                 GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                 GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                 GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}, {
               TagBox[
                GridBox[{{
                   TagBox["\"Tag: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["\"PythonError\"", "SummaryItem"]}}, 
                 GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                 GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                 GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}, {
               RowBox[{
                 TagBox[
                  TemplateBox[{"\"FailureCode\"", "\": \""}, "RowDefault"], 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox[
                  TagBox["\"TypeError\"", HoldForm], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                  TemplateBox[{"\"Traceback\"", "\": \""}, "RowDefault"], 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   TagBox[
                    DynamicModuleBox[{Typeset`var$$ = True}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    
                    TemplateBox[{
                    "\"TypeError\"", "\" \"", 
                    "\"Hypergraph.size() missing 1 required positional \
argument: 'edge'\""}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    
                    TemplateBox[{
                    "\"TypeError\"", "\" \"", 
                    "\"Hypergraph.size() missing 1 required positional \
argument: 'edge'\""}, "RowDefault"]}, {"", 
                    PaneBox[
                    StyleBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/language/\
decorators.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/language/\
decorators.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/language/\
decorators.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"safe_wl_execute\""}, 
                    "RowDefault"]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/language/\
decorators.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/language/\
decorators.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/language/\
decorators.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"safe_wl_execute\""}, 
                    "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{
                    "\"  14.      \\\"wl\\\": \
b'Failure[\\\"PythonFailure\\\", <|\\\"MessageTemplate\\\" -> \\\"Unexpected \
error occurred.\\\"|>]',\""}, {"\"  15.  }\""}, {"\"  16.  \""}, {
                    "\"  17.  \""}, {
                    "\"  18.  def safe_wl_execute(function, args=(), opts={}, \
export_opts={}, exception_class=None):\""}, {"\"  19.  \""}, {
                    "\"  20.      try:\""}, {
                    ItemBox[
                    "\"  21.          return export(function(*args, **opts), \
**export_opts)\"", Background -> RGBColor[1, 1, 0.85], StripOnInput -> 
                    False]}, {
                    "\"  22.      except Exception as export_exception:\""}, {
                    "\"  23.          try:\""}, {
                    "\"  24.              try:\""}, {"\"  25.  \""}, {
                    "\"  26.                  # The user can provide an \
exception class, and it can be broken, in which case we are running \
another\""}, {
                    "\"  27.                  # try / except to return errors \
that are happening during class serialization\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\"function\"", 
                    "\"<function handle_message at 0x103b78fe0>\""}, {
                    "\"args\"", 
                    "\"(<zmq.Socket(zmq.PAIR) at 0x103b54c20>,)\""}, {
                    "\"opts\"", 
                    "\"{'consumer': <ExternalEvaluateConsumer globals=4 \
objects=11>}\""}, {"\"export_opts\"", 
                    "\"{'object_processor': <function \
start_zmq_loop.<locals>.<lambda> at 0x102e009a0>, 'target_format': \
'wxf'}\""}, {"\"exception_class\"", "\"None\""}, {"\"export_exception\"", 
                    "\"Hypergraph.size() missing 1 required positional \
argument: 'edge'\""}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {"Columns" -> {{
                    Null}}, "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"function", 
                    "<function handle_message at 0x103b78fe0>"}, {
                    "args", "(<zmq.Socket(zmq.PAIR) at 0x103b54c20>,)"}, {
                    "opts", 
                    "{'consumer': <ExternalEvaluateConsumer globals=4 \
objects=11>}"}, {"export_opts", 
                    "{'object_processor': <function \
start_zmq_loop.<locals>.<lambda> at 0x102e009a0>, 'target_format': 'wxf'}"}, {
                    "exception_class", "None"}, {"export_exception", 
                    "Hypergraph.size() missing 1 required positional \
argument: 'edge'"}}, Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/language/\
decorators.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/language/\
decorators.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/language/\
decorators.py"]], Appearance -> "Frameless"], " in ", "safe_wl_execute"}], 
                    Column[{
                    
                    Column[{
                    "  14.      \"wl\": b'Failure[\"PythonFailure\", \
<|\"MessageTemplate\" -> \"Unexpected error occurred.\"|>]',", "  15.  }", 
                    "  16.  ", "  17.  ", 
                    "  18.  def safe_wl_execute(function, args=(), opts={}, \
export_opts={}, exception_class=None):", "  19.  ", "  20.      try:", 
                    Item[
                    "  21.          return export(function(*args, **opts), \
**export_opts)", Background -> LightYellow], 
                    "  22.      except Exception as export_exception:", 
                    "  23.          try:", "  24.              try:", 
                    "  25.  ", 
                    "  26.                  # The user can provide an \
exception class, and it can be broken, in which case we are running another", 
                    "  27.                  # try / except to return errors \
that are happening during class serialization"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"function", 
                    "<function handle_message at 0x103b78fe0>"}, {
                    "args", "(<zmq.Socket(zmq.PAIR) at 0x103b54c20>,)"}, {
                    "opts", 
                    "{'consumer': <ExternalEvaluateConsumer globals=4 \
objects=11>}"}, {"export_opts", 
                    "{'object_processor': <function \
start_zmq_loop.<locals>.<lambda> at 0x102e009a0>, 'target_format': 'wxf'}"}, {
                    "exception_class", "None"}, {
                    "export_exception", 
                    "Hypergraph.size() missing 1 required positional \
argument: 'edge'"}}, Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless", Evaluator -> Automatic, 
                    Method -> "Preemptive"], "\" in \"", 
                    "\"handle_message\""}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless", Evaluator -> Automatic, 
                    Method -> "Preemptive"], "\" in \"", 
                    "\"handle_message\""}, "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{
                    "\" 350.          self.socket.send(zmq.Frame(bytes))\""}, \
{"\" 351.  \""}, {"\" 352.      def send_side_effect(self, expr):\""}, {
                    "\" 353.          \
self.write(export(self.keep_listening(expr), target_format=\\\"wxf\\\"))\""}, \
{"\" 354.  \""}, {"\" 355.  \""}, {
                    "\" 356.  def handle_message(socket, consumer):\""}, {
                    ItemBox[
                    "\" 357.      result = \
binary_deserialize(socket.recv(copy=False).buffer, consumer=consumer)\"", 
                    Background -> RGBColor[1, 1, 0.85], StripOnInput -> 
                    False]}, {"\" 358.  \""}, {
                    "\" 359.      sys.stdout.flush()\""}, {
                    "\" 360.      return result\""}, {"\" 361.  \""}, {
                    "\" 362.  \""}, {
                    "\" 363.  def start_zmq_instance(port=None, \
write_to_stdout=True, **opts):\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\"socket\"", 
                    "\"<zmq.Socket(zmq.PAIR) at 0x103b54c20>\""}, {
                    "\"consumer\"", 
                    "\"<ExternalEvaluateConsumer globals=4 objects=11>\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Null}}, 
                    "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"socket", 
                    "<zmq.Socket(zmq.PAIR) at 0x103b54c20>"}, {
                    "consumer", 
                    "<ExternalEvaluateConsumer globals=4 objects=11>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless"], " in ", 
                    "handle_message"}], 
                    Column[{
                    
                    Column[{
                    " 350.          self.socket.send(zmq.Frame(bytes))", 
                    " 351.  ", " 352.      def send_side_effect(self, expr):",
                     " 353.          \
self.write(export(self.keep_listening(expr), target_format=\"wxf\"))", 
                    " 354.  ", " 355.  ", 
                    " 356.  def handle_message(socket, consumer):", 
                    Item[
                    " 357.      result = \
binary_deserialize(socket.recv(copy=False).buffer, consumer=consumer)", 
                    Background -> LightYellow], " 358.  ", 
                    " 359.      sys.stdout.flush()", 
                    " 360.      return result", " 361.  ", " 362.  ", 
                    " 363.  def start_zmq_instance(port=None, \
write_to_stdout=True, **opts):"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"socket", 
                    "<zmq.Socket(zmq.PAIR) at 0x103b54c20>"}, {
                    "consumer", 
                    "<ExternalEvaluateConsumer globals=4 objects=11>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
__init__.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
__init__.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
__init__.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"binary_deserialize\""}, 
                    "RowDefault"]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
__init__.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
__init__.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
__init__.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"binary_deserialize\""}, 
                    "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{"\"  33.  \""}, {
                    "\"  34.      \\\"\\\"\\\"\""}, {
                    "\"  35.      parser = WXFParser(wxf_input)\""}, {
                    "\"  36.      if consumer is None:\""}, {
                    "\"  37.          consumer = WXFConsumerNumpy()\""}, {
                    "\"  38.  \""}, {"\"  39.      try:\""}, {
                    ItemBox[
                    "\"  40.          o = \
consumer.next_expression(parser.tokens(), **kwargs)\"", Background -> 
                    RGBColor[1, 1, 0.85], StripOnInput -> False]}, {
                    "\"  41.      except StopIteration:\""}, {
                    "\"  42.          raise WolframParserException(\""}, {
                    "\"  43.              \\\"Input data does not represent a \
valid expression in WXF format. Expecting more input data.\\\"\""}, {
                    "\"  44.          )\""}, {
                    "\"  45.      if not \
parser.context.is_valid_final_state():\""}, {
                    "\"  46.          raise WolframParserException(\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\"wxf_input\"", 
                    "\"8:f\.02s0ExternalEvaluate`Private`\
ExternalEvaluateCommandS\\nReturnTypef\.02s\.04Listf\.02s0ExternalEvaluate`\
Private`ExternalEvaluateCommandS\.04Callf\.02s\.04Listf\.02s0ExternalEvaluate`\
Private`ExternalEvaluateCommandS\.05Fetchf\.01\.01\.01\.01\.01\.01\.01\.01s\
\.04ListL\.07bu\.01\.01\.01\.01\.01\.01\.01\.01\.00\.00\.00f\.02\
s0ExternalEvaluate`Private`ExternalEvaluateCommandS\.05Fetchf\.01\.01\.01\.01\
\.01\.01\.01\.01s\.04ListLau\.01\.01\.01\.01\.01\.01\.01\.01\.00\.00\.00S\\\
nExpression\""}, {"\"consumer\"", 
                    "\"<ExternalEvaluateConsumer globals=4 objects=11>\""}, {
                    "\"kwargs\"", "\"{}\""}, {"\"parser\"", 
                    "\"<wolframclient.deserializers.wxf.wxfparser.WXFParser \
object at 0x1758477d0>\""}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {"Columns" -> {{
                    Null}}, "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"wxf_input", 
                    "8:f\.02s0ExternalEvaluate`Private`\
ExternalEvaluateCommandS\n\
ReturnTypef\.02s\.04Listf\.02s0ExternalEvaluate`Private`\
ExternalEvaluateCommandS\.04Callf\.02s\.04Listf\.02s0ExternalEvaluate`Private`\
ExternalEvaluateCommandS\.05Fetchf\.01\.01\.01\.01\.01\.01\.01\.01s\.04ListL\
\.07bu\.01\.01\.01\.01\.01\.01\.01\.01\.00\.00\.00f\.02s0ExternalEvaluate`\
Private`ExternalEvaluateCommandS\.05Fetchf\.01\.01\.01\.01\.01\.01\.01\.01s\
\.04ListLau\.01\.01\.01\.01\.01\.01\.01\.01\.00\.00\.00S\nExpression"}, {
                    "consumer", 
                    "<ExternalEvaluateConsumer globals=4 objects=11>"}, {
                    "kwargs", "{}"}, {"parser", 
                    "<wolframclient.deserializers.wxf.wxfparser.WXFParser \
object at 0x1758477d0>"}}, Background -> {Null, {LightGray}}, Alignment -> 
                    Left, Frame -> LightGray]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
__init__.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
__init__.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
__init__.py"]], Appearance -> "Frameless"], " in ", "binary_deserialize"}], 
                    Column[{
                    
                    Column[{"  33.  ", "  34.      \"\"\"", 
                    "  35.      parser = WXFParser(wxf_input)", 
                    "  36.      if consumer is None:", 
                    "  37.          consumer = WXFConsumerNumpy()", "  38.  ",
                     "  39.      try:", 
                    Item[
                    "  40.          o = \
consumer.next_expression(parser.tokens(), **kwargs)", Background -> 
                    LightYellow], "  41.      except StopIteration:", 
                    "  42.          raise WolframParserException(", 
                    "  43.              \"Input data does not represent a \
valid expression in WXF format. Expecting more input data.\"", 
                    "  44.          )", 
                    "  45.      if not \
parser.context.is_valid_final_state():", 
                    "  46.          raise WolframParserException("}, 
                    Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"wxf_input", 
                    "8:f\.02s0ExternalEvaluate`Private`\
ExternalEvaluateCommandS\n\
ReturnTypef\.02s\.04Listf\.02s0ExternalEvaluate`Private`\
ExternalEvaluateCommandS\.04Callf\.02s\.04Listf\.02s0ExternalEvaluate`Private`\
ExternalEvaluateCommandS\.05Fetchf\.01\.01\.01\.01\.01\.01\.01\.01s\.04ListL\
\.07bu\.01\.01\.01\.01\.01\.01\.01\.01\.00\.00\.00f\.02s0ExternalEvaluate`\
Private`ExternalEvaluateCommandS\.05Fetchf\.01\.01\.01\.01\.01\.01\.01\.01s\
\.04ListLau\.01\.01\.01\.01\.01\.01\.01\.01\.00\.00\.00S\nExpression"}, {
                    "consumer", 
                    "<ExternalEvaluateConsumer globals=4 objects=11>"}, {
                    "kwargs", "{}"}, {"parser", 
                    "<wolframclient.deserializers.wxf.wxfparser.WXFParser \
object at 0x1758477d0>"}}, Background -> {Null, {LightGray}}, Alignment -> 
                    Left, Frame -> LightGray]}]}]}, False]], 
                    DynamicModuleValues -> Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"next_expression\""}, 
                    "RowDefault"]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"next_expression\""}, 
                    "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{
                    "\"  69.          constants.WXF_CONSTANTS.RuleDelayed: \\\
\"consume_rule_delayed\\\",\""}, {"\"  70.      }\""}, {"\"  71.  \""}, {
                    "\"  72.      def next_expression(self, tokens, \
**kwargs):\""}, {
                    "\"  73.          \\\"\\\"\\\"Deserialize the next \
expression starting at the next token yield by `tokens`.\\\"\\\"\\\"\""}, {
                    "\"  74.          token = next(tokens)\""}, {
                    "\"  75.          consumer = \
self._consumer_from_type(token.wxf_type)\""}, {
                    ItemBox[
                    "\"  76.          return consumer(token, tokens, \
**kwargs)\"", Background -> RGBColor[1, 1, 0.85], StripOnInput -> False]}, {
                    "\"  77.  \""}, {
                    "\"  78.      def _consumer_from_type(self, \
wxf_type):\""}, {"\"  79.          try:\""}, {
                    "\"  80.              func = self._mapping[wxf_type]\""}, \
{"\"  81.          except KeyError:\""}, {
                    "\"  82.              raise WolframParserException(\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\"self\"", 
                    "\"<ExternalEvaluateConsumer globals=4 objects=11>\""}, {
                    "\"tokens\"", 
                    "\"<generator object WXFParser.tokens at \
0x175661180>\""}, {"\"kwargs\"", "\"{}\""}, {"\"token\"", 
                    "\"WXFToken<b'f', data=None, len=2>\""}, {"\"consumer\"", 
                    "\"<bound method \
ExternalEvaluateConsumer.consume_function of <ExternalEvaluateConsumer \
globals=4 objects=11>>\""}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {"Columns" -> {{
                    Null}}, "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<ExternalEvaluateConsumer globals=4 objects=11>"}, {
                    "tokens", 
                    "<generator object WXFParser.tokens at 0x175661180>"}, {
                    "kwargs", "{}"}, {"token", 
                    "WXFToken<b'f', data=None, len=2>"}, {
                    "consumer", 
                    "<bound method ExternalEvaluateConsumer.consume_function \
of <ExternalEvaluateConsumer globals=4 objects=11>>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless"], " in ", "next_expression"}], 
                    Column[{
                    
                    Column[{
                    "  69.          constants.WXF_CONSTANTS.RuleDelayed: \
\"consume_rule_delayed\",", "  70.      }", "  71.  ", 
                    "  72.      def next_expression(self, tokens, **kwargs):",
                     "  73.          \"\"\"Deserialize the next expression \
starting at the next token yield by `tokens`.\"\"\"", 
                    "  74.          token = next(tokens)", 
                    "  75.          consumer = \
self._consumer_from_type(token.wxf_type)", 
                    Item[
                    "  76.          return consumer(token, tokens, **kwargs)",
                     Background -> LightYellow], "  77.  ", 
                    "  78.      def _consumer_from_type(self, wxf_type):", 
                    "  79.          try:", 
                    "  80.              func = self._mapping[wxf_type]", 
                    "  81.          except KeyError:", 
                    "  82.              raise WolframParserException("}, 
                    Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<ExternalEvaluateConsumer globals=4 objects=11>"}, {
                    "tokens", 
                    "<generator object WXFParser.tokens at 0x175661180>"}, {
                    "kwargs", "{}"}, {"token", 
                    "WXFToken<b'f', data=None, len=2>"}, {
                    "consumer", 
                    "<bound method ExternalEvaluateConsumer.consume_function \
of <ExternalEvaluateConsumer globals=4 objects=11>>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless", Evaluator -> Automatic, 
                    Method -> "Preemptive"], "\" in \"", 
                    "\"consume_function\""}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless", Evaluator -> Automatic, 
                    Method -> "Preemptive"], "\" in \"", 
                    "\"consume_function\""}, "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{"\" 319.  \""}, {
                    "\" 320.      def __init__(self, routes_registry={}, \
objects_registry={}, globals_registry={}):\""}, {
                    "\" 321.          self.objects_registry = \
registry(objects_registry)\""}, {
                    "\" 322.          self.globals_registry = \
registry(globals_registry)\""}, {
                    "\" 323.          self.routes_registry = \
registry(self.builtin_routes, **routes_registry)\""}, {"\" 324.  \""}, {
                    "\" 325.      def consume_function(self, *args, \
**kwargs):\""}, {
                    ItemBox[
                    "\" 326.          expr = super().consume_function(*args, \
**kwargs)\"", Background -> RGBColor[1, 1, 0.85], StripOnInput -> False]}, {
                    "\" 327.  \""}, {
                    "\" 328.          if check_wl_symbol(expr, \
self.hook_symbol):\""}, {
                    "\" 329.              assert len(expr.args) == 2\""}, {
                    "\" 330.              return \
self.dispatch_wl_object(*expr.args)\""}, {"\" 331.  \""}, {
                    "\" 332.          return expr\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\"self\"", 
                    "\"<ExternalEvaluateConsumer globals=4 objects=11>\""}, {
                    "\"args\"", 
                    "\"(<wolframclient.deserializers.wxf.wxfparser.WXFToken \
object at 0x1756688b0>, <generator object WXFParser.tokens at \
0x175661180>)\""}, {"\"kwargs\"", "\"{}\""}, {"\"__class__\"", 
                    "\"<class \
'wolframclient.utils.externalevaluate.ExternalEvaluateConsumer'>\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Null}}, 
                    "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<ExternalEvaluateConsumer globals=4 objects=11>"}, {
                    "args", 
                    "(<wolframclient.deserializers.wxf.wxfparser.WXFToken \
object at 0x1756688b0>, <generator object WXFParser.tokens at \
0x175661180>)"}, {"kwargs", "{}"}, {"__class__", 
                    "<class \
'wolframclient.utils.externalevaluate.ExternalEvaluateConsumer'>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless"], " in ", 
                    "consume_function"}], 
                    Column[{
                    
                    Column[{" 319.  ", 
                    " 320.      def __init__(self, routes_registry={}, \
objects_registry={}, globals_registry={}):", 
                    " 321.          self.objects_registry = \
registry(objects_registry)", 
                    " 322.          self.globals_registry = \
registry(globals_registry)", 
                    " 323.          self.routes_registry = \
registry(self.builtin_routes, **routes_registry)", " 324.  ", 
                    " 325.      def consume_function(self, *args, **kwargs):", 
                    Item[
                    " 326.          expr = super().consume_function(*args, \
**kwargs)", Background -> LightYellow], " 327.  ", 
                    " 328.          if check_wl_symbol(expr, \
self.hook_symbol):", " 329.              assert len(expr.args) == 2", 
                    " 330.              return \
self.dispatch_wl_object(*expr.args)", " 331.  ", 
                    " 332.          return expr"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<ExternalEvaluateConsumer globals=4 objects=11>"}, {
                    "args", 
                    "(<wolframclient.deserializers.wxf.wxfparser.WXFToken \
object at 0x1756688b0>, <generator object WXFParser.tokens at \
0x175661180>)"}, {"kwargs", "{}"}, {"__class__", 
                    "<class \
'wolframclient.utils.externalevaluate.ExternalEvaluateConsumer'>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"consume_function\""}, 
                    "RowDefault"]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"consume_function\""}, 
                    "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{
                    "\"  94.          Return a :class:`list` if the head is \
symbol `List`, otherwise returns the result of \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`\""}, {"\"  95.          applied to the head and arguments.\""}, {
                    "\"  96.  \""}, {
                    "\"  97.          Usually custom parsing rules target \
Functions, but not List. To do so, it is recommended to override\""}, {
                    "\"  98.          \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`.\""}, {"\"  99.          \\\"\\\"\\\"\""}, {
                    "\" 100.          head = self.next_expression(tokens, \
**kwargs)\""}, {
                    ItemBox["\" 101.          args = tuple(\"", Background -> 
                    RGBColor[1, 1, 0.85], StripOnInput -> False]}, {
                    "\" 102.              self.next_expression(tokens, \
**kwargs) for i in range(current_token.length)\""}, {
                    "\" 103.          )\""}, {
                    "\" 104.          if head == self._LIST:\""}, {
                    "\" 105.              return args\""}, {
                    "\" 106.          else:\""}, {
                    "\" 107.              return self.build_function(head, \
args, **kwargs)\""}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\"self\"", 
                    "\"<ExternalEvaluateConsumer globals=4 objects=11>\""}, {
                    "\"current_token\"", 
                    "\"WXFToken<b'f', data=None, len=2>\""}, {"\"tokens\"", 
                    "\"<generator object WXFParser.tokens at \
0x175661180>\""}, {"\"kwargs\"", "\"{}\""}, {"\"head\"", 
                    "\"ExternalEvaluate`Private`ExternalEvaluateCommand\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Null}}, 
                    "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<ExternalEvaluateConsumer globals=4 objects=11>"}, {
                    "current_token", "WXFToken<b'f', data=None, len=2>"}, {
                    "tokens", 
                    "<generator object WXFParser.tokens at 0x175661180>"}, {
                    "kwargs", "{}"}, {"head", 
                    "ExternalEvaluate`Private`ExternalEvaluateCommand"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless"], " in ", "consume_function"}], 
                    Column[{
                    
                    Column[{
                    "  94.          Return a :class:`list` if the head is \
symbol `List`, otherwise returns the result of \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`", "  95.          applied to the head and arguments.", "  96.  ", 
                    "  97.          Usually custom parsing rules target \
Functions, but not List. To do so, it is recommended to override", 
                    "  98.          \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`.", "  99.          \"\"\"", 
                    " 100.          head = self.next_expression(tokens, \
**kwargs)", 
                    Item[" 101.          args = tuple(", Background -> 
                    LightYellow], 
                    " 102.              self.next_expression(tokens, \
**kwargs) for i in range(current_token.length)", " 103.          )", 
                    " 104.          if head == self._LIST:", 
                    " 105.              return args", " 106.          else:", 
                    " 107.              return self.build_function(head, \
args, **kwargs)"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<ExternalEvaluateConsumer globals=4 objects=11>"}, {
                    "current_token", "WXFToken<b'f', data=None, len=2>"}, {
                    "tokens", 
                    "<generator object WXFParser.tokens at 0x175661180>"}, {
                    "kwargs", "{}"}, {"head", 
                    "ExternalEvaluate`Private`ExternalEvaluateCommand"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"<genexpr>\""}, 
                    "RowDefault"]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"<genexpr>\""}, 
                    "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{
                    "\"  95.          applied to the head and arguments.\""}, \
{"\"  96.  \""}, {
                    "\"  97.          Usually custom parsing rules target \
Functions, but not List. To do so, it is recommended to override\""}, {
                    "\"  98.          \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`.\""}, {"\"  99.          \\\"\\\"\\\"\""}, {
                    "\" 100.          head = self.next_expression(tokens, \
**kwargs)\""}, {"\" 101.          args = tuple(\""}, {
                    ItemBox[
                    "\" 102.              self.next_expression(tokens, \
**kwargs) for i in range(current_token.length)\"", Background -> 
                    RGBColor[1, 1, 0.85], StripOnInput -> False]}, {
                    "\" 103.          )\""}, {
                    "\" 104.          if head == self._LIST:\""}, {
                    "\" 105.              return args\""}, {
                    "\" 106.          else:\""}, {
                    "\" 107.              return self.build_function(head, \
args, **kwargs)\""}, {"\" 108.  \""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\".0\"", 
                    "\"<range_iterator object at 0x175686b20>\""}, {
                    "\"i\"", "\"1\""}, {"\"kwargs\"", "\"{}\""}, {
                    "\"self\"", 
                    "\"<ExternalEvaluateConsumer globals=4 objects=11>\""}, {
                    "\"tokens\"", 
                    "\"<generator object WXFParser.tokens at \
0x175661180>\""}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Null}}, 
                    "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {".0", 
                    "<range_iterator object at 0x175686b20>"}, {"i", "1"}, {
                    "kwargs", "{}"}, {"self", 
                    "<ExternalEvaluateConsumer globals=4 objects=11>"}, {
                    "tokens", 
                    "<generator object WXFParser.tokens at 0x175661180>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless"], " in ", "<genexpr>"}], 
                    Column[{
                    
                    Column[{
                    "  95.          applied to the head and arguments.", 
                    "  96.  ", 
                    "  97.          Usually custom parsing rules target \
Functions, but not List. To do so, it is recommended to override", 
                    "  98.          \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`.", "  99.          \"\"\"", 
                    " 100.          head = self.next_expression(tokens, \
**kwargs)", " 101.          args = tuple(", 
                    Item[
                    " 102.              self.next_expression(tokens, \
**kwargs) for i in range(current_token.length)", Background -> LightYellow], 
                    " 103.          )", 
                    " 104.          if head == self._LIST:", 
                    " 105.              return args", " 106.          else:", 
                    " 107.              return self.build_function(head, \
args, **kwargs)", " 108.  "}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {".0", 
                    "<range_iterator object at 0x175686b20>"}, {"i", "1"}, {
                    "kwargs", "{}"}, {"self", 
                    "<ExternalEvaluateConsumer globals=4 objects=11>"}, {
                    "tokens", 
                    "<generator object WXFParser.tokens at 0x175661180>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"next_expression\""}, 
                    "RowDefault"]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"next_expression\""}, 
                    "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{
                    "\"  69.          constants.WXF_CONSTANTS.RuleDelayed: \\\
\"consume_rule_delayed\\\",\""}, {"\"  70.      }\""}, {"\"  71.  \""}, {
                    "\"  72.      def next_expression(self, tokens, \
**kwargs):\""}, {
                    "\"  73.          \\\"\\\"\\\"Deserialize the next \
expression starting at the next token yield by `tokens`.\\\"\\\"\\\"\""}, {
                    "\"  74.          token = next(tokens)\""}, {
                    "\"  75.          consumer = \
self._consumer_from_type(token.wxf_type)\""}, {
                    ItemBox[
                    "\"  76.          return consumer(token, tokens, \
**kwargs)\"", Background -> RGBColor[1, 1, 0.85], StripOnInput -> False]}, {
                    "\"  77.  \""}, {
                    "\"  78.      def _consumer_from_type(self, \
wxf_type):\""}, {"\"  79.          try:\""}, {
                    "\"  80.              func = self._mapping[wxf_type]\""}, \
{"\"  81.          except KeyError:\""}, {
                    "\"  82.              raise WolframParserException(\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\"self\"", 
                    "\"<ExternalEvaluateConsumer globals=4 objects=11>\""}, {
                    "\"tokens\"", 
                    "\"<generator object WXFParser.tokens at \
0x175661180>\""}, {"\"kwargs\"", "\"{}\""}, {"\"token\"", 
                    "\"WXFToken<b'f', data=None, len=2>\""}, {"\"consumer\"", 
                    "\"<bound method \
ExternalEvaluateConsumer.consume_function of <ExternalEvaluateConsumer \
globals=4 objects=11>>\""}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {"Columns" -> {{
                    Null}}, "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<ExternalEvaluateConsumer globals=4 objects=11>"}, {
                    "tokens", 
                    "<generator object WXFParser.tokens at 0x175661180>"}, {
                    "kwargs", "{}"}, {"token", 
                    "WXFToken<b'f', data=None, len=2>"}, {
                    "consumer", 
                    "<bound method ExternalEvaluateConsumer.consume_function \
of <ExternalEvaluateConsumer globals=4 objects=11>>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless"], " in ", "next_expression"}], 
                    Column[{
                    
                    Column[{
                    "  69.          constants.WXF_CONSTANTS.RuleDelayed: \
\"consume_rule_delayed\",", "  70.      }", "  71.  ", 
                    "  72.      def next_expression(self, tokens, **kwargs):",
                     "  73.          \"\"\"Deserialize the next expression \
starting at the next token yield by `tokens`.\"\"\"", 
                    "  74.          token = next(tokens)", 
                    "  75.          consumer = \
self._consumer_from_type(token.wxf_type)", 
                    Item[
                    "  76.          return consumer(token, tokens, **kwargs)",
                     Background -> LightYellow], "  77.  ", 
                    "  78.      def _consumer_from_type(self, wxf_type):", 
                    "  79.          try:", 
                    "  80.              func = self._mapping[wxf_type]", 
                    "  81.          except KeyError:", 
                    "  82.              raise WolframParserException("}, 
                    Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<ExternalEvaluateConsumer globals=4 objects=11>"}, {
                    "tokens", 
                    "<generator object WXFParser.tokens at 0x175661180>"}, {
                    "kwargs", "{}"}, {"token", 
                    "WXFToken<b'f', data=None, len=2>"}, {
                    "consumer", 
                    "<bound method ExternalEvaluateConsumer.consume_function \
of <ExternalEvaluateConsumer globals=4 objects=11>>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless", Evaluator -> Automatic, 
                    Method -> "Preemptive"], "\" in \"", 
                    "\"consume_function\""}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless", Evaluator -> Automatic, 
                    Method -> "Preemptive"], "\" in \"", 
                    "\"consume_function\""}, "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{"\" 319.  \""}, {
                    "\" 320.      def __init__(self, routes_registry={}, \
objects_registry={}, globals_registry={}):\""}, {
                    "\" 321.          self.objects_registry = \
registry(objects_registry)\""}, {
                    "\" 322.          self.globals_registry = \
registry(globals_registry)\""}, {
                    "\" 323.          self.routes_registry = \
registry(self.builtin_routes, **routes_registry)\""}, {"\" 324.  \""}, {
                    "\" 325.      def consume_function(self, *args, \
**kwargs):\""}, {
                    ItemBox[
                    "\" 326.          expr = super().consume_function(*args, \
**kwargs)\"", Background -> RGBColor[1, 1, 0.85], StripOnInput -> False]}, {
                    "\" 327.  \""}, {
                    "\" 328.          if check_wl_symbol(expr, \
self.hook_symbol):\""}, {
                    "\" 329.              assert len(expr.args) == 2\""}, {
                    "\" 330.              return \
self.dispatch_wl_object(*expr.args)\""}, {"\" 331.  \""}, {
                    "\" 332.          return expr\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\"self\"", 
                    "\"<ExternalEvaluateConsumer globals=4 objects=11>\""}, {
                    "\"args\"", 
                    "\"(<wolframclient.deserializers.wxf.wxfparser.WXFToken \
object at 0x175668e50>, <generator object WXFParser.tokens at \
0x175661180>)\""}, {"\"kwargs\"", "\"{}\""}, {"\"__class__\"", 
                    "\"<class \
'wolframclient.utils.externalevaluate.ExternalEvaluateConsumer'>\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Null}}, 
                    "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<ExternalEvaluateConsumer globals=4 objects=11>"}, {
                    "args", 
                    "(<wolframclient.deserializers.wxf.wxfparser.WXFToken \
object at 0x175668e50>, <generator object WXFParser.tokens at \
0x175661180>)"}, {"kwargs", "{}"}, {"__class__", 
                    "<class \
'wolframclient.utils.externalevaluate.ExternalEvaluateConsumer'>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless"], " in ", 
                    "consume_function"}], 
                    Column[{
                    
                    Column[{" 319.  ", 
                    " 320.      def __init__(self, routes_registry={}, \
objects_registry={}, globals_registry={}):", 
                    " 321.          self.objects_registry = \
registry(objects_registry)", 
                    " 322.          self.globals_registry = \
registry(globals_registry)", 
                    " 323.          self.routes_registry = \
registry(self.builtin_routes, **routes_registry)", " 324.  ", 
                    " 325.      def consume_function(self, *args, **kwargs):", 
                    Item[
                    " 326.          expr = super().consume_function(*args, \
**kwargs)", Background -> LightYellow], " 327.  ", 
                    " 328.          if check_wl_symbol(expr, \
self.hook_symbol):", " 329.              assert len(expr.args) == 2", 
                    " 330.              return \
self.dispatch_wl_object(*expr.args)", " 331.  ", 
                    " 332.          return expr"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<ExternalEvaluateConsumer globals=4 objects=11>"}, {
                    "args", 
                    "(<wolframclient.deserializers.wxf.wxfparser.WXFToken \
object at 0x175668e50>, <generator object WXFParser.tokens at \
0x175661180>)"}, {"kwargs", "{}"}, {"__class__", 
                    "<class \
'wolframclient.utils.externalevaluate.ExternalEvaluateConsumer'>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"consume_function\""}, 
                    "RowDefault"]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"consume_function\""}, 
                    "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    GridBox[{{
                    "\"  94.          Return a :class:`list` if the head is \
symbol `List`, otherwise returns the result of \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`\""}, {"\"  95.          applied to the head and arguments.\""}, {
                    "\"  96.  \""}, {
                    "\"  97.          Usually custom parsing rules target \
Functions, but not List. To do so, it is recommended to override\""}, {
                    "\"  98.          \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`.\""}, {"\"  99.          \\\"\\\"\\\"\""}, {
                    "\" 100.          head = self.next_expression(tokens, \
**kwargs)\""}, {
                    ItemBox["\" 101.          args = tuple(\"", Background -> 
                    RGBColor[1, 1, 0.85], StripOnInput -> False]}, {
                    "\" 102.              self.next_expression(tokens, \
**kwargs) for i in range(current_token.length)\""}, {
                    "\" 103.          )\""}, {
                    "\" 104.          if head == self._LIST:\""}, {
                    "\" 105.              return args\""}, {
                    "\" 106.          else:\""}, {
                    "\" 107.              return self.build_function(head, \
args, **kwargs)\""}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\"self\"", 
                    "\"<ExternalEvaluateConsumer globals=4 objects=11>\""}, {
                    "\"current_token\"", 
                    "\"WXFToken<b'f', data=None, len=2>\""}, {"\"tokens\"", 
                    "\"<generator object WXFParser.tokens at \
0x175661180>\""}, {"\"kwargs\"", "\"{}\""}, {"\"head\"", "\"List\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Null}}, 
                    "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<ExternalEvaluateConsumer globals=4 objects=11>"}, {
                    "current_token", "WXFToken<b'f', data=None, len=2>"}, {
                    "tokens", 
                    "<generator object WXFParser.tokens at 0x175661180>"}, {
                    "kwargs", "{}"}, {"head", "List"}}, Background -> {
                    Null, {LightGray}}, Alignment -> Left, Frame -> 
                    LightGray]}, False]], DynamicModuleValues -> Automatic], 
                    Setting[#, {0}]& ]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless"], " in ", "consume_function"}], 
                    Column[{
                    
                    Column[{
                    "  94.          Return a :class:`list` if the head is \
symbol `List`, otherwise returns the result of \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`", "  95.          applied to the head and arguments.", "  96.  ", 
                    "  97.          Usually custom parsing rules target \
Functions, but not List. To do so, it is recommended to override", 
                    "  98.          \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`.", "  99.          \"\"\"", 
                    " 100.          head = self.next_expression(tokens, \
**kwargs)", 
                    Item[" 101.          args = tuple(", Background -> 
                    LightYellow], 
                    " 102.              self.next_expression(tokens, \
**kwargs) for i in range(current_token.length)", " 103.          )", 
                    " 104.          if head == self._LIST:", 
                    " 105.              return args", " 106.          else:", 
                    " 107.              return self.build_function(head, \
args, **kwargs)"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<ExternalEvaluateConsumer globals=4 objects=11>"}, {
                    "current_token", "WXFToken<b'f', data=None, len=2>"}, {
                    "tokens", 
                    "<generator object WXFParser.tokens at 0x175661180>"}, {
                    "kwargs", "{}"}, {"head", "List"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"<genexpr>\""}, 
                    "RowDefault"]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"<genexpr>\""}, 
                    "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{
                    "\"  95.          applied to the head and arguments.\""}, \
{"\"  96.  \""}, {
                    "\"  97.          Usually custom parsing rules target \
Functions, but not List. To do so, it is recommended to override\""}, {
                    "\"  98.          \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`.\""}, {"\"  99.          \\\"\\\"\\\"\""}, {
                    "\" 100.          head = self.next_expression(tokens, \
**kwargs)\""}, {"\" 101.          args = tuple(\""}, {
                    ItemBox[
                    "\" 102.              self.next_expression(tokens, \
**kwargs) for i in range(current_token.length)\"", Background -> 
                    RGBColor[1, 1, 0.85], StripOnInput -> False]}, {
                    "\" 103.          )\""}, {
                    "\" 104.          if head == self._LIST:\""}, {
                    "\" 105.              return args\""}, {
                    "\" 106.          else:\""}, {
                    "\" 107.              return self.build_function(head, \
args, **kwargs)\""}, {"\" 108.  \""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\".0\"", 
                    "\"<range_iterator object at 0x175685200>\""}, {
                    "\"i\"", "\"0\""}, {"\"kwargs\"", "\"{}\""}, {
                    "\"self\"", 
                    "\"<ExternalEvaluateConsumer globals=4 objects=11>\""}, {
                    "\"tokens\"", 
                    "\"<generator object WXFParser.tokens at \
0x175661180>\""}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Null}}, 
                    "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {".0", 
                    "<range_iterator object at 0x175685200>"}, {"i", "0"}, {
                    "kwargs", "{}"}, {"self", 
                    "<ExternalEvaluateConsumer globals=4 objects=11>"}, {
                    "tokens", 
                    "<generator object WXFParser.tokens at 0x175661180>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless"], " in ", "<genexpr>"}], 
                    Column[{
                    
                    Column[{
                    "  95.          applied to the head and arguments.", 
                    "  96.  ", 
                    "  97.          Usually custom parsing rules target \
Functions, but not List. To do so, it is recommended to override", 
                    "  98.          \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`.", "  99.          \"\"\"", 
                    " 100.          head = self.next_expression(tokens, \
**kwargs)", " 101.          args = tuple(", 
                    Item[
                    " 102.              self.next_expression(tokens, \
**kwargs) for i in range(current_token.length)", Background -> LightYellow], 
                    " 103.          )", 
                    " 104.          if head == self._LIST:", 
                    " 105.              return args", " 106.          else:", 
                    " 107.              return self.build_function(head, \
args, **kwargs)", " 108.  "}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {".0", 
                    "<range_iterator object at 0x175685200>"}, {"i", "0"}, {
                    "kwargs", "{}"}, {"self", 
                    "<ExternalEvaluateConsumer globals=4 objects=11>"}, {
                    "tokens", 
                    "<generator object WXFParser.tokens at 0x175661180>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"next_expression\""}, 
                    "RowDefault"]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"next_expression\""}, 
                    "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{
                    "\"  69.          constants.WXF_CONSTANTS.RuleDelayed: \\\
\"consume_rule_delayed\\\",\""}, {"\"  70.      }\""}, {"\"  71.  \""}, {
                    "\"  72.      def next_expression(self, tokens, \
**kwargs):\""}, {
                    "\"  73.          \\\"\\\"\\\"Deserialize the next \
expression starting at the next token yield by `tokens`.\\\"\\\"\\\"\""}, {
                    "\"  74.          token = next(tokens)\""}, {
                    "\"  75.          consumer = \
self._consumer_from_type(token.wxf_type)\""}, {
                    ItemBox[
                    "\"  76.          return consumer(token, tokens, \
**kwargs)\"", Background -> RGBColor[1, 1, 0.85], StripOnInput -> False]}, {
                    "\"  77.  \""}, {
                    "\"  78.      def _consumer_from_type(self, \
wxf_type):\""}, {"\"  79.          try:\""}, {
                    "\"  80.              func = self._mapping[wxf_type]\""}, \
{"\"  81.          except KeyError:\""}, {
                    "\"  82.              raise WolframParserException(\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\"self\"", 
                    "\"<ExternalEvaluateConsumer globals=4 objects=11>\""}, {
                    "\"tokens\"", 
                    "\"<generator object WXFParser.tokens at \
0x175661180>\""}, {"\"kwargs\"", "\"{}\""}, {"\"token\"", 
                    "\"WXFToken<b'f', data=None, len=2>\""}, {"\"consumer\"", 
                    "\"<bound method \
ExternalEvaluateConsumer.consume_function of <ExternalEvaluateConsumer \
globals=4 objects=11>>\""}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {"Columns" -> {{
                    Null}}, "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<ExternalEvaluateConsumer globals=4 objects=11>"}, {
                    "tokens", 
                    "<generator object WXFParser.tokens at 0x175661180>"}, {
                    "kwargs", "{}"}, {"token", 
                    "WXFToken<b'f', data=None, len=2>"}, {"consumer", 
                    "<bound method ExternalEvaluateConsumer.consume_function \
of <ExternalEvaluateConsumer globals=4 objects=11>>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless"], " in ", "next_expression"}], 
                    Column[{
                    
                    Column[{
                    "  69.          constants.WXF_CONSTANTS.RuleDelayed: \
\"consume_rule_delayed\",", "  70.      }", "  71.  ", 
                    "  72.      def next_expression(self, tokens, **kwargs):",
                     "  73.          \"\"\"Deserialize the next expression \
starting at the next token yield by `tokens`.\"\"\"", 
                    "  74.          token = next(tokens)", 
                    "  75.          consumer = \
self._consumer_from_type(token.wxf_type)", 
                    Item[
                    "  76.          return consumer(token, tokens, **kwargs)",
                     Background -> LightYellow], "  77.  ", 
                    "  78.      def _consumer_from_type(self, wxf_type):", 
                    "  79.          try:", 
                    "  80.              func = self._mapping[wxf_type]", 
                    "  81.          except KeyError:", 
                    "  82.              raise WolframParserException("}, 
                    Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<ExternalEvaluateConsumer globals=4 objects=11>"}, {
                    "tokens", 
                    "<generator object WXFParser.tokens at 0x175661180>"}, {
                    "kwargs", "{}"}, {"token", 
                    "WXFToken<b'f', data=None, len=2>"}, {
                    "consumer", 
                    "<bound method ExternalEvaluateConsumer.consume_function \
of <ExternalEvaluateConsumer globals=4 objects=11>>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless", Evaluator -> Automatic, 
                    Method -> "Preemptive"], "\" in \"", 
                    "\"consume_function\""}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless", Evaluator -> Automatic, 
                    Method -> "Preemptive"], "\" in \"", 
                    "\"consume_function\""}, "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{
                    "\" 323.          self.routes_registry = \
registry(self.builtin_routes, **routes_registry)\""}, {"\" 324.  \""}, {
                    "\" 325.      def consume_function(self, *args, \
**kwargs):\""}, {
                    "\" 326.          expr = super().consume_function(*args, \
**kwargs)\""}, {"\" 327.  \""}, {
                    "\" 328.          if check_wl_symbol(expr, \
self.hook_symbol):\""}, {
                    "\" 329.              assert len(expr.args) == 2\""}, {
                    ItemBox[
                    "\" 330.              return \
self.dispatch_wl_object(*expr.args)\"", Background -> RGBColor[1, 1, 0.85], 
                    StripOnInput -> False]}, {"\" 331.  \""}, {
                    "\" 332.          return expr\""}, {"\" 333.  \""}, {
                    "\" 334.      def dispatch_wl_object(self, route, \
args):\""}, {
                    "\" 335.          return \
self.routes_registry[route](self, *args)\""}, {"\" 336.  \""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\"self\"", 
                    "\"<ExternalEvaluateConsumer globals=4 objects=11>\""}, {
                    "\"args\"", 
                    "\"(<wolframclient.deserializers.wxf.wxfparser.WXFToken \
object at 0x175669990>, <generator object WXFParser.tokens at \
0x175661180>)\""}, {"\"kwargs\"", "\"{}\""}, {"\"expr\"", 
                    "\"ExternalEvaluate`Private`ExternalEvaluateCommand['Call'\
, (<function size at 0x1756207c0>, None, \
hypernetx.classes.Hypergraph.Hypergraph)]\""}, {"\"__class__\"", 
                    "\"<class \
'wolframclient.utils.externalevaluate.ExternalEvaluateConsumer'>\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Null}}, 
                    "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<ExternalEvaluateConsumer globals=4 objects=11>"}, {
                    "args", 
                    "(<wolframclient.deserializers.wxf.wxfparser.WXFToken \
object at 0x175669990>, <generator object WXFParser.tokens at \
0x175661180>)"}, {"kwargs", "{}"}, {"expr", 
                    "ExternalEvaluate`Private`ExternalEvaluateCommand['Call', \
(<function size at 0x1756207c0>, None, \
hypernetx.classes.Hypergraph.Hypergraph)]"}, {"__class__", 
                    "<class \
'wolframclient.utils.externalevaluate.ExternalEvaluateConsumer'>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless"], " in ", 
                    "consume_function"}], 
                    Column[{
                    
                    Column[{
                    " 323.          self.routes_registry = \
registry(self.builtin_routes, **routes_registry)", " 324.  ", 
                    " 325.      def consume_function(self, *args, **kwargs):",
                     " 326.          expr = super().consume_function(*args, \
**kwargs)", " 327.  ", 
                    " 328.          if check_wl_symbol(expr, \
self.hook_symbol):", " 329.              assert len(expr.args) == 2", 
                    Item[
                    " 330.              return \
self.dispatch_wl_object(*expr.args)", Background -> LightYellow], " 331.  ", 
                    " 332.          return expr", " 333.  ", 
                    " 334.      def dispatch_wl_object(self, route, args):", 
                    " 335.          return self.routes_registry[route](self, \
*args)", " 336.  "}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<ExternalEvaluateConsumer globals=4 objects=11>"}, {
                    "args", 
                    "(<wolframclient.deserializers.wxf.wxfparser.WXFToken \
object at 0x175669990>, <generator object WXFParser.tokens at \
0x175661180>)"}, {"kwargs", "{}"}, {"expr", 
                    "ExternalEvaluate`Private`ExternalEvaluateCommand['Call', \
(<function size at 0x1756207c0>, None, \
hypernetx.classes.Hypergraph.Hypergraph)]"}, {
                    "__class__", 
                    "<class \
'wolframclient.utils.externalevaluate.ExternalEvaluateConsumer'>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless", Evaluator -> Automatic, 
                    Method -> "Preemptive"], "\" in \"", 
                    "\"dispatch_wl_object\""}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless", Evaluator -> Automatic, 
                    Method -> "Preemptive"], "\" in \"", 
                    "\"dispatch_wl_object\""}, "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{
                    "\" 328.          if check_wl_symbol(expr, \
self.hook_symbol):\""}, {
                    "\" 329.              assert len(expr.args) == 2\""}, {
                    "\" 330.              return \
self.dispatch_wl_object(*expr.args)\""}, {"\" 331.  \""}, {
                    "\" 332.          return expr\""}, {"\" 333.  \""}, {
                    "\" 334.      def dispatch_wl_object(self, route, \
args):\""}, {
                    ItemBox[
                    "\" 335.          return \
self.routes_registry[route](self, *args)\"", Background -> 
                    RGBColor[1, 1, 0.85], StripOnInput -> False]}, {
                    "\" 336.  \""}, {"\" 337.      def __repr__(self):\""}, {
                    "\" 338.          return \\\"<{} globals={} objects={}>\\\
\".format(\""}, {
                    "\" 339.              self.__class__.__name__, \
len(self.globals_registry), len(self.objects_registry)\""}, {
                    "\" 340.          )\""}, {"\" 341.  \""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\"self\"", 
                    "\"<ExternalEvaluateConsumer globals=4 objects=11>\""}, {
                    "\"route\"", "\"Call\""}, {"\"args\"", 
                    "\"(<function size at 0x1756207c0>, None, \
hypernetx.classes.Hypergraph.Hypergraph)\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Null}}, "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<ExternalEvaluateConsumer globals=4 objects=11>"}, {
                    "route", "Call"}, {"args", 
                    "(<function size at 0x1756207c0>, None, \
hypernetx.classes.Hypergraph.Hypergraph)"}}, Background -> {
                    Null, {LightGray}}, Alignment -> Left, Frame -> 
                    LightGray]}, False]], DynamicModuleValues -> Automatic], 
                    Setting[#, {0}]& ]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless"], " in ", 
                    "dispatch_wl_object"}], 
                    Column[{
                    
                    Column[{
                    " 328.          if check_wl_symbol(expr, \
self.hook_symbol):", " 329.              assert len(expr.args) == 2", 
                    " 330.              return \
self.dispatch_wl_object(*expr.args)", " 331.  ", " 332.          return expr",
                     " 333.  ", 
                    " 334.      def dispatch_wl_object(self, route, args):", 
                    Item[
                    " 335.          return self.routes_registry[route](self, \
*args)", Background -> LightYellow], " 336.  ", 
                    " 337.      def __repr__(self):", 
                    " 338.          return \"<{} globals={} \
objects={}>\".format(", 
                    " 339.              self.__class__.__name__, \
len(self.globals_registry), len(self.objects_registry)", " 340.          )", 
                    " 341.  "}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<ExternalEvaluateConsumer globals=4 objects=11>"}, {
                    "route", "Call"}, {"args", 
                    "(<function size at 0x1756207c0>, None, \
hypernetx.classes.Hypergraph.Hypergraph)"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = True}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless", Evaluator -> Automatic, 
                    Method -> "Preemptive"], "\" in \"", "\"Call\""}, 
                    "RowDefault"]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless", Evaluator -> Automatic, 
                    Method -> "Preemptive"], "\" in \"", "\"Call\""}, 
                    "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{"\" 245.  \""}, {"\" 246.  \""}, {
                    "\" 247.  @routes.register_function\""}, {
                    "\" 248.  def Call(consumer, result, *args):\""}, {
                    "\" 249.  \""}, {
                    "\" 250.      pos, kwargs = unpack_optionals(args)\""}, {
                    "\" 251.  \""}, {
                    ItemBox[
                    "\" 252.      return result(*pos, **kwargs)\"", 
                    Background -> RGBColor[1, 1, 0.85], StripOnInput -> 
                    False]}, {"\" 253.  \""}, {"\" 254.  \""}, {
                    "\" 255.  @routes.register_function\""}, {
                    "\" 256.  def MethodCall(consumer, result, names, *args):\
\""}, {"\" 257.      return Call(consumer, GetAttribute(consumer, result, \
names), *args)\""}, {"\" 258.  \""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{"\"Key\"", "\"Value\""}, {
                    "\"consumer\"", 
                    "\"<ExternalEvaluateConsumer globals=4 objects=11>\""}, {
                    "\"result\"", "\"<function size at 0x1756207c0>\""}, {
                    "\"args\"", 
                    "\"(None, hypernetx.classes.Hypergraph.Hypergraph,)\""}, {
                    "\"pos\"", 
                    "\"[None, hypernetx.classes.Hypergraph.Hypergraph]\""}, {
                    "\"kwargs\"", "\"{}\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Null}}, "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"consumer", 
                    "<ExternalEvaluateConsumer globals=4 objects=11>"}, {
                    "result", "<function size at 0x1756207c0>"}, {
                    "args", 
                    "(None, hypernetx.classes.Hypergraph.Hypergraph,)"}, {
                    "pos", "[None, \
hypernetx.classes.Hypergraph.Hypergraph]"}, {"kwargs", "{}"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless"], " in ", "Call"}], 
                    Column[{
                    
                    Column[{" 245.  ", " 246.  ", 
                    " 247.  @routes.register_function", 
                    " 248.  def Call(consumer, result, *args):", " 249.  ", 
                    " 250.      pos, kwargs = unpack_optionals(args)", 
                    " 251.  ", 
                    Item[
                    " 252.      return result(*pos, **kwargs)", Background -> 
                    LightYellow], " 253.  ", " 254.  ", 
                    " 255.  @routes.register_function", 
                    " 256.  def MethodCall(consumer, result, names, *args):", 
                    " 257.      return Call(consumer, GetAttribute(consumer, \
result, names), *args)", " 258.  "}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"consumer", 
                    "<ExternalEvaluateConsumer globals=4 objects=11>"}, {
                    "result", "<function size at 0x1756207c0>"}, {
                    "args", 
                    "(None, hypernetx.classes.Hypergraph.Hypergraph,)"}, {
                    "pos", "[None, \
hypernetx.classes.Hypergraph.Hypergraph]"}, {"kwargs", "{}"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, True]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = True}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Users/arnoudb/hypernetx/Python/Hypergraph/Hypergraph.\
py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Users/arnoudb/hypernetx/Python/Hypergraph/Hypergraph.\
py"], 
                    SystemOpen[
                    "/Users/arnoudb/hypernetx/Python/Hypergraph/Hypergraph.\
py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"size\""}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Users/arnoudb/hypernetx/Python/Hypergraph/Hypergraph.\
py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Users/arnoudb/hypernetx/Python/Hypergraph/Hypergraph.\
py"], 
                    SystemOpen[
                    "/Users/arnoudb/hypernetx/Python/Hypergraph/Hypergraph.\
py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"size\""}, "RowDefault"]}, {
                    "", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{"\" 204.  def shape(hg):\""}, {
                    "\" 205.      return hg.shape()\""}, {"\" 206.  \""}, {
                    "\" 207.  def singletons(hg):\""}, {
                    "\" 208.      return hg.singletons()\""}, {
                    "\" 209.  \""}, {"\" 210.  def size(hg):\""}, {
                    ItemBox[
                    "\" 211.      return hg.size()\"", Background -> 
                    RGBColor[1, 1, 0.85], StripOnInput -> False]}, {
                    "\" 212.  \""}, {"\" 213.  def toplexes(hg):\""}, {
                    "\" 214.      return hg.toplexes()\""}, {"\" 215.  \""}, {
                    "\" 216.  def weight_prop_col(hg):\""}, {
                    "\" 217.      return hg.weight_prop_col()\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\"hg\"", 
                    "\"None, <class \
'hypernetx.classes.Hypergraph.Hypergraph'>\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Null}}, "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"hg", 
                    "None, <class \
'hypernetx.classes.Hypergraph.Hypergraph'>"}}, Background -> {
                    Null, {LightGray}}, Alignment -> Left, Frame -> 
                    LightGray]}, False]], DynamicModuleValues -> Automatic], 
                    Setting[#, {0}]& ]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Users/arnoudb/hypernetx/Python/Hypergraph/Hypergraph.\
py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Users/arnoudb/hypernetx/Python/Hypergraph/Hypergraph.\
py"], 
                    SystemOpen[
                    "/Users/arnoudb/hypernetx/Python/Hypergraph/Hypergraph.\
py"]], Appearance -> "Frameless"], " in ", "size"}], 
                    Column[{
                    
                    Column[{" 204.  def shape(hg):", 
                    " 205.      return hg.shape()", " 206.  ", 
                    " 207.  def singletons(hg):", 
                    " 208.      return hg.singletons()", " 209.  ", 
                    " 210.  def size(hg):", 
                    Item[
                    " 211.      return hg.size()", Background -> LightYellow],
                     " 212.  ", " 213.  def toplexes(hg):", 
                    " 214.      return hg.toplexes()", " 215.  ", 
                    " 216.  def weight_prop_col(hg):", 
                    " 217.      return hg.weight_prop_col()"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"hg", 
                    "None, <class \
'hypernetx.classes.Hypergraph.Hypergraph'>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, True]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], FontFamily -> "Courier", StripOnInput -> 
                    False], ImageMargins -> 0]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    
                    Row[{"TypeError", " ", 
                    "Hypergraph.size() missing 1 required positional \
argument: 'edge'"}], 
                    Style[
                    Column[{
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/language/\
decorators.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/language/\
decorators.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/language/\
decorators.py"]], Appearance -> "Frameless"], " in ", "safe_wl_execute"}], 
                    Column[{
                    
                    Column[{
                    "  14.      \"wl\": b'Failure[\"PythonFailure\", \
<|\"MessageTemplate\" -> \"Unexpected error occurred.\"|>]',", "  15.  }", 
                    "  16.  ", "  17.  ", 
                    "  18.  def safe_wl_execute(function, args=(), opts={}, \
export_opts={}, exception_class=None):", "  19.  ", "  20.      try:", 
                    Item[
                    "  21.          return export(function(*args, **opts), \
**export_opts)", Background -> LightYellow], 
                    "  22.      except Exception as export_exception:", 
                    "  23.          try:", "  24.              try:", 
                    "  25.  ", 
                    "  26.                  # The user can provide an \
exception class, and it can be broken, in which case we are running another", 
                    "  27.                  # try / except to return errors \
that are happening during class serialization"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "function", "<function handle_message at 0x103b78fe0>"}, {
                    "args", "(<zmq.Socket(zmq.PAIR) at 0x103b54c20>,)"}, {
                    "opts", 
                    "{'consumer': <ExternalEvaluateConsumer globals=4 \
objects=11>}"}, {"export_opts", 
                    "{'object_processor': <function \
start_zmq_loop.<locals>.<lambda> at 0x102e009a0>, 'target_format': 'wxf'}"}, {
                    "exception_class", "None"}, {
                    "export_exception", 
                    "Hypergraph.size() missing 1 required positional \
argument: 'edge'"}}, Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless"], " in ", 
                    "handle_message"}], 
                    Column[{
                    
                    Column[{
                    " 350.          self.socket.send(zmq.Frame(bytes))", 
                    " 351.  ", " 352.      def send_side_effect(self, expr):",
                     " 353.          \
self.write(export(self.keep_listening(expr), target_format=\"wxf\"))", 
                    " 354.  ", " 355.  ", 
                    " 356.  def handle_message(socket, consumer):", 
                    Item[
                    " 357.      result = \
binary_deserialize(socket.recv(copy=False).buffer, consumer=consumer)", 
                    Background -> LightYellow], " 358.  ", 
                    " 359.      sys.stdout.flush()", 
                    " 360.      return result", " 361.  ", " 362.  ", 
                    " 363.  def start_zmq_instance(port=None, \
write_to_stdout=True, **opts):"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "socket", "<zmq.Socket(zmq.PAIR) at 0x103b54c20>"}, {
                    "consumer", 
                    "<ExternalEvaluateConsumer globals=4 objects=11>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
__init__.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
__init__.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
__init__.py"]], Appearance -> "Frameless"], " in ", "binary_deserialize"}], 
                    Column[{
                    
                    Column[{"  33.  ", "  34.      \"\"\"", 
                    "  35.      parser = WXFParser(wxf_input)", 
                    "  36.      if consumer is None:", 
                    "  37.          consumer = WXFConsumerNumpy()", "  38.  ",
                     "  39.      try:", 
                    Item[
                    "  40.          o = \
consumer.next_expression(parser.tokens(), **kwargs)", Background -> 
                    LightYellow], "  41.      except StopIteration:", 
                    "  42.          raise WolframParserException(", 
                    "  43.              \"Input data does not represent a \
valid expression in WXF format. Expecting more input data.\"", 
                    "  44.          )", 
                    "  45.      if not \
parser.context.is_valid_final_state():", 
                    "  46.          raise WolframParserException("}, 
                    Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "wxf_input", 
                    "8:f\.02s0ExternalEvaluate`Private`\
ExternalEvaluateCommandS\n\
ReturnTypef\.02s\.04Listf\.02s0ExternalEvaluate`Private`\
ExternalEvaluateCommandS\.04Callf\.02s\.04Listf\.02s0ExternalEvaluate`Private`\
ExternalEvaluateCommandS\.05Fetchf\.01\.01\.01\.01\.01\.01\.01\.01s\.04ListL\
\.07bu\.01\.01\.01\.01\.01\.01\.01\.01\.00\.00\.00f\.02s0ExternalEvaluate`\
Private`ExternalEvaluateCommandS\.05Fetchf\.01\.01\.01\.01\.01\.01\.01\.01s\
\.04ListLau\.01\.01\.01\.01\.01\.01\.01\.01\.00\.00\.00S\nExpression"}, {
                    "consumer", 
                    "<ExternalEvaluateConsumer globals=4 objects=11>"}, {
                    "kwargs", "{}"}, {
                    "parser", 
                    "<wolframclient.deserializers.wxf.wxfparser.WXFParser \
object at 0x1758477d0>"}}, Background -> {Null, {LightGray}}, Alignment -> 
                    Left, Frame -> LightGray]}]}]}, False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless"], " in ", "next_expression"}], 
                    Column[{
                    
                    Column[{
                    "  69.          constants.WXF_CONSTANTS.RuleDelayed: \
\"consume_rule_delayed\",", "  70.      }", "  71.  ", 
                    "  72.      def next_expression(self, tokens, **kwargs):",
                     "  73.          \"\"\"Deserialize the next expression \
starting at the next token yield by `tokens`.\"\"\"", 
                    "  74.          token = next(tokens)", 
                    "  75.          consumer = \
self._consumer_from_type(token.wxf_type)", 
                    Item[
                    "  76.          return consumer(token, tokens, **kwargs)",
                     Background -> LightYellow], "  77.  ", 
                    "  78.      def _consumer_from_type(self, wxf_type):", 
                    "  79.          try:", 
                    "  80.              func = self._mapping[wxf_type]", 
                    "  81.          except KeyError:", 
                    "  82.              raise WolframParserException("}, 
                    Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "self", 
                    "<ExternalEvaluateConsumer globals=4 objects=11>"}, {
                    "tokens", 
                    "<generator object WXFParser.tokens at 0x175661180>"}, {
                    "kwargs", "{}"}, {
                    "token", "WXFToken<b'f', data=None, len=2>"}, {
                    "consumer", 
                    "<bound method ExternalEvaluateConsumer.consume_function \
of <ExternalEvaluateConsumer globals=4 objects=11>>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless"], " in ", 
                    "consume_function"}], 
                    Column[{
                    
                    Column[{" 319.  ", 
                    " 320.      def __init__(self, routes_registry={}, \
objects_registry={}, globals_registry={}):", 
                    " 321.          self.objects_registry = \
registry(objects_registry)", 
                    " 322.          self.globals_registry = \
registry(globals_registry)", 
                    " 323.          self.routes_registry = \
registry(self.builtin_routes, **routes_registry)", " 324.  ", 
                    " 325.      def consume_function(self, *args, **kwargs):", 
                    Item[
                    " 326.          expr = super().consume_function(*args, \
**kwargs)", Background -> LightYellow], " 327.  ", 
                    " 328.          if check_wl_symbol(expr, \
self.hook_symbol):", " 329.              assert len(expr.args) == 2", 
                    
                    " 330.              return \
self.dispatch_wl_object(*expr.args)", " 331.  ", 
                    " 332.          return expr"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "self", 
                    "<ExternalEvaluateConsumer globals=4 objects=11>"}, {
                    "args", 
                    "(<wolframclient.deserializers.wxf.wxfparser.WXFToken \
object at 0x1756688b0>, <generator object WXFParser.tokens at \
0x175661180>)"}, {"kwargs", "{}"}, {
                    "__class__", 
                    "<class \
'wolframclient.utils.externalevaluate.ExternalEvaluateConsumer'>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless"], " in ", "consume_function"}], 
                    Column[{
                    
                    Column[{
                    "  94.          Return a :class:`list` if the head is \
symbol `List`, otherwise returns the result of \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`", "  95.          applied to the head and arguments.", "  96.  ", 
                    "  97.          Usually custom parsing rules target \
Functions, but not List. To do so, it is recommended to override", 
                    "  98.          \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`.", "  99.          \"\"\"", 
                    " 100.          head = self.next_expression(tokens, \
**kwargs)", 
                    Item[
                    " 101.          args = tuple(", Background -> 
                    LightYellow], 
                    " 102.              self.next_expression(tokens, \
**kwargs) for i in range(current_token.length)", " 103.          )", 
                    " 104.          if head == self._LIST:", 
                    " 105.              return args", " 106.          else:", 
                    " 107.              return self.build_function(head, \
args, **kwargs)"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "self", 
                    "<ExternalEvaluateConsumer globals=4 objects=11>"}, {
                    "current_token", "WXFToken<b'f', data=None, len=2>"}, {
                    "tokens", 
                    "<generator object WXFParser.tokens at 0x175661180>"}, {
                    "kwargs", "{}"}, {
                    "head", 
                    "ExternalEvaluate`Private`ExternalEvaluateCommand"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless"], " in ", "<genexpr>"}], 
                    Column[{
                    
                    Column[{
                    "  95.          applied to the head and arguments.", 
                    "  96.  ", 
                    "  97.          Usually custom parsing rules target \
Functions, but not List. To do so, it is recommended to override", 
                    "  98.          \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`.", "  99.          \"\"\"", 
                    " 100.          head = self.next_expression(tokens, \
**kwargs)", " 101.          args = tuple(", 
                    Item[
                    " 102.              self.next_expression(tokens, \
**kwargs) for i in range(current_token.length)", Background -> LightYellow], 
                    " 103.          )", 
                    " 104.          if head == self._LIST:", 
                    " 105.              return args", " 106.          else:", 
                    " 107.              return self.build_function(head, \
args, **kwargs)", " 108.  "}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    ".0", "<range_iterator object at 0x175686b20>"}, {
                    "i", "1"}, {"kwargs", "{}"}, {
                    "self", 
                    "<ExternalEvaluateConsumer globals=4 objects=11>"}, {
                    "tokens", 
                    "<generator object WXFParser.tokens at 0x175661180>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless"], " in ", "next_expression"}], 
                    Column[{
                    
                    Column[{
                    "  69.          constants.WXF_CONSTANTS.RuleDelayed: \
\"consume_rule_delayed\",", "  70.      }", "  71.  ", 
                    "  72.      def next_expression(self, tokens, **kwargs):",
                     "  73.          \"\"\"Deserialize the next expression \
starting at the next token yield by `tokens`.\"\"\"", 
                    "  74.          token = next(tokens)", 
                    "  75.          consumer = \
self._consumer_from_type(token.wxf_type)", 
                    Item[
                    "  76.          return consumer(token, tokens, **kwargs)",
                     Background -> LightYellow], "  77.  ", 
                    "  78.      def _consumer_from_type(self, wxf_type):", 
                    "  79.          try:", 
                    "  80.              func = self._mapping[wxf_type]", 
                    "  81.          except KeyError:", 
                    "  82.              raise WolframParserException("}, 
                    Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "self", 
                    "<ExternalEvaluateConsumer globals=4 objects=11>"}, {
                    "tokens", 
                    "<generator object WXFParser.tokens at 0x175661180>"}, {
                    "kwargs", "{}"}, {
                    "token", "WXFToken<b'f', data=None, len=2>"}, {
                    "consumer", 
                    "<bound method ExternalEvaluateConsumer.consume_function \
of <ExternalEvaluateConsumer globals=4 objects=11>>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless"], " in ", 
                    "consume_function"}], 
                    Column[{
                    
                    Column[{" 319.  ", 
                    " 320.      def __init__(self, routes_registry={}, \
objects_registry={}, globals_registry={}):", 
                    " 321.          self.objects_registry = \
registry(objects_registry)", 
                    " 322.          self.globals_registry = \
registry(globals_registry)", 
                    " 323.          self.routes_registry = \
registry(self.builtin_routes, **routes_registry)", " 324.  ", 
                    " 325.      def consume_function(self, *args, **kwargs):", 
                    Item[
                    " 326.          expr = super().consume_function(*args, \
**kwargs)", Background -> LightYellow], " 327.  ", 
                    " 328.          if check_wl_symbol(expr, \
self.hook_symbol):", " 329.              assert len(expr.args) == 2", 
                    " 330.              return \
self.dispatch_wl_object(*expr.args)", " 331.  ", 
                    " 332.          return expr"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "self", 
                    "<ExternalEvaluateConsumer globals=4 objects=11>"}, {
                    "args", 
                    "(<wolframclient.deserializers.wxf.wxfparser.WXFToken \
object at 0x175668e50>, <generator object WXFParser.tokens at \
0x175661180>)"}, {"kwargs", "{}"}, {
                    "__class__", 
                    "<class \
'wolframclient.utils.externalevaluate.ExternalEvaluateConsumer'>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless"], " in ", "consume_function"}], 
                    Column[{
                    
                    Column[{
                    "  94.          Return a :class:`list` if the head is \
symbol `List`, otherwise returns the result of \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`", "  95.          applied to the head and arguments.", "  96.  ", 
                    "  97.          Usually custom parsing rules target \
Functions, but not List. To do so, it is recommended to override", 
                    "  98.          \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`.", "  99.          \"\"\"", 
                    " 100.          head = self.next_expression(tokens, \
**kwargs)", 
                    Item[
                    " 101.          args = tuple(", Background -> 
                    LightYellow], 
                    " 102.              self.next_expression(tokens, \
**kwargs) for i in range(current_token.length)", " 103.          )", 
                    " 104.          if head == self._LIST:", 
                    " 105.              return args", " 106.          else:", 
                    " 107.              return self.build_function(head, \
args, **kwargs)"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "self", 
                    "<ExternalEvaluateConsumer globals=4 objects=11>"}, {
                    "current_token", "WXFToken<b'f', data=None, len=2>"}, {
                    "tokens", 
                    "<generator object WXFParser.tokens at 0x175661180>"}, {
                    "kwargs", "{}"}, {"head", "List"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless"], " in ", "<genexpr>"}], 
                    Column[{
                    
                    Column[{
                    "  95.          applied to the head and arguments.", 
                    "  96.  ", 
                    "  97.          Usually custom parsing rules target \
Functions, but not List. To do so, it is recommended to override", 
                    "  98.          \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`.", "  99.          \"\"\"", 
                    " 100.          head = self.next_expression(tokens, \
**kwargs)", " 101.          args = tuple(", 
                    Item[
                    " 102.              self.next_expression(tokens, \
**kwargs) for i in range(current_token.length)", Background -> LightYellow], 
                    " 103.          )", 
                    " 104.          if head == self._LIST:", 
                    " 105.              return args", " 106.          else:", 
                    " 107.              return self.build_function(head, \
args, **kwargs)", " 108.  "}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    ".0", "<range_iterator object at 0x175685200>"}, {
                    "i", "0"}, {"kwargs", "{}"}, {
                    "self", 
                    "<ExternalEvaluateConsumer globals=4 objects=11>"}, {
                    "tokens", 
                    "<generator object WXFParser.tokens at 0x175661180>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless"], " in ", "next_expression"}], 
                    Column[{
                    
                    Column[{
                    "  69.          constants.WXF_CONSTANTS.RuleDelayed: \
\"consume_rule_delayed\",", "  70.      }", "  71.  ", 
                    "  72.      def next_expression(self, tokens, **kwargs):",
                     "  73.          \"\"\"Deserialize the next expression \
starting at the next token yield by `tokens`.\"\"\"", 
                    "  74.          token = next(tokens)", 
                    "  75.          consumer = \
self._consumer_from_type(token.wxf_type)", 
                    Item[
                    "  76.          return consumer(token, tokens, **kwargs)",
                     Background -> LightYellow], "  77.  ", 
                    "  78.      def _consumer_from_type(self, wxf_type):", 
                    "  79.          try:", 
                    "  80.              func = self._mapping[wxf_type]", 
                    "  81.          except KeyError:", 
                    "  82.              raise WolframParserException("}, 
                    Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "self", 
                    "<ExternalEvaluateConsumer globals=4 objects=11>"}, {
                    "tokens", 
                    "<generator object WXFParser.tokens at 0x175661180>"}, {
                    "kwargs", "{}"}, {
                    "token", "WXFToken<b'f', data=None, len=2>"}, {
                    "consumer", 
                    "<bound method ExternalEvaluateConsumer.consume_function \
of <ExternalEvaluateConsumer globals=4 objects=11>>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless"], " in ", 
                    "consume_function"}], 
                    Column[{
                    
                    Column[{
                    " 323.          self.routes_registry = \
registry(self.builtin_routes, **routes_registry)", " 324.  ", 
                    " 325.      def consume_function(self, *args, **kwargs):",
                     " 326.          expr = super().consume_function(*args, \
**kwargs)", " 327.  ", 
                    " 328.          if check_wl_symbol(expr, \
self.hook_symbol):", " 329.              assert len(expr.args) == 2", 
                    Item[
                    " 330.              return \
self.dispatch_wl_object(*expr.args)", Background -> LightYellow], " 331.  ", 
                    " 332.          return expr", " 333.  ", 
                    " 334.      def dispatch_wl_object(self, route, args):", 
                    " 335.          return self.routes_registry[route](self, \
*args)", " 336.  "}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "self", 
                    "<ExternalEvaluateConsumer globals=4 objects=11>"}, {
                    "args", 
                    "(<wolframclient.deserializers.wxf.wxfparser.WXFToken \
object at 0x175669990>, <generator object WXFParser.tokens at \
0x175661180>)"}, {"kwargs", "{}"}, {
                    "expr", 
                    "ExternalEvaluate`Private`ExternalEvaluateCommand['Call', \
(<function size at 0x1756207c0>, None, \
hypernetx.classes.Hypergraph.Hypergraph)]"}, {
                    "__class__", 
                    "<class \
'wolframclient.utils.externalevaluate.ExternalEvaluateConsumer'>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless"], " in ", 
                    "dispatch_wl_object"}], 
                    Column[{
                    
                    Column[{
                    " 328.          if check_wl_symbol(expr, \
self.hook_symbol):", " 329.              assert len(expr.args) == 2", 
                    " 330.              return \
self.dispatch_wl_object(*expr.args)", " 331.  ", " 332.          return expr",
                     " 333.  ", 
                    " 334.      def dispatch_wl_object(self, route, args):", 
                    Item[
                    " 335.          return self.routes_registry[route](self, \
*args)", Background -> LightYellow], " 336.  ", 
                    " 337.      def __repr__(self):", 
                    " 338.          return \"<{} globals={} \
objects={}>\".format(", 
                    " 339.              self.__class__.__name__, \
len(self.globals_registry), len(self.objects_registry)", " 340.          )", 
                    " 341.  "}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "self", 
                    "<ExternalEvaluateConsumer globals=4 objects=11>"}, {
                    "route", "Call"}, {
                    "args", 
                    "(<function size at 0x1756207c0>, None, \
hypernetx.classes.Hypergraph.Hypergraph)"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless"], " in ", "Call"}], 
                    Column[{
                    
                    Column[{" 245.  ", " 246.  ", 
                    " 247.  @routes.register_function", 
                    " 248.  def Call(consumer, result, *args):", " 249.  ", 
                    " 250.      pos, kwargs = unpack_optionals(args)", 
                    " 251.  ", 
                    Item[
                    " 252.      return result(*pos, **kwargs)", Background -> 
                    LightYellow], " 253.  ", " 254.  ", 
                    " 255.  @routes.register_function", 
                    " 256.  def MethodCall(consumer, result, names, *args):", 
                    " 257.      return Call(consumer, GetAttribute(consumer, \
result, names), *args)", " 258.  "}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "consumer", 
                    "<ExternalEvaluateConsumer globals=4 objects=11>"}, {
                    "result", "<function size at 0x1756207c0>"}, {
                    "args", 
                    "(None, hypernetx.classes.Hypergraph.Hypergraph,)"}, {
                    "pos", "[None, \
hypernetx.classes.Hypergraph.Hypergraph]"}, {"kwargs", "{}"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, True], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Users/arnoudb/hypernetx/Python/Hypergraph/Hypergraph.\
py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Users/arnoudb/hypernetx/Python/Hypergraph/Hypergraph.\
py"], 
                    SystemOpen[
                    "/Users/arnoudb/hypernetx/Python/Hypergraph/Hypergraph.\
py"]], Appearance -> "Frameless"], " in ", "size"}], 
                    Column[{
                    
                    Column[{" 204.  def shape(hg):", 
                    " 205.      return hg.shape()", " 206.  ", 
                    " 207.  def singletons(hg):", 
                    " 208.      return hg.singletons()", " 209.  ", 
                    " 210.  def size(hg):", 
                    Item[
                    " 211.      return hg.size()", Background -> LightYellow],
                     " 212.  ", " 213.  def toplexes(hg):", 
                    " 214.      return hg.toplexes()", " 215.  ", 
                    " 216.  def weight_prop_col(hg):", 
                    " 217.      return hg.weight_prop_col()"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "hg", "None, <class \
'hypernetx.classes.Hypergraph.Hypergraph'>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, True]}], FontFamily -> 
                    "Courier"]}, True]], DynamicModuleValues -> Automatic], 
                    Setting[#, {0}]& ], HoldForm], "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  Failure[
  "PythonError", <|
   "MessageTemplate" :> 
    "Hypergraph.size() missing 1 required positional argument: 'edge'", 
    "MessageParameters" :> <||>, "FailureCode" :> "TypeError", "Traceback" :> 
    OpenerView[{
       Row[{
        "TypeError", " ", 
         "Hypergraph.size() missing 1 required positional argument: 'edge'"}], 
       Style[
        Column[{
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/language/\
decorators.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/language/\
decorators.py"], 
                SystemOpen[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/language/\
decorators.py"]], Appearance -> "Frameless"], " in ", "safe_wl_execute"}], 
            Column[{
              
              Column[{"  14.      \"wl\": b'Failure[\"PythonFailure\", \
<|\"MessageTemplate\" -> \"Unexpected error occurred.\"|>]',", "  15.  }", 
                "  16.  ", "  17.  ", 
                "  18.  def safe_wl_execute(function, args=(), opts={}, \
export_opts={}, exception_class=None):", "  19.  ", "  20.      try:", 
                Item[
                "  21.          return export(function(*args, **opts), \
**export_opts)", Background -> LightYellow], 
                "  22.      except Exception as export_exception:", 
                "  23.          try:", "  24.              try:", "  25.  ", 
                "  26.                  # The user can provide an exception \
class, and it can be broken, in which case we are running another", 
                "  27.                  # try / except to return errors that \
are happening during class serialization"}, Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  "function", "<function handle_message at 0x103b78fe0>"}, {
                  "args", "(<zmq.Socket(zmq.PAIR) at 0x103b54c20>,)"}, {
                  "opts", 
                   "{'consumer': <ExternalEvaluateConsumer globals=4 \
objects=11>}"}, {"export_opts", 
                   "{'object_processor': <function \
start_zmq_loop.<locals>.<lambda> at 0x102e009a0>, 'target_format': 'wxf'}"}, {
                  "exception_class", "None"}, {
                  "export_exception", 
                   "Hypergraph.size() missing 1 required positional argument: \
'edge'"}}, Background -> {Null, {LightGray}}, Alignment -> Left, Frame -> 
                 LightGray]}]}]}, False], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                SystemOpen[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless"], " in ", 
              "handle_message"}], 
            Column[{
              
              Column[{" 350.          self.socket.send(zmq.Frame(bytes))", 
                " 351.  ", " 352.      def send_side_effect(self, expr):", 
                " 353.          self.write(export(self.keep_listening(expr), \
target_format=\"wxf\"))", " 354.  ", " 355.  ", 
                " 356.  def handle_message(socket, consumer):", 
                Item[
                " 357.      result = \
binary_deserialize(socket.recv(copy=False).buffer, consumer=consumer)", 
                 Background -> LightYellow], " 358.  ", 
                " 359.      sys.stdout.flush()", " 360.      return result", 
                " 361.  ", " 362.  ", 
                " 363.  def start_zmq_instance(port=None, \
write_to_stdout=True, **opts):"}, Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  "socket", "<zmq.Socket(zmq.PAIR) at 0x103b54c20>"}, {
                  "consumer", 
                   "<ExternalEvaluateConsumer globals=4 objects=11>"}}, 
                 Background -> {Null, {LightGray}}, Alignment -> Left, Frame -> 
                 LightGray]}]}]}, False], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
__init__.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
__init__.py"], 
                SystemOpen[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
__init__.py"]], Appearance -> "Frameless"], " in ", "binary_deserialize"}], 
            Column[{
              
              Column[{"  33.  ", "  34.      \"\"\"", 
                "  35.      parser = WXFParser(wxf_input)", 
                "  36.      if consumer is None:", 
                "  37.          consumer = WXFConsumerNumpy()", "  38.  ", 
                "  39.      try:", 
                Item[
                "  40.          o = consumer.next_expression(parser.tokens(), \
**kwargs)", Background -> LightYellow], "  41.      except StopIteration:", 
                "  42.          raise WolframParserException(", 
                "  43.              \"Input data does not represent a valid \
expression in WXF format. Expecting more input data.\"", "  44.          )", 
                "  45.      if not parser.context.is_valid_final_state():", 
                "  46.          raise WolframParserException("}, 
               Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  "wxf_input", 
                   "8:f\.02s0ExternalEvaluate`Private`\
ExternalEvaluateCommandS\n\
ReturnTypef\.02s\.04Listf\.02s0ExternalEvaluate`Private`\
ExternalEvaluateCommandS\.04Callf\.02s\.04Listf\.02s0ExternalEvaluate`Private`\
ExternalEvaluateCommandS\.05Fetchf\.01\.01\.01\.01\.01\.01\.01\.01s\.04ListL\
\.07bu\.01\.01\.01\.01\.01\.01\.01\.01\.00\.00\.00f\.02s0ExternalEvaluate`\
Private`ExternalEvaluateCommandS\.05Fetchf\.01\.01\.01\.01\.01\.01\.01\.01s\
\.04ListLau\.01\.01\.01\.01\.01\.01\.01\.01\.00\.00\.00S\nExpression"}, {
                  "consumer", 
                   "<ExternalEvaluateConsumer globals=4 objects=11>"}, {
                  "kwargs", "{}"}, {
                  "parser", 
                   "<wolframclient.deserializers.wxf.wxfparser.WXFParser \
object at 0x1758477d0>"}}, Background -> {Null, {LightGray}}, Alignment -> 
                 Left, Frame -> LightGray]}]}]}, False], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                SystemOpen[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless"], " in ", "next_expression"}], 
            Column[{
              
              Column[{"  69.          constants.WXF_CONSTANTS.RuleDelayed: \
\"consume_rule_delayed\",", "  70.      }", "  71.  ", 
                "  72.      def next_expression(self, tokens, **kwargs):", 
                "  73.          \"\"\"Deserialize the next expression \
starting at the next token yield by `tokens`.\"\"\"", 
                "  74.          token = next(tokens)", 
                "  75.          consumer = \
self._consumer_from_type(token.wxf_type)", 
                Item[
                "  76.          return consumer(token, tokens, **kwargs)", 
                 Background -> LightYellow], "  77.  ", 
                "  78.      def _consumer_from_type(self, wxf_type):", 
                "  79.          try:", 
                "  80.              func = self._mapping[wxf_type]", 
                "  81.          except KeyError:", 
                "  82.              raise WolframParserException("}, 
               Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  "self", 
                   "<ExternalEvaluateConsumer globals=4 objects=11>"}, {
                  "tokens", 
                   "<generator object WXFParser.tokens at 0x175661180>"}, {
                  "kwargs", "{}"}, {
                  "token", "WXFToken<b'f', data=None, len=2>"}, {
                  "consumer", 
                   "<bound method ExternalEvaluateConsumer.consume_function \
of <ExternalEvaluateConsumer globals=4 objects=11>>"}}, 
                 Background -> {Null, {LightGray}}, Alignment -> Left, Frame -> 
                 LightGray]}]}]}, False], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                SystemOpen[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless"], " in ", 
              "consume_function"}], 
            Column[{
              
              Column[{" 319.  ", 
                " 320.      def __init__(self, routes_registry={}, \
objects_registry={}, globals_registry={}):", 
                " 321.          self.objects_registry = \
registry(objects_registry)", 
                " 322.          self.globals_registry = \
registry(globals_registry)", 
                " 323.          self.routes_registry = \
registry(self.builtin_routes, **routes_registry)", " 324.  ", 
                " 325.      def consume_function(self, *args, **kwargs):", 
                Item[
                " 326.          expr = super().consume_function(*args, \
**kwargs)", Background -> LightYellow], " 327.  ", 
                " 328.          if check_wl_symbol(expr, self.hook_symbol):", 
                " 329.              assert len(expr.args) == 2", 
                " 330.              return \
self.dispatch_wl_object(*expr.args)", " 331.  ", 
                " 332.          return expr"}, Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  "self", 
                   "<ExternalEvaluateConsumer globals=4 objects=11>"}, {
                  "args", 
                   "(<wolframclient.deserializers.wxf.wxfparser.WXFToken \
object at 0x1756688b0>, <generator object WXFParser.tokens at \
0x175661180>)"}, {"kwargs", "{}"}, {
                  "__class__", 
                   "<class \
'wolframclient.utils.externalevaluate.ExternalEvaluateConsumer'>"}}, 
                 Background -> {Null, {LightGray}}, Alignment -> Left, Frame -> 
                 LightGray]}]}]}, False], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                SystemOpen[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless"], " in ", "consume_function"}], 
            Column[{
              
              Column[{"  94.          Return a :class:`list` if the head is \
symbol `List`, otherwise returns the result of \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`", "  95.          applied to the head and arguments.", "  96.  ", 
                "  97.          Usually custom parsing rules target \
Functions, but not List. To do so, it is recommended to override", 
                "  98.          \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`.", "  99.          \"\"\"", 
                " 100.          head = self.next_expression(tokens, \
**kwargs)", 
                Item[
                " 101.          args = tuple(", Background -> LightYellow], 
                " 102.              self.next_expression(tokens, **kwargs) \
for i in range(current_token.length)", " 103.          )", 
                " 104.          if head == self._LIST:", 
                " 105.              return args", " 106.          else:", 
                " 107.              return self.build_function(head, args, \
**kwargs)"}, Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  "self", 
                   "<ExternalEvaluateConsumer globals=4 objects=11>"}, {
                  "current_token", "WXFToken<b'f', data=None, len=2>"}, {
                  "tokens", 
                   "<generator object WXFParser.tokens at 0x175661180>"}, {
                  "kwargs", "{}"}, {
                  "head", 
                   "ExternalEvaluate`Private`ExternalEvaluateCommand"}}, 
                 Background -> {Null, {LightGray}}, Alignment -> Left, Frame -> 
                 LightGray]}]}]}, False], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                SystemOpen[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless"], " in ", "<genexpr>"}], 
            Column[{
              
              Column[{"  95.          applied to the head and arguments.", 
                "  96.  ", 
                "  97.          Usually custom parsing rules target \
Functions, but not List. To do so, it is recommended to override", 
                "  98.          \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`.", "  99.          \"\"\"", 
                " 100.          head = self.next_expression(tokens, \
**kwargs)", " 101.          args = tuple(", 
                Item[
                " 102.              self.next_expression(tokens, **kwargs) \
for i in range(current_token.length)", Background -> LightYellow], 
                " 103.          )", " 104.          if head == self._LIST:", 
                " 105.              return args", " 106.          else:", 
                " 107.              return self.build_function(head, args, \
**kwargs)", " 108.  "}, Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  ".0", "<range_iterator object at 0x175686b20>"}, {
                  "i", "1"}, {"kwargs", "{}"}, {
                  "self", 
                   "<ExternalEvaluateConsumer globals=4 objects=11>"}, {
                  "tokens", 
                   "<generator object WXFParser.tokens at 0x175661180>"}}, 
                 Background -> {Null, {LightGray}}, Alignment -> Left, Frame -> 
                 LightGray]}]}]}, False], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                SystemOpen[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless"], " in ", "next_expression"}], 
            Column[{
              
              Column[{"  69.          constants.WXF_CONSTANTS.RuleDelayed: \
\"consume_rule_delayed\",", "  70.      }", "  71.  ", 
                "  72.      def next_expression(self, tokens, **kwargs):", 
                "  73.          \"\"\"Deserialize the next expression \
starting at the next token yield by `tokens`.\"\"\"", 
                "  74.          token = next(tokens)", 
                "  75.          consumer = \
self._consumer_from_type(token.wxf_type)", 
                Item[
                "  76.          return consumer(token, tokens, **kwargs)", 
                 Background -> LightYellow], "  77.  ", 
                "  78.      def _consumer_from_type(self, wxf_type):", 
                "  79.          try:", 
                "  80.              func = self._mapping[wxf_type]", 
                "  81.          except KeyError:", 
                "  82.              raise WolframParserException("}, 
               Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  "self", 
                   "<ExternalEvaluateConsumer globals=4 objects=11>"}, {
                  "tokens", 
                   "<generator object WXFParser.tokens at 0x175661180>"}, {
                  "kwargs", "{}"}, {
                  "token", "WXFToken<b'f', data=None, len=2>"}, {
                  "consumer", 
                   "<bound method ExternalEvaluateConsumer.consume_function \
of <ExternalEvaluateConsumer globals=4 objects=11>>"}}, 
                 Background -> {Null, {LightGray}}, Alignment -> Left, Frame -> 
                 LightGray]}]}]}, False], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                SystemOpen[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless"], " in ", 
              "consume_function"}], 
            Column[{
              
              Column[{" 319.  ", 
                " 320.      def __init__(self, routes_registry={}, \
objects_registry={}, globals_registry={}):", 
                
                " 321.          self.objects_registry = \
registry(objects_registry)", 
                " 322.          self.globals_registry = \
registry(globals_registry)", 
                " 323.          self.routes_registry = \
registry(self.builtin_routes, **routes_registry)", " 324.  ", 
                " 325.      def consume_function(self, *args, **kwargs):", 
                Item[
                " 326.          expr = super().consume_function(*args, \
**kwargs)", Background -> LightYellow], " 327.  ", 
                " 328.          if check_wl_symbol(expr, self.hook_symbol):", 
                " 329.              assert len(expr.args) == 2", 
                " 330.              return \
self.dispatch_wl_object(*expr.args)", " 331.  ", 
                " 332.          return expr"}, Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  "self", 
                   "<ExternalEvaluateConsumer globals=4 objects=11>"}, {
                  "args", 
                   "(<wolframclient.deserializers.wxf.wxfparser.WXFToken \
object at 0x175668e50>, <generator object WXFParser.tokens at \
0x175661180>)"}, {"kwargs", "{}"}, {
                  "__class__", 
                   "<class \
'wolframclient.utils.externalevaluate.ExternalEvaluateConsumer'>"}}, 
                 Background -> {Null, {LightGray}}, Alignment -> Left, Frame -> 
                 LightGray]}]}]}, False], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                SystemOpen[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless"], " in ", "consume_function"}], 
            Column[{
              
              Column[{"  94.          Return a :class:`list` if the head is \
symbol `List`, otherwise returns the result of \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`", "  95.          applied to the head and arguments.", "  96.  ", 
                "  97.          Usually custom parsing rules target \
Functions, but not List. To do so, it is recommended to override", 
                "  98.          \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`.", "  99.          \"\"\"", 
                " 100.          head = self.next_expression(tokens, \
**kwargs)", 
                Item[
                " 101.          args = tuple(", Background -> LightYellow], 
                " 102.              self.next_expression(tokens, **kwargs) \
for i in range(current_token.length)", " 103.          )", 
                " 104.          if head == self._LIST:", 
                " 105.              return args", " 106.          else:", 
                " 107.              return self.build_function(head, args, \
**kwargs)"}, Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  "self", 
                   "<ExternalEvaluateConsumer globals=4 objects=11>"}, {
                  "current_token", "WXFToken<b'f', data=None, len=2>"}, {
                  "tokens", 
                   "<generator object WXFParser.tokens at 0x175661180>"}, {
                  "kwargs", "{}"}, {"head", "List"}}, 
                 Background -> {Null, {LightGray}}, Alignment -> Left, Frame -> 
                 LightGray]}]}]}, False], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                SystemOpen[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless"], " in ", "<genexpr>"}], 
            Column[{
              
              Column[{"  95.          applied to the head and arguments.", 
                "  96.  ", 
                "  97.          Usually custom parsing rules target \
Functions, but not List. To do so, it is recommended to override", 
                "  98.          \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`.", "  99.          \"\"\"", 
                " 100.          head = self.next_expression(tokens, \
**kwargs)", " 101.          args = tuple(", 
                Item[
                " 102.              self.next_expression(tokens, **kwargs) \
for i in range(current_token.length)", Background -> LightYellow], 
                " 103.          )", " 104.          if head == self._LIST:", 
                " 105.              return args", " 106.          else:", 
                " 107.              return self.build_function(head, args, \
**kwargs)", " 108.  "}, Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  ".0", "<range_iterator object at 0x175685200>"}, {
                  "i", "0"}, {"kwargs", "{}"}, {
                  "self", 
                   "<ExternalEvaluateConsumer globals=4 objects=11>"}, {
                  "tokens", 
                   "<generator object WXFParser.tokens at 0x175661180>"}}, 
                 Background -> {Null, {LightGray}}, Alignment -> Left, Frame -> 
                 LightGray]}]}]}, False], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                SystemOpen[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless"], " in ", "next_expression"}], 
            Column[{
              
              Column[{"  69.          constants.WXF_CONSTANTS.RuleDelayed: \
\"consume_rule_delayed\",", "  70.      }", "  71.  ", 
                "  72.      def next_expression(self, tokens, **kwargs):", 
                "  73.          \"\"\"Deserialize the next expression \
starting at the next token yield by `tokens`.\"\"\"", 
                "  74.          token = next(tokens)", 
                "  75.          consumer = \
self._consumer_from_type(token.wxf_type)", 
                Item[
                "  76.          return consumer(token, tokens, **kwargs)", 
                 Background -> LightYellow], "  77.  ", 
                "  78.      def _consumer_from_type(self, wxf_type):", 
                "  79.          try:", 
                "  80.              func = self._mapping[wxf_type]", 
                "  81.          except KeyError:", 
                "  82.              raise WolframParserException("}, 
               Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  "self", 
                   "<ExternalEvaluateConsumer globals=4 objects=11>"}, {
                  "tokens", 
                   "<generator object WXFParser.tokens at 0x175661180>"}, {
                  "kwargs", "{}"}, {
                  "token", "WXFToken<b'f', data=None, len=2>"}, {
                  "consumer", 
                   "<bound method ExternalEvaluateConsumer.consume_function \
of <ExternalEvaluateConsumer globals=4 objects=11>>"}}, 
                 Background -> {Null, {LightGray}}, Alignment -> Left, Frame -> 
                 LightGray]}]}]}, False], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                SystemOpen[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless"], " in ", 
              "consume_function"}], 
            Column[{
              
              Column[{" 323.          self.routes_registry = \
registry(self.builtin_routes, **routes_registry)", " 324.  ", 
                " 325.      def consume_function(self, *args, **kwargs):", 
                " 326.          expr = super().consume_function(*args, \
**kwargs)", " 327.  ", 
                " 328.          if check_wl_symbol(expr, self.hook_symbol):", 
                " 329.              assert len(expr.args) == 2", 
                Item[
                " 330.              return \
self.dispatch_wl_object(*expr.args)", Background -> LightYellow], " 331.  ", 
                " 332.          return expr", " 333.  ", 
                " 334.      def dispatch_wl_object(self, route, args):", 
                " 335.          return self.routes_registry[route](self, \
*args)", " 336.  "}, Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  "self", 
                   "<ExternalEvaluateConsumer globals=4 objects=11>"}, {
                  "args", 
                   "(<wolframclient.deserializers.wxf.wxfparser.WXFToken \
object at 0x175669990>, <generator object WXFParser.tokens at \
0x175661180>)"}, {"kwargs", "{}"}, {
                  "expr", 
                   "ExternalEvaluate`Private`ExternalEvaluateCommand['Call', \
(<function size at 0x1756207c0>, None, \
hypernetx.classes.Hypergraph.Hypergraph)]"}, {
                  "__class__", 
                   "<class \
'wolframclient.utils.externalevaluate.ExternalEvaluateConsumer'>"}}, 
                 Background -> {Null, {LightGray}}, Alignment -> Left, Frame -> 
                 LightGray]}]}]}, False], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                SystemOpen[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless"], " in ", 
              "dispatch_wl_object"}], 
            Column[{
              
              Column[{" 328.          if check_wl_symbol(expr, \
self.hook_symbol):", " 329.              assert len(expr.args) == 2", 
                " 330.              return \
self.dispatch_wl_object(*expr.args)", " 331.  ", " 332.          return expr",
                 " 333.  ", 
                " 334.      def dispatch_wl_object(self, route, args):", 
                Item[
                " 335.          return self.routes_registry[route](self, \
*args)", Background -> LightYellow], " 336.  ", 
                " 337.      def __repr__(self):", 
                " 338.          return \"<{} globals={} \
objects={}>\".format(", 
                " 339.              self.__class__.__name__, \
len(self.globals_registry), len(self.objects_registry)", " 340.          )", 
                " 341.  "}, Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  "self", 
                   "<ExternalEvaluateConsumer globals=4 objects=11>"}, {
                  "route", "Call"}, {
                  "args", 
                   "(<function size at 0x1756207c0>, None, \
hypernetx.classes.Hypergraph.Hypergraph)"}}, 
                 Background -> {Null, {LightGray}}, Alignment -> Left, Frame -> 
                 LightGray]}]}]}, False], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                SystemOpen[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless"], " in ", "Call"}], 
            Column[{
              
              Column[{" 245.  ", " 246.  ", 
                " 247.  @routes.register_function", 
                " 248.  def Call(consumer, result, *args):", " 249.  ", 
                " 250.      pos, kwargs = unpack_optionals(args)", " 251.  ", 
                
                Item[
                " 252.      return result(*pos, **kwargs)", Background -> 
                 LightYellow], " 253.  ", " 254.  ", 
                " 255.  @routes.register_function", 
                " 256.  def MethodCall(consumer, result, names, *args):", 
                " 257.      return Call(consumer, GetAttribute(consumer, \
result, names), *args)", " 258.  "}, Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  "consumer", 
                   "<ExternalEvaluateConsumer globals=4 objects=11>"}, {
                  "result", "<function size at 0x1756207c0>"}, {
                  "args", 
                   "(None, hypernetx.classes.Hypergraph.Hypergraph,)"}, {
                  "pos", "[None, hypernetx.classes.Hypergraph.Hypergraph]"}, {
                  "kwargs", "{}"}}, Background -> {Null, {LightGray}}, 
                 Alignment -> Left, Frame -> LightGray]}]}]}, True], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Users/arnoudb/hypernetx/Python/Hypergraph/Hypergraph.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Users/arnoudb/hypernetx/Python/Hypergraph/Hypergraph.py"], 
                SystemOpen[
                "/Users/arnoudb/hypernetx/Python/Hypergraph/Hypergraph.py"]], 
               Appearance -> "Frameless"], " in ", "size"}], 
            Column[{
              
              Column[{" 204.  def shape(hg):", " 205.      return hg.shape()",
                 " 206.  ", " 207.  def singletons(hg):", 
                " 208.      return hg.singletons()", " 209.  ", 
                " 210.  def size(hg):", 
                Item[
                " 211.      return hg.size()", Background -> LightYellow], 
                " 212.  ", " 213.  def toplexes(hg):", 
                " 214.      return hg.toplexes()", " 215.  ", 
                " 216.  def weight_prop_col(hg):", 
                " 217.      return hg.weight_prop_col()"}, Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  "hg", "None, <class \
'hypernetx.classes.Hypergraph.Hypergraph'>"}}, 
                 Background -> {Null, {LightGray}}, Alignment -> Left, Frame -> 
                 LightGray]}]}]}, True]}], FontFamily -> "Courier"]}, True]|>],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.922802324130557*^9},
 CellLabel->"Out[14]=",ExpressionUUID->"56af103b-4e82-4626-a1fd-308ed8d06065"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Names", "[", "\"\<hypernetx`*\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.922801305478273*^9, 3.922801310592733*^9}},
 CellLabel->"In[25]:=",ExpressionUUID->"f57bb396-5edf-4d72-933f-bdfbc45607a8"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"CreateHypergraph\"\>", 
   ",", "\<\"HypergraphAdjacencyMatrix\"\>", 
   ",", "\<\"HypergraphAuxiliaryMatrix\"\>", 
   ",", "\<\"HypergraphBipartite\"\>", ",", "\<\"HypergraphCollapseEdges\"\>",
    ",", "\<\"HypergraphCollapseNodes\"\>", 
   ",", "\<\"HypergraphCollapseNodesAndEdges\"\>", 
   ",", "\<\"HypergraphComponents\"\>", 
   ",", "\<\"HypergraphComponentSubGraphs\"\>", 
   ",", "\<\"HypergraphConnectedComponents\"\>", 
   ",", "\<\"HypergraphDataset\"\>", ",", "\<\"HypergraphDegree\"\>", 
   ",", "\<\"HypergraphDiameter\"\>", ",", "\<\"HypergraphDim\"\>", 
   ",", "\<\"HypergraphDistance\"\>", ",", "\<\"HypergraphDual\"\>", 
   ",", "\<\"HypergraphEdgeAdjacencyMatrix\"\>", 
   ",", "\<\"HypergraphEdgeCol\"\>", ",", "\<\"HypergraphEdgeDiameter\"\>", 
   ",", "\<\"HypergraphEdgeDistance\"\>", 
   ",", "\<\"HypergraphEdgeNeighbors\"\>", 
   ",", "\<\"HypergraphEdgeProperties\"\>", 
   ",", "\<\"HypergraphEdgeProps\"\>", ",", "\<\"HypergraphEdges\"\>", 
   ",", "\<\"HypergraphEdgeSizeDist\"\>", 
   ",", "\<\"HypergraphFromBipartite\"\>", 
   ",", "\<\"HypergraphFromIncidenceDataFrame\"\>", 
   ",", "\<\"HypergraphFromIncidenceMatrix\"\>", 
   ",", "\<\"HypergraphFromNumpyArray\"\>", 
   ",", "\<\"HypergraphGetCellProperties\"\>", 
   ",", "\<\"HypergraphGetLineGraph\"\>", 
   ",", "\<\"HypergraphGetProperties\"\>", 
   ",", "\<\"HypergraphIncidenceDataFrame\"\>", 
   ",", "\<\"HypergraphIncidenceDict\"\>", 
   ",", "\<\"HypergraphIncidenceMatrix\"\>", 
   ",", "\<\"HypergraphIsConnected\"\>", 
   ",", "\<\"HypergraphMiscCellProperties\"\>", 
   ",", "\<\"HypergraphMiscCellPropertiesCol\"\>", 
   ",", "\<\"HypergraphMiscPropertiesCol\"\>", ",", "\<\"HypergraphName\"\>", 
   ",", "\<\"HypergraphNeighbors\"\>", ",", "\<\"HypergraphNodeCol\"\>", 
   ",", "\<\"HypergraphNodeDiameters\"\>", 
   ",", "\<\"HypergraphNodeProperties\"\>", 
   ",", "\<\"HypergraphNodeProps\"\>", ",", "\<\"HypergraphNodes\"\>", 
   ",", "\<\"HypergraphNodeWeightPropCol\"\>", 
   ",", "\<\"HypergraphNumberOfEdges\"\>", 
   ",", "\<\"HypergraphNumberOfNodes\"\>", ",", "\<\"HypergraphOrder\"\>", 
   ",", "\<\"HypergraphProperties\"\>", ",", "\<\"HypergraphProps2Dict\"\>", 
   ",", "\<\"HypergraphRemove\"\>", ",", "\<\"HypergraphRemoveEdges\"\>", 
   ",", "\<\"HypergraphRemoveNodes\"\>", 
   ",", "\<\"HypergraphRemoveSingletons\"\>", 
   ",", "\<\"HypergraphRestrictToEdges\"\>", 
   ",", "\<\"HypergraphRestrictToNodes\"\>", 
   ",", "\<\"HypergraphSComponents\"\>", 
   ",", "\<\"HypergraphSComponentSubgraphs\"\>", 
   ",", "\<\"HypergraphSConnectedComponents\"\>", 
   ",", "\<\"HypergraphSelf\"\>", ",", "\<\"HypergraphSetState\"\>", 
   ",", "\<\"HypergraphSetSystem\"\>", ",", "\<\"HypergraphShape\"\>", 
   ",", "\<\"HypergraphSingletons\"\>", ",", "\<\"HypergraphSize\"\>", 
   ",", "\<\"HypergraphSubGraphs\"\>", ",", "\<\"HypergraphToplexes\"\>", 
   ",", "\<\"HypergraphWeightPropCol\"\>"}], "}"}]], "Output",
 CellChangeTimes->{3.922801310882585*^9},
 CellLabel->"Out[25]=",ExpressionUUID->"808d71e9-7822-4888-b5b5-e4ba3e554c40"]
}, Open  ]]
},
WindowSize->{1440, 847},
WindowMargins->{{0, Automatic}, {Automatic, 0}},
FrontEndVersion->"14.1 for Mac OS X ARM (64-bit) (April 23, 2024)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"9f661808-dbfe-419d-858e-dca7224ec814"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{
 "Info-53b4489c-34b6-4385-86cc-4d2858b31383"->{
  Cell[38241, 895, 11336, 282, 78, "Print",ExpressionUUID->"0826cb2f-f598-4470-b45e-c0c370d30f81",
   CellTags->"Info-53b4489c-34b6-4385-86cc-4d2858b31383"]}
 }
*)
(*CellTagsIndex
CellTagsIndex->{
 {"Info-53b4489c-34b6-4385-86cc-4d2858b31383", 2339082, 43553}
 }
*)
(*NotebookFileOutline
Notebook[{
Cell[554, 20, 361, 7, 45, "Input",ExpressionUUID->"259332d2-4b14-4c3e-a9db-b355c9453396",
 InitializationCell->True],
Cell[918, 29, 346, 6, 45, "Input",ExpressionUUID->"3dd7fc1d-8355-4c10-95ee-3695ce06211f",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[1289, 39, 257, 5, 29, "Input",ExpressionUUID->"0a607e33-422a-4ee2-9a4a-66e96fda3f5c"],
Cell[1549, 46, 172, 2, 33, "Output",ExpressionUUID->"bd1d3545-c73e-45c9-a1ca-3e31637982fb"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1758, 53, 250, 4, 29, "Input",ExpressionUUID->"61978bf5-4672-4f2b-9700-62c7bb0413eb"],
Cell[2011, 59, 36227, 834, 359, "Output",ExpressionUUID->"ad451e9e-dc05-4990-8552-72397da34862"],
Cell[38241, 895, 11336, 282, 78, "Print",ExpressionUUID->"0826cb2f-f598-4470-b45e-c0c370d30f81",
 CellTags->"Info-53b4489c-34b6-4385-86cc-4d2858b31383"]
}, Open  ]],
Cell[CellGroupData[{
Cell[49614, 1182, 207, 3, 29, "Input",ExpressionUUID->"1232c132-5495-459e-89ff-f0ce4429a081"],
Cell[49824, 1187, 46868, 681, 73, "Message",ExpressionUUID->"88115a15-4f0e-481c-bcff-3870c02f1395"],
Cell[96695, 1870, 19314, 349, 58, "Output",ExpressionUUID->"d9cd3308-150d-47a1-8873-3e85f85ffe49"]
}, Open  ]],
Cell[CellGroupData[{
Cell[116046, 2224, 217, 3, 29, "Input",ExpressionUUID->"f2d79d29-dcdc-4de1-b84a-bd4a63a941f1"],
Cell[116266, 2229, 149, 2, 33, "Output",ExpressionUUID->"775a7b37-61f8-472c-aa53-256bdebd3468"]
}, Open  ]],
Cell[CellGroupData[{
Cell[116452, 2236, 648, 17, 45, "Input",ExpressionUUID->"0aa97b9d-d1a6-4820-b6f5-391b8e502cba",
 InitializationCell->True],
Cell[117103, 2255, 19680, 355, 138, "Output",ExpressionUUID->"597fe4eb-38fd-43d8-9f3f-55409aa832d6"]
}, Open  ]],
Cell[136798, 2613, 221, 3, 29, "Input",ExpressionUUID->"1c7a09f2-ed11-4ac3-a883-73e7f6bfa461"],
Cell[137022, 2618, 196, 4, 29, "Input",ExpressionUUID->"7c7a9e64-b257-41b7-84b4-eeb50cf8e5e0"],
Cell[137221, 2624, 249, 6, 42, "Input",ExpressionUUID->"d949d34d-a76a-461f-a9c2-634b79f580db"],
Cell[CellGroupData[{
Cell[137495, 2634, 521, 15, 29, "Input",ExpressionUUID->"f60edcf3-aa0f-4260-9176-3d165642e0af"],
Cell[138019, 2651, 7716, 156, 376, "Output",ExpressionUUID->"759e5ce2-21cd-463e-ae2c-3d4bd349001e"]
}, Open  ]],
Cell[CellGroupData[{
Cell[145772, 2812, 374, 5, 29, "Input",ExpressionUUID->"e1163130-c9c3-4dff-a04c-334dcb3a4ebf"],
Cell[146149, 2819, 4751, 100, 58, "Output",ExpressionUUID->"d9b0f15a-643e-4e06-a2cc-07d3951c2247"]
}, Open  ]],
Cell[CellGroupData[{
Cell[150937, 2924, 406, 7, 29, "Input",ExpressionUUID->"c5d65ca1-3231-4f07-8de5-633da3cc0dd7"],
Cell[151346, 2933, 490, 12, 33, "Output",ExpressionUUID->"dec508fa-41a1-4646-a965-915ab606014d"]
}, Open  ]],
Cell[CellGroupData[{
Cell[151873, 2950, 403, 7, 29, "Input",ExpressionUUID->"c31bc834-4eff-42ff-9708-663ec24afd25"],
Cell[152279, 2959, 471, 11, 33, "Output",ExpressionUUID->"ae047ddb-8190-4df7-bf3d-43c2227e6f0b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[152787, 2975, 365, 5, 29, "Input",ExpressionUUID->"f7a07880-678d-4dc2-bda8-a95a82053c48"],
Cell[153155, 2982, 19096, 348, 58, "Output",ExpressionUUID->"bae7c094-a733-4529-8e02-459e4f887af0"]
}, Open  ]],
Cell[CellGroupData[{
Cell[172288, 3335, 555, 14, 29, "Input",ExpressionUUID->"9770261a-27b5-4c10-8e3f-2eb01657073a"],
Cell[172846, 3351, 9283, 194, 321, "Output",ExpressionUUID->"a9fb38ce-8a1c-4106-ba21-8bf28136cf6a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[182166, 3550, 567, 14, 29, "Input",ExpressionUUID->"1302eafc-1d00-4c3d-aca7-12d4cbda0e82"],
Cell[182736, 3566, 7517, 157, 213, "Output",ExpressionUUID->"56263802-e530-4f7a-9d18-209ba5ddd434"]
}, Open  ]],
Cell[CellGroupData[{
Cell[190290, 3728, 279, 4, 29, "Input",ExpressionUUID->"8f665633-8c02-4078-acf0-18a236f1985a"],
Cell[190572, 3734, 19099, 349, 58, "Output",ExpressionUUID->"0082faac-0f96-4157-a60f-4649da84de1a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[209708, 4088, 278, 4, 29, "Input",ExpressionUUID->"d632371c-bea8-4a98-b640-1eee36774dc6"],
Cell[209989, 4094, 19368, 350, 58, "Output",ExpressionUUID->"d65b0afa-3a4a-4032-8b2b-c4b216730bc8"]
}, Open  ]],
Cell[CellGroupData[{
Cell[229394, 4449, 268, 4, 29, "Input",ExpressionUUID->"334b2d25-f5f8-4c57-ae14-d1617d2f17bd"],
Cell[229665, 4455, 295, 6, 33, "Output",ExpressionUUID->"f0ded48f-614a-4de8-8f1d-12082b74caae"]
}, Open  ]],
Cell[CellGroupData[{
Cell[229997, 4466, 230, 3, 29, "Input",ExpressionUUID->"617bd72a-0dee-48b2-94da-7e536b230cd0"],
Cell[230230, 4471, 277, 6, 33, "Output",ExpressionUUID->"37030c1e-aff0-4637-8f9e-ca4fe2db7a40"]
}, Open  ]],
Cell[CellGroupData[{
Cell[230544, 4482, 215, 3, 29, "Input",ExpressionUUID->"d24ef874-1d9e-4a6e-a8f7-fc3442ae16ed"],
Cell[230762, 4487, 53912, 1039, 257, "Output",ExpressionUUID->"63851126-43d4-46e0-9045-195d0ba1df16"]
}, Open  ]],
Cell[CellGroupData[{
Cell[284711, 5531, 634, 17, 29, "Input",ExpressionUUID->"4ef14c39-ced9-4d69-98ff-7f858205ac37"],
Cell[285348, 5550, 7702, 158, 235, "Output",ExpressionUUID->"1fb287d7-6b96-410f-8886-5a2e10472ff5"]
}, Open  ]],
Cell[CellGroupData[{
Cell[293087, 5713, 217, 3, 29, "Input",ExpressionUUID->"c897d70c-a0f1-44d4-bea5-ceecb7ce9ec4"],
Cell[293307, 5718, 285818, 5283, 60, "Output",ExpressionUUID->"6ce31973-cb0f-455e-a646-14e11d6ec597"]
}, Open  ]],
Cell[CellGroupData[{
Cell[579162, 11006, 216, 3, 29, "Input",ExpressionUUID->"61da78d8-104b-4011-babe-4337df3d24d5"],
Cell[579381, 11011, 198, 3, 33, "Output",ExpressionUUID->"d1225344-a400-45f9-b5db-a7981369a18a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[579616, 11019, 212, 3, 29, "Input",ExpressionUUID->"b52d46a5-71b9-4ae0-8e7b-b9b846791ec1"],
Cell[579831, 11024, 285561, 5281, 60, "Output",ExpressionUUID->"f3284da2-0227-47d7-a3b6-a0bb78d5632a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[865429, 16310, 219, 3, 29, "Input",ExpressionUUID->"98ad4638-d6ba-40c4-ac44-fc98787ea972"],
Cell[865651, 16315, 286099, 5284, 60, "Output",ExpressionUUID->"9650b378-7c90-4bce-b3fa-bd01cadc5633"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1151787, 21604, 215, 3, 29, "Input",ExpressionUUID->"60c250a6-d5ad-48ad-8161-1ae6b00393a1"],
Cell[1152005, 21609, 19143, 350, 58, "Output",ExpressionUUID->"d551a87c-79a4-4a31-991c-3344de7b0f16"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1171185, 21964, 310, 6, 29, "Input",ExpressionUUID->"423ae3fe-b675-42bb-82e8-03133a321f9a"],
Cell[1171498, 21972, 429, 11, 33, "Output",ExpressionUUID->"873ee98e-eda4-4dae-8fc1-1ecf3448d407"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1171964, 21988, 217, 3, 29, "Input",ExpressionUUID->"3fc89d98-2bb9-4551-aa89-badc9ba08834"],
Cell[1172184, 21993, 285103, 5256, 60, "Output",ExpressionUUID->"fedd32b7-58a0-46ef-baac-acbaa3dd40b4"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1457324, 27254, 222, 3, 29, "Input",ExpressionUUID->"27bbd6b3-189f-4590-b3ec-bf314e6fa1bd"],
Cell[1457549, 27259, 148, 2, 33, "Output",ExpressionUUID->"e706d98c-b65a-4e9f-a73e-acafd2aa4516"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1457734, 27266, 222, 3, 29, "Input",ExpressionUUID->"47337a17-5e61-4b53-8cd9-78c136646899"],
Cell[1457959, 27271, 286035, 5272, 60, "Output",ExpressionUUID->"37e9441a-f3b5-422f-8b28-feb6d80437ad"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1744031, 32548, 226, 3, 29, "Input",ExpressionUUID->"b134d811-5bce-4b52-8329-31849bb3882d"],
Cell[1744260, 32553, 285906, 5273, 60, "Output",ExpressionUUID->"3c1f0096-ea73-422b-9832-a2c44f8e7346"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2030203, 37831, 216, 3, 29, "Input",ExpressionUUID->"77a1f17a-189d-470c-9cb6-7dd95a44237e"],
Cell[2030422, 37836, 18766, 341, 58, "Output",ExpressionUUID->"4f6dce20-ffa7-4da9-a944-688c816650ed"]
}, Open  ]],
Cell[2049203, 38180, 215, 3, 29, "Input",ExpressionUUID->"d71a5e14-7d04-4190-8e99-87713f839c04"],
Cell[CellGroupData[{
Cell[2049443, 38187, 217, 3, 29, "Input",ExpressionUUID->"4bf62deb-8929-4ba5-bf60-8230d44f0d43"],
Cell[2049663, 38192, 285666, 5280, 60, "Output",ExpressionUUID->"56af103b-4e82-4626-a1fd-308ed8d06065"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2335366, 43477, 221, 3, 29, "Input",ExpressionUUID->"f57bb396-5edf-4d72-933f-bdfbc45607a8"],
Cell[2335590, 43482, 3100, 57, 237, "Output",ExpressionUUID->"808d71e9-7822-4888-b5b5-e4ba3e554c40"]
}, Open  ]]
}
]
*)

