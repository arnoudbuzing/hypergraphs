(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Wolfram 14.1' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       154,          7]
NotebookDataLength[    713353,      13278]
NotebookOptionsPosition[    710059,      13212]
NotebookOutlinePosition[    710450,      13228]
CellTagsIndexPosition[    710407,      13225]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["\<\
The \[OpenCurlyDoubleQuote]shutup\[CloseCurlyDoubleQuote] python package \
provides Quiet-like functionality (the \[OpenCurlyDoubleQuote]hypernetx\
\[CloseCurlyDoubleQuote] package give s a lot of chatty warnings for no good \
reason)\
\>", "Item",
 CellChangeTimes->{{3.924616312252964*^9, 
  3.9246163656906652`*^9}},ExpressionUUID->"b8f07751-38e2-4e13-88cc-\
d8c8383ac2d6"],

Cell[BoxData["Quit"], "Input",
 CellChangeTimes->{{3.924616392567445*^9, 3.92461639295172*^9}},
 CellLabel->"In[48]:=",ExpressionUUID->"31331d01-1d8b-4051-ae28-c3b4c0d6d5c5"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"session", "=", 
  RowBox[{"StartExternalSession", "[", 
   RowBox[{"{", "\[IndentingNewLine]", 
    RowBox[{"\"\<Python\>\"", ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<Evaluator\>\"", "->", 
      RowBox[{"<|", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"\"\<Dependencies\>\"", "->", 
         RowBox[{"{", 
          RowBox[{"\"\<hypernetx\>\"", ",", "\"\<shutup\>\""}], "}"}]}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"\"\<EnvironmentName\>\"", "->", "\"\<hypernetx\>\""}]}], 
       "\[IndentingNewLine]", "|>"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<SessionProlog\>\"", "->", 
      RowBox[{"{", 
       RowBox[{"\"\<import shutup\>\"", ",", "\"\<import hypernetx\>\""}], 
       "}"}]}]}], "\[IndentingNewLine]", "}"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.924612830267692*^9, 3.924612839953438*^9}, {
  3.9246128809421797`*^9, 3.924612946296957*^9}, {3.924613321436182*^9, 
  3.924613382826103*^9}, {3.924616372194642*^9, 3.924616426270276*^9}},
 CellLabel->"In[3]:=",ExpressionUUID->"56c64ba7-d7f5-4299-914c-6a3b2452c64d"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["ExternalSessionObject",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{
              Thickness[0.05], {
               FaceForm[{
                 RGBColor[1., 1., 1.], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 
                 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {
                 1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
                 3}, {0, 1, 0}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}}, {{1, 4, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                 0}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 
                 3}, {1, 3, 3}}}, {{{7.5718000000000005`, 17.7334}, {7.0998, 
                 17.7334}, {6.7168, 17.342399999999998`}, {6.7168, 16.8624}, {
                 6.7168, 16.3854}, {7.0998, 15.997399999999999`}, {
                 7.5718000000000005`, 15.997399999999999`}, {
                 8.043800000000001, 15.997399999999999`}, {8.4268, 16.3854}, {
                 8.4268, 16.8624}, {8.4268, 17.342399999999998`}, {
                 8.043800000000001, 17.7334}, {7.5718000000000005`, 
                 17.7334}}, CompressedData["
1:eJxTTMoPSmViYGBQAWIQvXD12hvxZbwODSxH+w2/izl86QsuUZnOAuezVHCr
aNT9se+5ncGQzyjl8EZ2+QsPve/2X6bfndzeKu/Qst2h6dHxD/ZfvSLbLMSU
4fz1U1I7kmVV4erNVtuFRxdqOCRs3P9mns0fe98WXv/1ItoOR9qWh58yYnP4
+AVowA4dh6z8D60nQwTg/EsTY/45/1KG87O1v02/K6zi8O7kYae1L3UdBLi3
Lqs8Lubw+zRQhEnPwdnuxc01v8QcGtQOtS2fbgDng2w5ctHQgc1E0MzGVsLB
+wS77exSIwfP/bWyFunyDs2BnnMbjhk5+CzjclP9quCwVMdZ5vUjI4cJhuW6
ivFKDqbvLVzdPxk5JIYEqS84qezgLyeW5fvZyGHaJp7CNacRfAOQAamqcD63
m2op0y01h3aQA54YOZx6ar/kvp0G3D4rZa/q5vVaEPMnQe0v1XG4bgIUWG4I
58P8A+M/mCO4dC+jJpy/M5vz54Llag73gLESNVkLEm/7VBwOWgItcNaA86PE
t19kiJOH80OmKfaVFkrC+ZbpLpn5BSIOx3JNGrY7KMH5UZf3PBaZKwfnw9IH
AO506oE=
                 "], {{12.401800000000001`, 4.1044}, {11.9298, 4.1044}, {
                 11.5458, 3.7164}, {11.5458, 3.2394}, {11.5458, 
                 2.7593999999999994`}, {11.9298, 2.369399999999999}, {
                 12.401800000000001`, 2.369399999999999}, {
                 12.872800000000002`, 2.369399999999999}, {13.2568, 
                 2.7593999999999994`}, {13.2568, 3.2394}, {13.2568, 3.7164}, {
                 12.872800000000002`, 4.1044}, {12.401800000000001`, 
                 4.1044}}, CompressedData["
1:eJxTTMoPSmViYGBQAWIQ/Uei+LrQJ2UHhUNty8NPfbBfaXrW2m+iEpyvdVrg
+C4LRYcC3899wSWf7M+tOn81LEfe4cBGvbzFjN/sb635FZPrKuPgUPST/+X2
n/bOdi9urvkl5sARP8NHtIfRAcY/smKJn4MwD5y/aIv5j0MpcnB+rknDdocm
RQepRxHi2y9KOeyeNoG/qkzZIQrIY4iTh/MPWip7VTtrwPkuv96+PmCpDedf
mhjzz3mXroPFtaO5JgxqcP6DOYJL9zJqwvldfU8+yV/ScWBbPMmKMdfA4eMX
r8i2HToOE/mrzFbXGcL5GnU9O7M1jRympHYkx8ZoO9z8AJIwcjBbbRceXajh
0Pzo+Izd34wc3p087LT2pQqcL7R070HxNCWH+TY6V2YB1SeEBKkv6JR3kKlJ
NAoVAKo/APTIb0kHkDMbphs6NLAc7Tf8LgZ3D4wPdu8vZTgfSJbrPlR2WNC5
4eHLqSIOz+yX3N/Xp+OQF1a7bluSiIPPMi431VIdeHjD+CLAYLzHxOQwi0N6
XpymlsMFzgylnIpf9lURK4AxrgGPT3B47lRzWNAU6Dm34ZP94ZRVQKerwtMD
enoBAPI7A7I=
                 "]}]}, {
               FaceForm[{
                 RGBColor[0.20800000000000002`, 0.514, 0.6859999999999999], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}}, {{1, 4, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                 0}, {1, 3, 3}, {1, 3, 3}}}, {{{7.5718000000000005`, 
                 17.6836}, {8.014800000000001, 17.6836}, {8.3778, 17.3156}, {
                 8.3778, 16.862599999999997`}, {8.3778, 16.4116}, {
                 8.014800000000001, 16.046599999999998`}, {
                 7.5718000000000005`, 16.046599999999998`}, {7.1268, 
                 16.046599999999998`}, {6.7658000000000005`, 16.4116}, {
                 6.7658000000000005`, 16.862599999999997`}, {
                 6.7658000000000005`, 17.3156}, {7.1268, 17.6836}, {
                 7.5718000000000005`, 17.6836}}, CompressedData["
1:eJxTTMoPSmViYGBQBWIQnRgSpL7gpLLDYxHZk0//GzmYnbX2uxio5NBvWK6r
COQ7nU+7+vyVgsOa7tsZDO+NHKLEt19kiJN3EPMI+CNx2cgh6fBl7VRJCYd/
zr/evm4wchDg3rqs8riYQ2vU5T2PrxjC+XxzjBdtmW4A59fKWqS7vNR1uDQx
BqhVGYMPVKRpdUkHrh7Gb5l3dtX5UAE4v+gn/8vt69ng/DOHndZm3vttD+YH
aTt8OAkS+Gb/aUNA9qxyDQeec5KBt6Q/2N/XnbDgh6GqgwTQ2/ZL3tt77Ae6
QF0Zrv6Nhat7UaW8wxWXGx++eP223xet4PgxWcqBJ0Mpp6KK2aFlefgpoyNi
DgtXr70RX8YL5wcBbZmzSASDP2llU6DnXDk4/4fhs3WqKkoOb/V3q/N3Szq0
nQw5uGKJCjx8YfyDlspe1c4acL5XdbO+zzItOP+Z/ZL7+/p0HJR2/mn/MlsN
zgfybl9n1ITzYeEP4wNjvXPDQUOHa8+ztL9N13IARW/+QiO4fbD4haQPNYfO
DQ9fTv1k5NADUueoColvBmMH9PQDAFGHDrQ=
                 "]}]}, {
               FaceForm[{
                 RGBColor[0.976, 0.8430000000000001, 0.353], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}}, {{0, 2, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {
                 0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}}}, {{{12.4014, 4.0552}, {12.846400000000001`, 4.0552}, {
                 13.2074, 3.6902}, {13.2074, 3.2392000000000003`}, {13.2074, 
                 2.7862}, {12.846400000000001`, 2.4182}, {12.4014, 2.4182}, {
                 11.958400000000001`, 2.4182}, {11.595400000000001`, 
                 2.7862}, {11.595400000000001`, 3.2392000000000003`}, {
                 11.595400000000001`, 3.6902}, {11.958400000000001`, 
                 4.0552}, {12.4014, 4.0552}}, CompressedData["
1:eJxTTMoPSmViYGBQBGIQ3bszm/PnAl2HgsWMe1gv6TjA+Ec26uUtZtSE819t
X8/8nEfNISJ64/43ctoOlq7uRT/7lR06k2PvuDlrwPkvs7S/TY+Vh/MvpF19
nrVaCs6fH6d5WuC4mMNLkHk9inB+1r3Crr4UOTi/LerynsciPAh5hvxGlqNM
Dr8OpaxKuCLlcO96Y7HblF/2MPtesZgImtl8tde5MuuZbLqSw52tLTUXNr+1
/3363cnDTKoOCo4fk8/EvraHuRem3j4c6KEcLQel5HdRTna/7Ndlghyi4zCL
Q3penCaTA4wPcw+Mn7H5VfHWqSIO6sGsiyf9UsbgG2itFL5wRAyuHsYH+zvH
AM6PATlsjSGcbwwKeGUjhzV2QIfZSzn8sSo41zHJyKGuBxgRlfIOGUo5FVWs
xg62s0Pnr85VcljVFOg5l8HYoX15+CkjFlW4+l23uv6mlms4/OIH2uhs5BAg
J5bl+1kLYj/QPlh8w9wD4wMA37PnHw==
                 "]}]}}, {
             ImageSize -> 
              Dynamic[{
                Automatic, 
                 3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                  Magnification])}], AspectRatio -> Automatic, 
              ImageSize -> {20., 20.}, PlotRange -> {{0., 20.}, {0., 20.}}}], 
            
            GridBox[{{
               RowBox[{
                 TagBox["\"System: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Python\"", "SummaryItem"]}], 
               RowBox[{
                 TagBox["\"Name: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["None", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Evaluator: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  InterpretationBox[
                   PaneBox[
                   "\"/Users/arnoudb/Library/Wolfram/ApplicationData/\
ExternalEvaluate/Python/Venv/hypernetx/bin/python\"", BaselinePosition -> 
                    Baseline], 
                   OutputForm[
                   "/Users/arnoudb/Library/Wolfram/ApplicationData/\
ExternalEvaluate/Python/Venv/hypernetx/bin/python"], Editable -> False], 
                  "SummaryItem"]}], "\[SpanFromLeft]"}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{
              Thickness[0.05], {
               FaceForm[{
                 RGBColor[1., 1., 1.], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 
                 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {
                 1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
                 3}, {0, 1, 0}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}}, {{1, 4, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                 0}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 
                 3}, {1, 3, 3}}}, {{{7.5718000000000005`, 17.7334}, {7.0998, 
                 17.7334}, {6.7168, 17.342399999999998`}, {6.7168, 16.8624}, {
                 6.7168, 16.3854}, {7.0998, 15.997399999999999`}, {
                 7.5718000000000005`, 15.997399999999999`}, {
                 8.043800000000001, 15.997399999999999`}, {8.4268, 16.3854}, {
                 8.4268, 16.8624}, {8.4268, 17.342399999999998`}, {
                 8.043800000000001, 17.7334}, {7.5718000000000005`, 
                 17.7334}}, CompressedData["
1:eJxTTMoPSmViYGBQAWIQvXD12hvxZbwODSxH+w2/izl86QsuUZnOAuezVHCr
aNT9se+5ncGQzyjl8EZ2+QsPve/2X6bfndzeKu/Qst2h6dHxD/ZfvSLbLMSU
4fz1U1I7kmVV4erNVtuFRxdqOCRs3P9mns0fe98WXv/1ItoOR9qWh58yYnP4
+AVowA4dh6z8D60nQwTg/EsTY/45/1KG87O1v02/K6zi8O7kYae1L3UdBLi3
Lqs8Lubw+zRQhEnPwdnuxc01v8QcGtQOtS2fbgDng2w5ctHQgc1E0MzGVsLB
+wS77exSIwfP/bWyFunyDs2BnnMbjhk5+CzjclP9quCwVMdZ5vUjI4cJhuW6
ivFKDqbvLVzdPxk5JIYEqS84qezgLyeW5fvZyGHaJp7CNacRfAOQAamqcD63
m2op0y01h3aQA54YOZx6ar/kvp0G3D4rZa/q5vVaEPMnQe0v1XG4bgIUWG4I
58P8A+M/mCO4dC+jJpy/M5vz54Llag73gLESNVkLEm/7VBwOWgItcNaA86PE
t19kiJOH80OmKfaVFkrC+ZbpLpn5BSIOx3JNGrY7KMH5UZf3PBaZKwfnw9IH
AO506oE=
                 "], {{12.401800000000001`, 4.1044}, {11.9298, 4.1044}, {
                 11.5458, 3.7164}, {11.5458, 3.2394}, {11.5458, 
                 2.7593999999999994`}, {11.9298, 2.369399999999999}, {
                 12.401800000000001`, 2.369399999999999}, {
                 12.872800000000002`, 2.369399999999999}, {13.2568, 
                 2.7593999999999994`}, {13.2568, 3.2394}, {13.2568, 3.7164}, {
                 12.872800000000002`, 4.1044}, {12.401800000000001`, 
                 4.1044}}, CompressedData["
1:eJxTTMoPSmViYGBQAWIQ/Uei+LrQJ2UHhUNty8NPfbBfaXrW2m+iEpyvdVrg
+C4LRYcC3899wSWf7M+tOn81LEfe4cBGvbzFjN/sb635FZPrKuPgUPST/+X2
n/bOdi9urvkl5sARP8NHtIfRAcY/smKJn4MwD5y/aIv5j0MpcnB+rknDdocm
RQepRxHi2y9KOeyeNoG/qkzZIQrIY4iTh/MPWip7VTtrwPkuv96+PmCpDedf
mhjzz3mXroPFtaO5JgxqcP6DOYJL9zJqwvldfU8+yV/ScWBbPMmKMdfA4eMX
r8i2HToOE/mrzFbXGcL5GnU9O7M1jRympHYkx8ZoO9z8AJIwcjBbbRceXajh
0Pzo+Izd34wc3p087LT2pQqcL7R070HxNCWH+TY6V2YB1SeEBKkv6JR3kKlJ
NAoVAKo/APTIb0kHkDMbphs6NLAc7Tf8LgZ3D4wPdu8vZTgfSJbrPlR2WNC5
4eHLqSIOz+yX3N/Xp+OQF1a7bluSiIPPMi431VIdeHjD+CLAYLzHxOQwi0N6
XpymlsMFzgylnIpf9lURK4AxrgGPT3B47lRzWNAU6Dm34ZP94ZRVQKerwtMD
enoBAPI7A7I=
                 "]}]}, {
               FaceForm[{
                 RGBColor[0.20800000000000002`, 0.514, 0.6859999999999999], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}}, {{1, 4, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                 0}, {1, 3, 3}, {1, 3, 3}}}, {{{7.5718000000000005`, 
                 17.6836}, {8.014800000000001, 17.6836}, {8.3778, 17.3156}, {
                 8.3778, 16.862599999999997`}, {8.3778, 16.4116}, {
                 8.014800000000001, 16.046599999999998`}, {
                 7.5718000000000005`, 16.046599999999998`}, {7.1268, 
                 16.046599999999998`}, {6.7658000000000005`, 16.4116}, {
                 6.7658000000000005`, 16.862599999999997`}, {
                 6.7658000000000005`, 17.3156}, {7.1268, 17.6836}, {
                 7.5718000000000005`, 17.6836}}, CompressedData["
1:eJxTTMoPSmViYGBQBWIQnRgSpL7gpLLDYxHZk0//GzmYnbX2uxio5NBvWK6r
COQ7nU+7+vyVgsOa7tsZDO+NHKLEt19kiJN3EPMI+CNx2cgh6fBl7VRJCYd/
zr/evm4wchDg3rqs8riYQ2vU5T2PrxjC+XxzjBdtmW4A59fKWqS7vNR1uDQx
BqhVGYMPVKRpdUkHrh7Gb5l3dtX5UAE4v+gn/8vt69ng/DOHndZm3vttD+YH
aTt8OAkS+Gb/aUNA9qxyDQeec5KBt6Q/2N/XnbDgh6GqgwTQ2/ZL3tt77Ae6
QF0Zrv6Nhat7UaW8wxWXGx++eP223xet4PgxWcqBJ0Mpp6KK2aFlefgpoyNi
DgtXr70RX8YL5wcBbZmzSASDP2llU6DnXDk4/4fhs3WqKkoOb/V3q/N3Szq0
nQw5uGKJCjx8YfyDlspe1c4acL5XdbO+zzItOP+Z/ZL7+/p0HJR2/mn/MlsN
zgfybl9n1ITzYeEP4wNjvXPDQUOHa8+ztL9N13IARW/+QiO4fbD4haQPNYfO
DQ9fTv1k5NADUueoColvBmMH9PQDAFGHDrQ=
                 "]}]}, {
               FaceForm[{
                 RGBColor[0.976, 0.8430000000000001, 0.353], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}}, {{0, 2, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {
                 0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}}}, {{{12.4014, 4.0552}, {12.846400000000001`, 4.0552}, {
                 13.2074, 3.6902}, {13.2074, 3.2392000000000003`}, {13.2074, 
                 2.7862}, {12.846400000000001`, 2.4182}, {12.4014, 2.4182}, {
                 11.958400000000001`, 2.4182}, {11.595400000000001`, 
                 2.7862}, {11.595400000000001`, 3.2392000000000003`}, {
                 11.595400000000001`, 3.6902}, {11.958400000000001`, 
                 4.0552}, {12.4014, 4.0552}}, CompressedData["
1:eJxTTMoPSmViYGBQBGIQ3bszm/PnAl2HgsWMe1gv6TjA+Ec26uUtZtSE819t
X8/8nEfNISJ64/43ctoOlq7uRT/7lR06k2PvuDlrwPkvs7S/TY+Vh/MvpF19
nrVaCs6fH6d5WuC4mMNLkHk9inB+1r3Crr4UOTi/LerynsciPAh5hvxGlqNM
Dr8OpaxKuCLlcO96Y7HblF/2MPtesZgImtl8tde5MuuZbLqSw52tLTUXNr+1
/3363cnDTKoOCo4fk8/EvraHuRem3j4c6KEcLQel5HdRTna/7Ndlghyi4zCL
Q3penCaTA4wPcw+Mn7H5VfHWqSIO6sGsiyf9UsbgG2itFL5wRAyuHsYH+zvH
AM6PATlsjSGcbwwKeGUjhzV2QIfZSzn8sSo41zHJyKGuBxgRlfIOGUo5FVWs
xg62s0Pnr85VcljVFOg5l8HYoX15+CkjFlW4+l23uv6mlms4/OIH2uhs5BAg
J5bl+1kLYj/QPlh8w9wD4wMA37PnHw==
                 "]}]}}, {
             ImageSize -> 
              Dynamic[{
                Automatic, 
                 3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                  Magnification])}], AspectRatio -> Automatic, 
              ImageSize -> {20., 20.}, PlotRange -> {{0., 20.}, {0., 20.}}}], 
            
            GridBox[{{
               RowBox[{
                 TagBox["\"System: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Python\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Name: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["None", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Evaluator: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  InterpretationBox[
                   PaneBox[
                   "\"/Users/arnoudb/Library/Wolfram/ApplicationData/\
ExternalEvaluate/Python/Venv/hypernetx/bin/python\"", BaselinePosition -> 
                    Baseline], 
                   OutputForm[
                   "/Users/arnoudb/Library/Wolfram/ApplicationData/\
ExternalEvaluate/Python/Venv/hypernetx/bin/python"], Editable -> False], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Active: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  DynamicBox[
                   ToBoxes[
                    If[
                    TrueQ[
                    ExternalEvaluate`Private`getSessionOpts[
                    "a426de7f-1f22-40f5-b5ee-069972b9a733", "Exists"]], 
                    ExternalSessionObject[
                    "a426de7f-1f22-40f5-b5ee-069972b9a733"]["Active"], False],
                     StandardForm], 
                   TrackedSymbols :> {ExternalEvaluate`Private`$Links}], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Evaluator: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                 "\"/Users/arnoudb/Library/Wolfram/ApplicationData/\
ExternalEvaluate/Python/Venv/hypernetx/bin/python\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"ID: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                 "\"a426de7f-1f22-40f5-b5ee-069972b9a733\"", 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Epilog: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["Automatic", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Process: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  InterpretationBox[
                   RowBox[{
                    TagBox["ProcessObject", "SummaryHead"], "[", 
                    
                    DynamicModuleBox[{
                    Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
                    TemplateBox[{
                    PaneSelectorBox[{False -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxOpener"]], 
                    ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Program: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"python3.11\"", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"PID: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["26043", "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {
                    ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxCloser"]], 
                    ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Program: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"python3.11\"", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"PID: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["26043", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Parent PID: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["26038", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"User: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"arnoudb\"", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Path: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    "\"/Users/arnoudb/Library/Wolfram/ApplicationData/\
ExternalEvaluate/Python/Main/3.11/bin/python3.11\"", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Memory:\"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    
                    TemplateBox[{"182.566912`", "\"MB\"", "megabytes", 
                    "\"Megabytes\""}, "Quantity", SyntaxForm -> Mod], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Threads: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["17", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Start Time: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    TemplateBox[{
                    RowBox[{"\"Mon 13 May 2024 14:13:47\"", 
                    StyleBox[
                    RowBox[{"\"GMT\"", "\[InvisibleSpace]", 
                    StyleBox[
                    RowBox[{"-", "5"}], NumberMarks -> False, StripOnInput -> 
                    False]}], "TimeZoneLabel"]}], 
                    RowBox[{"DateObject", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    
                    RowBox[{"2024", ",", "5", ",", "13", ",", "14", ",", "13",
                     ",", "47"}], "}"}], ",", "\"Instant\"", ",", 
                    "\"Gregorian\"", ",", 
                    RowBox[{"-", "5.`"}]}], "]"}]}, "DateObject", Editable -> 
                    False], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"System Time: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    
                    TemplateBox[{"0.0426500000000000004`5.", "\"s\"", 
                    "seconds", "\"Seconds\""}, "Quantity", SyntaxForm -> Mod],
                     "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"User Time: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    
                    TemplateBox[{"0.0555459999999999982`5.", "\"s\"", 
                    "seconds", "\"Seconds\""}, "Quantity", SyntaxForm -> Mod],
                     "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Real Time: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    
                    TemplateBox[{"1.`5.", "\"s\"", "seconds", "\"Seconds\""}, 
                    "Quantity", SyntaxForm -> Mod], "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {
                    ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`open$$], ImageSize -> Automatic]}, 
                    "SummaryPanel"], DynamicModuleValues :> {}], "]"}], 
                   
                   ProcessObject[<|
                    "ManagedProcess" -> True, "UID" -> 1, "PID" -> 26043, 
                    "PPID" -> 26038, "Program" -> "python3.11", "Path" -> 
                    "/Users/arnoudb/Library/Wolfram/ApplicationData/\
ExternalEvaluate/Python/Main/3.11/bin/python3.11", "User" -> "arnoudb", 
                    "StartTime" -> 
                    DateObject[{2024, 5, 13, 14, 13, 47}, "Instant", 
                    "Gregorian", -5.]|>], Selectable -> False, Editable -> 
                   False, SelectWithContents -> True], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Prolog: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["Automatic", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"ReturnType: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Expression\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"SessionEpilog: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["Automatic", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"SessionProlog: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  RowBox[{"{", 
                    
                    RowBox[{
                    "\"import shutup\"", ",", "\"import hypernetx\""}], "}"}],
                   "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Socket: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  InterpretationBox[
                   RowBox[{
                    TagBox["SocketObject", "SummaryHead"], "[", 
                    
                    DynamicModuleBox[{
                    Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
                    TemplateBox[{
                    PaneSelectorBox[{False -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxOpener"]], 
                    ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    GraphicsBox[
                    GeometricTransformationBox[{{{
                    FilledCurveBox[{{
                    
                    Line[{{36.558, 8.569}, {40.947, 8.569}, {40.947, 
                    43.684000000000005`}, {36.558, 43.684000000000005`}, {
                    36.558, 8.569}}]}}]}, {
                    FilledCurveBox[{{
                    
                    Line[{{59.053, 8.569}, {63.443, 8.569}, {63.443, 
                    43.684000000000005`}, {59.053, 43.684000000000005`}, {
                    59.053, 8.569}}]}}]}, {{
                    FilledCurveBox[{{
                    
                    Line[{{55.487, 8.569}, {56.95, 8.569}, {56.95, 
                    21.188000000000002`}, {55.487, 21.188000000000002`}, {
                    55.487, 8.569}}]}}]}, {
                    FilledCurveBox[{{
                    
                    Line[{{52.562, 8.569}, {54.025, 8.569}, {54.025, 
                    21.188000000000002`}, {52.562, 21.188000000000002`}, {
                    52.562, 8.569}}]}}]}, {
                    FilledCurveBox[{{
                    
                    Line[{{49.636, 8.569}, {51.099000000000004`, 8.569}, {
                    51.099000000000004`, 21.188000000000002`}, {49.636, 
                    21.188000000000002`}, {49.636, 8.569}}]}}]}, {
                    FilledCurveBox[{{
                    
                    Line[{{46.709, 8.569}, {48.172000000000004`, 8.569}, {
                    48.172000000000004`, 21.188000000000002`}, {46.709, 
                    21.188000000000002`}, {46.709, 8.569}}]}}]}, {
                    FilledCurveBox[{{
                    
                    Line[{{43.783, 8.569}, {45.246, 8.569}, {45.246, 
                    21.188000000000002`}, {43.783, 21.188000000000002`}, {
                    43.783, 8.569}}]}}]}}, {
                    FilledCurveBox[{{
                    
                    Line[{{40.947, 4.911}, {59.787000000000006`, 4.911}, {
                    59.787000000000006`, 6.922}, {40.947, 6.922}, {40.947, 
                    4.911}}]}}]}, {
                    FilledCurveBox[{{
                    
                    Line[{{44.057, 31.675}, {56.678000000000004`, 31.675}, {
                    56.678000000000004`, 39.051}, {44.057, 39.051}, {44.057, 
                    31.675}}]}}]}, {
                    FilledCurveBox[{{
                    
                    Line[{{44.057, 43.685}, {56.678000000000004`, 43.685}, {
                    56.678000000000004`, 65.089}, {44.057, 65.089}, {44.057, 
                    43.685}}]}}]}}}, {{{1, 0}, {0, -1}}, Center}], {
                    ImageSize -> {Automatic, 
                    Dynamic[
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])]}, PlotRange -> {{20, 80}, {0, 70}}, 
                    BaseStyle -> {CacheGraphics -> False}, ImageSize -> 30}], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox["\"IPAddress: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"127.0.0.1\"", "SummaryItem"]}], 
                    RowBox[{
                    TagBox["\"Port: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["57332", "SummaryItem"]}], 
                    RowBox[{
                    TagBox["\"Type: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"ZMQ_PAIR\"", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"UUID: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    "\"908792cd-887d-45c5-8373-d1c170d9b106\"", 
                    "SummaryItem"]}], "\[SpanFromLeft]", "\[SpanFromLeft]"}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {
                    ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxCloser"]], 
                    ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    GraphicsBox[
                    GeometricTransformationBox[{{{
                    FilledCurveBox[{{
                    
                    Line[{{36.558, 8.569}, {40.947, 8.569}, {40.947, 
                    43.684000000000005`}, {36.558, 43.684000000000005`}, {
                    36.558, 8.569}}]}}]}, {
                    FilledCurveBox[{{
                    
                    Line[{{59.053, 8.569}, {63.443, 8.569}, {63.443, 
                    43.684000000000005`}, {59.053, 43.684000000000005`}, {
                    59.053, 8.569}}]}}]}, {{
                    FilledCurveBox[{{
                    
                    Line[{{55.487, 8.569}, {56.95, 8.569}, {56.95, 
                    21.188000000000002`}, {55.487, 21.188000000000002`}, {
                    55.487, 8.569}}]}}]}, {
                    FilledCurveBox[{{
                    
                    Line[{{52.562, 8.569}, {54.025, 8.569}, {54.025, 
                    21.188000000000002`}, {52.562, 21.188000000000002`}, {
                    52.562, 8.569}}]}}]}, {
                    FilledCurveBox[{{
                    
                    Line[{{49.636, 8.569}, {51.099000000000004`, 8.569}, {
                    51.099000000000004`, 21.188000000000002`}, {49.636, 
                    21.188000000000002`}, {49.636, 8.569}}]}}]}, {
                    FilledCurveBox[{{
                    
                    Line[{{46.709, 8.569}, {48.172000000000004`, 8.569}, {
                    48.172000000000004`, 21.188000000000002`}, {46.709, 
                    21.188000000000002`}, {46.709, 8.569}}]}}]}, {
                    FilledCurveBox[{{
                    
                    Line[{{43.783, 8.569}, {45.246, 8.569}, {45.246, 
                    21.188000000000002`}, {43.783, 21.188000000000002`}, {
                    43.783, 8.569}}]}}]}}, {
                    FilledCurveBox[{{
                    
                    Line[{{40.947, 4.911}, {59.787000000000006`, 4.911}, {
                    59.787000000000006`, 6.922}, {40.947, 6.922}, {40.947, 
                    4.911}}]}}]}, {
                    FilledCurveBox[{{
                    
                    Line[{{44.057, 31.675}, {56.678000000000004`, 31.675}, {
                    56.678000000000004`, 39.051}, {44.057, 39.051}, {44.057, 
                    31.675}}]}}]}, {
                    FilledCurveBox[{{
                    
                    Line[{{44.057, 43.685}, {56.678000000000004`, 43.685}, {
                    56.678000000000004`, 65.089}, {44.057, 65.089}, {44.057, 
                    43.685}}]}}]}}}, {{{1, 0}, {0, -1}}, Center}], {
                    ImageSize -> {Automatic, 
                    Dynamic[
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])]}, PlotRange -> {{20, 80}, {0, 70}}, 
                    BaseStyle -> {CacheGraphics -> False}, ImageSize -> 30}], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox["\"IPAddress: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"127.0.0.1\"", "SummaryItem"]}], 
                    RowBox[{
                    TagBox["\"Port: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["57332", "SummaryItem"]}], 
                    RowBox[{
                    TagBox["\"Type: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"ZMQ_PAIR\"", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"UUID: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    "\"908792cd-887d-45c5-8373-d1c170d9b106\"", 
                    "SummaryItem"]}], "\[SpanFromLeft]", "\[SpanFromLeft]"}, {
                    
                    RowBox[{
                    TagBox["\"Endpoint: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"tcp://127.0.0.1:57332\"", "SummaryItem"]}], 
                    "\[SpanFromLeft]", "\[SpanFromLeft]"}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {
                    ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`open$$], ImageSize -> Automatic]}, 
                    "SummaryPanel"], DynamicModuleValues :> {}], "]"}], 
                   SocketObject["908792cd-887d-45c5-8373-d1c170d9b106"], 
                   Selectable -> False, Editable -> False, SelectWithContents -> 
                   True], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"StandardErrorFunction: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  RowBox[{
                    RowBox[{"Print", "[", 
                    StyleBox[
                    "#1", "Message", FontFamily -> "Source Code Pro", 
                    StripOnInput -> False], "]"}], "&"}], "SummaryItem"]}]}, {
              
               RowBox[{
                 TagBox[
                 "\"StandardOutputFunction: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["Print", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"EvaluationCount: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  DynamicBox[
                   ToBoxes[
                    If[
                    TrueQ[
                    ExternalEvaluate`Private`getSessionOpts[
                    "a426de7f-1f22-40f5-b5ee-069972b9a733", "Exists"]], 
                    ExternalSessionObject[
                    "a426de7f-1f22-40f5-b5ee-069972b9a733"][
                    "EvaluationCount"], None], StandardForm], 
                   TrackedSymbols :> {ExternalEvaluate`Private`$Links}], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"ProcessMemory: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  DynamicBox[
                   ToBoxes[
                    If[
                    TrueQ[
                    ExternalEvaluate`Private`getSessionOpts[
                    "a426de7f-1f22-40f5-b5ee-069972b9a733", "Exists"]], 
                    Refresh[
                    ExternalSessionObject[
                    "a426de7f-1f22-40f5-b5ee-069972b9a733"]["ProcessMemory"], 
                    UpdateInterval -> 5], 
                    Missing["NotAvailable"]], StandardForm], 
                   TrackedSymbols :> {ExternalEvaluate`Private`$Links}], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"ProcessThreads: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  DynamicBox[
                   ToBoxes[
                    If[
                    TrueQ[
                    ExternalEvaluate`Private`getSessionOpts[
                    "a426de7f-1f22-40f5-b5ee-069972b9a733", "Exists"]], 
                    Refresh[
                    ExternalSessionObject[
                    "a426de7f-1f22-40f5-b5ee-069972b9a733"]["ProcessThreads"],
                     UpdateInterval -> 5], 
                    Missing["NotAvailable"]], StandardForm], 
                   TrackedSymbols :> {ExternalEvaluate`Private`$Links}], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"SessionTime: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  DynamicBox[
                   ToBoxes[
                    If[
                    TrueQ[
                    ExternalEvaluate`Private`getSessionOpts[
                    "a426de7f-1f22-40f5-b5ee-069972b9a733", "Exists"]], 
                    Refresh[
                    ExternalSessionObject[
                    "a426de7f-1f22-40f5-b5ee-069972b9a733"]["SessionTime"], 
                    UpdateInterval -> 1], 
                    Missing["NotAvailable"]], StandardForm], 
                   TrackedSymbols :> {ExternalEvaluate`Private`$Links}], 
                  "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  ExternalSessionObject["a426de7f-1f22-40f5-b5ee-069972b9a733"],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{
  3.92461296062604*^9, 3.924613385961544*^9, {3.924616368598987*^9, 
   3.924616428153767*^9}},
 CellLabel->"Out[3]=",ExpressionUUID->"ba497a5e-caf3-4333-9bee-f2903f6501d8"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["there two statements are equivalent:", "Item",
 CellChangeTimes->{{3.92461661445288*^9, 
  3.924616626748581*^9}},ExpressionUUID->"7bae5f90-cbe1-423b-b212-\
fd324b6cea2d"],

Cell[BoxData[
 RowBox[{"ExternalEvaluate", "[", 
  RowBox[{"session", ",", 
   RowBox[{"\"\<shutup.mute_warnings\>\"", "->", 
    RowBox[{"{", "}"}]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.924613389689485*^9, 3.9246134207115517`*^9}, {
  3.924616575763056*^9, 3.9246165872200613`*^9}},
 CellLabel->"In[8]:=",ExpressionUUID->"6ada687a-ed17-4a1c-865c-33826b74081f"],

Cell[BoxData[
 RowBox[{
  RowBox[{"ExternalFunction", "[", 
   RowBox[{"session", ",", "\"\<shutup.mute_warnings\>\""}], "]"}], "[", 
  "]"}]], "Input",
 CellChangeTimes->{{3.924613389689485*^9, 3.9246134207115517`*^9}, {
  3.924616575763056*^9, 3.924616610686545*^9}},
 CellLabel->"In[10]:=",ExpressionUUID->"a9a49a82-3286-4e15-9979-b396df2de222"]
}, Open  ]],

Cell[CellGroupData[{

Cell["get a hypergraph object:", "Item",
 CellChangeTimes->{{3.9246166375464993`*^9, 
  3.9246166493752613`*^9}},ExpressionUUID->"d78434e9-8820-47a7-bd31-\
779dcc096376"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"hg", "=", 
  RowBox[{"ExternalEvaluate", "[", 
   RowBox[{"session", ",", "\"\<hypernetx.Hypergraph\>\""}], "]"}]}]], "Input",\

 CellChangeTimes->{{3.924612964231784*^9, 3.924613156091189*^9}, {
  3.924616753753055*^9, 
  3.924616757505589*^9}},ExpressionUUID->"994b0121-00e0-4a60-b6b0-\
850b2806a159"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["ExternalFunction",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{
              Thickness[0.05], {
               FaceForm[{
                 RGBColor[1., 1., 1.], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 
                 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {
                 1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
                 3}, {0, 1, 0}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}}, {{1, 4, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                 0}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 
                 3}, {1, 3, 3}}}, {{{7.5718000000000005`, 17.7334}, {7.0998, 
                 17.7334}, {6.7168, 17.342399999999998`}, {6.7168, 16.8624}, {
                 6.7168, 16.3854}, {7.0998, 15.997399999999999`}, {
                 7.5718000000000005`, 15.997399999999999`}, {
                 8.043800000000001, 15.997399999999999`}, {8.4268, 16.3854}, {
                 8.4268, 16.8624}, {8.4268, 17.342399999999998`}, {
                 8.043800000000001, 17.7334}, {7.5718000000000005`, 
                 17.7334}}, CompressedData["
1:eJxTTMoPSmViYGBQAWIQvXD12hvxZbwODSxH+w2/izl86QsuUZnOAuezVHCr
aNT9se+5ncGQzyjl8EZ2+QsPve/2X6bfndzeKu/Qst2h6dHxD/ZfvSLbLMSU
4fz1U1I7kmVV4erNVtuFRxdqOCRs3P9mns0fe98WXv/1ItoOR9qWh58yYnP4
+AVowA4dh6z8D60nQwTg/EsTY/45/1KG87O1v02/K6zi8O7kYae1L3UdBLi3
Lqs8Lubw+zRQhEnPwdnuxc01v8QcGtQOtS2fbgDng2w5ctHQgc1E0MzGVsLB
+wS77exSIwfP/bWyFunyDs2BnnMbjhk5+CzjclP9quCwVMdZ5vUjI4cJhuW6
ivFKDqbvLVzdPxk5JIYEqS84qezgLyeW5fvZyGHaJp7CNacRfAOQAamqcD63
m2op0y01h3aQA54YOZx6ar/kvp0G3D4rZa/q5vVaEPMnQe0v1XG4bgIUWG4I
58P8A+M/mCO4dC+jJpy/M5vz54Llag73gLESNVkLEm/7VBwOWgItcNaA86PE
t19kiJOH80OmKfaVFkrC+ZbpLpn5BSIOx3JNGrY7KMH5UZf3PBaZKwfnw9IH
AO506oE=
                 "], {{12.401800000000001`, 4.1044}, {11.9298, 4.1044}, {
                 11.5458, 3.7164}, {11.5458, 3.2394}, {11.5458, 
                 2.7593999999999994`}, {11.9298, 2.369399999999999}, {
                 12.401800000000001`, 2.369399999999999}, {
                 12.872800000000002`, 2.369399999999999}, {13.2568, 
                 2.7593999999999994`}, {13.2568, 3.2394}, {13.2568, 3.7164}, {
                 12.872800000000002`, 4.1044}, {12.401800000000001`, 
                 4.1044}}, CompressedData["
1:eJxTTMoPSmViYGBQAWIQ/Uei+LrQJ2UHhUNty8NPfbBfaXrW2m+iEpyvdVrg
+C4LRYcC3899wSWf7M+tOn81LEfe4cBGvbzFjN/sb635FZPrKuPgUPST/+X2
n/bOdi9urvkl5sARP8NHtIfRAcY/smKJn4MwD5y/aIv5j0MpcnB+rknDdocm
RQepRxHi2y9KOeyeNoG/qkzZIQrIY4iTh/MPWip7VTtrwPkuv96+PmCpDedf
mhjzz3mXroPFtaO5JgxqcP6DOYJL9zJqwvldfU8+yV/ScWBbPMmKMdfA4eMX
r8i2HToOE/mrzFbXGcL5GnU9O7M1jRympHYkx8ZoO9z8AJIwcjBbbRceXajh
0Pzo+Izd34wc3p087LT2pQqcL7R070HxNCWH+TY6V2YB1SeEBKkv6JR3kKlJ
NAoVAKo/APTIb0kHkDMbphs6NLAc7Tf8LgZ3D4wPdu8vZTgfSJbrPlR2WNC5
4eHLqSIOz+yX3N/Xp+OQF1a7bluSiIPPMi431VIdeHjD+CLAYLzHxOQwi0N6
XpymlsMFzgylnIpf9lURK4AxrgGPT3B47lRzWNAU6Dm34ZP94ZRVQKerwtMD
enoBAPI7A7I=
                 "]}]}, {
               FaceForm[{
                 RGBColor[0.20800000000000002`, 0.514, 0.6859999999999999], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}}, {{1, 4, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                 0}, {1, 3, 3}, {1, 3, 3}}}, {{{7.5718000000000005`, 
                 17.6836}, {8.014800000000001, 17.6836}, {8.3778, 17.3156}, {
                 8.3778, 16.862599999999997`}, {8.3778, 16.4116}, {
                 8.014800000000001, 16.046599999999998`}, {
                 7.5718000000000005`, 16.046599999999998`}, {7.1268, 
                 16.046599999999998`}, {6.7658000000000005`, 16.4116}, {
                 6.7658000000000005`, 16.862599999999997`}, {
                 6.7658000000000005`, 17.3156}, {7.1268, 17.6836}, {
                 7.5718000000000005`, 17.6836}}, CompressedData["
1:eJxTTMoPSmViYGBQBWIQnRgSpL7gpLLDYxHZk0//GzmYnbX2uxio5NBvWK6r
COQ7nU+7+vyVgsOa7tsZDO+NHKLEt19kiJN3EPMI+CNx2cgh6fBl7VRJCYd/
zr/evm4wchDg3rqs8riYQ2vU5T2PrxjC+XxzjBdtmW4A59fKWqS7vNR1uDQx
BqhVGYMPVKRpdUkHrh7Gb5l3dtX5UAE4v+gn/8vt69ng/DOHndZm3vttD+YH
aTt8OAkS+Gb/aUNA9qxyDQeec5KBt6Q/2N/XnbDgh6GqgwTQ2/ZL3tt77Ae6
QF0Zrv6Nhat7UaW8wxWXGx++eP223xet4PgxWcqBJ0Mpp6KK2aFlefgpoyNi
DgtXr70RX8YL5wcBbZmzSASDP2llU6DnXDk4/4fhs3WqKkoOb/V3q/N3Szq0
nQw5uGKJCjx8YfyDlspe1c4acL5XdbO+zzItOP+Z/ZL7+/p0HJR2/mn/MlsN
zgfybl9n1ITzYeEP4wNjvXPDQUOHa8+ztL9N13IARW/+QiO4fbD4haQPNYfO
DQ9fTv1k5NADUueoColvBmMH9PQDAFGHDrQ=
                 "]}]}, {
               FaceForm[{
                 RGBColor[0.976, 0.8430000000000001, 0.353], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}}, {{0, 2, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {
                 0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}}}, {{{12.4014, 4.0552}, {12.846400000000001`, 4.0552}, {
                 13.2074, 3.6902}, {13.2074, 3.2392000000000003`}, {13.2074, 
                 2.7862}, {12.846400000000001`, 2.4182}, {12.4014, 2.4182}, {
                 11.958400000000001`, 2.4182}, {11.595400000000001`, 
                 2.7862}, {11.595400000000001`, 3.2392000000000003`}, {
                 11.595400000000001`, 3.6902}, {11.958400000000001`, 
                 4.0552}, {12.4014, 4.0552}}, CompressedData["
1:eJxTTMoPSmViYGBQBGIQ3bszm/PnAl2HgsWMe1gv6TjA+Ec26uUtZtSE819t
X8/8nEfNISJ64/43ctoOlq7uRT/7lR06k2PvuDlrwPkvs7S/TY+Vh/MvpF19
nrVaCs6fH6d5WuC4mMNLkHk9inB+1r3Crr4UOTi/LerynsciPAh5hvxGlqNM
Dr8OpaxKuCLlcO96Y7HblF/2MPtesZgImtl8tde5MuuZbLqSw52tLTUXNr+1
/3363cnDTKoOCo4fk8/EvraHuRem3j4c6KEcLQel5HdRTna/7Ndlghyi4zCL
Q3penCaTA4wPcw+Mn7H5VfHWqSIO6sGsiyf9UsbgG2itFL5wRAyuHsYH+zvH
AM6PATlsjSGcbwwKeGUjhzV2QIfZSzn8sSo41zHJyKGuBxgRlfIOGUo5FVWs
xg62s0Pnr85VcljVFOg5l8HYoX15+CkjFlW4+l23uv6mlms4/OIH2uhs5BAg
J5bl+1kLYj/QPlh8w9wD4wMA37PnHw==
                 "]}]}}, {
             ImageSize -> 
              Dynamic[{
                Automatic, 
                 3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                  Magnification])}], AspectRatio -> Automatic, 
              ImageSize -> {20., 20.}, PlotRange -> {{0., 20.}, {0., 20.}}}], 
            
            GridBox[{{
               RowBox[{
                 TagBox["\"System: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Python\"", "SummaryItem"]}], 
               RowBox[{
                 TagBox["\"Arguments: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  RowBox[{"{", "}"}], "SummaryItem"]}], ""}, {
               RowBox[{
                 TagBox["\"IsModule: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["False", "SummaryItem"]}], 
               RowBox[{
                 TagBox["\"Module: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"hypernetx.classes.hypergraph\"", "SummaryItem"]}], 
               "\[SpanFromLeft]"}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{
              Thickness[0.05], {
               FaceForm[{
                 RGBColor[1., 1., 1.], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 
                 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {
                 1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
                 3}, {0, 1, 0}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}}, {{1, 4, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                 0}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 
                 3}, {1, 3, 3}}}, {{{7.5718000000000005`, 17.7334}, {7.0998, 
                 17.7334}, {6.7168, 17.342399999999998`}, {6.7168, 16.8624}, {
                 6.7168, 16.3854}, {7.0998, 15.997399999999999`}, {
                 7.5718000000000005`, 15.997399999999999`}, {
                 8.043800000000001, 15.997399999999999`}, {8.4268, 16.3854}, {
                 8.4268, 16.8624}, {8.4268, 17.342399999999998`}, {
                 8.043800000000001, 17.7334}, {7.5718000000000005`, 
                 17.7334}}, CompressedData["
1:eJxTTMoPSmViYGBQAWIQvXD12hvxZbwODSxH+w2/izl86QsuUZnOAuezVHCr
aNT9se+5ncGQzyjl8EZ2+QsPve/2X6bfndzeKu/Qst2h6dHxD/ZfvSLbLMSU
4fz1U1I7kmVV4erNVtuFRxdqOCRs3P9mns0fe98WXv/1ItoOR9qWh58yYnP4
+AVowA4dh6z8D60nQwTg/EsTY/45/1KG87O1v02/K6zi8O7kYae1L3UdBLi3
Lqs8Lubw+zRQhEnPwdnuxc01v8QcGtQOtS2fbgDng2w5ctHQgc1E0MzGVsLB
+wS77exSIwfP/bWyFunyDs2BnnMbjhk5+CzjclP9quCwVMdZ5vUjI4cJhuW6
ivFKDqbvLVzdPxk5JIYEqS84qezgLyeW5fvZyGHaJp7CNacRfAOQAamqcD63
m2op0y01h3aQA54YOZx6ar/kvp0G3D4rZa/q5vVaEPMnQe0v1XG4bgIUWG4I
58P8A+M/mCO4dC+jJpy/M5vz54Llag73gLESNVkLEm/7VBwOWgItcNaA86PE
t19kiJOH80OmKfaVFkrC+ZbpLpn5BSIOx3JNGrY7KMH5UZf3PBaZKwfnw9IH
AO506oE=
                 "], {{12.401800000000001`, 4.1044}, {11.9298, 4.1044}, {
                 11.5458, 3.7164}, {11.5458, 3.2394}, {11.5458, 
                 2.7593999999999994`}, {11.9298, 2.369399999999999}, {
                 12.401800000000001`, 2.369399999999999}, {
                 12.872800000000002`, 2.369399999999999}, {13.2568, 
                 2.7593999999999994`}, {13.2568, 3.2394}, {13.2568, 3.7164}, {
                 12.872800000000002`, 4.1044}, {12.401800000000001`, 
                 4.1044}}, CompressedData["
1:eJxTTMoPSmViYGBQAWIQ/Uei+LrQJ2UHhUNty8NPfbBfaXrW2m+iEpyvdVrg
+C4LRYcC3899wSWf7M+tOn81LEfe4cBGvbzFjN/sb635FZPrKuPgUPST/+X2
n/bOdi9urvkl5sARP8NHtIfRAcY/smKJn4MwD5y/aIv5j0MpcnB+rknDdocm
RQepRxHi2y9KOeyeNoG/qkzZIQrIY4iTh/MPWip7VTtrwPkuv96+PmCpDedf
mhjzz3mXroPFtaO5JgxqcP6DOYJL9zJqwvldfU8+yV/ScWBbPMmKMdfA4eMX
r8i2HToOE/mrzFbXGcL5GnU9O7M1jRympHYkx8ZoO9z8AJIwcjBbbRceXajh
0Pzo+Izd34wc3p087LT2pQqcL7R070HxNCWH+TY6V2YB1SeEBKkv6JR3kKlJ
NAoVAKo/APTIb0kHkDMbphs6NLAc7Tf8LgZ3D4wPdu8vZTgfSJbrPlR2WNC5
4eHLqSIOz+yX3N/Xp+OQF1a7bluSiIPPMi431VIdeHjD+CLAYLzHxOQwi0N6
XpymlsMFzgylnIpf9lURK4AxrgGPT3B47lRzWNAU6Dm34ZP94ZRVQKerwtMD
enoBAPI7A7I=
                 "]}]}, {
               FaceForm[{
                 RGBColor[0.20800000000000002`, 0.514, 0.6859999999999999], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}}, {{1, 4, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                 0}, {1, 3, 3}, {1, 3, 3}}}, {{{7.5718000000000005`, 
                 17.6836}, {8.014800000000001, 17.6836}, {8.3778, 17.3156}, {
                 8.3778, 16.862599999999997`}, {8.3778, 16.4116}, {
                 8.014800000000001, 16.046599999999998`}, {
                 7.5718000000000005`, 16.046599999999998`}, {7.1268, 
                 16.046599999999998`}, {6.7658000000000005`, 16.4116}, {
                 6.7658000000000005`, 16.862599999999997`}, {
                 6.7658000000000005`, 17.3156}, {7.1268, 17.6836}, {
                 7.5718000000000005`, 17.6836}}, CompressedData["
1:eJxTTMoPSmViYGBQBWIQnRgSpL7gpLLDYxHZk0//GzmYnbX2uxio5NBvWK6r
COQ7nU+7+vyVgsOa7tsZDO+NHKLEt19kiJN3EPMI+CNx2cgh6fBl7VRJCYd/
zr/evm4wchDg3rqs8riYQ2vU5T2PrxjC+XxzjBdtmW4A59fKWqS7vNR1uDQx
BqhVGYMPVKRpdUkHrh7Gb5l3dtX5UAE4v+gn/8vt69ng/DOHndZm3vttD+YH
aTt8OAkS+Gb/aUNA9qxyDQeec5KBt6Q/2N/XnbDgh6GqgwTQ2/ZL3tt77Ae6
QF0Zrv6Nhat7UaW8wxWXGx++eP223xet4PgxWcqBJ0Mpp6KK2aFlefgpoyNi
DgtXr70RX8YL5wcBbZmzSASDP2llU6DnXDk4/4fhs3WqKkoOb/V3q/N3Szq0
nQw5uGKJCjx8YfyDlspe1c4acL5XdbO+zzItOP+Z/ZL7+/p0HJR2/mn/MlsN
zgfybl9n1ITzYeEP4wNjvXPDQUOHa8+ztL9N13IARW/+QiO4fbD4haQPNYfO
DQ9fTv1k5NADUueoColvBmMH9PQDAFGHDrQ=
                 "]}]}, {
               FaceForm[{
                 RGBColor[0.976, 0.8430000000000001, 0.353], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}}, {{0, 2, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {
                 0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}}}, {{{12.4014, 4.0552}, {12.846400000000001`, 4.0552}, {
                 13.2074, 3.6902}, {13.2074, 3.2392000000000003`}, {13.2074, 
                 2.7862}, {12.846400000000001`, 2.4182}, {12.4014, 2.4182}, {
                 11.958400000000001`, 2.4182}, {11.595400000000001`, 
                 2.7862}, {11.595400000000001`, 3.2392000000000003`}, {
                 11.595400000000001`, 3.6902}, {11.958400000000001`, 
                 4.0552}, {12.4014, 4.0552}}, CompressedData["
1:eJxTTMoPSmViYGBQBGIQ3bszm/PnAl2HgsWMe1gv6TjA+Ec26uUtZtSE819t
X8/8nEfNISJ64/43ctoOlq7uRT/7lR06k2PvuDlrwPkvs7S/TY+Vh/MvpF19
nrVaCs6fH6d5WuC4mMNLkHk9inB+1r3Crr4UOTi/LerynsciPAh5hvxGlqNM
Dr8OpaxKuCLlcO96Y7HblF/2MPtesZgImtl8tde5MuuZbLqSw52tLTUXNr+1
/3363cnDTKoOCo4fk8/EvraHuRem3j4c6KEcLQel5HdRTna/7Ndlghyi4zCL
Q3penCaTA4wPcw+Mn7H5VfHWqSIO6sGsiyf9UsbgG2itFL5wRAyuHsYH+zvH
AM6PATlsjSGcbwwKeGUjhzV2QIfZSzn8sSo41zHJyKGuBxgRlfIOGUo5FVWs
xg62s0Pnr85VcljVFOg5l8HYoX15+CkjFlW4+l23uv6mlms4/OIH2uhs5BAg
J5bl+1kLYj/QPlh8w9wD4wMA37PnHw==
                 "]}]}}, {
             ImageSize -> 
              Dynamic[{
                Automatic, 
                 3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                  Magnification])}], AspectRatio -> Automatic, 
              ImageSize -> {20., 20.}, PlotRange -> {{0., 20.}, {0., 20.}}}], 
            
            GridBox[{{
               RowBox[{
                 TagBox["\"System: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Python\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Arguments: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  RowBox[{"{", "}"}], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"IsModule: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["False", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Module: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                 "\"hypernetx.classes.hypergraph\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"IsClass: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["True", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"IsFunction: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["False", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"IsMethod: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["False", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"IsCallable: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["True", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Status: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Evaluated\"", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  ExternalFunction[
   ExternalObject[
    ExternalSessionObject["a426de7f-1f22-40f5-b5ee-069972b9a733"], 
    ExternalEvaluate`RPC["GetReference", 5067454304], <|
    "Arguments" -> {}, "IsModule" -> False, "Module" -> 
     "hypernetx.classes.hypergraph", "IsClass" -> True, "IsFunction" -> False,
      "IsMethod" -> False, "IsCallable" -> True|>]],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.9246130119750137`*^9, 3.9246130185173693`*^9}, {
   3.924613053253034*^9, 3.924613081904834*^9}, {3.924613122543573*^9, 
   3.924613156462291*^9}, 3.924613432132887*^9, 3.924616432682351*^9, 
   3.9246166559678497`*^9},
 CellLabel->"Out[11]=",ExpressionUUID->"f4736767-056f-4f0c-b50a-270a1090aba5"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"hg", "[", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", "2"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"1", ",", "2"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"1", ",", "2", ",", "3"}], "}"}]}], "}"}], "]"}]], "Input",
 CellChangeTimes->{{3.924616665234289*^9, 3.924616674172052*^9}},
 CellLabel->"In[12]:=",ExpressionUUID->"06c5f7d3-335e-4563-bb88-5117036da00c"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", "2", ",", "3"}], "}"}]], "Output",
 CellChangeTimes->{3.924616674568722*^9},
 CellLabel->"Out[12]=",ExpressionUUID->"224c896e-9cd9-4f02-9309-c2942b1268ea"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"hg", "=", 
  RowBox[{"ExternalEvaluate", "[", 
   RowBox[{"session", ",", 
    RowBox[{"<|", 
     RowBox[{
      RowBox[{"\"\<Command\>\"", "->", "\"\<hypernetx.Hypergraph\>\""}], ",", 
      
      RowBox[{"\"\<ReturnType\>\"", "->", "\"\<ExternalObject\>\""}]}], 
     "|>"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.924612964231784*^9, 3.924613156091189*^9}, {
  3.924616753753055*^9, 3.924616781858144*^9}},
 CellLabel->"In[14]:=",ExpressionUUID->"1589b5d1-f902-4e2e-978d-6f75543a3c14"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["ExternalObject",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"], 
               ImageSizeCache -> {10.6984921875, {0., 10.6984921875}}], 
              Appearance -> None, BaseStyle -> {}, 
              ButtonFunction :> (Typeset`open$$ = True), Evaluator -> 
              Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{
              Thickness[0.05], {
               FaceForm[{
                 RGBColor[1., 1., 1.], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 
                 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {
                 1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
                 3}, {0, 1, 0}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}}, {{1, 4, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                 0}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 
                 3}, {1, 3, 3}}}, {{{7.5718000000000005`, 17.7334}, {7.0998, 
                 17.7334}, {6.7168, 17.342399999999998`}, {6.7168, 16.8624}, {
                 6.7168, 16.3854}, {7.0998, 15.997399999999999`}, {
                 7.5718000000000005`, 15.997399999999999`}, {
                 8.043800000000001, 15.997399999999999`}, {8.4268, 16.3854}, {
                 8.4268, 16.8624}, {8.4268, 17.342399999999998`}, {
                 8.043800000000001, 17.7334}, {7.5718000000000005`, 
                 17.7334}}, CompressedData["
1:eJxTTMoPSmViYGBQAWIQvXD12hvxZbwODSxH+w2/izl86QsuUZnOAuezVHCr
aNT9se+5ncGQzyjl8EZ2+QsPve/2X6bfndzeKu/Qst2h6dHxD/ZfvSLbLMSU
4fz1U1I7kmVV4erNVtuFRxdqOCRs3P9mns0fe98WXv/1ItoOR9qWh58yYnP4
+AVowA4dh6z8D60nQwTg/EsTY/45/1KG87O1v02/K6zi8O7kYae1L3UdBLi3
Lqs8Lubw+zRQhEnPwdnuxc01v8QcGtQOtS2fbgDng2w5ctHQgc1E0MzGVsLB
+wS77exSIwfP/bWyFunyDs2BnnMbjhk5+CzjclP9quCwVMdZ5vUjI4cJhuW6
ivFKDqbvLVzdPxk5JIYEqS84qezgLyeW5fvZyGHaJp7CNacRfAOQAamqcD63
m2op0y01h3aQA54YOZx6ar/kvp0G3D4rZa/q5vVaEPMnQe0v1XG4bgIUWG4I
58P8A+M/mCO4dC+jJpy/M5vz54Llag73gLESNVkLEm/7VBwOWgItcNaA86PE
t19kiJOH80OmKfaVFkrC+ZbpLpn5BSIOx3JNGrY7KMH5UZf3PBaZKwfnw9IH
AO506oE=
                 "], {{12.401800000000001`, 4.1044}, {11.9298, 4.1044}, {
                 11.5458, 3.7164}, {11.5458, 3.2394}, {11.5458, 
                 2.7593999999999994`}, {11.9298, 2.369399999999999}, {
                 12.401800000000001`, 2.369399999999999}, {
                 12.872800000000002`, 2.369399999999999}, {13.2568, 
                 2.7593999999999994`}, {13.2568, 3.2394}, {13.2568, 3.7164}, {
                 12.872800000000002`, 4.1044}, {12.401800000000001`, 
                 4.1044}}, CompressedData["
1:eJxTTMoPSmViYGBQAWIQ/Uei+LrQJ2UHhUNty8NPfbBfaXrW2m+iEpyvdVrg
+C4LRYcC3899wSWf7M+tOn81LEfe4cBGvbzFjN/sb635FZPrKuPgUPST/+X2
n/bOdi9urvkl5sARP8NHtIfRAcY/smKJn4MwD5y/aIv5j0MpcnB+rknDdocm
RQepRxHi2y9KOeyeNoG/qkzZIQrIY4iTh/MPWip7VTtrwPkuv96+PmCpDedf
mhjzz3mXroPFtaO5JgxqcP6DOYJL9zJqwvldfU8+yV/ScWBbPMmKMdfA4eMX
r8i2HToOE/mrzFbXGcL5GnU9O7M1jRympHYkx8ZoO9z8AJIwcjBbbRceXajh
0Pzo+Izd34wc3p087LT2pQqcL7R070HxNCWH+TY6V2YB1SeEBKkv6JR3kKlJ
NAoVAKo/APTIb0kHkDMbphs6NLAc7Tf8LgZ3D4wPdu8vZTgfSJbrPlR2WNC5
4eHLqSIOz+yX3N/Xp+OQF1a7bluSiIPPMi431VIdeHjD+CLAYLzHxOQwi0N6
XpymlsMFzgylnIpf9lURK4AxrgGPT3B47lRzWNAU6Dm34ZP94ZRVQKerwtMD
enoBAPI7A7I=
                 "]}]}, {
               FaceForm[{
                 RGBColor[0.20800000000000002`, 0.514, 0.6859999999999999], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}}, {{1, 4, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                 0}, {1, 3, 3}, {1, 3, 3}}}, {{{7.5718000000000005`, 
                 17.6836}, {8.014800000000001, 17.6836}, {8.3778, 17.3156}, {
                 8.3778, 16.862599999999997`}, {8.3778, 16.4116}, {
                 8.014800000000001, 16.046599999999998`}, {
                 7.5718000000000005`, 16.046599999999998`}, {7.1268, 
                 16.046599999999998`}, {6.7658000000000005`, 16.4116}, {
                 6.7658000000000005`, 16.862599999999997`}, {
                 6.7658000000000005`, 17.3156}, {7.1268, 17.6836}, {
                 7.5718000000000005`, 17.6836}}, CompressedData["
1:eJxTTMoPSmViYGBQBWIQnRgSpL7gpLLDYxHZk0//GzmYnbX2uxio5NBvWK6r
COQ7nU+7+vyVgsOa7tsZDO+NHKLEt19kiJN3EPMI+CNx2cgh6fBl7VRJCYd/
zr/evm4wchDg3rqs8riYQ2vU5T2PrxjC+XxzjBdtmW4A59fKWqS7vNR1uDQx
BqhVGYMPVKRpdUkHrh7Gb5l3dtX5UAE4v+gn/8vt69ng/DOHndZm3vttD+YH
aTt8OAkS+Gb/aUNA9qxyDQeec5KBt6Q/2N/XnbDgh6GqgwTQ2/ZL3tt77Ae6
QF0Zrv6Nhat7UaW8wxWXGx++eP223xet4PgxWcqBJ0Mpp6KK2aFlefgpoyNi
DgtXr70RX8YL5wcBbZmzSASDP2llU6DnXDk4/4fhs3WqKkoOb/V3q/N3Szq0
nQw5uGKJCjx8YfyDlspe1c4acL5XdbO+zzItOP+Z/ZL7+/p0HJR2/mn/MlsN
zgfybl9n1ITzYeEP4wNjvXPDQUOHa8+ztL9N13IARW/+QiO4fbD4haQPNYfO
DQ9fTv1k5NADUueoColvBmMH9PQDAFGHDrQ=
                 "]}]}, {
               FaceForm[{
                 RGBColor[0.976, 0.8430000000000001, 0.353], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}}, {{0, 2, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {
                 0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}}}, {{{12.4014, 4.0552}, {12.846400000000001`, 4.0552}, {
                 13.2074, 3.6902}, {13.2074, 3.2392000000000003`}, {13.2074, 
                 2.7862}, {12.846400000000001`, 2.4182}, {12.4014, 2.4182}, {
                 11.958400000000001`, 2.4182}, {11.595400000000001`, 
                 2.7862}, {11.595400000000001`, 3.2392000000000003`}, {
                 11.595400000000001`, 3.6902}, {11.958400000000001`, 
                 4.0552}, {12.4014, 4.0552}}, CompressedData["
1:eJxTTMoPSmViYGBQBGIQ3bszm/PnAl2HgsWMe1gv6TjA+Ec26uUtZtSE819t
X8/8nEfNISJ64/43ctoOlq7uRT/7lR06k2PvuDlrwPkvs7S/TY+Vh/MvpF19
nrVaCs6fH6d5WuC4mMNLkHk9inB+1r3Crr4UOTi/LerynsciPAh5hvxGlqNM
Dr8OpaxKuCLlcO96Y7HblF/2MPtesZgImtl8tde5MuuZbLqSw52tLTUXNr+1
/3363cnDTKoOCo4fk8/EvraHuRem3j4c6KEcLQel5HdRTna/7Ndlghyi4zCL
Q3penCaTA4wPcw+Mn7H5VfHWqSIO6sGsiyf9UsbgG2itFL5wRAyuHsYH+zvH
AM6PATlsjSGcbwwKeGUjhzV2QIfZSzn8sSo41zHJyKGuBxgRlfIOGUo5FVWs
xg62s0Pnr85VcljVFOg5l8HYoX15+CkjFlW4+l23uv6mlms4/OIH2uhs5BAg
J5bl+1kLYj/QPlh8w9wD4wMA37PnHw==
                 "]}]}}, AspectRatio -> Automatic, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], PlotRange -> {{0., 20.}, {0., 20.}}], 
            GridBox[{{
               RowBox[{
                 TagBox["\"System: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Python\"", "SummaryItem"]}], 
               RowBox[{
                 TagBox["\"Arguments: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  RowBox[{"{", "}"}], "SummaryItem"]}], ""}, {
               RowBox[{
                 TagBox["\"IsModule: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["False", "SummaryItem"]}], 
               RowBox[{
                 TagBox["\"Module: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"hypernetx.classes.hypergraph\"", "SummaryItem"]}], 
               "\[SpanFromLeft]"}}, AutoDelete -> False, 
             BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {
              "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, AutoDelete -> 
          False, BaselinePosition -> {1, 1}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], True -> 
        GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"], 
               ImageSizeCache -> {10.6984921875, {0., 10.6984921875}}], 
              Appearance -> None, BaseStyle -> {}, 
              ButtonFunction :> (Typeset`open$$ = False), Evaluator -> 
              Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{
              Thickness[0.05], {
               FaceForm[{
                 RGBColor[1., 1., 1.], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 
                 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {
                 1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
                 3}, {0, 1, 0}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}}, {{1, 4, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                 0}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 
                 3}, {1, 3, 3}}}, {{{7.5718000000000005`, 17.7334}, {7.0998, 
                 17.7334}, {6.7168, 17.342399999999998`}, {6.7168, 16.8624}, {
                 6.7168, 16.3854}, {7.0998, 15.997399999999999`}, {
                 7.5718000000000005`, 15.997399999999999`}, {
                 8.043800000000001, 15.997399999999999`}, {8.4268, 16.3854}, {
                 8.4268, 16.8624}, {8.4268, 17.342399999999998`}, {
                 8.043800000000001, 17.7334}, {7.5718000000000005`, 
                 17.7334}}, CompressedData["
1:eJxTTMoPSmViYGBQAWIQvXD12hvxZbwODSxH+w2/izl86QsuUZnOAuezVHCr
aNT9se+5ncGQzyjl8EZ2+QsPve/2X6bfndzeKu/Qst2h6dHxD/ZfvSLbLMSU
4fz1U1I7kmVV4erNVtuFRxdqOCRs3P9mns0fe98WXv/1ItoOR9qWh58yYnP4
+AVowA4dh6z8D60nQwTg/EsTY/45/1KG87O1v02/K6zi8O7kYae1L3UdBLi3
Lqs8Lubw+zRQhEnPwdnuxc01v8QcGtQOtS2fbgDng2w5ctHQgc1E0MzGVsLB
+wS77exSIwfP/bWyFunyDs2BnnMbjhk5+CzjclP9quCwVMdZ5vUjI4cJhuW6
ivFKDqbvLVzdPxk5JIYEqS84qezgLyeW5fvZyGHaJp7CNacRfAOQAamqcD63
m2op0y01h3aQA54YOZx6ar/kvp0G3D4rZa/q5vVaEPMnQe0v1XG4bgIUWG4I
58P8A+M/mCO4dC+jJpy/M5vz54Llag73gLESNVkLEm/7VBwOWgItcNaA86PE
t19kiJOH80OmKfaVFkrC+ZbpLpn5BSIOx3JNGrY7KMH5UZf3PBaZKwfnw9IH
AO506oE=
                 "], {{12.401800000000001`, 4.1044}, {11.9298, 4.1044}, {
                 11.5458, 3.7164}, {11.5458, 3.2394}, {11.5458, 
                 2.7593999999999994`}, {11.9298, 2.369399999999999}, {
                 12.401800000000001`, 2.369399999999999}, {
                 12.872800000000002`, 2.369399999999999}, {13.2568, 
                 2.7593999999999994`}, {13.2568, 3.2394}, {13.2568, 3.7164}, {
                 12.872800000000002`, 4.1044}, {12.401800000000001`, 
                 4.1044}}, CompressedData["
1:eJxTTMoPSmViYGBQAWIQ/Uei+LrQJ2UHhUNty8NPfbBfaXrW2m+iEpyvdVrg
+C4LRYcC3899wSWf7M+tOn81LEfe4cBGvbzFjN/sb635FZPrKuPgUPST/+X2
n/bOdi9urvkl5sARP8NHtIfRAcY/smKJn4MwD5y/aIv5j0MpcnB+rknDdocm
RQepRxHi2y9KOeyeNoG/qkzZIQrIY4iTh/MPWip7VTtrwPkuv96+PmCpDedf
mhjzz3mXroPFtaO5JgxqcP6DOYJL9zJqwvldfU8+yV/ScWBbPMmKMdfA4eMX
r8i2HToOE/mrzFbXGcL5GnU9O7M1jRympHYkx8ZoO9z8AJIwcjBbbRceXajh
0Pzo+Izd34wc3p087LT2pQqcL7R070HxNCWH+TY6V2YB1SeEBKkv6JR3kKlJ
NAoVAKo/APTIb0kHkDMbphs6NLAc7Tf8LgZ3D4wPdu8vZTgfSJbrPlR2WNC5
4eHLqSIOz+yX3N/Xp+OQF1a7bluSiIPPMi431VIdeHjD+CLAYLzHxOQwi0N6
XpymlsMFzgylnIpf9lURK4AxrgGPT3B47lRzWNAU6Dm34ZP94ZRVQKerwtMD
enoBAPI7A7I=
                 "]}]}, {
               FaceForm[{
                 RGBColor[0.20800000000000002`, 0.514, 0.6859999999999999], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}}, {{1, 4, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                 0}, {1, 3, 3}, {1, 3, 3}}}, {{{7.5718000000000005`, 
                 17.6836}, {8.014800000000001, 17.6836}, {8.3778, 17.3156}, {
                 8.3778, 16.862599999999997`}, {8.3778, 16.4116}, {
                 8.014800000000001, 16.046599999999998`}, {
                 7.5718000000000005`, 16.046599999999998`}, {7.1268, 
                 16.046599999999998`}, {6.7658000000000005`, 16.4116}, {
                 6.7658000000000005`, 16.862599999999997`}, {
                 6.7658000000000005`, 17.3156}, {7.1268, 17.6836}, {
                 7.5718000000000005`, 17.6836}}, CompressedData["
1:eJxTTMoPSmViYGBQBWIQnRgSpL7gpLLDYxHZk0//GzmYnbX2uxio5NBvWK6r
COQ7nU+7+vyVgsOa7tsZDO+NHKLEt19kiJN3EPMI+CNx2cgh6fBl7VRJCYd/
zr/evm4wchDg3rqs8riYQ2vU5T2PrxjC+XxzjBdtmW4A59fKWqS7vNR1uDQx
BqhVGYMPVKRpdUkHrh7Gb5l3dtX5UAE4v+gn/8vt69ng/DOHndZm3vttD+YH
aTt8OAkS+Gb/aUNA9qxyDQeec5KBt6Q/2N/XnbDgh6GqgwTQ2/ZL3tt77Ae6
QF0Zrv6Nhat7UaW8wxWXGx++eP223xet4PgxWcqBJ0Mpp6KK2aFlefgpoyNi
DgtXr70RX8YL5wcBbZmzSASDP2llU6DnXDk4/4fhs3WqKkoOb/V3q/N3Szq0
nQw5uGKJCjx8YfyDlspe1c4acL5XdbO+zzItOP+Z/ZL7+/p0HJR2/mn/MlsN
zgfybl9n1ITzYeEP4wNjvXPDQUOHa8+ztL9N13IARW/+QiO4fbD4haQPNYfO
DQ9fTv1k5NADUueoColvBmMH9PQDAFGHDrQ=
                 "]}]}, {
               FaceForm[{
                 RGBColor[0.976, 0.8430000000000001, 0.353], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}}, {{0, 2, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {
                 0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}}}, {{{12.4014, 4.0552}, {12.846400000000001`, 4.0552}, {
                 13.2074, 3.6902}, {13.2074, 3.2392000000000003`}, {13.2074, 
                 2.7862}, {12.846400000000001`, 2.4182}, {12.4014, 2.4182}, {
                 11.958400000000001`, 2.4182}, {11.595400000000001`, 
                 2.7862}, {11.595400000000001`, 3.2392000000000003`}, {
                 11.595400000000001`, 3.6902}, {11.958400000000001`, 
                 4.0552}, {12.4014, 4.0552}}, CompressedData["
1:eJxTTMoPSmViYGBQBGIQ3bszm/PnAl2HgsWMe1gv6TjA+Ec26uUtZtSE819t
X8/8nEfNISJ64/43ctoOlq7uRT/7lR06k2PvuDlrwPkvs7S/TY+Vh/MvpF19
nrVaCs6fH6d5WuC4mMNLkHk9inB+1r3Crr4UOTi/LerynsciPAh5hvxGlqNM
Dr8OpaxKuCLlcO96Y7HblF/2MPtesZgImtl8tde5MuuZbLqSw52tLTUXNr+1
/3363cnDTKoOCo4fk8/EvraHuRem3j4c6KEcLQel5HdRTna/7Ndlghyi4zCL
Q3penCaTA4wPcw+Mn7H5VfHWqSIO6sGsiyf9UsbgG2itFL5wRAyuHsYH+zvH
AM6PATlsjSGcbwwKeGUjhzV2QIfZSzn8sSo41zHJyKGuBxgRlfIOGUo5FVWs
xg62s0Pnr85VcljVFOg5l8HYoX15+CkjFlW4+l23uv6mlms4/OIH2uhs5BAg
J5bl+1kLYj/QPlh8w9wD4wMA37PnHw==
                 "]}]}}, AspectRatio -> Automatic, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], PlotRange -> {{0., 20.}, {0., 20.}}], 
            GridBox[{{
               RowBox[{
                 TagBox["\"System: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Python\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Arguments: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  RowBox[{"{", "}"}], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"IsModule: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["False", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Module: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                 "\"hypernetx.classes.hypergraph\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"IsClass: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["True", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"IsFunction: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["False", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"IsMethod: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["False", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"IsCallable: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["True", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Status: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Evaluated\"", "SummaryItem"]}]}}, AutoDelete -> 
             False, 
             BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {
              "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, AutoDelete -> 
          False, BaselinePosition -> {1, 1}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  ExternalObject[
   ExternalSessionObject["a426de7f-1f22-40f5-b5ee-069972b9a733"], 
   ExternalEvaluate`RPC["GetReference", 5067454304], <|
   "Arguments" -> {}, "IsModule" -> False, "Module" -> 
    "hypernetx.classes.hypergraph", "IsClass" -> True, "IsFunction" -> False, 
    "IsMethod" -> False, "IsCallable" -> True|>],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.924616782480659*^9},
 CellLabel->"Out[14]=",ExpressionUUID->"87fed426-69f0-4033-b3aa-d37c433a962a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"hg", "[", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", "2"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"1", ",", "2"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"1", ",", "2", ",", "3"}], "}"}]}], "}"}], "]"}]], "Input",
 CellLabel->"In[15]:=",ExpressionUUID->"5744c66e-1c52-4443-8ced-efbb6b7da125"],

Cell[BoxData[
 RowBox[{
  InterpretationBox[
   RowBox[{
    TagBox["ExternalObject",
     "SummaryHead"], "[", 
    DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
     TemplateBox[{
       PaneSelectorBox[{False -> GridBox[{{
             PaneBox[
              ButtonBox[
               DynamicBox[
                FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]], 
               ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
               BaseStyle -> {}, Evaluator -> Automatic, Method -> 
               "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
              Dynamic[{
                Automatic, 
                 3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                  Magnification])}]], 
             GraphicsBox[{
               Thickness[0.05], {
                FaceForm[{
                  RGBColor[1., 1., 1.], 
                  Opacity[1.]}], 
                
                FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                  3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 
                  0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {
                  1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3,
                   3}, {0, 1, 0}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                  3}}, {{1, 4, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                  0}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {
                  1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3,
                   3}, {1, 3, 3}}}, {{{7.5718000000000005`, 17.7334}, {7.0998,
                   17.7334}, {6.7168, 17.342399999999998`}, {6.7168, 
                  16.8624}, {6.7168, 16.3854}, {7.0998, 
                  15.997399999999999`}, {7.5718000000000005`, 
                  15.997399999999999`}, {8.043800000000001, 
                  15.997399999999999`}, {8.4268, 16.3854}, {8.4268, 
                  16.8624}, {8.4268, 17.342399999999998`}, {8.043800000000001,
                   17.7334}, {7.5718000000000005`, 17.7334}}, CompressedData["

1:eJxTTMoPSmViYGBQAWIQvXD12hvxZbwODSxH+w2/izl86QsuUZnOAuezVHCr
aNT9se+5ncGQzyjl8EZ2+QsPve/2X6bfndzeKu/Qst2h6dHxD/ZfvSLbLMSU
4fz1U1I7kmVV4erNVtuFRxdqOCRs3P9mns0fe98WXv/1ItoOR9qWh58yYnP4
+AVowA4dh6z8D60nQwTg/EsTY/45/1KG87O1v02/K6zi8O7kYae1L3UdBLi3
Lqs8Lubw+zRQhEnPwdnuxc01v8QcGtQOtS2fbgDng2w5ctHQgc1E0MzGVsLB
+wS77exSIwfP/bWyFunyDs2BnnMbjhk5+CzjclP9quCwVMdZ5vUjI4cJhuW6
ivFKDqbvLVzdPxk5JIYEqS84qezgLyeW5fvZyGHaJp7CNacRfAOQAamqcD63
m2op0y01h3aQA54YOZx6ar/kvp0G3D4rZa/q5vVaEPMnQe0v1XG4bgIUWG4I
58P8A+M/mCO4dC+jJpy/M5vz54Llag73gLESNVkLEm/7VBwOWgItcNaA86PE
t19kiJOH80OmKfaVFkrC+ZbpLpn5BSIOx3JNGrY7KMH5UZf3PBaZKwfnw9IH
AO506oE=
                  "], {{12.401800000000001`, 4.1044}, {11.9298, 4.1044}, {
                  11.5458, 3.7164}, {11.5458, 3.2394}, {11.5458, 
                  2.7593999999999994`}, {11.9298, 2.369399999999999}, {
                  12.401800000000001`, 2.369399999999999}, {
                  12.872800000000002`, 2.369399999999999}, {13.2568, 
                  2.7593999999999994`}, {13.2568, 3.2394}, {13.2568, 
                  3.7164}, {12.872800000000002`, 4.1044}, {
                  12.401800000000001`, 4.1044}}, CompressedData["
1:eJxTTMoPSmViYGBQAWIQ/Uei+LrQJ2UHhUNty8NPfbBfaXrW2m+iEpyvdVrg
+C4LRYcC3899wSWf7M+tOn81LEfe4cBGvbzFjN/sb635FZPrKuPgUPST/+X2
n/bOdi9urvkl5sARP8NHtIfRAcY/smKJn4MwD5y/aIv5j0MpcnB+rknDdocm
RQepRxHi2y9KOeyeNoG/qkzZIQrIY4iTh/MPWip7VTtrwPkuv96+PmCpDedf
mhjzz3mXroPFtaO5JgxqcP6DOYJL9zJqwvldfU8+yV/ScWBbPMmKMdfA4eMX
r8i2HToOE/mrzFbXGcL5GnU9O7M1jRympHYkx8ZoO9z8AJIwcjBbbRceXajh
0Pzo+Izd34wc3p087LT2pQqcL7R070HxNCWH+TY6V2YB1SeEBKkv6JR3kKlJ
NAoVAKo/APTIb0kHkDMbphs6NLAc7Tf8LgZ3D4wPdu8vZTgfSJbrPlR2WNC5
4eHLqSIOz+yX3N/Xp+OQF1a7bluSiIPPMi431VIdeHjD+CLAYLzHxOQwi0N6
XpymlsMFzgylnIpf9lURK4AxrgGPT3B47lRzWNAU6Dm34ZP94ZRVQKerwtMD
enoBAPI7A7I=
                  "]}]}, {
                FaceForm[{
                  RGBColor[0.20800000000000002`, 0.514, 0.6859999999999999], 
                  Opacity[1.]}], 
                
                FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                  3}}, {{1, 4, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                  0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                  0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1,
                   0}, {1, 3, 3}, {1, 3, 3}}}, {{{7.5718000000000005`, 
                  17.6836}, {8.014800000000001, 17.6836}, {8.3778, 17.3156}, {
                  8.3778, 16.862599999999997`}, {8.3778, 16.4116}, {
                  8.014800000000001, 16.046599999999998`}, {
                  7.5718000000000005`, 16.046599999999998`}, {7.1268, 
                  16.046599999999998`}, {6.7658000000000005`, 16.4116}, {
                  6.7658000000000005`, 16.862599999999997`}, {
                  6.7658000000000005`, 17.3156}, {7.1268, 17.6836}, {
                  7.5718000000000005`, 17.6836}}, CompressedData["
1:eJxTTMoPSmViYGBQBWIQnRgSpL7gpLLDYxHZk0//GzmYnbX2uxio5NBvWK6r
COQ7nU+7+vyVgsOa7tsZDO+NHKLEt19kiJN3EPMI+CNx2cgh6fBl7VRJCYd/
zr/evm4wchDg3rqs8riYQ2vU5T2PrxjC+XxzjBdtmW4A59fKWqS7vNR1uDQx
BqhVGYMPVKRpdUkHrh7Gb5l3dtX5UAE4v+gn/8vt69ng/DOHndZm3vttD+YH
aTt8OAkS+Gb/aUNA9qxyDQeec5KBt6Q/2N/XnbDgh6GqgwTQ2/ZL3tt77Ae6
QF0Zrv6Nhat7UaW8wxWXGx++eP223xet4PgxWcqBJ0Mpp6KK2aFlefgpoyNi
DgtXr70RX8YL5wcBbZmzSASDP2llU6DnXDk4/4fhs3WqKkoOb/V3q/N3Szq0
nQw5uGKJCjx8YfyDlspe1c4acL5XdbO+zzItOP+Z/ZL7+/p0HJR2/mn/MlsN
zgfybl9n1ITzYeEP4wNjvXPDQUOHa8+ztL9N13IARW/+QiO4fbD4haQPNYfO
DQ9fTv1k5NADUueoColvBmMH9PQDAFGHDrQ=
                  "]}]}, {
                FaceForm[{
                  RGBColor[0.976, 0.8430000000000001, 0.353], 
                  Opacity[1.]}], 
                
                FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                  3}}, {{0, 2, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                  0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {
                  0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3,
                   3}}}, {{{12.4014, 4.0552}, {12.846400000000001`, 4.0552}, {
                  13.2074, 3.6902}, {13.2074, 3.2392000000000003`}, {13.2074, 
                  2.7862}, {12.846400000000001`, 2.4182}, {12.4014, 2.4182}, {
                  11.958400000000001`, 2.4182}, {11.595400000000001`, 
                  2.7862}, {11.595400000000001`, 3.2392000000000003`}, {
                  11.595400000000001`, 3.6902}, {11.958400000000001`, 
                  4.0552}, {12.4014, 4.0552}}, CompressedData["
1:eJxTTMoPSmViYGBQBGIQ3bszm/PnAl2HgsWMe1gv6TjA+Ec26uUtZtSE819t
X8/8nEfNISJ64/43ctoOlq7uRT/7lR06k2PvuDlrwPkvs7S/TY+Vh/MvpF19
nrVaCs6fH6d5WuC4mMNLkHk9inB+1r3Crr4UOTi/LerynsciPAh5hvxGlqNM
Dr8OpaxKuCLlcO96Y7HblF/2MPtesZgImtl8tde5MuuZbLqSw52tLTUXNr+1
/3363cnDTKoOCo4fk8/EvraHuRem3j4c6KEcLQel5HdRTna/7Ndlghyi4zCL
Q3penCaTA4wPcw+Mn7H5VfHWqSIO6sGsiyf9UsbgG2itFL5wRAyuHsYH+zvH
AM6PATlsjSGcbwwKeGUjhzV2QIfZSzn8sSo41zHJyKGuBxgRlfIOGUo5FVWs
xg62s0Pnr85VcljVFOg5l8HYoX15+CkjFlW4+l23uv6mlms4/OIH2uhs5BAg
J5bl+1kLYj/QPlh8w9wD4wMA37PnHw==
                  "]}]}}, {
              ImageSize -> 
               Dynamic[{
                 Automatic, 
                  3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                   Magnification])}], AspectRatio -> Automatic, 
               ImageSize -> {20., 20.}, PlotRange -> {{0., 20.}, {0., 20.}}}], 
             GridBox[{{
                RowBox[{
                  TagBox["\"System: \"", "SummaryItemAnnotation"], 
                  "\[InvisibleSpace]", 
                  TagBox["\"Python\"", "SummaryItem"]}], 
                RowBox[{
                  TagBox["\"Arguments: \"", "SummaryItemAnnotation"], 
                  "\[InvisibleSpace]", 
                  TagBox[
                   RowBox[{"{", "}"}], "SummaryItem"]}], ""}, {
                RowBox[{
                  TagBox["\"IsModule: \"", "SummaryItemAnnotation"], 
                  "\[InvisibleSpace]", 
                  TagBox["False", "SummaryItem"]}], 
                RowBox[{
                  TagBox["\"Module: \"", "SummaryItemAnnotation"], 
                  "\[InvisibleSpace]", 
                  TagBox["\"hypernetx.classes.hypergraph\"", "SummaryItem"]}],
                 "\[SpanFromLeft]"}}, 
              GridBoxAlignment -> {
               "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
              False, GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              GridBoxSpacings -> {
               "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
              BaseStyle -> {
               ShowStringCharacters -> False, NumberMarks -> False, 
                PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
           AutoDelete -> False, 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
           BaselinePosition -> {1, 1}], True -> GridBox[{{
             PaneBox[
              ButtonBox[
               DynamicBox[
                FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]], 
               ButtonFunction :> (Typeset`open$$ = False), Appearance -> None,
                BaseStyle -> {}, Evaluator -> Automatic, Method -> 
               "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
              Dynamic[{
                Automatic, 
                 3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                  Magnification])}]], 
             GraphicsBox[{
               Thickness[0.05], {
                FaceForm[{
                  RGBColor[1., 1., 1.], 
                  Opacity[1.]}], 
                
                FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                  3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 
                  0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {
                  1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3,
                   3}, {0, 1, 0}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                  3}}, {{1, 4, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                  0}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {
                  1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3,
                   3}, {1, 3, 3}}}, {{{7.5718000000000005`, 17.7334}, {7.0998,
                   17.7334}, {6.7168, 17.342399999999998`}, {6.7168, 
                  16.8624}, {6.7168, 16.3854}, {7.0998, 
                  15.997399999999999`}, {7.5718000000000005`, 
                  15.997399999999999`}, {8.043800000000001, 
                  15.997399999999999`}, {8.4268, 16.3854}, {8.4268, 
                  16.8624}, {8.4268, 17.342399999999998`}, {8.043800000000001,
                   17.7334}, {7.5718000000000005`, 17.7334}}, CompressedData["

1:eJxTTMoPSmViYGBQAWIQvXD12hvxZbwODSxH+w2/izl86QsuUZnOAuezVHCr
aNT9se+5ncGQzyjl8EZ2+QsPve/2X6bfndzeKu/Qst2h6dHxD/ZfvSLbLMSU
4fz1U1I7kmVV4erNVtuFRxdqOCRs3P9mns0fe98WXv/1ItoOR9qWh58yYnP4
+AVowA4dh6z8D60nQwTg/EsTY/45/1KG87O1v02/K6zi8O7kYae1L3UdBLi3
Lqs8Lubw+zRQhEnPwdnuxc01v8QcGtQOtS2fbgDng2w5ctHQgc1E0MzGVsLB
+wS77exSIwfP/bWyFunyDs2BnnMbjhk5+CzjclP9quCwVMdZ5vUjI4cJhuW6
ivFKDqbvLVzdPxk5JIYEqS84qezgLyeW5fvZyGHaJp7CNacRfAOQAamqcD63
m2op0y01h3aQA54YOZx6ar/kvp0G3D4rZa/q5vVaEPMnQe0v1XG4bgIUWG4I
58P8A+M/mCO4dC+jJpy/M5vz54Llag73gLESNVkLEm/7VBwOWgItcNaA86PE
t19kiJOH80OmKfaVFkrC+ZbpLpn5BSIOx3JNGrY7KMH5UZf3PBaZKwfnw9IH
AO506oE=
                  "], {{12.401800000000001`, 4.1044}, {11.9298, 4.1044}, {
                  11.5458, 3.7164}, {11.5458, 3.2394}, {11.5458, 
                  2.7593999999999994`}, {11.9298, 2.369399999999999}, {
                  12.401800000000001`, 2.369399999999999}, {
                  12.872800000000002`, 2.369399999999999}, {13.2568, 
                  2.7593999999999994`}, {13.2568, 3.2394}, {13.2568, 
                  3.7164}, {12.872800000000002`, 4.1044}, {
                  12.401800000000001`, 4.1044}}, CompressedData["
1:eJxTTMoPSmViYGBQAWIQ/Uei+LrQJ2UHhUNty8NPfbBfaXrW2m+iEpyvdVrg
+C4LRYcC3899wSWf7M+tOn81LEfe4cBGvbzFjN/sb635FZPrKuPgUPST/+X2
n/bOdi9urvkl5sARP8NHtIfRAcY/smKJn4MwD5y/aIv5j0MpcnB+rknDdocm
RQepRxHi2y9KOeyeNoG/qkzZIQrIY4iTh/MPWip7VTtrwPkuv96+PmCpDedf
mhjzz3mXroPFtaO5JgxqcP6DOYJL9zJqwvldfU8+yV/ScWBbPMmKMdfA4eMX
r8i2HToOE/mrzFbXGcL5GnU9O7M1jRympHYkx8ZoO9z8AJIwcjBbbRceXajh
0Pzo+Izd34wc3p087LT2pQqcL7R070HxNCWH+TY6V2YB1SeEBKkv6JR3kKlJ
NAoVAKo/APTIb0kHkDMbphs6NLAc7Tf8LgZ3D4wPdu8vZTgfSJbrPlR2WNC5
4eHLqSIOz+yX3N/Xp+OQF1a7bluSiIPPMi431VIdeHjD+CLAYLzHxOQwi0N6
XpymlsMFzgylnIpf9lURK4AxrgGPT3B47lRzWNAU6Dm34ZP94ZRVQKerwtMD
enoBAPI7A7I=
                  "]}]}, {
                FaceForm[{
                  RGBColor[0.20800000000000002`, 0.514, 0.6859999999999999], 
                  Opacity[1.]}], 
                
                FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                  3}}, {{1, 4, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                  0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                  0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1,
                   0}, {1, 3, 3}, {1, 3, 3}}}, {{{7.5718000000000005`, 
                  17.6836}, {8.014800000000001, 17.6836}, {8.3778, 17.3156}, {
                  8.3778, 16.862599999999997`}, {8.3778, 16.4116}, {
                  8.014800000000001, 16.046599999999998`}, {
                  7.5718000000000005`, 16.046599999999998`}, {7.1268, 
                  16.046599999999998`}, {6.7658000000000005`, 16.4116}, {
                  6.7658000000000005`, 16.862599999999997`}, {
                  6.7658000000000005`, 17.3156}, {7.1268, 17.6836}, {
                  7.5718000000000005`, 17.6836}}, CompressedData["
1:eJxTTMoPSmViYGBQBWIQnRgSpL7gpLLDYxHZk0//GzmYnbX2uxio5NBvWK6r
COQ7nU+7+vyVgsOa7tsZDO+NHKLEt19kiJN3EPMI+CNx2cgh6fBl7VRJCYd/
zr/evm4wchDg3rqs8riYQ2vU5T2PrxjC+XxzjBdtmW4A59fKWqS7vNR1uDQx
BqhVGYMPVKRpdUkHrh7Gb5l3dtX5UAE4v+gn/8vt69ng/DOHndZm3vttD+YH
aTt8OAkS+Gb/aUNA9qxyDQeec5KBt6Q/2N/XnbDgh6GqgwTQ2/ZL3tt77Ae6
QF0Zrv6Nhat7UaW8wxWXGx++eP223xet4PgxWcqBJ0Mpp6KK2aFlefgpoyNi
DgtXr70RX8YL5wcBbZmzSASDP2llU6DnXDk4/4fhs3WqKkoOb/V3q/N3Szq0
nQw5uGKJCjx8YfyDlspe1c4acL5XdbO+zzItOP+Z/ZL7+/p0HJR2/mn/MlsN
zgfybl9n1ITzYeEP4wNjvXPDQUOHa8+ztL9N13IARW/+QiO4fbD4haQPNYfO
DQ9fTv1k5NADUueoColvBmMH9PQDAFGHDrQ=
                  "]}]}, {
                FaceForm[{
                  RGBColor[0.976, 0.8430000000000001, 0.353], 
                  Opacity[1.]}], 
                
                FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                  3}}, {{0, 2, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                  0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {
                  0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3,
                   3}}}, {{{12.4014, 4.0552}, {12.846400000000001`, 4.0552}, {
                  13.2074, 3.6902}, {13.2074, 3.2392000000000003`}, {13.2074, 
                  2.7862}, {12.846400000000001`, 2.4182}, {12.4014, 2.4182}, {
                  11.958400000000001`, 2.4182}, {11.595400000000001`, 
                  2.7862}, {11.595400000000001`, 3.2392000000000003`}, {
                  11.595400000000001`, 3.6902}, {11.958400000000001`, 
                  4.0552}, {12.4014, 4.0552}}, CompressedData["
1:eJxTTMoPSmViYGBQBGIQ3bszm/PnAl2HgsWMe1gv6TjA+Ec26uUtZtSE819t
X8/8nEfNISJ64/43ctoOlq7uRT/7lR06k2PvuDlrwPkvs7S/TY+Vh/MvpF19
nrVaCs6fH6d5WuC4mMNLkHk9inB+1r3Crr4UOTi/LerynsciPAh5hvxGlqNM
Dr8OpaxKuCLlcO96Y7HblF/2MPtesZgImtl8tde5MuuZbLqSw52tLTUXNr+1
/3363cnDTKoOCo4fk8/EvraHuRem3j4c6KEcLQel5HdRTna/7Ndlghyi4zCL
Q3penCaTA4wPcw+Mn7H5VfHWqSIO6sGsiyf9UsbgG2itFL5wRAyuHsYH+zvH
AM6PATlsjSGcbwwKeGUjhzV2QIfZSzn8sSo41zHJyKGuBxgRlfIOGUo5FVWs
xg62s0Pnr85VcljVFOg5l8HYoX15+CkjFlW4+l23uv6mlms4/OIH2uhs5BAg
J5bl+1kLYj/QPlh8w9wD4wMA37PnHw==
                  "]}]}}, {
              ImageSize -> 
               Dynamic[{
                 Automatic, 
                  3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                   Magnification])}], AspectRatio -> Automatic, 
               ImageSize -> {20., 20.}, PlotRange -> {{0., 20.}, {0., 20.}}}], 
             GridBox[{{
                RowBox[{
                  TagBox["\"System: \"", "SummaryItemAnnotation"], 
                  "\[InvisibleSpace]", 
                  TagBox["\"Python\"", "SummaryItem"]}]}, {
                RowBox[{
                  TagBox["\"Arguments: \"", "SummaryItemAnnotation"], 
                  "\[InvisibleSpace]", 
                  TagBox[
                   RowBox[{"{", "}"}], "SummaryItem"]}]}, {
                RowBox[{
                  TagBox["\"IsModule: \"", "SummaryItemAnnotation"], 
                  "\[InvisibleSpace]", 
                  TagBox["False", "SummaryItem"]}]}, {
                RowBox[{
                  TagBox["\"Module: \"", "SummaryItemAnnotation"], 
                  "\[InvisibleSpace]", 
                  TagBox[
                  "\"hypernetx.classes.hypergraph\"", "SummaryItem"]}]}, {
                RowBox[{
                  TagBox["\"IsClass: \"", "SummaryItemAnnotation"], 
                  "\[InvisibleSpace]", 
                  TagBox["True", "SummaryItem"]}]}, {
                RowBox[{
                  TagBox["\"IsFunction: \"", "SummaryItemAnnotation"], 
                  "\[InvisibleSpace]", 
                  TagBox["False", "SummaryItem"]}]}, {
                RowBox[{
                  TagBox["\"IsMethod: \"", "SummaryItemAnnotation"], 
                  "\[InvisibleSpace]", 
                  TagBox["False", "SummaryItem"]}]}, {
                RowBox[{
                  TagBox["\"IsCallable: \"", "SummaryItemAnnotation"], 
                  "\[InvisibleSpace]", 
                  TagBox["True", "SummaryItem"]}]}, {
                RowBox[{
                  TagBox["\"Status: \"", "SummaryItemAnnotation"], 
                  "\[InvisibleSpace]", 
                  TagBox["\"Evaluated\"", "SummaryItem"]}]}}, 
              GridBoxAlignment -> {
               "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
              False, GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              GridBoxSpacings -> {
               "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
              BaseStyle -> {
               ShowStringCharacters -> False, NumberMarks -> False, 
                PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
           AutoDelete -> False, 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
           BaselinePosition -> {1, 1}]}, 
        Dynamic[Typeset`open$$], ImageSize -> Automatic]},
      "SummaryPanel"],
     DynamicModuleValues:>{}], "]"}],
   ExternalObject[
    ExternalSessionObject["a426de7f-1f22-40f5-b5ee-069972b9a733"], 
    ExternalEvaluate`RPC["GetReference", 5067454304], <|
    "Arguments" -> {}, "IsModule" -> False, "Module" -> 
     "hypernetx.classes.hypergraph", "IsClass" -> True, "IsFunction" -> False,
      "IsMethod" -> False, "IsCallable" -> True|>],
   Editable->False,
   SelectWithContents->True,
   Selectable->False], "[", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", "2"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"1", ",", "2"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"1", ",", "2", ",", "3"}], "}"}]}], "}"}], "]"}]], "Output",
 CellChangeTimes->{3.924616804650752*^9},
 CellLabel->"Out[15]=",ExpressionUUID->"a5c17cf6-e38b-48c7-b17d-c1f6b879e0f8"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"ExternalEvaluate", "[", 
  RowBox[{"session", ",", 
   RowBox[{"<|", 
    RowBox[{
     RowBox[{"\"\<Command\>\"", "->", "\"\<hypernetx.Hypergraph\>\""}], ",", 
     RowBox[{"\"\<ReturnType\>\"", "->", "\"\<ExternalObject\>\""}]}], 
    "|>"}]}], "]"}]], "Input",ExpressionUUID->"af92d578-9a5d-4fd0-9825-\
d347554c6a3b"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"hg", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "2"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "2"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "2", ",", "3"}], "}"}]}], "}"}], ",", 
   RowBox[{"\"\<ReturnType\>\"", "->", "\"\<ExternalObject\>\""}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.924616665234289*^9, 3.924616692698763*^9}},
 CellLabel->"In[13]:=",ExpressionUUID->"4a7b43e3-6e9c-468a-a51c-7cfeff531b4f"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", "2", ",", "3"}], "}"}]], "Output",
 CellChangeTimes->{3.924616693313018*^9},
 CellLabel->"Out[13]=",ExpressionUUID->"bfe458b5-a93e-4a42-b316-22026470117e"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"hg", "[", 
  RowBox[{"\"\<Call\>\"", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "2"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "2"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "2", ",", "3"}], "}"}]}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.9246135221451387`*^9, 3.9246135321920767`*^9}},
 CellLabel->"In[31]:=",ExpressionUUID->"a31698f2-2a22-4f93-be0f-b59014229abc"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["Failure",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            FrameBox[
             StyleBox["\"\[WarningSign]\"", 
              Directive["Message", 35], StripOnInput -> False], 
             ContentPadding -> False, FrameStyle -> None, 
             FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
            GridBox[{{
               TagBox[
                GridBox[{{
                   TagBox["\"Message: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                   "\"Cannot subset columns with a tuple with more than one \
element. Use a list instead.\"", "SummaryItem"]}}, 
                 GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                 GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                 GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}, {
               TagBox[
                GridBox[{{
                   TagBox["\"Tag: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["\"PythonError\"", "SummaryItem"]}}, 
                 GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                 GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                 GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            FrameBox[
             StyleBox["\"\[WarningSign]\"", 
              Directive["Message", 35], StripOnInput -> False], 
             ContentPadding -> False, FrameStyle -> None, 
             FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
            GridBox[{{
               TagBox[
                GridBox[{{
                   TagBox["\"Message: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                   "\"Cannot subset columns with a tuple with more than one \
element. Use a list instead.\"", "SummaryItem"]}}, 
                 GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                 GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                 GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}, {
               TagBox[
                GridBox[{{
                   TagBox["\"Tag: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["\"PythonError\"", "SummaryItem"]}}, 
                 GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                 GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                 GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}, {
               RowBox[{
                 TagBox[
                  TemplateBox[{"\"FailureCode\"", "\": \""}, "RowDefault"], 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox[
                  TagBox["\"ValueError\"", HoldForm], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                  TemplateBox[{"\"Traceback\"", "\": \""}, "RowDefault"], 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   TagBox[
                    DynamicModuleBox[{Typeset`var$$ = True}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    
                    TemplateBox[{
                    "\"ValueError\"", "\" \"", 
                    "\"Cannot subset columns with a tuple with more than one \
element. Use a list instead.\""}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    
                    TemplateBox[{
                    "\"ValueError\"", "\" \"", 
                    "\"Cannot subset columns with a tuple with more than one \
element. Use a list instead.\""}, "RowDefault"]}, {"", 
                    PaneBox[
                    StyleBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/language/\
decorators.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/language/\
decorators.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/language/\
decorators.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"safe_wl_execute\""}, 
                    "RowDefault"]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/language/\
decorators.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/language/\
decorators.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/language/\
decorators.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"safe_wl_execute\""}, 
                    "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{
                    "\"  14.      \\\"wl\\\": \
b'Failure[\\\"PythonFailure\\\", <|\\\"MessageTemplate\\\" -> \\\"Unexpected \
error occurred.\\\"|>]',\""}, {"\"  15.  }\""}, {"\"  16.  \""}, {
                    "\"  17.  \""}, {
                    "\"  18.  def safe_wl_execute(function, args=(), opts={}, \
export_opts={}, exception_class=None):\""}, {"\"  19.  \""}, {
                    "\"  20.      try:\""}, {
                    ItemBox[
                    "\"  21.          return export(function(*args, **opts), \
**export_opts)\"", Background -> RGBColor[1, 1, 0.85], StripOnInput -> 
                    False]}, {
                    "\"  22.      except Exception as export_exception:\""}, {
                    "\"  23.          try:\""}, {
                    "\"  24.              try:\""}, {"\"  25.  \""}, {
                    "\"  26.                  # The user can provide an \
exception class, and it can be broken, in which case we are running \
another\""}, {
                    "\"  27.                  # try / except to return errors \
that are happening during class serialization\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\"function\"", 
                    "\"<function handle_message at 0x1068b7560>\""}, {
                    "\"args\"", 
                    "\"(<zmq.Socket(zmq.PAIR) at 0x106891240>,)\""}, {
                    "\"opts\"", 
                    "\"{'consumer': <ExternalEvaluateConsumer globals=5 \
objects=1>}\""}, {"\"export_opts\"", 
                    "\"{'object_processor': <function \
start_zmq_loop.<locals>.<lambda> at 0x105b189a0>, 'target_format': \
'wxf'}\""}, {"\"exception_class\"", "\"None\""}, {"\"export_exception\"", 
                    "\"Cannot subset columns with a tuple with more than one \
element. Use a list instead.\""}}, GridBoxAlignment -> {"Columns" -> {{
                    Left}}}, AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Null}}, "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"function", 
                    "<function handle_message at 0x1068b7560>"}, {
                    "args", "(<zmq.Socket(zmq.PAIR) at 0x106891240>,)"}, {
                    "opts", 
                    "{'consumer': <ExternalEvaluateConsumer globals=5 \
objects=1>}"}, {"export_opts", 
                    "{'object_processor': <function \
start_zmq_loop.<locals>.<lambda> at 0x105b189a0>, 'target_format': 'wxf'}"}, {
                    "exception_class", "None"}, {"export_exception", 
                    "Cannot subset columns with a tuple with more than one \
element. Use a list instead."}}, Background -> {Null, {LightGray}}, Alignment -> 
                    Left, Frame -> LightGray]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/language/\
decorators.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/language/\
decorators.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/language/\
decorators.py"]], Appearance -> "Frameless"], " in ", "safe_wl_execute"}], 
                    Column[{
                    
                    Column[{
                    "  14.      \"wl\": b'Failure[\"PythonFailure\", \
<|\"MessageTemplate\" -> \"Unexpected error occurred.\"|>]',", "  15.  }", 
                    "  16.  ", "  17.  ", 
                    "  18.  def safe_wl_execute(function, args=(), opts={}, \
export_opts={}, exception_class=None):", "  19.  ", "  20.      try:", 
                    Item[
                    "  21.          return export(function(*args, **opts), \
**export_opts)", Background -> LightYellow], 
                    "  22.      except Exception as export_exception:", 
                    "  23.          try:", "  24.              try:", 
                    "  25.  ", 
                    "  26.                  # The user can provide an \
exception class, and it can be broken, in which case we are running another", 
                    "  27.                  # try / except to return errors \
that are happening during class serialization"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"function", 
                    "<function handle_message at 0x1068b7560>"}, {
                    "args", "(<zmq.Socket(zmq.PAIR) at 0x106891240>,)"}, {
                    "opts", 
                    "{'consumer': <ExternalEvaluateConsumer globals=5 \
objects=1>}"}, {"export_opts", 
                    "{'object_processor': <function \
start_zmq_loop.<locals>.<lambda> at 0x105b189a0>, 'target_format': 'wxf'}"}, {
                    "exception_class", "None"}, {
                    "export_exception", 
                    "Cannot subset columns with a tuple with more than one \
element. Use a list instead."}}, Background -> {Null, {LightGray}}, Alignment -> 
                    Left, Frame -> LightGray]}]}]}, False]], 
                    DynamicModuleValues -> Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless", Evaluator -> Automatic, 
                    Method -> "Preemptive"], "\" in \"", 
                    "\"handle_message\""}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless", Evaluator -> Automatic, 
                    Method -> "Preemptive"], "\" in \"", 
                    "\"handle_message\""}, "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{
                    "\" 393.          self.socket.send(zmq.Frame(bytes))\""}, \
{"\" 394.  \""}, {"\" 395.      def send_side_effect(self, expr):\""}, {
                    "\" 396.          \
self.write(export(self.keep_listening(expr), target_format=\\\"wxf\\\"))\""}, \
{"\" 397.  \""}, {"\" 398.  \""}, {
                    "\" 399.  def handle_message(socket, consumer):\""}, {
                    ItemBox[
                    "\" 400.      result = \
binary_deserialize(socket.recv(copy=False).buffer, consumer=consumer)\"", 
                    Background -> RGBColor[1, 1, 0.85], StripOnInput -> 
                    False]}, {"\" 401.  \""}, {
                    "\" 402.      sys.stdout.flush()\""}, {
                    "\" 403.      return result\""}, {"\" 404.  \""}, {
                    "\" 405.  \""}, {
                    "\" 406.  def start_zmq_instance(port=None, \
write_to_stdout=True, **opts):\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\"socket\"", 
                    "\"<zmq.Socket(zmq.PAIR) at 0x106891240>\""}, {
                    "\"consumer\"", 
                    "\"<ExternalEvaluateConsumer globals=5 objects=1>\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Null}}, 
                    "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"socket", 
                    "<zmq.Socket(zmq.PAIR) at 0x106891240>"}, {
                    "consumer", 
                    "<ExternalEvaluateConsumer globals=5 objects=1>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless"], " in ", 
                    "handle_message"}], 
                    Column[{
                    
                    Column[{
                    " 393.          self.socket.send(zmq.Frame(bytes))", 
                    " 394.  ", " 395.      def send_side_effect(self, expr):",
                     " 396.          \
self.write(export(self.keep_listening(expr), target_format=\"wxf\"))", 
                    " 397.  ", " 398.  ", 
                    " 399.  def handle_message(socket, consumer):", 
                    Item[
                    " 400.      result = \
binary_deserialize(socket.recv(copy=False).buffer, consumer=consumer)", 
                    Background -> LightYellow], " 401.  ", 
                    " 402.      sys.stdout.flush()", 
                    " 403.      return result", " 404.  ", " 405.  ", 
                    " 406.  def start_zmq_instance(port=None, \
write_to_stdout=True, **opts):"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"socket", 
                    "<zmq.Socket(zmq.PAIR) at 0x106891240>"}, {
                    "consumer", 
                    "<ExternalEvaluateConsumer globals=5 objects=1>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
__init__.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
__init__.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
__init__.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"binary_deserialize\""}, 
                    "RowDefault"]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
__init__.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
__init__.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
__init__.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"binary_deserialize\""}, 
                    "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{"\"  33.  \""}, {
                    "\"  34.      \\\"\\\"\\\"\""}, {
                    "\"  35.      parser = WXFParser(wxf_input)\""}, {
                    "\"  36.      if consumer is None:\""}, {
                    "\"  37.          consumer = WXFConsumerNumpy()\""}, {
                    "\"  38.  \""}, {"\"  39.      try:\""}, {
                    ItemBox[
                    "\"  40.          o = \
consumer.next_expression(parser.tokens(), **kwargs)\"", Background -> 
                    RGBColor[1, 1, 0.85], StripOnInput -> False]}, {
                    "\"  41.      except StopIteration:\""}, {
                    "\"  42.          raise WolframParserException(\""}, {
                    "\"  43.              \\\"Input data does not represent a \
valid expression in WXF format. Expecting more input data.\\\"\""}, {
                    "\"  44.          )\""}, {
                    "\"  45.      if not \
parser.context.is_valid_final_state():\""}, {
                    "\"  46.          raise WolframParserException(\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\"wxf_input\"", 
                    "\"8:f\.03s0ExternalEvaluate`Private`\
ExternalEvaluateCommandS\\nReturnTypef\.04s0ExternalEvaluate`Private`\
ExternalEvaluateCommandS\.04Callf\.02s0ExternalEvaluate`Private`\
ExternalEvaluateCommandS\\fGetReferenceLp3\.01\.00\.00\.00S\.04Callf\.03s\.04\
Listf\.02s\.04ListC\.01C\.02f\.02s\.04ListC\.01C\.02f\.03s\.04ListC\.01C\.02C\
\.03S\\nExpression\""}, {"\"consumer\"", 
                    "\"<ExternalEvaluateConsumer globals=5 objects=1>\""}, {
                    "\"kwargs\"", "\"{}\""}, {"\"parser\"", 
                    "\"<wolframclient.deserializers.wxf.wxfparser.WXFParser \
object at 0x1692e6190>\""}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {"Columns" -> {{
                    Null}}, "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"wxf_input", 
                    "8:f\.03s0ExternalEvaluate`Private`\
ExternalEvaluateCommandS\n\
ReturnTypef\.04s0ExternalEvaluate`Private`ExternalEvaluateCommandS\.04Callf\
\.02s0ExternalEvaluate`Private`ExternalEvaluateCommandS\.0cGetReferenceLp3\.01\
\.00\.00\.00S\.04Callf\.03s\.04Listf\.02s\.04ListC\.01C\.02f\.02s\.04ListC\.01\
C\.02f\.03s\.04ListC\.01C\.02C\.03S\nExpression"}, {"consumer", 
                    "<ExternalEvaluateConsumer globals=5 objects=1>"}, {
                    "kwargs", "{}"}, {"parser", 
                    "<wolframclient.deserializers.wxf.wxfparser.WXFParser \
object at 0x1692e6190>"}}, Background -> {Null, {LightGray}}, Alignment -> 
                    Left, Frame -> LightGray]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
__init__.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
__init__.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
__init__.py"]], Appearance -> "Frameless"], " in ", "binary_deserialize"}], 
                    Column[{
                    
                    Column[{"  33.  ", "  34.      \"\"\"", 
                    "  35.      parser = WXFParser(wxf_input)", 
                    "  36.      if consumer is None:", 
                    "  37.          consumer = WXFConsumerNumpy()", "  38.  ",
                     "  39.      try:", 
                    Item[
                    "  40.          o = \
consumer.next_expression(parser.tokens(), **kwargs)", Background -> 
                    LightYellow], "  41.      except StopIteration:", 
                    "  42.          raise WolframParserException(", 
                    "  43.              \"Input data does not represent a \
valid expression in WXF format. Expecting more input data.\"", 
                    "  44.          )", 
                    "  45.      if not \
parser.context.is_valid_final_state():", 
                    "  46.          raise WolframParserException("}, 
                    Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"wxf_input", 
                    "8:f\.03s0ExternalEvaluate`Private`\
ExternalEvaluateCommandS\n\
ReturnTypef\.04s0ExternalEvaluate`Private`ExternalEvaluateCommandS\.04Callf\
\.02s0ExternalEvaluate`Private`ExternalEvaluateCommandS\.0cGetReferenceLp3\.01\
\.00\.00\.00S\.04Callf\.03s\.04Listf\.02s\.04ListC\.01C\.02f\.02s\.04ListC\.01\
C\.02f\.03s\.04ListC\.01C\.02C\.03S\nExpression"}, {
                    "consumer", 
                    "<ExternalEvaluateConsumer globals=5 objects=1>"}, {
                    "kwargs", "{}"}, {"parser", 
                    "<wolframclient.deserializers.wxf.wxfparser.WXFParser \
object at 0x1692e6190>"}}, Background -> {Null, {LightGray}}, Alignment -> 
                    Left, Frame -> LightGray]}]}]}, False]], 
                    DynamicModuleValues -> Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"next_expression\""}, 
                    "RowDefault"]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"next_expression\""}, 
                    "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{
                    "\"  69.          constants.WXF_CONSTANTS.RuleDelayed: \\\
\"consume_rule_delayed\\\",\""}, {"\"  70.      }\""}, {"\"  71.  \""}, {
                    "\"  72.      def next_expression(self, tokens, \
**kwargs):\""}, {
                    "\"  73.          \\\"\\\"\\\"Deserialize the next \
expression starting at the next token yield by `tokens`.\\\"\\\"\\\"\""}, {
                    "\"  74.          token = next(tokens)\""}, {
                    "\"  75.          consumer = \
self._consumer_from_type(token.wxf_type)\""}, {
                    ItemBox[
                    "\"  76.          return consumer(token, tokens, \
**kwargs)\"", Background -> RGBColor[1, 1, 0.85], StripOnInput -> False]}, {
                    "\"  77.  \""}, {
                    "\"  78.      def _consumer_from_type(self, \
wxf_type):\""}, {"\"  79.          try:\""}, {
                    "\"  80.              func = self._mapping[wxf_type]\""}, \
{"\"  81.          except KeyError:\""}, {
                    "\"  82.              raise WolframParserException(\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\"self\"", 
                    "\"<ExternalEvaluateConsumer globals=5 objects=1>\""}, {
                    "\"tokens\"", 
                    "\"<generator object WXFParser.tokens at \
0x168ecae00>\""}, {"\"kwargs\"", "\"{}\""}, {"\"token\"", 
                    "\"WXFToken<b'f', data=None, len=3>\""}, {"\"consumer\"", 
                    "\"<bound method \
ExternalEvaluateConsumer.consume_function of <ExternalEvaluateConsumer \
globals=5 objects=1>>\""}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {"Columns" -> {{
                    Null}}, "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<ExternalEvaluateConsumer globals=5 objects=1>"}, {
                    "tokens", 
                    "<generator object WXFParser.tokens at 0x168ecae00>"}, {
                    "kwargs", "{}"}, {"token", 
                    "WXFToken<b'f', data=None, len=3>"}, {
                    "consumer", 
                    "<bound method ExternalEvaluateConsumer.consume_function \
of <ExternalEvaluateConsumer globals=5 objects=1>>"}}, Background -> {
                    Null, {LightGray}}, Alignment -> Left, Frame -> 
                    LightGray]}, False]], DynamicModuleValues -> Automatic], 
                    Setting[#, {0}]& ]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless"], " in ", "next_expression"}], 
                    Column[{
                    
                    Column[{
                    "  69.          constants.WXF_CONSTANTS.RuleDelayed: \
\"consume_rule_delayed\",", "  70.      }", "  71.  ", 
                    "  72.      def next_expression(self, tokens, **kwargs):",
                     "  73.          \"\"\"Deserialize the next expression \
starting at the next token yield by `tokens`.\"\"\"", 
                    "  74.          token = next(tokens)", 
                    "  75.          consumer = \
self._consumer_from_type(token.wxf_type)", 
                    Item[
                    "  76.          return consumer(token, tokens, **kwargs)",
                     Background -> LightYellow], "  77.  ", 
                    "  78.      def _consumer_from_type(self, wxf_type):", 
                    "  79.          try:", 
                    "  80.              func = self._mapping[wxf_type]", 
                    "  81.          except KeyError:", 
                    "  82.              raise WolframParserException("}, 
                    Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<ExternalEvaluateConsumer globals=5 objects=1>"}, {
                    "tokens", 
                    "<generator object WXFParser.tokens at 0x168ecae00>"}, {
                    "kwargs", "{}"}, {"token", 
                    "WXFToken<b'f', data=None, len=3>"}, {
                    "consumer", 
                    "<bound method ExternalEvaluateConsumer.consume_function \
of <ExternalEvaluateConsumer globals=5 objects=1>>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless", Evaluator -> Automatic, 
                    Method -> "Preemptive"], "\" in \"", 
                    "\"consume_function\""}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless", Evaluator -> Automatic, 
                    Method -> "Preemptive"], "\" in \"", 
                    "\"consume_function\""}, "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{"\" 362.  \""}, {
                    "\" 363.      def __init__(self, routes_registry={}, \
objects_registry={}, globals_registry={}):\""}, {
                    "\" 364.          self.objects_registry = \
registry(objects_registry)\""}, {
                    "\" 365.          self.globals_registry = \
registry(globals_registry)\""}, {
                    "\" 366.          self.routes_registry = \
registry(self.builtin_routes, **routes_registry)\""}, {"\" 367.  \""}, {
                    "\" 368.      def consume_function(self, *args, \
**kwargs):\""}, {
                    ItemBox[
                    "\" 369.          expr = super().consume_function(*args, \
**kwargs)\"", Background -> RGBColor[1, 1, 0.85], StripOnInput -> False]}, {
                    "\" 370.  \""}, {
                    "\" 371.          if check_wl_symbol(expr, \
self.hook_symbol):\""}, {
                    "\" 372.              assert len(expr.args) >= 1\""}, {
                    "\" 373.              return \
self.dispatch_wl_object(*expr.args)\""}, {"\" 374.  \""}, {
                    "\" 375.          return expr\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\"self\"", 
                    "\"<ExternalEvaluateConsumer globals=5 objects=1>\""}, {
                    "\"args\"", 
                    "\"(<wolframclient.deserializers.wxf.wxfparser.WXFToken \
object at 0x168f25fd0>, <generator object WXFParser.tokens at \
0x168ecae00>)\""}, {"\"kwargs\"", "\"{}\""}, {"\"__class__\"", 
                    "\"<class \
'wolframclient.utils.externalevaluate.ExternalEvaluateConsumer'>\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Null}}, 
                    "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<ExternalEvaluateConsumer globals=5 objects=1>"}, {
                    "args", 
                    "(<wolframclient.deserializers.wxf.wxfparser.WXFToken \
object at 0x168f25fd0>, <generator object WXFParser.tokens at \
0x168ecae00>)"}, {"kwargs", "{}"}, {"__class__", 
                    "<class \
'wolframclient.utils.externalevaluate.ExternalEvaluateConsumer'>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless"], " in ", 
                    "consume_function"}], 
                    Column[{
                    
                    Column[{" 362.  ", 
                    " 363.      def __init__(self, routes_registry={}, \
objects_registry={}, globals_registry={}):", 
                    " 364.          self.objects_registry = \
registry(objects_registry)", 
                    " 365.          self.globals_registry = \
registry(globals_registry)", 
                    " 366.          self.routes_registry = \
registry(self.builtin_routes, **routes_registry)", " 367.  ", 
                    " 368.      def consume_function(self, *args, **kwargs):", 
                    Item[
                    " 369.          expr = super().consume_function(*args, \
**kwargs)", Background -> LightYellow], " 370.  ", 
                    " 371.          if check_wl_symbol(expr, \
self.hook_symbol):", " 372.              assert len(expr.args) >= 1", 
                    " 373.              return \
self.dispatch_wl_object(*expr.args)", " 374.  ", 
                    " 375.          return expr"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<ExternalEvaluateConsumer globals=5 objects=1>"}, {
                    "args", 
                    "(<wolframclient.deserializers.wxf.wxfparser.WXFToken \
object at 0x168f25fd0>, <generator object WXFParser.tokens at \
0x168ecae00>)"}, {"kwargs", "{}"}, {"__class__", 
                    "<class \
'wolframclient.utils.externalevaluate.ExternalEvaluateConsumer'>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"consume_function\""}, 
                    "RowDefault"]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"consume_function\""}, 
                    "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{
                    "\"  94.          Return a :class:`list` if the head is \
symbol `List`, otherwise returns the result of \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`\""}, {"\"  95.          applied to the head and arguments.\""}, {
                    "\"  96.  \""}, {
                    "\"  97.          Usually custom parsing rules target \
Functions, but not List. To do so, it is recommended to override\""}, {
                    "\"  98.          \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`.\""}, {"\"  99.          \\\"\\\"\\\"\""}, {
                    "\" 100.          head = self.next_expression(tokens, \
**kwargs)\""}, {
                    ItemBox["\" 101.          args = tuple(\"", Background -> 
                    RGBColor[1, 1, 0.85], StripOnInput -> False]}, {
                    "\" 102.              self.next_expression(tokens, \
**kwargs) for i in range(current_token.length)\""}, {
                    "\" 103.          )\""}, {
                    "\" 104.          if head == self._LIST:\""}, {
                    "\" 105.              return args\""}, {
                    "\" 106.          else:\""}, {
                    "\" 107.              return self.build_function(head, \
args, **kwargs)\""}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\"self\"", 
                    "\"<ExternalEvaluateConsumer globals=5 objects=1>\""}, {
                    "\"current_token\"", 
                    "\"WXFToken<b'f', data=None, len=3>\""}, {"\"tokens\"", 
                    "\"<generator object WXFParser.tokens at \
0x168ecae00>\""}, {"\"kwargs\"", "\"{}\""}, {"\"head\"", 
                    "\"ExternalEvaluate`Private`ExternalEvaluateCommand\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Null}}, 
                    "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<ExternalEvaluateConsumer globals=5 objects=1>"}, {
                    "current_token", "WXFToken<b'f', data=None, len=3>"}, {
                    "tokens", 
                    "<generator object WXFParser.tokens at 0x168ecae00>"}, {
                    "kwargs", "{}"}, {"head", 
                    "ExternalEvaluate`Private`ExternalEvaluateCommand"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless"], " in ", "consume_function"}], 
                    Column[{
                    
                    Column[{
                    "  94.          Return a :class:`list` if the head is \
symbol `List`, otherwise returns the result of \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`", "  95.          applied to the head and arguments.", "  96.  ", 
                    "  97.          Usually custom parsing rules target \
Functions, but not List. To do so, it is recommended to override", 
                    "  98.          \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`.", "  99.          \"\"\"", 
                    " 100.          head = self.next_expression(tokens, \
**kwargs)", 
                    Item[" 101.          args = tuple(", Background -> 
                    LightYellow], 
                    " 102.              self.next_expression(tokens, \
**kwargs) for i in range(current_token.length)", " 103.          )", 
                    " 104.          if head == self._LIST:", 
                    " 105.              return args", " 106.          else:", 
                    " 107.              return self.build_function(head, \
args, **kwargs)"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<ExternalEvaluateConsumer globals=5 objects=1>"}, {
                    "current_token", "WXFToken<b'f', data=None, len=3>"}, {
                    "tokens", 
                    "<generator object WXFParser.tokens at 0x168ecae00>"}, {
                    "kwargs", "{}"}, {"head", 
                    "ExternalEvaluate`Private`ExternalEvaluateCommand"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"<genexpr>\""}, 
                    "RowDefault"]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"<genexpr>\""}, 
                    "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{
                    "\"  95.          applied to the head and arguments.\""}, \
{"\"  96.  \""}, {
                    "\"  97.          Usually custom parsing rules target \
Functions, but not List. To do so, it is recommended to override\""}, {
                    "\"  98.          \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`.\""}, {"\"  99.          \\\"\\\"\\\"\""}, {
                    "\" 100.          head = self.next_expression(tokens, \
**kwargs)\""}, {"\" 101.          args = tuple(\""}, {
                    ItemBox[
                    "\" 102.              self.next_expression(tokens, \
**kwargs) for i in range(current_token.length)\"", Background -> 
                    RGBColor[1, 1, 0.85], StripOnInput -> False]}, {
                    "\" 103.          )\""}, {
                    "\" 104.          if head == self._LIST:\""}, {
                    "\" 105.              return args\""}, {
                    "\" 106.          else:\""}, {
                    "\" 107.              return self.build_function(head, \
args, **kwargs)\""}, {"\" 108.  \""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\".0\"", 
                    "\"<range_iterator object at 0x168f3a280>\""}, {
                    "\"i\"", "\"1\""}, {"\"kwargs\"", "\"{}\""}, {
                    "\"self\"", 
                    "\"<ExternalEvaluateConsumer globals=5 objects=1>\""}, {
                    "\"tokens\"", 
                    "\"<generator object WXFParser.tokens at \
0x168ecae00>\""}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Null}}, 
                    "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {".0", 
                    "<range_iterator object at 0x168f3a280>"}, {"i", "1"}, {
                    "kwargs", "{}"}, {"self", 
                    "<ExternalEvaluateConsumer globals=5 objects=1>"}, {
                    "tokens", 
                    "<generator object WXFParser.tokens at 0x168ecae00>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless"], " in ", "<genexpr>"}], 
                    Column[{
                    
                    Column[{
                    "  95.          applied to the head and arguments.", 
                    "  96.  ", 
                    "  97.          Usually custom parsing rules target \
Functions, but not List. To do so, it is recommended to override", 
                    "  98.          \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`.", "  99.          \"\"\"", 
                    " 100.          head = self.next_expression(tokens, \
**kwargs)", " 101.          args = tuple(", 
                    Item[
                    " 102.              self.next_expression(tokens, \
**kwargs) for i in range(current_token.length)", Background -> LightYellow], 
                    " 103.          )", 
                    " 104.          if head == self._LIST:", 
                    " 105.              return args", " 106.          else:", 
                    " 107.              return self.build_function(head, \
args, **kwargs)", " 108.  "}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {".0", 
                    "<range_iterator object at 0x168f3a280>"}, {"i", "1"}, {
                    "kwargs", "{}"}, {"self", 
                    "<ExternalEvaluateConsumer globals=5 objects=1>"}, {
                    "tokens", 
                    "<generator object WXFParser.tokens at 0x168ecae00>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"next_expression\""}, 
                    "RowDefault"]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"next_expression\""}, 
                    "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{
                    "\"  69.          constants.WXF_CONSTANTS.RuleDelayed: \\\
\"consume_rule_delayed\\\",\""}, {"\"  70.      }\""}, {"\"  71.  \""}, {
                    "\"  72.      def next_expression(self, tokens, \
**kwargs):\""}, {
                    "\"  73.          \\\"\\\"\\\"Deserialize the next \
expression starting at the next token yield by `tokens`.\\\"\\\"\\\"\""}, {
                    "\"  74.          token = next(tokens)\""}, {
                    "\"  75.          consumer = \
self._consumer_from_type(token.wxf_type)\""}, {
                    ItemBox[
                    "\"  76.          return consumer(token, tokens, \
**kwargs)\"", Background -> RGBColor[1, 1, 0.85], StripOnInput -> False]}, {
                    "\"  77.  \""}, {
                    "\"  78.      def _consumer_from_type(self, \
wxf_type):\""}, {"\"  79.          try:\""}, {
                    "\"  80.              func = self._mapping[wxf_type]\""}, \
{"\"  81.          except KeyError:\""}, {
                    "\"  82.              raise WolframParserException(\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\"self\"", 
                    "\"<ExternalEvaluateConsumer globals=5 objects=1>\""}, {
                    "\"tokens\"", 
                    "\"<generator object WXFParser.tokens at \
0x168ecae00>\""}, {"\"kwargs\"", "\"{}\""}, {"\"token\"", 
                    "\"WXFToken<b'f', data=None, len=4>\""}, {"\"consumer\"", 
                    "\"<bound method \
ExternalEvaluateConsumer.consume_function of <ExternalEvaluateConsumer \
globals=5 objects=1>>\""}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {"Columns" -> {{
                    Null}}, "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<ExternalEvaluateConsumer globals=5 objects=1>"}, {
                    "tokens", 
                    "<generator object WXFParser.tokens at 0x168ecae00>"}, {
                    "kwargs", "{}"}, {"token", 
                    "WXFToken<b'f', data=None, len=4>"}, {
                    "consumer", 
                    "<bound method ExternalEvaluateConsumer.consume_function \
of <ExternalEvaluateConsumer globals=5 objects=1>>"}}, Background -> {
                    Null, {LightGray}}, Alignment -> Left, Frame -> 
                    LightGray]}, False]], DynamicModuleValues -> Automatic], 
                    Setting[#, {0}]& ]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless"], " in ", "next_expression"}], 
                    Column[{
                    
                    Column[{
                    "  69.          constants.WXF_CONSTANTS.RuleDelayed: \
\"consume_rule_delayed\",", "  70.      }", "  71.  ", 
                    "  72.      def next_expression(self, tokens, **kwargs):",
                     "  73.          \"\"\"Deserialize the next expression \
starting at the next token yield by `tokens`.\"\"\"", 
                    "  74.          token = next(tokens)", 
                    "  75.          consumer = \
self._consumer_from_type(token.wxf_type)", 
                    Item[
                    "  76.          return consumer(token, tokens, **kwargs)",
                     Background -> LightYellow], "  77.  ", 
                    "  78.      def _consumer_from_type(self, wxf_type):", 
                    "  79.          try:", 
                    "  80.              func = self._mapping[wxf_type]", 
                    "  81.          except KeyError:", 
                    "  82.              raise WolframParserException("}, 
                    Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<ExternalEvaluateConsumer globals=5 objects=1>"}, {
                    "tokens", 
                    "<generator object WXFParser.tokens at 0x168ecae00>"}, {
                    "kwargs", "{}"}, {"token", 
                    "WXFToken<b'f', data=None, len=4>"}, {
                    "consumer", 
                    "<bound method ExternalEvaluateConsumer.consume_function \
of <ExternalEvaluateConsumer globals=5 objects=1>>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless", Evaluator -> Automatic, 
                    Method -> "Preemptive"], "\" in \"", 
                    "\"consume_function\""}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless", Evaluator -> Automatic, 
                    Method -> "Preemptive"], "\" in \"", 
                    "\"consume_function\""}, "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{
                    "\" 366.          self.routes_registry = \
registry(self.builtin_routes, **routes_registry)\""}, {"\" 367.  \""}, {
                    "\" 368.      def consume_function(self, *args, \
**kwargs):\""}, {
                    "\" 369.          expr = super().consume_function(*args, \
**kwargs)\""}, {"\" 370.  \""}, {
                    "\" 371.          if check_wl_symbol(expr, \
self.hook_symbol):\""}, {
                    "\" 372.              assert len(expr.args) >= 1\""}, {
                    ItemBox[
                    "\" 373.              return \
self.dispatch_wl_object(*expr.args)\"", Background -> RGBColor[1, 1, 0.85], 
                    StripOnInput -> False]}, {"\" 374.  \""}, {
                    "\" 375.          return expr\""}, {"\" 376.  \""}, {
                    "\" 377.      def dispatch_wl_object(self, route, *args):\
\""}, {"\" 378.          return self.routes_registry[route](self, *args)\""}, \
{"\" 379.  \""}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\"self\"", 
                    "\"<ExternalEvaluateConsumer globals=5 objects=1>\""}, {
                    "\"args\"", 
                    "\"(<wolframclient.deserializers.wxf.wxfparser.WXFToken \
object at 0x168f24450>, <generator object WXFParser.tokens at \
0x168ecae00>)\""}, {"\"kwargs\"", "\"{}\""}, {"\"expr\"", 
                    "\"ExternalEvaluate`Private`ExternalEvaluateCommand['Call'\
, <class 'hypernetx.classes.hypergraph.Hypergraph'>, 'Call', ((1, 2), (1, 2), \
(1, 2, 3))]\""}, {"\"__class__\"", 
                    "\"<class \
'wolframclient.utils.externalevaluate.ExternalEvaluateConsumer'>\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Null}}, 
                    "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<ExternalEvaluateConsumer globals=5 objects=1>"}, {
                    "args", 
                    "(<wolframclient.deserializers.wxf.wxfparser.WXFToken \
object at 0x168f24450>, <generator object WXFParser.tokens at \
0x168ecae00>)"}, {"kwargs", "{}"}, {"expr", 
                    "ExternalEvaluate`Private`ExternalEvaluateCommand['Call', \
<class 'hypernetx.classes.hypergraph.Hypergraph'>, 'Call', ((1, 2), (1, 2), \
(1, 2, 3))]"}, {"__class__", 
                    "<class \
'wolframclient.utils.externalevaluate.ExternalEvaluateConsumer'>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless"], " in ", 
                    "consume_function"}], 
                    Column[{
                    
                    Column[{
                    " 366.          self.routes_registry = \
registry(self.builtin_routes, **routes_registry)", " 367.  ", 
                    " 368.      def consume_function(self, *args, **kwargs):",
                     " 369.          expr = super().consume_function(*args, \
**kwargs)", " 370.  ", 
                    " 371.          if check_wl_symbol(expr, \
self.hook_symbol):", " 372.              assert len(expr.args) >= 1", 
                    Item[
                    " 373.              return \
self.dispatch_wl_object(*expr.args)", Background -> LightYellow], " 374.  ", 
                    " 375.          return expr", " 376.  ", 
                    " 377.      def dispatch_wl_object(self, route, *args):", 
                    " 378.          return self.routes_registry[route](self, \
*args)", " 379.  "}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<ExternalEvaluateConsumer globals=5 objects=1>"}, {
                    "args", 
                    "(<wolframclient.deserializers.wxf.wxfparser.WXFToken \
object at 0x168f24450>, <generator object WXFParser.tokens at \
0x168ecae00>)"}, {"kwargs", "{}"}, {"expr", 
                    "ExternalEvaluate`Private`ExternalEvaluateCommand['Call', \
<class 'hypernetx.classes.hypergraph.Hypergraph'>, 'Call', ((1, 2), (1, 2), \
(1, 2, 3))]"}, {"__class__", 
                    "<class \
'wolframclient.utils.externalevaluate.ExternalEvaluateConsumer'>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless", Evaluator -> Automatic, 
                    Method -> "Preemptive"], "\" in \"", 
                    "\"dispatch_wl_object\""}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless", Evaluator -> Automatic, 
                    Method -> "Preemptive"], "\" in \"", 
                    "\"dispatch_wl_object\""}, "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{
                    "\" 371.          if check_wl_symbol(expr, \
self.hook_symbol):\""}, {
                    "\" 372.              assert len(expr.args) >= 1\""}, {
                    "\" 373.              return \
self.dispatch_wl_object(*expr.args)\""}, {"\" 374.  \""}, {
                    "\" 375.          return expr\""}, {"\" 376.  \""}, {
                    "\" 377.      def dispatch_wl_object(self, route, *args):\
\""}, {
                    ItemBox[
                    "\" 378.          return \
self.routes_registry[route](self, *args)\"", Background -> 
                    RGBColor[1, 1, 0.85], StripOnInput -> False]}, {
                    "\" 379.  \""}, {"\" 380.      def __repr__(self):\""}, {
                    "\" 381.          return \\\"<{} globals={} objects={}>\\\
\".format(\""}, {
                    "\" 382.              self.__class__.__name__, \
len(self.globals_registry), len(self.objects_registry)\""}, {
                    "\" 383.          )\""}, {"\" 384.  \""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\"self\"", 
                    "\"<ExternalEvaluateConsumer globals=5 objects=1>\""}, {
                    "\"route\"", "\"Call\""}, {"\"args\"", 
                    "\"(<class 'hypernetx.classes.hypergraph.Hypergraph'>, \
'Call', ((1, 2), (1, 2), (1, 2, 3)))\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Null}}, "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<ExternalEvaluateConsumer globals=5 objects=1>"}, {
                    "route", "Call"}, {"args", 
                    "(<class 'hypernetx.classes.hypergraph.Hypergraph'>, \
'Call', ((1, 2), (1, 2), (1, 2, 3)))"}}, Background -> {Null, {LightGray}}, 
                    Alignment -> Left, Frame -> LightGray]}, False]], 
                    DynamicModuleValues -> Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless"], " in ", 
                    "dispatch_wl_object"}], 
                    Column[{
                    
                    Column[{
                    " 371.          if check_wl_symbol(expr, \
self.hook_symbol):", " 372.              assert len(expr.args) >= 1", 
                    " 373.              return \
self.dispatch_wl_object(*expr.args)", " 374.  ", " 375.          return expr",
                     " 376.  ", 
                    " 377.      def dispatch_wl_object(self, route, *args):", 
                    
                    Item[
                    " 378.          return self.routes_registry[route](self, \
*args)", Background -> LightYellow], " 379.  ", 
                    " 380.      def __repr__(self):", 
                    " 381.          return \"<{} globals={} \
objects={}>\".format(", 
                    " 382.              self.__class__.__name__, \
len(self.globals_registry), len(self.objects_registry)", " 383.          )", 
                    " 384.  "}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<ExternalEvaluateConsumer globals=5 objects=1>"}, {
                    "route", "Call"}, {"args", 
                    "(<class 'hypernetx.classes.hypergraph.Hypergraph'>, \
'Call', ((1, 2), (1, 2), (1, 2, 3)))"}}, Background -> {Null, {LightGray}}, 
                    Alignment -> Left, Frame -> LightGray]}]}]}, False]], 
                    DynamicModuleValues -> Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless", Evaluator -> Automatic, 
                    Method -> "Preemptive"], "\" in \"", "\"Call\""}, 
                    "RowDefault"]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless", Evaluator -> Automatic, 
                    Method -> "Preemptive"], "\" in \"", "\"Call\""}, 
                    "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{"\" 248.  \""}, {"\" 249.  \""}, {
                    "\" 250.  @routes.register_function\""}, {
                    "\" 251.  def Call(consumer, result, *args):\""}, {
                    "\" 252.  \""}, {
                    "\" 253.      pos, kwargs = unpack_optionals(args)\""}, {
                    "\" 254.  \""}, {
                    ItemBox[
                    "\" 255.      return result(*pos, **kwargs)\"", 
                    Background -> RGBColor[1, 1, 0.85], StripOnInput -> 
                    False]}, {"\" 256.  \""}, {
                    "\" 257.  @routes.register_function\""}, {
                    "\" 258.  def FromUnixTime(consumer, unixtime, timezone):\
\""}, {"\" 259.      if timezone is None:\""}, {"\" 260.          pass\""}, {
                    "\" 261.      elif isinstance(timezone, \
six.string_types):\""}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\"consumer\"", 
                    "\"<ExternalEvaluateConsumer globals=5 objects=1>\""}, {
                    "\"result\"", 
                    "\"<class 'hypernetx.classes.hypergraph.Hypergraph'>\""}, \
{"\"args\"", "\"('Call', ((1, 2), (1, 2), (1, 2, 3)))\""}, {"\"pos\"", 
                    "\"['Call', ((1, 2), (1, 2), (1, 2, 3))]\""}, {
                    "\"kwargs\"", "\"{}\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Null}}, "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"consumer", 
                    "<ExternalEvaluateConsumer globals=5 objects=1>"}, {
                    "result", 
                    "<class 'hypernetx.classes.hypergraph.Hypergraph'>"}, {
                    "args", "('Call', ((1, 2), (1, 2), (1, 2, 3)))"}, {
                    "pos", "['Call', ((1, 2), (1, 2), (1, 2, 3))]"}, {
                    "kwargs", "{}"}}, Background -> {Null, {LightGray}}, 
                    Alignment -> Left, Frame -> LightGray]}, False]], 
                    DynamicModuleValues -> Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless"], " in ", "Call"}], 
                    Column[{
                    
                    Column[{" 248.  ", " 249.  ", 
                    " 250.  @routes.register_function", 
                    " 251.  def Call(consumer, result, *args):", " 252.  ", 
                    " 253.      pos, kwargs = unpack_optionals(args)", 
                    " 254.  ", 
                    Item[
                    " 255.      return result(*pos, **kwargs)", Background -> 
                    LightYellow], " 256.  ", 
                    " 257.  @routes.register_function", 
                    " 258.  def FromUnixTime(consumer, unixtime, timezone):", 
                    " 259.      if timezone is None:", " 260.          pass", 
                    " 261.      elif isinstance(timezone, \
six.string_types):"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"consumer", 
                    "<ExternalEvaluateConsumer globals=5 objects=1>"}, {
                    "result", 
                    "<class 'hypernetx.classes.hypergraph.Hypergraph'>"}, {
                    "args", "('Call', ((1, 2), (1, 2), (1, 2, 3)))"}, {
                    "pos", "['Call', ((1, 2), (1, 2), (1, 2, 3))]"}, {
                    "kwargs", "{}"}}, Background -> {Null, {LightGray}}, 
                    Alignment -> Left, Frame -> LightGray]}]}]}, False]], 
                    DynamicModuleValues -> Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Users/arnoudb/Library/Wolfram/ApplicationData/\
ExternalEvaluate/Python/Venv/hypernetx/lib/python3.11/site-packages/hypernetx/\
utils/decorators.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Users/arnoudb/Library/Wolfram/ApplicationData/\
ExternalEvaluate/Python/Venv/hypernetx/lib/python3.11/site-packages/hypernetx/\
utils/decorators.py"], 
                    SystemOpen[
                    "/Users/arnoudb/Library/Wolfram/ApplicationData/\
ExternalEvaluate/Python/Venv/hypernetx/lib/python3.11/site-packages/hypernetx/\
utils/decorators.py"]], Appearance -> "Frameless", Evaluator -> Automatic, 
                    Method -> "Preemptive"], "\" in \"", "\"wrapper\""}, 
                    "RowDefault"]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Users/arnoudb/Library/Wolfram/ApplicationData/\
ExternalEvaluate/Python/Venv/hypernetx/lib/python3.11/site-packages/hypernetx/\
utils/decorators.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Users/arnoudb/Library/Wolfram/ApplicationData/\
ExternalEvaluate/Python/Venv/hypernetx/lib/python3.11/site-packages/hypernetx/\
utils/decorators.py"], 
                    SystemOpen[
                    "/Users/arnoudb/Library/Wolfram/ApplicationData/\
ExternalEvaluate/Python/Venv/hypernetx/lib/python3.11/site-packages/hypernetx/\
utils/decorators.py"]], Appearance -> "Frameless", Evaluator -> Automatic, 
                    Method -> "Preemptive"], "\" in \"", "\"wrapper\""}, 
                    "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{
                    "\"  79.      def wrapper(*args, **kwargs):\""}, {
                    "\"  80.          if kwargs.get(\\\"use_nwhy\\\"):\""}, {
                    "\"  81.              kwargs.update(use_nwhy=False)\""}, {
                    "\"  82.              \
warnings.simplefilter(\\\"always\\\", FutureWarning)\""}, {
                    "\"  83.              warnings.warn(NWHY_WARNING, \
FutureWarning, stacklevel=2)\""}, {
                    "\"  84.              warnings.simplefilter(\\\"default\\\
\", FutureWarning)\""}, {"\"  85.  \""}, {
                    ItemBox[
                    "\"  86.          return func(*args, **kwargs)\"", 
                    Background -> RGBColor[1, 1, 0.85], StripOnInput -> 
                    False]}, {"\"  87.  \""}, {
                    "\"  88.      return wrapper\""}, {"\"  89.  \""}, {
                    "\"  90.  \""}, {
                    "\"  91.  def warn_to_be_deprecated(func):\""}, {
                    "\"  92.      \\\"\\\"\\\"Decorator for methods that are \
to be deprecated\""}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\"args\"", 
                    "\"(, hypernetx.classes.hypergraph.Hypergraph, 'Call', \
((1, 2), (1, 2), (1, 2, 3)))\""}, {"\"kwargs\"", "\"{}\""}, {"\"func\"", 
                    "\"<function Hypergraph.__init__ at 0x133a9db20>\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Null}}, 
                    "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"args", 
                    "(, hypernetx.classes.hypergraph.Hypergraph, 'Call', ((1, \
2), (1, 2), (1, 2, 3)))"}, {"kwargs", "{}"}, {"func", 
                    "<function Hypergraph.__init__ at 0x133a9db20>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Users/arnoudb/Library/Wolfram/ApplicationData/\
ExternalEvaluate/Python/Venv/hypernetx/lib/python3.11/site-packages/hypernetx/\
utils/decorators.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Users/arnoudb/Library/Wolfram/ApplicationData/\
ExternalEvaluate/Python/Venv/hypernetx/lib/python3.11/site-packages/hypernetx/\
utils/decorators.py"], 
                    SystemOpen[
                    "/Users/arnoudb/Library/Wolfram/ApplicationData/\
ExternalEvaluate/Python/Venv/hypernetx/lib/python3.11/site-packages/hypernetx/\
utils/decorators.py"]], Appearance -> "Frameless"], " in ", "wrapper"}], 
                    Column[{
                    
                    Column[{"  79.      def wrapper(*args, **kwargs):", 
                    "  80.          if kwargs.get(\"use_nwhy\"):", 
                    "  81.              kwargs.update(use_nwhy=False)", 
                    "  82.              warnings.simplefilter(\"always\", \
FutureWarning)", 
                    "  83.              warnings.warn(NWHY_WARNING, \
FutureWarning, stacklevel=2)", 
                    "  84.              warnings.simplefilter(\"default\", \
FutureWarning)", "  85.  ", 
                    Item[
                    "  86.          return func(*args, **kwargs)", Background -> 
                    LightYellow], "  87.  ", "  88.      return wrapper", 
                    "  89.  ", "  90.  ", 
                    "  91.  def warn_to_be_deprecated(func):", 
                    "  92.      \"\"\"Decorator for methods that are to be \
deprecated"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"args", 
                    "(, hypernetx.classes.hypergraph.Hypergraph, 'Call', ((1, \
2), (1, 2), (1, 2, 3)))"}, {"kwargs", "{}"}, {
                    "func", "<function Hypergraph.__init__ at 0x133a9db20>"}},
                     Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Users/arnoudb/Library/Wolfram/ApplicationData/\
ExternalEvaluate/Python/Venv/hypernetx/lib/python3.11/site-packages/hypernetx/\
classes/hypergraph.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Users/arnoudb/Library/Wolfram/ApplicationData/\
ExternalEvaluate/Python/Venv/hypernetx/lib/python3.11/site-packages/hypernetx/\
classes/hypergraph.py"], 
                    SystemOpen[
                    "/Users/arnoudb/Library/Wolfram/ApplicationData/\
ExternalEvaluate/Python/Venv/hypernetx/lib/python3.11/site-packages/hypernetx/\
classes/hypergraph.py"]], Appearance -> "Frameless", Evaluator -> Automatic, 
                    Method -> "Preemptive"], "\" in \"", "\"__init__\""}, 
                    "RowDefault"]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Users/arnoudb/Library/Wolfram/ApplicationData/\
ExternalEvaluate/Python/Venv/hypernetx/lib/python3.11/site-packages/hypernetx/\
classes/hypergraph.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Users/arnoudb/Library/Wolfram/ApplicationData/\
ExternalEvaluate/Python/Venv/hypernetx/lib/python3.11/site-packages/hypernetx/\
classes/hypergraph.py"], 
                    SystemOpen[
                    "/Users/arnoudb/Library/Wolfram/ApplicationData/\
ExternalEvaluate/Python/Venv/hypernetx/lib/python3.11/site-packages/hypernetx/\
classes/hypergraph.py"]], Appearance -> "Frameless", Evaluator -> Automatic, 
                    Method -> "Preemptive"], "\" in \"", "\"__init__\""}, 
                    "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{
                    "\" 556.                  \
misc_cell_props_col=misc_cell_properties_col or \\\"cell_properties\\\",\""}, \
{"\" 557.                  aggregateby=aggregateby or \\\"sum\\\",\""}, {
                    "\" 558.                  properties=properties,\""}, {
                    "\" 559.                  \
misc_props_col=misc_properties_col,\""}, {"\" 560.              )\""}, {
                    "\" 561.  \""}, {
                    "\" 562.              self._edges = self.E\""}, {
                    ItemBox[
                    "\" 563.              self._nodes = \
self.E.restrict_to_levels([1])\"", Background -> RGBColor[1, 1, 0.85], 
                    StripOnInput -> 
                    False]}, {
                    "\" 564.              self._data_cols = data_cols = \
[self._edge_col, self._node_col]\""}, {"\" 565.  \""}, {
                    "\" 566.              self._dataframe = \
self.E.cell_properties\""}, {
                    "\" 567.              if self._dataframe is not \
None:\""}, {
                    "\" 568.                  self._dataframe = \
self._dataframe.reset_index()\""}, {
                    "\" 569.                  self._dataframe[data_cols] = \
self._dataframe[data_cols].astype(\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\"self\"", 
                    "\", <class \
'hypernetx.classes.hypergraph.Hypergraph'>\""}, {"\"setsystem\"", 
                    "\"Call\""}, {"\"edge_col\"", 
                    "\"((1, 2), (1, 2), (1, 2, 3))\""}, {"\"node_col\"", 
                    "\"nodes\""}, {"\"cell_weight_col\"", 
                    "\"cell_weights\""}, {"\"cell_weights\"", "\"1.0\""}, {
                    "\"cell_properties\"", 
                    "\"None\""}, {"\"misc_cell_properties_col\"", 
                    "\"None\""}, {"\"aggregateby\"", "\"first\""}, {
                    "\"edge_properties\"", 
                    "\"None\""}, {"\"node_properties\"", "\"None\""}, {
                    "\"properties\"", "\"None\""}, {"\"misc_properties_col\"",
                     "\"properties\""}, {"\"edge_weight_prop_col\"", 
                    "\"weight\""}, {"\"node_weight_prop_col\"", 
                    "\"weight\""}, {"\"weight_prop_col\"", "\"weight\""}, {
                    "\"default_edge_weight\"", 
                    "\"1.0\""}, {"\"default_node_weight\"", "\"1.0\""}, {
                    "\"default_weight\"", "\"1.0\""}, {"\"name\"", 
                    "\"None\""}, {"\"kwargs\"", 
                    "\"{}\""}, {"\"misc_cell_properties\"", 
                    "\"cell_properties\""}, {"\"entity\"", 
                    "\"   ((1, 2), (1, 2), (1, 2, 3)) nodes  cell_weights\\n0 \
                           0  Call           1.0\""}, {"\"props2dict\"", 
                    "\"<function Hypergraph.__init__.<locals>.props2dict at \
0x169304fe0>\""}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Null}}, 
                    "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    ", <class 'hypernetx.classes.hypergraph.Hypergraph'>"}, {
                    "setsystem", "Call"}, {"edge_col", 
                    "((1, 2), (1, 2), (1, 2, 3))"}, {"node_col", "nodes"}, {
                    "cell_weight_col", "cell_weights"}, {"cell_weights", 
                    "1.0"}, {"cell_properties", "None"}, {
                    "misc_cell_properties_col", "None"}, {
                    "aggregateby", "first"}, {"edge_properties", "None"}, {
                    "node_properties", "None"}, {"properties", "None"}, {
                    "misc_properties_col", "properties"}, {
                    "edge_weight_prop_col", 
                    "weight"}, {"node_weight_prop_col", "weight"}, {
                    "weight_prop_col", "weight"}, {"default_edge_weight", 
                    "1.0"}, {"default_node_weight", "1.0"}, {
                    "default_weight", "1.0"}, {"name", "None"}, {
                    "kwargs", "{}"}, {"misc_cell_properties", 
                    "cell_properties"}, {"entity", 
                    "   ((1, 2), (1, 2), (1, 2, 3)) nodes  cell_weights\n0    \
                        0  Call           1.0"}, {"props2dict", 
                    "<function Hypergraph.__init__.<locals>.props2dict at \
0x169304fe0>"}}, Background -> {Null, {LightGray}}, Alignment -> Left, Frame -> 
                    LightGray]}, False]], DynamicModuleValues -> Automatic], 
                    Setting[#, {0}]& ]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Users/arnoudb/Library/Wolfram/ApplicationData/\
ExternalEvaluate/Python/Venv/hypernetx/lib/python3.11/site-packages/hypernetx/\
classes/hypergraph.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Users/arnoudb/Library/Wolfram/ApplicationData/\
ExternalEvaluate/Python/Venv/hypernetx/lib/python3.11/site-packages/hypernetx/\
classes/hypergraph.py"], 
                    SystemOpen[
                    "/Users/arnoudb/Library/Wolfram/ApplicationData/\
ExternalEvaluate/Python/Venv/hypernetx/lib/python3.11/site-packages/hypernetx/\
classes/hypergraph.py"]], Appearance -> "Frameless"], " in ", "__init__"}], 
                    Column[{
                    
                    Column[{
                    " 556.                  \
misc_cell_props_col=misc_cell_properties_col or \"cell_properties\",", 
                    " 557.                  aggregateby=aggregateby or \
\"sum\",", " 558.                  properties=properties,", 
                    " 559.                  \
misc_props_col=misc_properties_col,", " 560.              )", " 561.  ", 
                    " 562.              self._edges = self.E", 
                    Item[
                    " 563.              self._nodes = \
self.E.restrict_to_levels([1])", Background -> LightYellow], 
                    
                    " 564.              self._data_cols = data_cols = \
[self._edge_col, self._node_col]", " 565.  ", 
                    " 566.              self._dataframe = \
self.E.cell_properties", " 567.              if self._dataframe is not None:",
                     " 568.                  self._dataframe = \
self._dataframe.reset_index()", 
                    " 569.                  self._dataframe[data_cols] = \
self._dataframe[data_cols].astype("}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    ", <class 'hypernetx.classes.hypergraph.Hypergraph'>"}, {
                    "setsystem", "Call"}, {"edge_col", 
                    "((1, 2), (1, 2), (1, 2, 3))"}, {"node_col", "nodes"}, {
                    "cell_weight_col", "cell_weights"}, {
                    "cell_weights", "1.0"}, {"cell_properties", "None"}, {
                    "misc_cell_properties_col", "None"}, {
                    "aggregateby", "first"}, {"edge_properties", "None"}, {
                    "node_properties", "None"}, {"properties", "None"}, {
                    "misc_properties_col", "properties"}, {
                    "edge_weight_prop_col", "weight"}, {
                    "node_weight_prop_col", "weight"}, {
                    "weight_prop_col", "weight"}, {
                    "default_edge_weight", "1.0"}, {
                    "default_node_weight", "1.0"}, {
                    "default_weight", "1.0"}, {"name", "None"}, {
                    "kwargs", "{}"}, {"misc_cell_properties", 
                    "cell_properties"}, {"entity", 
                    "   ((1, 2), (1, 2), (1, 2, 3)) nodes  cell_weights\n0    \
                        0  Call           1.0"}, {
                    "props2dict", 
                    "<function Hypergraph.__init__.<locals>.props2dict at \
0x169304fe0>"}}, Background -> {Null, {LightGray}}, Alignment -> Left, Frame -> 
                    LightGray]}]}]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Users/arnoudb/Library/Wolfram/ApplicationData/\
ExternalEvaluate/Python/Venv/hypernetx/lib/python3.11/site-packages/hypernetx/\
utils/decorators.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Users/arnoudb/Library/Wolfram/ApplicationData/\
ExternalEvaluate/Python/Venv/hypernetx/lib/python3.11/site-packages/hypernetx/\
utils/decorators.py"], 
                    SystemOpen[
                    "/Users/arnoudb/Library/Wolfram/ApplicationData/\
ExternalEvaluate/Python/Venv/hypernetx/lib/python3.11/site-packages/hypernetx/\
utils/decorators.py"]], Appearance -> "Frameless", Evaluator -> Automatic, 
                    Method -> "Preemptive"], "\" in \"", "\"wrapper\""}, 
                    "RowDefault"]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Users/arnoudb/Library/Wolfram/ApplicationData/\
ExternalEvaluate/Python/Venv/hypernetx/lib/python3.11/site-packages/hypernetx/\
utils/decorators.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Users/arnoudb/Library/Wolfram/ApplicationData/\
ExternalEvaluate/Python/Venv/hypernetx/lib/python3.11/site-packages/hypernetx/\
utils/decorators.py"], 
                    SystemOpen[
                    "/Users/arnoudb/Library/Wolfram/ApplicationData/\
ExternalEvaluate/Python/Venv/hypernetx/lib/python3.11/site-packages/hypernetx/\
utils/decorators.py"]], Appearance -> "Frameless", Evaluator -> Automatic, 
                    Method -> "Preemptive"], "\" in \"", "\"wrapper\""}, 
                    "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{"\" 105.      )\""}, {"\" 106.  \""}, {
                    "\" 107.      @wraps(func)\""}, {
                    "\" 108.      def wrapper(*args, **kwargs):\""}, {
                    "\" 109.          warnings.simplefilter(\\\"always\\\", \
FutureWarning)\""}, {
                    "\" 110.          warnings.warn(deprecation_warning_msg, \
FutureWarning, stacklevel=2)\""}, {
                    "\" 111.          warnings.simplefilter(\\\"default\\\", \
FutureWarning)\""}, {
                    ItemBox["\" 112.          return func(*args, **kwargs)\"",
                     Background -> RGBColor[1, 1, 0.85], StripOnInput -> 
                    False]}, {"\" 113.  \""}, {
                    "\" 114.      return wrapper\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\"args\"", 
                    "\"(<hypernetx.classes.entityset.EntitySet object at \
0x1692e5990>, [1])\""}, {"\"kwargs\"", 
                    "\"{}\""}, {"\"deprecation_warning_msg\"", 
                    "\"This method or function will be deprecated in a future \
release. Public references to this method or function will be removed from \
the Hypergraph API in a future release.\""}, {"\"func\"", 
                    "\"<function EntitySet.restrict_to_levels at 0x133a9d440>\
\""}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Null}}, "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"args", 
                    
                    "(<hypernetx.classes.entityset.EntitySet object at \
0x1692e5990>, [1])"}, {"kwargs", "{}"}, {"deprecation_warning_msg", 
                    "This method or function will be deprecated in a future \
release. Public references to this method or function will be removed from \
the Hypergraph API in a future release."}, {"func", 
                    "<function EntitySet.restrict_to_levels at \
0x133a9d440>"}}, Background -> {Null, {LightGray}}, Alignment -> Left, Frame -> 
                    LightGray]}, False]], DynamicModuleValues -> Automatic], 
                    Setting[#, {0}]& ]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Users/arnoudb/Library/Wolfram/ApplicationData/\
ExternalEvaluate/Python/Venv/hypernetx/lib/python3.11/site-packages/hypernetx/\
utils/decorators.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Users/arnoudb/Library/Wolfram/ApplicationData/\
ExternalEvaluate/Python/Venv/hypernetx/lib/python3.11/site-packages/hypernetx/\
utils/decorators.py"], 
                    SystemOpen[
                    "/Users/arnoudb/Library/Wolfram/ApplicationData/\
ExternalEvaluate/Python/Venv/hypernetx/lib/python3.11/site-packages/hypernetx/\
utils/decorators.py"]], Appearance -> "Frameless"], " in ", "wrapper"}], 
                    Column[{
                    
                    Column[{" 105.      )", " 106.  ", 
                    " 107.      @wraps(func)", 
                    " 108.      def wrapper(*args, **kwargs):", 
                    " 109.          warnings.simplefilter(\"always\", \
FutureWarning)", 
                    " 110.          warnings.warn(deprecation_warning_msg, \
FutureWarning, stacklevel=2)", 
                    " 111.          warnings.simplefilter(\"default\", \
FutureWarning)", 
                    Item[" 112.          return func(*args, **kwargs)", 
                    Background -> LightYellow], " 113.  ", 
                    " 114.      return wrapper"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"args", 
                    "(<hypernetx.classes.entityset.EntitySet object at \
0x1692e5990>, [1])"}, {"kwargs", "{}"}, {"deprecation_warning_msg", 
                    "This method or function will be deprecated in a future \
release. Public references to this method or function will be removed from \
the Hypergraph API in a future release."}, {"func", 
                    "<function EntitySet.restrict_to_levels at \
0x133a9d440>"}}, Background -> {Null, {LightGray}}, Alignment -> Left, Frame -> 
                    LightGray]}]}]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Users/arnoudb/Library/Wolfram/ApplicationData/\
ExternalEvaluate/Python/Venv/hypernetx/lib/python3.11/site-packages/hypernetx/\
classes/entityset.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Users/arnoudb/Library/Wolfram/ApplicationData/\
ExternalEvaluate/Python/Venv/hypernetx/lib/python3.11/site-packages/hypernetx/\
classes/entityset.py"], 
                    SystemOpen[
                    "/Users/arnoudb/Library/Wolfram/ApplicationData/\
ExternalEvaluate/Python/Venv/hypernetx/lib/python3.11/site-packages/hypernetx/\
classes/entityset.py"]], Appearance -> "Frameless", Evaluator -> Automatic, 
                    Method -> "Preemptive"], "\" in \"", 
                    "\"restrict_to_levels\""}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Users/arnoudb/Library/Wolfram/ApplicationData/\
ExternalEvaluate/Python/Venv/hypernetx/lib/python3.11/site-packages/hypernetx/\
classes/entityset.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Users/arnoudb/Library/Wolfram/ApplicationData/\
ExternalEvaluate/Python/Venv/hypernetx/lib/python3.11/site-packages/hypernetx/\
classes/entityset.py"], 
                    SystemOpen[
                    "/Users/arnoudb/Library/Wolfram/ApplicationData/\
ExternalEvaluate/Python/Venv/hypernetx/lib/python3.11/site-packages/hypernetx/\
classes/entityset.py"]], Appearance -> "Frameless", Evaluator -> Automatic, 
                    Method -> "Preemptive"], "\" in \"", 
                    "\"restrict_to_levels\""}, "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{"\"2016.              aggregateby,\""}, {
                    "\"2017.              **kwargs,\""}, {
                    "\"2018.          )\""}, {"\"2019.  \""}, {
                    "\"2020.          if keep_memberships:\""}, {
                    "\"2021.              # use original memberships to set \
memberships for the new EntitySet\""}, {
                    "\"2022.              # TODO: This assumes levels=[1], \
add explicit checks for other cases\""}, {
                    ItemBox[
                    "\"2023.              \
restricted._state_dict[\\\"memberships\\\"] = self.memberships\"", Background -> 
                    RGBColor[1, 1, 0.85], StripOnInput -> False]}, {
                    "\"2024.  \""}, {
                    "\"2025.          return restricted\""}, {
                    "\"2026.  \""}, {
                    "\"2027.      def collapse_identical_elements(\""}, {
                    "\"2028.          self, return_equivalence_classes: bool \
= False, **kwargs\""}, {
                    "\"2029.      ) -> EntitySet | tuple[EntitySet, dict[str, \
list[str]]]:\""}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\"self\"", 
                    "\"<hypernetx.classes.entityset.EntitySet object at \
0x1692e5990>\""}, {"\"levels\"", "\"[1]\""}, {"\"weights\"", "\"False\""}, {
                    "\"aggregateby\"", "\"sum\""}, {"\"keep_memberships\"", 
                    "\"True\""}, {"\"kwargs\"", "\"{}\""}, {"\"restricted\"", 
                    "\"<hypernetx.classes.entityset.EntitySet object at \
0x143c47fd0>\""}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Null}}, 
                    "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<hypernetx.classes.entityset.EntitySet object at \
0x1692e5990>"}, {"levels", "[1]"}, {"weights", "False"}, {
                    "aggregateby", "sum"}, {"keep_memberships", "True"}, {
                    "kwargs", "{}"}, {"restricted", 
                    "<hypernetx.classes.entityset.EntitySet object at \
0x143c47fd0>"}}, Background -> {Null, {LightGray}}, Alignment -> Left, Frame -> 
                    LightGray]}, False]], DynamicModuleValues -> Automatic], 
                    Setting[#, {0}]& ]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Users/arnoudb/Library/Wolfram/ApplicationData/\
ExternalEvaluate/Python/Venv/hypernetx/lib/python3.11/site-packages/hypernetx/\
classes/entityset.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Users/arnoudb/Library/Wolfram/ApplicationData/\
ExternalEvaluate/Python/Venv/hypernetx/lib/python3.11/site-packages/hypernetx/\
classes/entityset.py"], 
                    SystemOpen[
                    "/Users/arnoudb/Library/Wolfram/ApplicationData/\
ExternalEvaluate/Python/Venv/hypernetx/lib/python3.11/site-packages/hypernetx/\
classes/entityset.py"]], Appearance -> "Frameless"], " in ", 
                    "restrict_to_levels"}], 
                    Column[{
                    
                    Column[{"2016.              aggregateby,", 
                    "2017.              **kwargs,", "2018.          )", 
                    "2019.  ", "2020.          if keep_memberships:", 
                    "2021.              # use original memberships to set \
memberships for the new EntitySet", 
                    "2022.              # TODO: This assumes levels=[1], add \
explicit checks for other cases", 
                    Item[
                    "2023.              \
restricted._state_dict[\"memberships\"] = self.memberships", Background -> 
                    LightYellow], "2024.  ", 
                    "2025.          return restricted", "2026.  ", 
                    "2027.      def collapse_identical_elements(", 
                    "2028.          self, return_equivalence_classes: bool = \
False, **kwargs", 
                    "2029.      ) -> EntitySet | tuple[EntitySet, dict[str, \
list[str]]]:"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<hypernetx.classes.entityset.EntitySet object at \
0x1692e5990>"}, {"levels", "[1]"}, {"weights", "False"}, {
                    "aggregateby", "sum"}, {"keep_memberships", "True"}, {
                    "kwargs", "{}"}, {"restricted", 
                    "<hypernetx.classes.entityset.EntitySet object at \
0x143c47fd0>"}}, Background -> {Null, {LightGray}}, Alignment -> Left, Frame -> 
                    LightGray]}]}]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Users/arnoudb/Library/Wolfram/ApplicationData/\
ExternalEvaluate/Python/Venv/hypernetx/lib/python3.11/site-packages/hypernetx/\
classes/entityset.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Users/arnoudb/Library/Wolfram/ApplicationData/\
ExternalEvaluate/Python/Venv/hypernetx/lib/python3.11/site-packages/hypernetx/\
classes/entityset.py"], 
                    SystemOpen[
                    "/Users/arnoudb/Library/Wolfram/ApplicationData/\
ExternalEvaluate/Python/Venv/hypernetx/lib/python3.11/site-packages/hypernetx/\
classes/entityset.py"]], Appearance -> "Frameless", Evaluator -> Automatic, 
                    Method -> "Preemptive"], "\" in \"", "\"memberships\""}, 
                    "RowDefault"]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Users/arnoudb/Library/Wolfram/ApplicationData/\
ExternalEvaluate/Python/Venv/hypernetx/lib/python3.11/site-packages/hypernetx/\
classes/entityset.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Users/arnoudb/Library/Wolfram/ApplicationData/\
ExternalEvaluate/Python/Venv/hypernetx/lib/python3.11/site-packages/hypernetx/\
classes/entityset.py"], 
                    SystemOpen[
                    "/Users/arnoudb/Library/Wolfram/ApplicationData/\
ExternalEvaluate/Python/Venv/hypernetx/lib/python3.11/site-packages/hypernetx/\
classes/entityset.py"]], Appearance -> "Frameless", Evaluator -> Automatic, 
                    Method -> "Preemptive"], "\" in \"", "\"memberships\""}, 
                    "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{"\" 547.          --------\""}, {
                    "\" 548.          elements : dual of this representation \
i.e., each item in level 0 (first column) defines a set\""}, {
                    "\" 549.          elements_by_level, elements_by_column :\
\""}, {"\" 550.              system of sets representation of any two levels \
(columns); specified by level index or column name\""}, {"\" 551.  \""}, {
                    "\" 552.          \\\"\\\"\\\"\""}, {"\" 553.  \""}, {
                    ItemBox[
                    "\" 554.          return self.elements_by_level(1, 0)\"", 
                    Background -> RGBColor[1, 1, 0.85], StripOnInput -> 
                    False]}, {"\" 555.  \""}, {
                    "\" 556.      def elements_by_level(self, level1: int, \
level2: int) -> dict[Any, AttrList]:\""}, {
                    "\" 557.          \\\"\\\"\\\"System of sets \
representation of two levels (columns) of the underlying data table\""}, {
                    "\" 558.  \""}, {
                    "\" 559.          Each item in level1 defines a set \
containing all the level2 items\""}, {
                    "\" 560.          with which it appears in the same row \
of the underlying data table\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\"self\"", 
                    "\"<hypernetx.classes.entityset.EntitySet object at \
0x1692e5990>\""}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Null}}, 
                    "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<hypernetx.classes.entityset.EntitySet object at \
0x1692e5990>"}}, Background -> {Null, {LightGray}}, Alignment -> Left, Frame -> 
                    LightGray]}, False]], DynamicModuleValues -> Automatic], 
                    Setting[#, {0}]& ]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Users/arnoudb/Library/Wolfram/ApplicationData/\
ExternalEvaluate/Python/Venv/hypernetx/lib/python3.11/site-packages/hypernetx/\
classes/entityset.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Users/arnoudb/Library/Wolfram/ApplicationData/\
ExternalEvaluate/Python/Venv/hypernetx/lib/python3.11/site-packages/hypernetx/\
classes/entityset.py"], 
                    SystemOpen[
                    "/Users/arnoudb/Library/Wolfram/ApplicationData/\
ExternalEvaluate/Python/Venv/hypernetx/lib/python3.11/site-packages/hypernetx/\
classes/entityset.py"]], Appearance -> "Frameless"], " in ", "memberships"}], 
                    
                    Column[{
                    
                    Column[{" 547.          --------", 
                    " 548.          elements : dual of this representation \
i.e., each item in level 0 (first column) defines a set", 
                    " 549.          elements_by_level, elements_by_column :", 
                    " 550.              system of sets representation of any \
two levels (columns); specified by level index or column name", " 551.  ", 
                    " 552.          \"\"\"", " 553.  ", 
                    Item[
                    " 554.          return self.elements_by_level(1, 0)", 
                    Background -> LightYellow], " 555.  ", 
                    " 556.      def elements_by_level(self, level1: int, \
level2: int) -> dict[Any, AttrList]:", 
                    " 557.          \"\"\"System of sets representation of \
two levels (columns) of the underlying data table", " 558.  ", 
                    " 559.          Each item in level1 defines a set \
containing all the level2 items", 
                    " 560.          with which it appears in the same row of \
the underlying data table"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<hypernetx.classes.entityset.EntitySet object at \
0x1692e5990>"}}, Background -> {Null, {LightGray}}, Alignment -> Left, Frame -> 
                    LightGray]}]}]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Users/arnoudb/Library/Wolfram/ApplicationData/\
ExternalEvaluate/Python/Venv/hypernetx/lib/python3.11/site-packages/hypernetx/\
classes/entityset.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Users/arnoudb/Library/Wolfram/ApplicationData/\
ExternalEvaluate/Python/Venv/hypernetx/lib/python3.11/site-packages/hypernetx/\
classes/entityset.py"], 
                    SystemOpen[
                    "/Users/arnoudb/Library/Wolfram/ApplicationData/\
ExternalEvaluate/Python/Venv/hypernetx/lib/python3.11/site-packages/hypernetx/\
classes/entityset.py"]], Appearance -> "Frameless", Evaluator -> Automatic, 
                    Method -> "Preemptive"], "\" in \"", 
                    "\"elements_by_level\""}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Users/arnoudb/Library/Wolfram/ApplicationData/\
ExternalEvaluate/Python/Venv/hypernetx/lib/python3.11/site-packages/hypernetx/\
classes/entityset.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Users/arnoudb/Library/Wolfram/ApplicationData/\
ExternalEvaluate/Python/Venv/hypernetx/lib/python3.11/site-packages/hypernetx/\
classes/entityset.py"], 
                    SystemOpen[
                    "/Users/arnoudb/Library/Wolfram/ApplicationData/\
ExternalEvaluate/Python/Venv/hypernetx/lib/python3.11/site-packages/hypernetx/\
classes/entityset.py"]], Appearance -> "Frameless", Evaluator -> Automatic, 
                    Method -> "Preemptive"], "\" in \"", 
                    "\"elements_by_level\""}, "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{
                    "\" 579.          elements_by_column : same \
functionality, takes column names instead of level indices\""}, {
                    "\" 580.  \""}, {"\" 581.          \\\"\\\"\\\"\""}, {
                    "\" 582.          if len(self._data_cols) == 1:\""}, {
                    "\" 583.              return \
self._state_dict[\\\"memberships\\\"]\""}, {
                    "\" 584.          col1 = self._data_cols[level1]\""}, {
                    "\" 585.          col2 = self._data_cols[level2]\""}, {
                    ItemBox[
                    "\" 586.          return self.elements_by_column(col1, \
col2)\"", Background -> RGBColor[1, 1, 0.85], StripOnInput -> False]}, {
                    "\" 587.  \""}, {
                    "\" 588.      def elements_by_column(self, col1: \
Hashable, col2: Hashable) -> dict[Any, AttrList]:\""}, {
                    "\" 589.          \\\"\\\"\\\"System of sets \
representation of two columns (levels) of the underlying data table\""}, {
                    "\" 590.  \""}, {
                    "\" 591.          Each item in col1 defines a set \
containing all the col2 items\""}, {
                    "\" 592.          with which it appears in the same row \
of the underlying data table\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\"self\"", 
                    "\"<hypernetx.classes.entityset.EntitySet object at \
0x1692e5990>\""}, {"\"level1\"", "\"1\""}, {"\"level2\"", "\"0\""}, {
                    "\"col1\"", "\"nodes\""}, {"\"col2\"", 
                    "\"((1, 2), (1, 2), (1, 2, 3))\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Null}}, "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<hypernetx.classes.entityset.EntitySet object at \
0x1692e5990>"}, {"level1", "1"}, {"level2", "0"}, {"col1", "nodes"}, {
                    "col2", "((1, 2), (1, 2), (1, 2, 3))"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Users/arnoudb/Library/Wolfram/ApplicationData/\
ExternalEvaluate/Python/Venv/hypernetx/lib/python3.11/site-packages/hypernetx/\
classes/entityset.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Users/arnoudb/Library/Wolfram/ApplicationData/\
ExternalEvaluate/Python/Venv/hypernetx/lib/python3.11/site-packages/hypernetx/\
classes/entityset.py"], 
                    SystemOpen[
                    "/Users/arnoudb/Library/Wolfram/ApplicationData/\
ExternalEvaluate/Python/Venv/hypernetx/lib/python3.11/site-packages/hypernetx/\
classes/entityset.py"]], Appearance -> "Frameless"], " in ", 
                    "elements_by_level"}], 
                    Column[{
                    
                    Column[{
                    " 579.          elements_by_column : same functionality, \
takes column names instead of level indices", " 580.  ", 
                    " 581.          \"\"\"", 
                    " 582.          if len(self._data_cols) == 1:", 
                    " 583.              return self._state_dict[\"memberships\
\"]", " 584.          col1 = self._data_cols[level1]", 
                    " 585.          col2 = self._data_cols[level2]", 
                    Item[
                    " 586.          return self.elements_by_column(col1, \
col2)", Background -> LightYellow], " 587.  ", 
                    " 588.      def elements_by_column(self, col1: Hashable, \
col2: Hashable) -> dict[Any, AttrList]:", 
                    " 589.          \"\"\"System of sets representation of \
two columns (levels) of the underlying data table", " 590.  ", 
                    " 591.          Each item in col1 defines a set \
containing all the col2 items", 
                    " 592.          with which it appears in the same row of \
the underlying data table"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<hypernetx.classes.entityset.EntitySet object at \
0x1692e5990>"}, {"level1", "1"}, {"level2", "0"}, {"col1", "nodes"}, {
                    "col2", "((1, 2), (1, 2), (1, 2, 3))"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = True}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Users/arnoudb/Library/Wolfram/ApplicationData/\
ExternalEvaluate/Python/Venv/hypernetx/lib/python3.11/site-packages/hypernetx/\
classes/entityset.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Users/arnoudb/Library/Wolfram/ApplicationData/\
ExternalEvaluate/Python/Venv/hypernetx/lib/python3.11/site-packages/hypernetx/\
classes/entityset.py"], 
                    SystemOpen[
                    "/Users/arnoudb/Library/Wolfram/ApplicationData/\
ExternalEvaluate/Python/Venv/hypernetx/lib/python3.11/site-packages/hypernetx/\
classes/entityset.py"]], Appearance -> "Frameless", Evaluator -> Automatic, 
                    Method -> "Preemptive"], "\" in \"", 
                    "\"elements_by_column\""}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Users/arnoudb/Library/Wolfram/ApplicationData/\
ExternalEvaluate/Python/Venv/hypernetx/lib/python3.11/site-packages/hypernetx/\
classes/entityset.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Users/arnoudb/Library/Wolfram/ApplicationData/\
ExternalEvaluate/Python/Venv/hypernetx/lib/python3.11/site-packages/hypernetx/\
classes/entityset.py"], 
                    SystemOpen[
                    "/Users/arnoudb/Library/Wolfram/ApplicationData/\
ExternalEvaluate/Python/Venv/hypernetx/lib/python3.11/site-packages/hypernetx/\
classes/entityset.py"]], Appearance -> "Frameless", Evaluator -> Automatic, 
                    Method -> "Preemptive"], "\" in \"", 
                    "\"elements_by_column\""}, "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{
                    "\" 611.          elements_by_level : same functionality, \
takes level indices instead of column names\""}, {"\" 612.  \""}, {
                    "\" 613.          \\\"\\\"\\\"\""}, {
                    
                    "\" 614.          if \\\"elements\\\" not in \
self._state_dict:\""}, {
                    "\" 615.              self._state_dict[\\\"elements\\\"] \
= defaultdict(dict)\""}, {
                    "\" 616.          if col2 not in \
self._state_dict[\\\"elements\\\"][col1]:\""}, {
                    "\" 617.              level = self.index(col1)\""}, {
                    ItemBox[
                    "\" 618.              elements = \
self._dataframe.groupby(col1)[col2].unique().to_dict()\"", Background -> 
                    RGBColor[1, 1, 0.85], StripOnInput -> False]}, {
                    "\" 619.              \
self._state_dict[\\\"elements\\\"][col1][col2] = {\""}, {
                    "\" 620.                  item: AttrList(entity=self, \
key=(level, item), initlist=elem)\""}, {
                    "\" 621.                  for item, elem in \
elements.items()\""}, {"\" 622.              }\""}, {"\" 623.  \""}, {
                    "\" 624.          return \
self._state_dict[\\\"elements\\\"][col1][col2]\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\"self\"", 
                    "\"<hypernetx.classes.entityset.EntitySet object at \
0x1692e5990>\""}, {"\"col1\"", "\"nodes\""}, {"\"col2\"", 
                    "\"((1, 2), (1, 2), (1, 2, 3))\""}, {"\"level\"", 
                    "\"1\""}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {"Columns" -> {{
                    Null}}, "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<hypernetx.classes.entityset.EntitySet object at \
0x1692e5990>"}, {"col1", "nodes"}, {"col2", "((1, 2), (1, 2), (1, 2, 3))"}, {
                    "level", "1"}}, Background -> {Null, {LightGray}}, 
                    Alignment -> Left, Frame -> LightGray]}, False]], 
                    DynamicModuleValues -> Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Users/arnoudb/Library/Wolfram/ApplicationData/\
ExternalEvaluate/Python/Venv/hypernetx/lib/python3.11/site-packages/hypernetx/\
classes/entityset.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Users/arnoudb/Library/Wolfram/ApplicationData/\
ExternalEvaluate/Python/Venv/hypernetx/lib/python3.11/site-packages/hypernetx/\
classes/entityset.py"], 
                    SystemOpen[
                    "/Users/arnoudb/Library/Wolfram/ApplicationData/\
ExternalEvaluate/Python/Venv/hypernetx/lib/python3.11/site-packages/hypernetx/\
classes/entityset.py"]], Appearance -> "Frameless"], " in ", 
                    "elements_by_column"}], 
                    Column[{
                    
                    Column[{
                    " 611.          elements_by_level : same functionality, \
takes level indices instead of column names", " 612.  ", 
                    " 613.          \"\"\"", 
                    " 614.          if \"elements\" not in self._state_dict:",
                     " 615.              self._state_dict[\"elements\"] = \
defaultdict(dict)", 
                    " 616.          if col2 not in \
self._state_dict[\"elements\"][col1]:", 
                    " 617.              level = self.index(col1)", 
                    Item[
                    " 618.              elements = \
self._dataframe.groupby(col1)[col2].unique().to_dict()", Background -> 
                    LightYellow], 
                    " 619.              \
self._state_dict[\"elements\"][col1][col2] = {", 
                    " 620.                  item: AttrList(entity=self, \
key=(level, item), initlist=elem)", 
                    " 621.                  for item, elem in \
elements.items()", " 622.              }", " 623.  ", 
                    " 624.          return \
self._state_dict[\"elements\"][col1][col2]"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<hypernetx.classes.entityset.EntitySet object at \
0x1692e5990>"}, {"col1", "nodes"}, {"col2", "((1, 2), (1, 2), (1, 2, 3))"}, {
                    "level", "1"}}, Background -> {Null, {LightGray}}, 
                    Alignment -> Left, Frame -> LightGray]}]}]}, True]], 
                    DynamicModuleValues -> Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = True}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Users/arnoudb/Library/Wolfram/ApplicationData/\
ExternalEvaluate/Python/Venv/hypernetx/lib/python3.11/site-packages/pandas/\
core/groupby/generic.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Users/arnoudb/Library/Wolfram/ApplicationData/\
ExternalEvaluate/Python/Venv/hypernetx/lib/python3.11/site-packages/pandas/\
core/groupby/generic.py"], 
                    SystemOpen[
                    "/Users/arnoudb/Library/Wolfram/ApplicationData/\
ExternalEvaluate/Python/Venv/hypernetx/lib/python3.11/site-packages/pandas/\
core/groupby/generic.py"]], Appearance -> "Frameless", Evaluator -> Automatic,
                     Method -> "Preemptive"], "\" in \"", "\"__getitem__\""}, 
                    "RowDefault"]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Users/arnoudb/Library/Wolfram/ApplicationData/\
ExternalEvaluate/Python/Venv/hypernetx/lib/python3.11/site-packages/pandas/\
core/groupby/generic.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Users/arnoudb/Library/Wolfram/ApplicationData/\
ExternalEvaluate/Python/Venv/hypernetx/lib/python3.11/site-packages/pandas/\
core/groupby/generic.py"], 
                    SystemOpen[
                    "/Users/arnoudb/Library/Wolfram/ApplicationData/\
ExternalEvaluate/Python/Venv/hypernetx/lib/python3.11/site-packages/pandas/\
core/groupby/generic.py"]], Appearance -> "Frameless", Evaluator -> Automatic,
                     Method -> "Preemptive"], "\" in \"", "\"__getitem__\""}, 
                    "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{"\"1940.          if self.axis == 1:\""}, {
                    "\"1941.              # GH 37725\""}, {
                    "\"1942.              raise ValueError(\\\"Cannot subset \
columns when using axis=1\\\")\""}, {"\"1943.          # per GH 23566\""}, {
                    "\"1944.          if isinstance(key, tuple) and len(key) \
> 1:\""}, {
                    "\"1945.              # if len == 1, then it becomes a \
SeriesGroupBy and this is actually\""}, {
                    "\"1946.              # valid syntax, so don't raise\""}, {
                    ItemBox[
                    "\"1947.              raise ValueError(\"", Background -> 
                    RGBColor[1, 1, 0.85], StripOnInput -> False]}, {
                    "\"1948.                  \\\"Cannot subset columns with \
a tuple with more than one element. \\\"\""}, {
                    "\"1949.                  \\\"Use a list \
instead.\\\"\""}, {"\"1950.              )\""}, {
                    "\"1951.          return super().__getitem__(key)\""}, {
                    "\"1952.  \""}, {
                    "\"1953.      def _gotitem(self, key, ndim: int, \
subset=None):\""}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\"self\"", 
                    "\"<pandas.core.groupby.generic.DataFrameGroupBy object \
at 0x168785850>\""}, {"\"key\"", "\"((1, 2), (1, 2), (1, 2, 3))\""}, {
                    "\"__class__\"", 
                    "\"<class 'pandas.core.groupby.generic.DataFrameGroupBy'>\
\""}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Null}}, "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<pandas.core.groupby.generic.DataFrameGroupBy object at \
0x168785850>"}, {"key", "((1, 2), (1, 2), (1, 2, 3))"}, {
                    "__class__", 
                    "<class \
'pandas.core.groupby.generic.DataFrameGroupBy'>"}}, Background -> {
                    Null, {LightGray}}, Alignment -> Left, Frame -> 
                    LightGray]}, False]], DynamicModuleValues -> Automatic], 
                    Setting[#, {0}]& ]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Users/arnoudb/Library/Wolfram/ApplicationData/\
ExternalEvaluate/Python/Venv/hypernetx/lib/python3.11/site-packages/pandas/\
core/groupby/generic.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Users/arnoudb/Library/Wolfram/ApplicationData/\
ExternalEvaluate/Python/Venv/hypernetx/lib/python3.11/site-packages/pandas/\
core/groupby/generic.py"], 
                    SystemOpen[
                    "/Users/arnoudb/Library/Wolfram/ApplicationData/\
ExternalEvaluate/Python/Venv/hypernetx/lib/python3.11/site-packages/pandas/\
core/groupby/generic.py"]], Appearance -> "Frameless"], " in ", 
                    "__getitem__"}], 
                    Column[{
                    
                    Column[{"1940.          if self.axis == 1:", 
                    "1941.              # GH 37725", 
                    "1942.              raise ValueError(\"Cannot subset \
columns when using axis=1\")", "1943.          # per GH 23566", 
                    "1944.          if isinstance(key, tuple) and len(key) > \
1:", "1945.              # if len == 1, then it becomes a SeriesGroupBy and \
this is actually", "1946.              # valid syntax, so don't raise", 
                    Item[
                    "1947.              raise ValueError(", Background -> 
                    LightYellow], 
                    "1948.                  \"Cannot subset columns with a \
tuple with more than one element. \"", 
                    "1949.                  \"Use a list instead.\"", 
                    "1950.              )", 
                    "1951.          return super().__getitem__(key)", 
                    "1952.  ", 
                    "1953.      def _gotitem(self, key, ndim: int, \
subset=None):"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<pandas.core.groupby.generic.DataFrameGroupBy object at \
0x168785850>"}, {"key", "((1, 2), (1, 2), (1, 2, 3))"}, {
                    "__class__", 
                    "<class \
'pandas.core.groupby.generic.DataFrameGroupBy'>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, True]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], FontFamily -> "Courier", StripOnInput -> 
                    False], ImageMargins -> 0]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    
                    Row[{"ValueError", " ", 
                    "Cannot subset columns with a tuple with more than one \
element. Use a list instead."}], 
                    Style[
                    Column[{
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/language/\
decorators.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/language/\
decorators.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/language/\
decorators.py"]], Appearance -> "Frameless"], " in ", "safe_wl_execute"}], 
                    Column[{
                    
                    Column[{
                    "  14.      \"wl\": b'Failure[\"PythonFailure\", \
<|\"MessageTemplate\" -> \"Unexpected error occurred.\"|>]',", "  15.  }", 
                    "  16.  ", "  17.  ", 
                    "  18.  def safe_wl_execute(function, args=(), opts={}, \
export_opts={}, exception_class=None):", "  19.  ", "  20.      try:", 
                    Item[
                    "  21.          return export(function(*args, **opts), \
**export_opts)", Background -> LightYellow], 
                    "  22.      except Exception as export_exception:", 
                    "  23.          try:", "  24.              try:", 
                    "  25.  ", 
                    "  26.                  # The user can provide an \
exception class, and it can be broken, in which case we are running another", 
                    "  27.                  # try / except to return errors \
that are happening during class serialization"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "function", "<function handle_message at 0x1068b7560>"}, {
                    "args", "(<zmq.Socket(zmq.PAIR) at 0x106891240>,)"}, {
                    "opts", 
                    "{'consumer': <ExternalEvaluateConsumer globals=5 \
objects=1>}"}, {"export_opts", 
                    "{'object_processor': <function \
start_zmq_loop.<locals>.<lambda> at 0x105b189a0>, 'target_format': 'wxf'}"}, {
                    "exception_class", "None"}, {
                    "export_exception", 
                    "Cannot subset columns with a tuple with more than one \
element. Use a list instead."}}, Background -> {Null, {LightGray}}, Alignment -> 
                    Left, Frame -> LightGray]}]}]}, False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless"], " in ", 
                    "handle_message"}], 
                    Column[{
                    
                    Column[{
                    " 393.          self.socket.send(zmq.Frame(bytes))", 
                    " 394.  ", " 395.      def send_side_effect(self, expr):",
                     " 396.          \
self.write(export(self.keep_listening(expr), target_format=\"wxf\"))", 
                    " 397.  ", " 398.  ", 
                    " 399.  def handle_message(socket, consumer):", 
                    Item[
                    " 400.      result = \
binary_deserialize(socket.recv(copy=False).buffer, consumer=consumer)", 
                    Background -> LightYellow], " 401.  ", 
                    " 402.      sys.stdout.flush()", 
                    " 403.      return result", " 404.  ", " 405.  ", 
                    " 406.  def start_zmq_instance(port=None, \
write_to_stdout=True, **opts):"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "socket", "<zmq.Socket(zmq.PAIR) at 0x106891240>"}, {
                    "consumer", 
                    "<ExternalEvaluateConsumer globals=5 objects=1>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
__init__.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
__init__.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
__init__.py"]], Appearance -> "Frameless"], " in ", "binary_deserialize"}], 
                    Column[{
                    
                    Column[{"  33.  ", "  34.      \"\"\"", 
                    "  35.      parser = WXFParser(wxf_input)", 
                    "  36.      if consumer is None:", 
                    "  37.          consumer = WXFConsumerNumpy()", "  38.  ",
                     "  39.      try:", 
                    Item[
                    "  40.          o = \
consumer.next_expression(parser.tokens(), **kwargs)", Background -> 
                    LightYellow], "  41.      except StopIteration:", 
                    "  42.          raise WolframParserException(", 
                    "  43.              \"Input data does not represent a \
valid expression in WXF format. Expecting more input data.\"", 
                    "  44.          )", 
                    "  45.      if not \
parser.context.is_valid_final_state():", 
                    "  46.          raise WolframParserException("}, 
                    Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "wxf_input", 
                    "8:f\.03s0ExternalEvaluate`Private`\
ExternalEvaluateCommandS\n\
ReturnTypef\.04s0ExternalEvaluate`Private`ExternalEvaluateCommandS\.04Callf\
\.02s0ExternalEvaluate`Private`ExternalEvaluateCommandS\.0cGetReferenceLp3\.01\
\.00\.00\.00S\.04Callf\.03s\.04Listf\.02s\.04ListC\.01C\.02f\.02s\.04ListC\.01\
C\.02f\.03s\.04ListC\.01C\.02C\.03S\nExpression"}, {
                    "consumer", 
                    "<ExternalEvaluateConsumer globals=5 objects=1>"}, {
                    "kwargs", "{}"}, {
                    "parser", 
                    "<wolframclient.deserializers.wxf.wxfparser.WXFParser \
object at 0x1692e6190>"}}, Background -> {Null, {LightGray}}, Alignment -> 
                    Left, Frame -> LightGray]}]}]}, False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless"], " in ", "next_expression"}], 
                    Column[{
                    
                    Column[{
                    "  69.          constants.WXF_CONSTANTS.RuleDelayed: \
\"consume_rule_delayed\",", "  70.      }", "  71.  ", 
                    "  72.      def next_expression(self, tokens, **kwargs):",
                     "  73.          \"\"\"Deserialize the next expression \
starting at the next token yield by `tokens`.\"\"\"", 
                    "  74.          token = next(tokens)", 
                    "  75.          consumer = \
self._consumer_from_type(token.wxf_type)", 
                    Item[
                    "  76.          return consumer(token, tokens, **kwargs)",
                     Background -> LightYellow], "  77.  ", 
                    "  78.      def _consumer_from_type(self, wxf_type):", 
                    "  79.          try:", 
                    "  80.              func = self._mapping[wxf_type]", 
                    "  81.          except KeyError:", 
                    "  82.              raise WolframParserException("}, 
                    Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "self", 
                    "<ExternalEvaluateConsumer globals=5 objects=1>"}, {
                    "tokens", 
                    "<generator object WXFParser.tokens at 0x168ecae00>"}, {
                    "kwargs", "{}"}, {
                    "token", "WXFToken<b'f', data=None, len=3>"}, {
                    "consumer", 
                    "<bound method ExternalEvaluateConsumer.consume_function \
of <ExternalEvaluateConsumer globals=5 objects=1>>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless"], " in ", 
                    "consume_function"}], 
                    Column[{
                    
                    Column[{" 362.  ", 
                    " 363.      def __init__(self, routes_registry={}, \
objects_registry={}, globals_registry={}):", 
                    " 364.          self.objects_registry = \
registry(objects_registry)", 
                    " 365.          self.globals_registry = \
registry(globals_registry)", 
                    " 366.          self.routes_registry = \
registry(self.builtin_routes, **routes_registry)", " 367.  ", 
                    " 368.      def consume_function(self, *args, **kwargs):", 
                    Item[
                    " 369.          expr = super().consume_function(*args, \
**kwargs)", Background -> LightYellow], " 370.  ", 
                    " 371.          if check_wl_symbol(expr, \
self.hook_symbol):", " 372.              assert len(expr.args) >= 1", 
                    " 373.              return \
self.dispatch_wl_object(*expr.args)", " 374.  ", 
                    " 375.          return expr"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "self", 
                    "<ExternalEvaluateConsumer globals=5 objects=1>"}, {
                    "args", 
                    "(<wolframclient.deserializers.wxf.wxfparser.WXFToken \
object at 0x168f25fd0>, <generator object WXFParser.tokens at \
0x168ecae00>)"}, {"kwargs", "{}"}, {
                    "__class__", 
                    "<class \
'wolframclient.utils.externalevaluate.ExternalEvaluateConsumer'>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless"], " in ", "consume_function"}], 
                    Column[{
                    
                    Column[{
                    "  94.          Return a :class:`list` if the head is \
symbol `List`, otherwise returns the result of \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`", "  95.          applied to the head and arguments.", "  96.  ", 
                    "  97.          Usually custom parsing rules target \
Functions, but not List. To do so, it is recommended to override", 
                    "  98.          \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`.", "  99.          \"\"\"", 
                    " 100.          head = self.next_expression(tokens, \
**kwargs)", 
                    Item[
                    " 101.          args = tuple(", Background -> 
                    LightYellow], 
                    " 102.              self.next_expression(tokens, \
**kwargs) for i in range(current_token.length)", " 103.          )", 
                    " 104.          if head == self._LIST:", 
                    " 105.              return args", " 106.          else:", 
                    " 107.              return self.build_function(head, \
args, **kwargs)"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "self", 
                    "<ExternalEvaluateConsumer globals=5 objects=1>"}, {
                    "current_token", "WXFToken<b'f', data=None, len=3>"}, {
                    "tokens", 
                    "<generator object WXFParser.tokens at 0x168ecae00>"}, {
                    "kwargs", "{}"}, {
                    "head", 
                    "ExternalEvaluate`Private`ExternalEvaluateCommand"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless"], " in ", "<genexpr>"}], 
                    Column[{
                    
                    Column[{
                    "  95.          applied to the head and arguments.", 
                    "  96.  ", 
                    "  97.          Usually custom parsing rules target \
Functions, but not List. To do so, it is recommended to override", 
                    "  98.          \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`.", "  99.          \"\"\"", 
                    " 100.          head = self.next_expression(tokens, \
**kwargs)", " 101.          args = tuple(", 
                    Item[
                    " 102.              self.next_expression(tokens, \
**kwargs) for i in range(current_token.length)", Background -> LightYellow], 
                    " 103.          )", 
                    " 104.          if head == self._LIST:", 
                    " 105.              return args", " 106.          else:", 
                    " 107.              return self.build_function(head, \
args, **kwargs)", " 108.  "}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    ".0", "<range_iterator object at 0x168f3a280>"}, {
                    "i", "1"}, {"kwargs", "{}"}, {
                    "self", 
                    "<ExternalEvaluateConsumer globals=5 objects=1>"}, {
                    "tokens", 
                    "<generator object WXFParser.tokens at 0x168ecae00>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless"], " in ", "next_expression"}], 
                    Column[{
                    
                    Column[{
                    "  69.          constants.WXF_CONSTANTS.RuleDelayed: \
\"consume_rule_delayed\",", "  70.      }", "  71.  ", 
                    "  72.      def next_expression(self, tokens, **kwargs):",
                     "  73.          \"\"\"Deserialize the next expression \
starting at the next token yield by `tokens`.\"\"\"", 
                    "  74.          token = next(tokens)", 
                    "  75.          consumer = \
self._consumer_from_type(token.wxf_type)", 
                    Item[
                    "  76.          return consumer(token, tokens, **kwargs)",
                     Background -> LightYellow], "  77.  ", 
                    "  78.      def _consumer_from_type(self, wxf_type):", 
                    "  79.          try:", 
                    "  80.              func = self._mapping[wxf_type]", 
                    "  81.          except KeyError:", 
                    "  82.              raise WolframParserException("}, 
                    Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "self", 
                    "<ExternalEvaluateConsumer globals=5 objects=1>"}, {
                    "tokens", 
                    "<generator object WXFParser.tokens at 0x168ecae00>"}, {
                    "kwargs", "{}"}, {
                    "token", "WXFToken<b'f', data=None, len=4>"}, {
                    "consumer", 
                    "<bound method ExternalEvaluateConsumer.consume_function \
of <ExternalEvaluateConsumer globals=5 objects=1>>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless"], " in ", 
                    "consume_function"}], 
                    Column[{
                    
                    Column[{
                    " 366.          self.routes_registry = \
registry(self.builtin_routes, **routes_registry)", " 367.  ", 
                    " 368.      def consume_function(self, *args, **kwargs):",
                     " 369.          expr = super().consume_function(*args, \
**kwargs)", " 370.  ", 
                    " 371.          if check_wl_symbol(expr, \
self.hook_symbol):", " 372.              assert len(expr.args) >= 1", 
                    Item[
                    " 373.              return \
self.dispatch_wl_object(*expr.args)", Background -> LightYellow], " 374.  ", 
                    " 375.          return expr", " 376.  ", 
                    " 377.      def dispatch_wl_object(self, route, *args):", 
                    " 378.          return self.routes_registry[route](self, \
*args)", " 379.  "}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "self", 
                    "<ExternalEvaluateConsumer globals=5 objects=1>"}, {
                    "args", 
                    "(<wolframclient.deserializers.wxf.wxfparser.WXFToken \
object at 0x168f24450>, <generator object WXFParser.tokens at \
0x168ecae00>)"}, {"kwargs", "{}"}, {
                    "expr", 
                    "ExternalEvaluate`Private`ExternalEvaluateCommand['Call', \
<class 'hypernetx.classes.hypergraph.Hypergraph'>, 'Call', ((1, 2), (1, 2), \
(1, 2, 3))]"}, {"__class__", 
                    "<class \
'wolframclient.utils.externalevaluate.ExternalEvaluateConsumer'>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless"], " in ", 
                    "dispatch_wl_object"}], 
                    Column[{
                    
                    Column[{
                    " 371.          if check_wl_symbol(expr, \
self.hook_symbol):", " 372.              assert len(expr.args) >= 1", 
                    " 373.              return \
self.dispatch_wl_object(*expr.args)", " 374.  ", " 375.          return expr",
                     " 376.  ", 
                    " 377.      def dispatch_wl_object(self, route, *args):", 
                    
                    Item[
                    " 378.          return self.routes_registry[route](self, \
*args)", Background -> LightYellow], " 379.  ", 
                    " 380.      def __repr__(self):", 
                    " 381.          return \"<{} globals={} \
objects={}>\".format(", 
                    " 382.              self.__class__.__name__, \
len(self.globals_registry), len(self.objects_registry)", " 383.          )", 
                    " 384.  "}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    Grid[{{"Key", "Value"}, {
                    "self", 
                    "<ExternalEvaluateConsumer globals=5 objects=1>"}, {
                    "route", "Call"}, {
                    "args", 
                    "(<class 'hypernetx.classes.hypergraph.Hypergraph'>, \
'Call', ((1, 2), (1, 2), (1, 2, 3)))"}}, Background -> {Null, {LightGray}}, 
                    Alignment -> Left, Frame -> LightGray]}]}]}, False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless"], " in ", "Call"}], 
                    Column[{
                    
                    Column[{" 248.  ", " 249.  ", 
                    " 250.  @routes.register_function", 
                    " 251.  def Call(consumer, result, *args):", " 252.  ", 
                    " 253.      pos, kwargs = unpack_optionals(args)", 
                    " 254.  ", 
                    Item[
                    " 255.      return result(*pos, **kwargs)", Background -> 
                    LightYellow], " 256.  ", 
                    " 257.  @routes.register_function", 
                    " 258.  def FromUnixTime(consumer, unixtime, timezone):", 
                    " 259.      if timezone is None:", " 260.          pass", 
                    " 261.      elif isinstance(timezone, \
six.string_types):"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "consumer", 
                    "<ExternalEvaluateConsumer globals=5 objects=1>"}, {
                    "result", 
                    "<class 'hypernetx.classes.hypergraph.Hypergraph'>"}, {
                    "args", "('Call', ((1, 2), (1, 2), (1, 2, 3)))"}, {
                    "pos", "['Call', ((1, 2), (1, 2), (1, 2, 3))]"}, {
                    "kwargs", "{}"}}, Background -> {Null, {LightGray}}, 
                    Alignment -> Left, Frame -> LightGray]}]}]}, False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Users/arnoudb/Library/Wolfram/ApplicationData/\
ExternalEvaluate/Python/Venv/hypernetx/lib/python3.11/site-packages/hypernetx/\
utils/decorators.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Users/arnoudb/Library/Wolfram/ApplicationData/\
ExternalEvaluate/Python/Venv/hypernetx/lib/python3.11/site-packages/hypernetx/\
utils/decorators.py"], 
                    SystemOpen[
                    "/Users/arnoudb/Library/Wolfram/ApplicationData/\
ExternalEvaluate/Python/Venv/hypernetx/lib/python3.11/site-packages/hypernetx/\
utils/decorators.py"]], Appearance -> "Frameless"], " in ", "wrapper"}], 
                    Column[{
                    
                    Column[{"  79.      def wrapper(*args, **kwargs):", 
                    "  80.          if kwargs.get(\"use_nwhy\"):", 
                    "  81.              kwargs.update(use_nwhy=False)", 
                    "  82.              warnings.simplefilter(\"always\", \
FutureWarning)", 
                    "  83.              warnings.warn(NWHY_WARNING, \
FutureWarning, stacklevel=2)", 
                    "  84.              warnings.simplefilter(\"default\", \
FutureWarning)", "  85.  ", 
                    Item[
                    "  86.          return func(*args, **kwargs)", Background -> 
                    LightYellow], "  87.  ", "  88.      return wrapper", 
                    "  89.  ", "  90.  ", 
                    "  91.  def warn_to_be_deprecated(func):", 
                    "  92.      \"\"\"Decorator for methods that are to be \
deprecated"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "args", 
                    "(, hypernetx.classes.hypergraph.Hypergraph, 'Call', ((1, \
2), (1, 2), (1, 2, 3)))"}, {"kwargs", "{}"}, {
                    "func", "<function Hypergraph.__init__ at 0x133a9db20>"}},
                     Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Users/arnoudb/Library/Wolfram/ApplicationData/\
ExternalEvaluate/Python/Venv/hypernetx/lib/python3.11/site-packages/hypernetx/\
classes/hypergraph.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Users/arnoudb/Library/Wolfram/ApplicationData/\
ExternalEvaluate/Python/Venv/hypernetx/lib/python3.11/site-packages/hypernetx/\
classes/hypergraph.py"], 
                    SystemOpen[
                    "/Users/arnoudb/Library/Wolfram/ApplicationData/\
ExternalEvaluate/Python/Venv/hypernetx/lib/python3.11/site-packages/hypernetx/\
classes/hypergraph.py"]], Appearance -> "Frameless"], " in ", "__init__"}], 
                    Column[{
                    
                    Column[{
                    " 556.                  \
misc_cell_props_col=misc_cell_properties_col or \"cell_properties\",", 
                    " 557.                  aggregateby=aggregateby or \
\"sum\",", " 558.                  properties=properties,", 
                    " 559.                  \
misc_props_col=misc_properties_col,", " 560.              )", " 561.  ", 
                    " 562.              self._edges = self.E", 
                    Item[
                    " 563.              self._nodes = \
self.E.restrict_to_levels([1])", Background -> LightYellow], 
                    " 564.              self._data_cols = data_cols = \
[self._edge_col, self._node_col]", " 565.  ", 
                    " 566.              self._dataframe = \
self.E.cell_properties", " 567.              if self._dataframe is not None:",
                     " 568.                  self._dataframe = \
self._dataframe.reset_index()", 
                    " 569.                  self._dataframe[data_cols] = \
self._dataframe[data_cols].astype("}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "self", 
                    ", <class 'hypernetx.classes.hypergraph.Hypergraph'>"}, {
                    "setsystem", "Call"}, {
                    "edge_col", "((1, 2), (1, 2), (1, 2, 3))"}, {
                    "node_col", "nodes"}, {
                    "cell_weight_col", "cell_weights"}, {
                    "cell_weights", "1.0"}, {"cell_properties", "None"}, {
                    "misc_cell_properties_col", "None"}, {
                    "aggregateby", "first"}, {"edge_properties", "None"}, {
                    "node_properties", "None"}, {"properties", "None"}, {
                    "misc_properties_col", "properties"}, {
                    "edge_weight_prop_col", "weight"}, {
                    "node_weight_prop_col", "weight"}, {
                    "weight_prop_col", "weight"}, {
                    "default_edge_weight", "1.0"}, {
                    "default_node_weight", "1.0"}, {
                    "default_weight", "1.0"}, {"name", "None"}, {
                    "kwargs", "{}"}, {
                    "misc_cell_properties", "cell_properties"}, {
                    "entity", 
                    "   ((1, 2), (1, 2), (1, 2, 3)) nodes  cell_weights\n0    \
                        0  Call           1.0"}, {
                    "props2dict", 
                    "<function Hypergraph.__init__.<locals>.props2dict at \
0x169304fe0>"}}, Background -> {Null, {LightGray}}, Alignment -> Left, Frame -> 
                    LightGray]}]}]}, False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Users/arnoudb/Library/Wolfram/ApplicationData/\
ExternalEvaluate/Python/Venv/hypernetx/lib/python3.11/site-packages/hypernetx/\
utils/decorators.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Users/arnoudb/Library/Wolfram/ApplicationData/\
ExternalEvaluate/Python/Venv/hypernetx/lib/python3.11/site-packages/hypernetx/\
utils/decorators.py"], 
                    SystemOpen[
                    "/Users/arnoudb/Library/Wolfram/ApplicationData/\
ExternalEvaluate/Python/Venv/hypernetx/lib/python3.11/site-packages/hypernetx/\
utils/decorators.py"]], Appearance -> "Frameless"], " in ", "wrapper"}], 
                    Column[{
                    
                    Column[{" 105.      )", " 106.  ", 
                    " 107.      @wraps(func)", 
                    " 108.      def wrapper(*args, **kwargs):", 
                    " 109.          warnings.simplefilter(\"always\", \
FutureWarning)", 
                    " 110.          warnings.warn(deprecation_warning_msg, \
FutureWarning, stacklevel=2)", 
                    " 111.          warnings.simplefilter(\"default\", \
FutureWarning)", 
                    Item[
                    " 112.          return func(*args, **kwargs)", Background -> 
                    LightYellow], " 113.  ", " 114.      return wrapper"}, 
                    Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "args", 
                    "(<hypernetx.classes.entityset.EntitySet object at \
0x1692e5990>, [1])"}, {"kwargs", "{}"}, {
                    "deprecation_warning_msg", 
                    "This method or function will be deprecated in a future \
release. Public references to this method or function will be removed from \
the Hypergraph API in a future release."}, {
                    "func", 
                    "<function EntitySet.restrict_to_levels at \
0x133a9d440>"}}, Background -> {Null, {LightGray}}, Alignment -> Left, Frame -> 
                    LightGray]}]}]}, False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Users/arnoudb/Library/Wolfram/ApplicationData/\
ExternalEvaluate/Python/Venv/hypernetx/lib/python3.11/site-packages/hypernetx/\
classes/entityset.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Users/arnoudb/Library/Wolfram/ApplicationData/\
ExternalEvaluate/Python/Venv/hypernetx/lib/python3.11/site-packages/hypernetx/\
classes/entityset.py"], 
                    SystemOpen[
                    "/Users/arnoudb/Library/Wolfram/ApplicationData/\
ExternalEvaluate/Python/Venv/hypernetx/lib/python3.11/site-packages/hypernetx/\
classes/entityset.py"]], Appearance -> "Frameless"], " in ", 
                    "restrict_to_levels"}], 
                    Column[{
                    
                    Column[{"2016.              aggregateby,", 
                    "2017.              **kwargs,", "2018.          )", 
                    "2019.  ", "2020.          if keep_memberships:", 
                    "2021.              # use original memberships to set \
memberships for the new EntitySet", 
                    "2022.              # TODO: This assumes levels=[1], add \
explicit checks for other cases", 
                    Item[
                    "2023.              \
restricted._state_dict[\"memberships\"] = self.memberships", Background -> 
                    LightYellow], "2024.  ", 
                    "2025.          return restricted", "2026.  ", 
                    "2027.      def collapse_identical_elements(", 
                    "2028.          self, return_equivalence_classes: bool = \
False, **kwargs", 
                    "2029.      ) -> EntitySet | tuple[EntitySet, dict[str, \
list[str]]]:"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "self", 
                    "<hypernetx.classes.entityset.EntitySet object at \
0x1692e5990>"}, {"levels", "[1]"}, {"weights", "False"}, {
                    "aggregateby", "sum"}, {"keep_memberships", "True"}, {
                    "kwargs", "{}"}, {
                    "restricted", 
                    "<hypernetx.classes.entityset.EntitySet object at \
0x143c47fd0>"}}, Background -> {Null, {LightGray}}, Alignment -> Left, Frame -> 
                    LightGray]}]}]}, False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Users/arnoudb/Library/Wolfram/ApplicationData/\
ExternalEvaluate/Python/Venv/hypernetx/lib/python3.11/site-packages/hypernetx/\
classes/entityset.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Users/arnoudb/Library/Wolfram/ApplicationData/\
ExternalEvaluate/Python/Venv/hypernetx/lib/python3.11/site-packages/hypernetx/\
classes/entityset.py"], 
                    SystemOpen[
                    "/Users/arnoudb/Library/Wolfram/ApplicationData/\
ExternalEvaluate/Python/Venv/hypernetx/lib/python3.11/site-packages/hypernetx/\
classes/entityset.py"]], Appearance -> "Frameless"], " in ", "memberships"}], 
                    
                    Column[{
                    
                    Column[{" 547.          --------", 
                    " 548.          elements : dual of this representation \
i.e., each item in level 0 (first column) defines a set", 
                    " 549.          elements_by_level, elements_by_column :", 
                    " 550.              system of sets representation of any \
two levels (columns); specified by level index or column name", " 551.  ", 
                    " 552.          \"\"\"", " 553.  ", 
                    Item[
                    " 554.          return self.elements_by_level(1, 0)", 
                    Background -> LightYellow], " 555.  ", 
                    " 556.      def elements_by_level(self, level1: int, \
level2: int) -> dict[Any, AttrList]:", 
                    " 557.          \"\"\"System of sets representation of \
two levels (columns) of the underlying data table", " 558.  ", 
                    " 559.          Each item in level1 defines a set \
containing all the level2 items", 
                    " 560.          with which it appears in the same row of \
the underlying data table"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "self", 
                    "<hypernetx.classes.entityset.EntitySet object at \
0x1692e5990>"}}, Background -> {Null, {LightGray}}, Alignment -> Left, Frame -> 
                    LightGray]}]}]}, False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Users/arnoudb/Library/Wolfram/ApplicationData/\
ExternalEvaluate/Python/Venv/hypernetx/lib/python3.11/site-packages/hypernetx/\
classes/entityset.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Users/arnoudb/Library/Wolfram/ApplicationData/\
ExternalEvaluate/Python/Venv/hypernetx/lib/python3.11/site-packages/hypernetx/\
classes/entityset.py"], 
                    SystemOpen[
                    "/Users/arnoudb/Library/Wolfram/ApplicationData/\
ExternalEvaluate/Python/Venv/hypernetx/lib/python3.11/site-packages/hypernetx/\
classes/entityset.py"]], Appearance -> "Frameless"], " in ", 
                    "elements_by_level"}], 
                    Column[{
                    
                    Column[{
                    " 579.          elements_by_column : same functionality, \
takes column names instead of level indices", " 580.  ", 
                    " 581.          \"\"\"", 
                    " 582.          if len(self._data_cols) == 1:", 
                    " 583.              return self._state_dict[\"memberships\
\"]", " 584.          col1 = self._data_cols[level1]", 
                    " 585.          col2 = self._data_cols[level2]", 
                    Item[
                    " 586.          return self.elements_by_column(col1, \
col2)", Background -> LightYellow], " 587.  ", 
                    " 588.      def elements_by_column(self, col1: Hashable, \
col2: Hashable) -> dict[Any, AttrList]:", 
                    " 589.          \"\"\"System of sets representation of \
two columns (levels) of the underlying data table", " 590.  ", 
                    " 591.          Each item in col1 defines a set \
containing all the col2 items", 
                    " 592.          with which it appears in the same row of \
the underlying data table"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "self", 
                    "<hypernetx.classes.entityset.EntitySet object at \
0x1692e5990>"}, {"level1", "1"}, {"level2", "0"}, {"col1", "nodes"}, {
                    "col2", "((1, 2), (1, 2), (1, 2, 3))"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Users/arnoudb/Library/Wolfram/ApplicationData/\
ExternalEvaluate/Python/Venv/hypernetx/lib/python3.11/site-packages/hypernetx/\
classes/entityset.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Users/arnoudb/Library/Wolfram/ApplicationData/\
ExternalEvaluate/Python/Venv/hypernetx/lib/python3.11/site-packages/hypernetx/\
classes/entityset.py"], 
                    SystemOpen[
                    "/Users/arnoudb/Library/Wolfram/ApplicationData/\
ExternalEvaluate/Python/Venv/hypernetx/lib/python3.11/site-packages/hypernetx/\
classes/entityset.py"]], Appearance -> "Frameless"], " in ", 
                    "elements_by_column"}], 
                    Column[{
                    
                    Column[{
                    " 611.          elements_by_level : same functionality, \
takes level indices instead of column names", " 612.  ", 
                    " 613.          \"\"\"", 
                    " 614.          if \"elements\" not in self._state_dict:",
                     " 615.              self._state_dict[\"elements\"] = \
defaultdict(dict)", 
                    " 616.          if col2 not in \
self._state_dict[\"elements\"][col1]:", 
                    " 617.              level = self.index(col1)", 
                    Item[
                    " 618.              elements = \
self._dataframe.groupby(col1)[col2].unique().to_dict()", Background -> 
                    LightYellow], 
                    " 619.              \
self._state_dict[\"elements\"][col1][col2] = {", 
                    " 620.                  item: AttrList(entity=self, \
key=(level, item), initlist=elem)", 
                    " 621.                  for item, elem in \
elements.items()", " 622.              }", " 623.  ", 
                    " 624.          return \
self._state_dict[\"elements\"][col1][col2]"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "self", 
                    "<hypernetx.classes.entityset.EntitySet object at \
0x1692e5990>"}, {"col1", "nodes"}, {"col2", "((1, 2), (1, 2), (1, 2, 3))"}, {
                    "level", "1"}}, Background -> {Null, {LightGray}}, 
                    Alignment -> Left, Frame -> LightGray]}]}]}, True], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Users/arnoudb/Library/Wolfram/ApplicationData/\
ExternalEvaluate/Python/Venv/hypernetx/lib/python3.11/site-packages/pandas/\
core/groupby/generic.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Users/arnoudb/Library/Wolfram/ApplicationData/\
ExternalEvaluate/Python/Venv/hypernetx/lib/python3.11/site-packages/pandas/\
core/groupby/generic.py"], 
                    SystemOpen[
                    "/Users/arnoudb/Library/Wolfram/ApplicationData/\
ExternalEvaluate/Python/Venv/hypernetx/lib/python3.11/site-packages/pandas/\
core/groupby/generic.py"]], Appearance -> "Frameless"], " in ", 
                    "__getitem__"}], 
                    Column[{
                    
                    Column[{"1940.          if self.axis == 1:", 
                    "1941.              # GH 37725", 
                    "1942.              raise ValueError(\"Cannot subset \
columns when using axis=1\")", "1943.          # per GH 23566", 
                    "1944.          if isinstance(key, tuple) and len(key) > \
1:", "1945.              # if len == 1, then it becomes a SeriesGroupBy and \
this is actually", "1946.              # valid syntax, so don't raise", 
                    Item[
                    "1947.              raise ValueError(", Background -> 
                    LightYellow], 
                    "1948.                  \"Cannot subset columns with a \
tuple with more than one element. \"", 
                    "1949.                  \"Use a list instead.\"", 
                    "1950.              )", 
                    "1951.          return super().__getitem__(key)", 
                    "1952.  ", 
                    "1953.      def _gotitem(self, key, ndim: int, \
subset=None):"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "self", 
                    "<pandas.core.groupby.generic.DataFrameGroupBy object at \
0x168785850>"}, {"key", "((1, 2), (1, 2), (1, 2, 3))"}, {
                    "__class__", 
                    "<class \
'pandas.core.groupby.generic.DataFrameGroupBy'>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, True]}], FontFamily -> 
                    "Courier"]}, True]], DynamicModuleValues -> Automatic], 
                    Setting[#, {0}]& ], HoldForm], "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  Failure[
  "PythonError", <|
   "MessageTemplate" :> 
    "Cannot subset columns with a tuple with more than one element. Use a \
list instead.", "MessageParameters" :> <||>, "FailureCode" :> "ValueError", 
    "Traceback" :> OpenerView[{
       Row[{
        "ValueError", " ", 
         "Cannot subset columns with a tuple with more than one element. Use \
a list instead."}], 
       Style[
        Column[{
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/language/\
decorators.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/language/\
decorators.py"], 
                SystemOpen[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/language/\
decorators.py"]], Appearance -> "Frameless"], " in ", "safe_wl_execute"}], 
            Column[{
              
              Column[{"  14.      \"wl\": b'Failure[\"PythonFailure\", \
<|\"MessageTemplate\" -> \"Unexpected error occurred.\"|>]',", "  15.  }", 
                "  16.  ", "  17.  ", 
                "  18.  def safe_wl_execute(function, args=(), opts={}, \
export_opts={}, exception_class=None):", "  19.  ", "  20.      try:", 
                Item[
                "  21.          return export(function(*args, **opts), \
**export_opts)", Background -> LightYellow], 
                "  22.      except Exception as export_exception:", 
                "  23.          try:", "  24.              try:", "  25.  ", 
                "  26.                  # The user can provide an exception \
class, and it can be broken, in which case we are running another", 
                "  27.                  # try / except to return errors that \
are happening during class serialization"}, Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  "function", "<function handle_message at 0x1068b7560>"}, {
                  "args", "(<zmq.Socket(zmq.PAIR) at 0x106891240>,)"}, {
                  "opts", 
                   "{'consumer': <ExternalEvaluateConsumer globals=5 \
objects=1>}"}, {"export_opts", 
                   "{'object_processor': <function \
start_zmq_loop.<locals>.<lambda> at 0x105b189a0>, 'target_format': 'wxf'}"}, {
                  "exception_class", "None"}, {
                  "export_exception", 
                   "Cannot subset columns with a tuple with more than one \
element. Use a list instead."}}, Background -> {Null, {LightGray}}, Alignment -> 
                 Left, Frame -> LightGray]}]}]}, False], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                SystemOpen[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless"], " in ", 
              "handle_message"}], 
            Column[{
              
              Column[{" 393.          self.socket.send(zmq.Frame(bytes))", 
                " 394.  ", " 395.      def send_side_effect(self, expr):", 
                " 396.          self.write(export(self.keep_listening(expr), \
target_format=\"wxf\"))", " 397.  ", " 398.  ", 
                " 399.  def handle_message(socket, consumer):", 
                Item[
                " 400.      result = \
binary_deserialize(socket.recv(copy=False).buffer, consumer=consumer)", 
                 Background -> LightYellow], " 401.  ", 
                " 402.      sys.stdout.flush()", " 403.      return result", 
                " 404.  ", " 405.  ", 
                " 406.  def start_zmq_instance(port=None, \
write_to_stdout=True, **opts):"}, Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  "socket", "<zmq.Socket(zmq.PAIR) at 0x106891240>"}, {
                  "consumer", 
                   "<ExternalEvaluateConsumer globals=5 objects=1>"}}, 
                 Background -> {Null, {LightGray}}, Alignment -> Left, Frame -> 
                 LightGray]}]}]}, False], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
__init__.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
__init__.py"], 
                SystemOpen[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
__init__.py"]], Appearance -> "Frameless"], " in ", "binary_deserialize"}], 
            Column[{
              
              Column[{"  33.  ", "  34.      \"\"\"", 
                "  35.      parser = WXFParser(wxf_input)", 
                "  36.      if consumer is None:", 
                "  37.          consumer = WXFConsumerNumpy()", "  38.  ", 
                "  39.      try:", 
                Item[
                "  40.          o = consumer.next_expression(parser.tokens(), \
**kwargs)", Background -> LightYellow], "  41.      except StopIteration:", 
                "  42.          raise WolframParserException(", 
                "  43.              \"Input data does not represent a valid \
expression in WXF format. Expecting more input data.\"", "  44.          )", 
                "  45.      if not parser.context.is_valid_final_state():", 
                "  46.          raise WolframParserException("}, 
               Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  "wxf_input", 
                   "8:f\.03s0ExternalEvaluate`Private`\
ExternalEvaluateCommandS\n\
ReturnTypef\.04s0ExternalEvaluate`Private`ExternalEvaluateCommandS\.04Callf\
\.02s0ExternalEvaluate`Private`ExternalEvaluateCommandS\.0cGetReferenceLp3\.01\
\.00\.00\.00S\.04Callf\.03s\.04Listf\.02s\.04ListC\.01C\.02f\.02s\.04ListC\.01\
C\.02f\.03s\.04ListC\.01C\.02C\.03S\nExpression"}, {
                  "consumer", 
                   "<ExternalEvaluateConsumer globals=5 objects=1>"}, {
                  "kwargs", "{}"}, {
                  "parser", 
                   "<wolframclient.deserializers.wxf.wxfparser.WXFParser \
object at 0x1692e6190>"}}, Background -> {Null, {LightGray}}, Alignment -> 
                 Left, Frame -> LightGray]}]}]}, False], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                SystemOpen[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless"], " in ", "next_expression"}], 
            Column[{
              
              Column[{"  69.          constants.WXF_CONSTANTS.RuleDelayed: \
\"consume_rule_delayed\",", "  70.      }", "  71.  ", 
                "  72.      def next_expression(self, tokens, **kwargs):", 
                "  73.          \"\"\"Deserialize the next expression \
starting at the next token yield by `tokens`.\"\"\"", 
                "  74.          token = next(tokens)", 
                "  75.          consumer = \
self._consumer_from_type(token.wxf_type)", 
                Item[
                "  76.          return consumer(token, tokens, **kwargs)", 
                 Background -> LightYellow], "  77.  ", 
                "  78.      def _consumer_from_type(self, wxf_type):", 
                "  79.          try:", 
                "  80.              func = self._mapping[wxf_type]", 
                "  81.          except KeyError:", 
                "  82.              raise WolframParserException("}, 
               Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  "self", "<ExternalEvaluateConsumer globals=5 objects=1>"}, {
                  "tokens", 
                   "<generator object WXFParser.tokens at 0x168ecae00>"}, {
                  "kwargs", "{}"}, {
                  "token", "WXFToken<b'f', data=None, len=3>"}, {
                  "consumer", 
                   "<bound method ExternalEvaluateConsumer.consume_function \
of <ExternalEvaluateConsumer globals=5 objects=1>>"}}, 
                 Background -> {Null, {LightGray}}, Alignment -> Left, Frame -> 
                 LightGray]}]}]}, False], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                SystemOpen[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless"], " in ", 
              "consume_function"}], 
            Column[{
              
              Column[{" 362.  ", 
                " 363.      def __init__(self, routes_registry={}, \
objects_registry={}, globals_registry={}):", 
                " 364.          self.objects_registry = \
registry(objects_registry)", 
                " 365.          self.globals_registry = \
registry(globals_registry)", 
                " 366.          self.routes_registry = \
registry(self.builtin_routes, **routes_registry)", " 367.  ", 
                " 368.      def consume_function(self, *args, **kwargs):", 
                Item[
                " 369.          expr = super().consume_function(*args, \
**kwargs)", Background -> LightYellow], " 370.  ", 
                " 371.          if check_wl_symbol(expr, self.hook_symbol):", 
                " 372.              assert len(expr.args) >= 1", 
                " 373.              return \
self.dispatch_wl_object(*expr.args)", " 374.  ", 
                " 375.          return expr"}, Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  "self", "<ExternalEvaluateConsumer globals=5 objects=1>"}, {
                  "args", 
                   "(<wolframclient.deserializers.wxf.wxfparser.WXFToken \
object at 0x168f25fd0>, <generator object WXFParser.tokens at \
0x168ecae00>)"}, {"kwargs", "{}"}, {
                  "__class__", 
                   "<class \
'wolframclient.utils.externalevaluate.ExternalEvaluateConsumer'>"}}, 
                 Background -> {Null, {LightGray}}, Alignment -> Left, Frame -> 
                 LightGray]}]}]}, False], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                SystemOpen[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless"], " in ", "consume_function"}], 
            Column[{
              
              Column[{"  94.          Return a :class:`list` if the head is \
symbol `List`, otherwise returns the result of \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`", "  95.          applied to the head and arguments.", "  96.  ", 
                "  97.          Usually custom parsing rules target \
Functions, but not List. To do so, it is recommended to override", 
                "  98.          \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`.", "  99.          \"\"\"", 
                " 100.          head = self.next_expression(tokens, \
**kwargs)", 
                Item[
                " 101.          args = tuple(", Background -> LightYellow], 
                " 102.              self.next_expression(tokens, **kwargs) \
for i in range(current_token.length)", " 103.          )", 
                " 104.          if head == self._LIST:", 
                " 105.              return args", " 106.          else:", 
                " 107.              return self.build_function(head, args, \
**kwargs)"}, Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  "self", "<ExternalEvaluateConsumer globals=5 objects=1>"}, {
                  "current_token", "WXFToken<b'f', data=None, len=3>"}, {
                  "tokens", 
                   "<generator object WXFParser.tokens at 0x168ecae00>"}, {
                  "kwargs", "{}"}, {
                  "head", 
                   "ExternalEvaluate`Private`ExternalEvaluateCommand"}}, 
                 Background -> {Null, {LightGray}}, Alignment -> Left, Frame -> 
                 LightGray]}]}]}, False], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                SystemOpen[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless"], " in ", "<genexpr>"}], 
            Column[{
              
              Column[{"  95.          applied to the head and arguments.", 
                "  96.  ", 
                "  97.          Usually custom parsing rules target \
Functions, but not List. To do so, it is recommended to override", 
                "  98.          \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`.", "  99.          \"\"\"", 
                " 100.          head = self.next_expression(tokens, \
**kwargs)", " 101.          args = tuple(", 
                Item[
                " 102.              self.next_expression(tokens, **kwargs) \
for i in range(current_token.length)", Background -> LightYellow], 
                " 103.          )", " 104.          if head == self._LIST:", 
                " 105.              return args", " 106.          else:", 
                
                " 107.              return self.build_function(head, args, \
**kwargs)", " 108.  "}, Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  ".0", "<range_iterator object at 0x168f3a280>"}, {
                  "i", "1"}, {"kwargs", "{}"}, {
                  "self", "<ExternalEvaluateConsumer globals=5 objects=1>"}, {
                  "tokens", 
                   "<generator object WXFParser.tokens at 0x168ecae00>"}}, 
                 Background -> {Null, {LightGray}}, Alignment -> Left, Frame -> 
                 LightGray]}]}]}, False], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                SystemOpen[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless"], " in ", "next_expression"}], 
            Column[{
              
              Column[{"  69.          constants.WXF_CONSTANTS.RuleDelayed: \
\"consume_rule_delayed\",", "  70.      }", "  71.  ", 
                "  72.      def next_expression(self, tokens, **kwargs):", 
                "  73.          \"\"\"Deserialize the next expression \
starting at the next token yield by `tokens`.\"\"\"", 
                "  74.          token = next(tokens)", 
                "  75.          consumer = \
self._consumer_from_type(token.wxf_type)", 
                Item[
                "  76.          return consumer(token, tokens, **kwargs)", 
                 Background -> LightYellow], "  77.  ", 
                "  78.      def _consumer_from_type(self, wxf_type):", 
                "  79.          try:", 
                "  80.              func = self._mapping[wxf_type]", 
                "  81.          except KeyError:", 
                "  82.              raise WolframParserException("}, 
               Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  "self", "<ExternalEvaluateConsumer globals=5 objects=1>"}, {
                  "tokens", 
                   "<generator object WXFParser.tokens at 0x168ecae00>"}, {
                  "kwargs", "{}"}, {
                  "token", "WXFToken<b'f', data=None, len=4>"}, {
                  "consumer", 
                   "<bound method ExternalEvaluateConsumer.consume_function \
of <ExternalEvaluateConsumer globals=5 objects=1>>"}}, 
                 Background -> {Null, {LightGray}}, Alignment -> Left, Frame -> 
                 LightGray]}]}]}, False], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                SystemOpen[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless"], " in ", 
              "consume_function"}], 
            Column[{
              
              Column[{" 366.          self.routes_registry = \
registry(self.builtin_routes, **routes_registry)", " 367.  ", 
                " 368.      def consume_function(self, *args, **kwargs):", 
                " 369.          expr = super().consume_function(*args, \
**kwargs)", " 370.  ", 
                " 371.          if check_wl_symbol(expr, self.hook_symbol):", 
                " 372.              assert len(expr.args) >= 1", 
                Item[
                " 373.              return \
self.dispatch_wl_object(*expr.args)", Background -> LightYellow], " 374.  ", 
                " 375.          return expr", " 376.  ", 
                " 377.      def dispatch_wl_object(self, route, *args):", 
                " 378.          return self.routes_registry[route](self, \
*args)", " 379.  "}, Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  "self", "<ExternalEvaluateConsumer globals=5 objects=1>"}, {
                  "args", 
                   "(<wolframclient.deserializers.wxf.wxfparser.WXFToken \
object at 0x168f24450>, <generator object WXFParser.tokens at \
0x168ecae00>)"}, {"kwargs", "{}"}, {
                  "expr", 
                   "ExternalEvaluate`Private`ExternalEvaluateCommand['Call', \
<class 'hypernetx.classes.hypergraph.Hypergraph'>, 'Call', ((1, 2), (1, 2), \
(1, 2, 3))]"}, {"__class__", 
                   "<class \
'wolframclient.utils.externalevaluate.ExternalEvaluateConsumer'>"}}, 
                 Background -> {Null, {LightGray}}, Alignment -> Left, Frame -> 
                 LightGray]}]}]}, False], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                SystemOpen[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless"], " in ", 
              "dispatch_wl_object"}], 
            Column[{
              
              Column[{" 371.          if check_wl_symbol(expr, \
self.hook_symbol):", " 372.              assert len(expr.args) >= 1", 
                " 373.              return \
self.dispatch_wl_object(*expr.args)", " 374.  ", " 375.          return expr",
                 " 376.  ", 
                " 377.      def dispatch_wl_object(self, route, *args):", 
                Item[
                " 378.          return self.routes_registry[route](self, \
*args)", Background -> LightYellow], " 379.  ", 
                " 380.      def __repr__(self):", 
                " 381.          return \"<{} globals={} \
objects={}>\".format(", 
                " 382.              self.__class__.__name__, \
len(self.globals_registry), len(self.objects_registry)", " 383.          )", 
                " 384.  "}, Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  "self", "<ExternalEvaluateConsumer globals=5 objects=1>"}, {
                  "route", "Call"}, {
                  "args", 
                   "(<class 'hypernetx.classes.hypergraph.Hypergraph'>, \
'Call', ((1, 2), (1, 2), (1, 2, 3)))"}}, Background -> {Null, {LightGray}}, 
                 Alignment -> Left, Frame -> LightGray]}]}]}, False], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                SystemOpen[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless"], " in ", "Call"}], 
            Column[{
              
              Column[{" 248.  ", " 249.  ", 
                " 250.  @routes.register_function", 
                " 251.  def Call(consumer, result, *args):", " 252.  ", 
                " 253.      pos, kwargs = unpack_optionals(args)", " 254.  ", 
                
                Item[
                " 255.      return result(*pos, **kwargs)", Background -> 
                 LightYellow], " 256.  ", " 257.  @routes.register_function", 
                " 258.  def FromUnixTime(consumer, unixtime, timezone):", 
                " 259.      if timezone is None:", " 260.          pass", 
                " 261.      elif isinstance(timezone, six.string_types):"}, 
               Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  "consumer", 
                   "<ExternalEvaluateConsumer globals=5 objects=1>"}, {
                  "result", 
                   "<class 'hypernetx.classes.hypergraph.Hypergraph'>"}, {
                  "args", "('Call', ((1, 2), (1, 2), (1, 2, 3)))"}, {
                  "pos", "['Call', ((1, 2), (1, 2), (1, 2, 3))]"}, {
                  "kwargs", "{}"}}, Background -> {Null, {LightGray}}, 
                 Alignment -> Left, Frame -> LightGray]}]}]}, False], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Users/arnoudb/Library/Wolfram/ApplicationData/\
ExternalEvaluate/Python/Venv/hypernetx/lib/python3.11/site-packages/hypernetx/\
utils/decorators.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Users/arnoudb/Library/Wolfram/ApplicationData/\
ExternalEvaluate/Python/Venv/hypernetx/lib/python3.11/site-packages/hypernetx/\
utils/decorators.py"], 
                SystemOpen[
                "/Users/arnoudb/Library/Wolfram/ApplicationData/\
ExternalEvaluate/Python/Venv/hypernetx/lib/python3.11/site-packages/hypernetx/\
utils/decorators.py"]], Appearance -> "Frameless"], " in ", "wrapper"}], 
            Column[{
              
              Column[{"  79.      def wrapper(*args, **kwargs):", 
                "  80.          if kwargs.get(\"use_nwhy\"):", 
                "  81.              kwargs.update(use_nwhy=False)", 
                "  82.              warnings.simplefilter(\"always\", \
FutureWarning)", 
                "  83.              warnings.warn(NWHY_WARNING, \
FutureWarning, stacklevel=2)", 
                "  84.              warnings.simplefilter(\"default\", \
FutureWarning)", "  85.  ", 
                Item[
                "  86.          return func(*args, **kwargs)", Background -> 
                 LightYellow], "  87.  ", "  88.      return wrapper", 
                "  89.  ", "  90.  ", 
                "  91.  def warn_to_be_deprecated(func):", 
                "  92.      \"\"\"Decorator for methods that are to be \
deprecated"}, Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  "args", 
                   "(, hypernetx.classes.hypergraph.Hypergraph, 'Call', ((1, \
2), (1, 2), (1, 2, 3)))"}, {"kwargs", "{}"}, {
                  "func", "<function Hypergraph.__init__ at 0x133a9db20>"}}, 
                 Background -> {Null, {LightGray}}, Alignment -> Left, Frame -> 
                 LightGray]}]}]}, False], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Users/arnoudb/Library/Wolfram/ApplicationData/\
ExternalEvaluate/Python/Venv/hypernetx/lib/python3.11/site-packages/hypernetx/\
classes/hypergraph.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Users/arnoudb/Library/Wolfram/ApplicationData/\
ExternalEvaluate/Python/Venv/hypernetx/lib/python3.11/site-packages/hypernetx/\
classes/hypergraph.py"], 
                SystemOpen[
                "/Users/arnoudb/Library/Wolfram/ApplicationData/\
ExternalEvaluate/Python/Venv/hypernetx/lib/python3.11/site-packages/hypernetx/\
classes/hypergraph.py"]], Appearance -> "Frameless"], " in ", "__init__"}], 
            Column[{
              
              Column[{" 556.                  \
misc_cell_props_col=misc_cell_properties_col or \"cell_properties\",", 
                " 557.                  aggregateby=aggregateby or \"sum\",", 
                " 558.                  properties=properties,", 
                " 559.                  misc_props_col=misc_properties_col,", 
                " 560.              )", " 561.  ", 
                " 562.              self._edges = self.E", 
                Item[
                " 563.              self._nodes = \
self.E.restrict_to_levels([1])", Background -> LightYellow], 
                " 564.              self._data_cols = data_cols = \
[self._edge_col, self._node_col]", " 565.  ", 
                " 566.              self._dataframe = self.E.cell_properties",
                 " 567.              if self._dataframe is not None:", 
                " 568.                  self._dataframe = \
self._dataframe.reset_index()", 
                " 569.                  self._dataframe[data_cols] = \
self._dataframe[data_cols].astype("}, Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  "self", 
                   ", <class 'hypernetx.classes.hypergraph.Hypergraph'>"}, {
                  "setsystem", "Call"}, {
                  "edge_col", "((1, 2), (1, 2), (1, 2, 3))"}, {
                  "node_col", "nodes"}, {"cell_weight_col", "cell_weights"}, {
                  "cell_weights", "1.0"}, {"cell_properties", "None"}, {
                  "misc_cell_properties_col", "None"}, {
                  "aggregateby", "first"}, {"edge_properties", "None"}, {
                  "node_properties", "None"}, {"properties", "None"}, {
                  "misc_properties_col", "properties"}, {
                  "edge_weight_prop_col", "weight"}, {
                  "node_weight_prop_col", "weight"}, {
                  "weight_prop_col", "weight"}, {
                  "default_edge_weight", "1.0"}, {
                  "default_node_weight", "1.0"}, {"default_weight", "1.0"}, {
                  "name", "None"}, {"kwargs", "{}"}, {
                  "misc_cell_properties", "cell_properties"}, {
                  "entity", 
                   "   ((1, 2), (1, 2), (1, 2, 3)) nodes  cell_weights\n0     \
                       0  Call           1.0"}, {
                  "props2dict", 
                   "<function Hypergraph.__init__.<locals>.props2dict at \
0x169304fe0>"}}, Background -> {Null, {LightGray}}, Alignment -> Left, Frame -> 
                 LightGray]}]}]}, False], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Users/arnoudb/Library/Wolfram/ApplicationData/\
ExternalEvaluate/Python/Venv/hypernetx/lib/python3.11/site-packages/hypernetx/\
utils/decorators.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Users/arnoudb/Library/Wolfram/ApplicationData/\
ExternalEvaluate/Python/Venv/hypernetx/lib/python3.11/site-packages/hypernetx/\
utils/decorators.py"], 
                SystemOpen[
                "/Users/arnoudb/Library/Wolfram/ApplicationData/\
ExternalEvaluate/Python/Venv/hypernetx/lib/python3.11/site-packages/hypernetx/\
utils/decorators.py"]], Appearance -> "Frameless"], " in ", "wrapper"}], 
            Column[{
              
              Column[{" 105.      )", " 106.  ", " 107.      @wraps(func)", 
                " 108.      def wrapper(*args, **kwargs):", 
                " 109.          warnings.simplefilter(\"always\", \
FutureWarning)", 
                " 110.          warnings.warn(deprecation_warning_msg, \
FutureWarning, stacklevel=2)", 
                " 111.          warnings.simplefilter(\"default\", \
FutureWarning)", 
                Item[
                " 112.          return func(*args, **kwargs)", Background -> 
                 LightYellow], " 113.  ", " 114.      return wrapper"}, 
               Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  "args", 
                   "(<hypernetx.classes.entityset.EntitySet object at \
0x1692e5990>, [1])"}, {"kwargs", "{}"}, {
                  "deprecation_warning_msg", 
                   "This method or function will be deprecated in a future \
release. Public references to this method or function will be removed from \
the Hypergraph API in a future release."}, {
                  "func", 
                   "<function EntitySet.restrict_to_levels at 0x133a9d440>"}},
                  Background -> {Null, {LightGray}}, Alignment -> Left, Frame -> 
                 LightGray]}]}]}, False], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Users/arnoudb/Library/Wolfram/ApplicationData/\
ExternalEvaluate/Python/Venv/hypernetx/lib/python3.11/site-packages/hypernetx/\
classes/entityset.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Users/arnoudb/Library/Wolfram/ApplicationData/\
ExternalEvaluate/Python/Venv/hypernetx/lib/python3.11/site-packages/hypernetx/\
classes/entityset.py"], 
                SystemOpen[
                "/Users/arnoudb/Library/Wolfram/ApplicationData/\
ExternalEvaluate/Python/Venv/hypernetx/lib/python3.11/site-packages/hypernetx/\
classes/entityset.py"]], Appearance -> "Frameless"], " in ", 
              "restrict_to_levels"}], 
            Column[{
              
              Column[{"2016.              aggregateby,", 
                "2017.              **kwargs,", "2018.          )", "2019.  ",
                 "2020.          if keep_memberships:", 
                "2021.              # use original memberships to set \
memberships for the new EntitySet", 
                "2022.              # TODO: This assumes levels=[1], add \
explicit checks for other cases", 
                Item[
                "2023.              restricted._state_dict[\"memberships\"] = \
self.memberships", Background -> LightYellow], "2024.  ", 
                "2025.          return restricted", "2026.  ", 
                "2027.      def collapse_identical_elements(", 
                "2028.          self, return_equivalence_classes: bool = \
False, **kwargs", 
                "2029.      ) -> EntitySet | tuple[EntitySet, dict[str, \
list[str]]]:"}, Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  "self", 
                   "<hypernetx.classes.entityset.EntitySet object at \
0x1692e5990>"}, {"levels", "[1]"}, {"weights", "False"}, {
                  "aggregateby", "sum"}, {"keep_memberships", "True"}, {
                  "kwargs", "{}"}, {
                  "restricted", 
                   "<hypernetx.classes.entityset.EntitySet object at \
0x143c47fd0>"}}, Background -> {Null, {LightGray}}, Alignment -> Left, Frame -> 
                 LightGray]}]}]}, False], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Users/arnoudb/Library/Wolfram/ApplicationData/\
ExternalEvaluate/Python/Venv/hypernetx/lib/python3.11/site-packages/hypernetx/\
classes/entityset.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Users/arnoudb/Library/Wolfram/ApplicationData/\
ExternalEvaluate/Python/Venv/hypernetx/lib/python3.11/site-packages/hypernetx/\
classes/entityset.py"], 
                SystemOpen[
                "/Users/arnoudb/Library/Wolfram/ApplicationData/\
ExternalEvaluate/Python/Venv/hypernetx/lib/python3.11/site-packages/hypernetx/\
classes/entityset.py"]], Appearance -> "Frameless"], " in ", "memberships"}], 
            
            Column[{
              
              Column[{" 547.          --------", 
                " 548.          elements : dual of this representation i.e., \
each item in level 0 (first column) defines a set", 
                " 549.          elements_by_level, elements_by_column :", 
                " 550.              system of sets representation of any two \
levels (columns); specified by level index or column name", " 551.  ", 
                " 552.          \"\"\"", " 553.  ", 
                Item[
                " 554.          return self.elements_by_level(1, 0)", 
                 Background -> LightYellow], " 555.  ", 
                " 556.      def elements_by_level(self, level1: int, level2: \
int) -> dict[Any, AttrList]:", 
                " 557.          \"\"\"System of sets representation of two \
levels (columns) of the underlying data table", " 558.  ", 
                " 559.          Each item in level1 defines a set containing \
all the level2 items", 
                " 560.          with which it appears in the same row of the \
underlying data table"}, Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  "self", 
                   "<hypernetx.classes.entityset.EntitySet object at \
0x1692e5990>"}}, Background -> {Null, {LightGray}}, Alignment -> Left, Frame -> 
                 LightGray]}]}]}, False], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Users/arnoudb/Library/Wolfram/ApplicationData/\
ExternalEvaluate/Python/Venv/hypernetx/lib/python3.11/site-packages/hypernetx/\
classes/entityset.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Users/arnoudb/Library/Wolfram/ApplicationData/\
ExternalEvaluate/Python/Venv/hypernetx/lib/python3.11/site-packages/hypernetx/\
classes/entityset.py"], 
                SystemOpen[
                "/Users/arnoudb/Library/Wolfram/ApplicationData/\
ExternalEvaluate/Python/Venv/hypernetx/lib/python3.11/site-packages/hypernetx/\
classes/entityset.py"]], Appearance -> "Frameless"], " in ", 
              "elements_by_level"}], 
            Column[{
              
              Column[{" 579.          elements_by_column : same \
functionality, takes column names instead of level indices", " 580.  ", 
                " 581.          \"\"\"", 
                " 582.          if len(self._data_cols) == 1:", 
                " 583.              return self._state_dict[\"memberships\"]",
                 " 584.          col1 = self._data_cols[level1]", 
                " 585.          col2 = self._data_cols[level2]", 
                Item[
                " 586.          return self.elements_by_column(col1, col2)", 
                 Background -> LightYellow], " 587.  ", 
                " 588.      def elements_by_column(self, col1: Hashable, \
col2: Hashable) -> dict[Any, AttrList]:", 
                " 589.          \"\"\"System of sets representation of two \
columns (levels) of the underlying data table", " 590.  ", 
                " 591.          Each item in col1 defines a set containing \
all the col2 items", 
                " 592.          with which it appears in the same row of the \
underlying data table"}, Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  "self", 
                   "<hypernetx.classes.entityset.EntitySet object at \
0x1692e5990>"}, {"level1", "1"}, {"level2", "0"}, {"col1", "nodes"}, {
                  "col2", "((1, 2), (1, 2), (1, 2, 3))"}}, 
                 Background -> {Null, {LightGray}}, Alignment -> Left, Frame -> 
                 LightGray]}]}]}, False], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Users/arnoudb/Library/Wolfram/ApplicationData/\
ExternalEvaluate/Python/Venv/hypernetx/lib/python3.11/site-packages/hypernetx/\
classes/entityset.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Users/arnoudb/Library/Wolfram/ApplicationData/\
ExternalEvaluate/Python/Venv/hypernetx/lib/python3.11/site-packages/hypernetx/\
classes/entityset.py"], 
                SystemOpen[
                "/Users/arnoudb/Library/Wolfram/ApplicationData/\
ExternalEvaluate/Python/Venv/hypernetx/lib/python3.11/site-packages/hypernetx/\
classes/entityset.py"]], Appearance -> "Frameless"], " in ", 
              "elements_by_column"}], 
            Column[{
              
              Column[{" 611.          elements_by_level : same functionality, \
takes level indices instead of column names", " 612.  ", 
                " 613.          \"\"\"", 
                " 614.          if \"elements\" not in self._state_dict:", 
                " 615.              self._state_dict[\"elements\"] = \
defaultdict(dict)", 
                " 616.          if col2 not in \
self._state_dict[\"elements\"][col1]:", 
                " 617.              level = self.index(col1)", 
                Item[
                " 618.              elements = \
self._dataframe.groupby(col1)[col2].unique().to_dict()", Background -> 
                 LightYellow], 
                " 619.              \
self._state_dict[\"elements\"][col1][col2] = {", 
                " 620.                  item: AttrList(entity=self, \
key=(level, item), initlist=elem)", 
                " 621.                  for item, elem in elements.items()", 
                " 622.              }", " 623.  ", 
                " 624.          return \
self._state_dict[\"elements\"][col1][col2]"}, Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  "self", 
                   "<hypernetx.classes.entityset.EntitySet object at \
0x1692e5990>"}, {"col1", "nodes"}, {"col2", "((1, 2), (1, 2), (1, 2, 3))"}, {
                  "level", "1"}}, Background -> {Null, {LightGray}}, 
                 Alignment -> Left, Frame -> LightGray]}]}]}, True], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Users/arnoudb/Library/Wolfram/ApplicationData/\
ExternalEvaluate/Python/Venv/hypernetx/lib/python3.11/site-packages/pandas/\
core/groupby/generic.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Users/arnoudb/Library/Wolfram/ApplicationData/\
ExternalEvaluate/Python/Venv/hypernetx/lib/python3.11/site-packages/pandas/\
core/groupby/generic.py"], 
                SystemOpen[
                "/Users/arnoudb/Library/Wolfram/ApplicationData/\
ExternalEvaluate/Python/Venv/hypernetx/lib/python3.11/site-packages/pandas/\
core/groupby/generic.py"]], Appearance -> "Frameless"], " in ", 
              "__getitem__"}], 
            Column[{
              
              Column[{"1940.          if self.axis == 1:", 
                "1941.              # GH 37725", 
                "1942.              raise ValueError(\"Cannot subset columns \
when using axis=1\")", "1943.          # per GH 23566", 
                "1944.          if isinstance(key, tuple) and len(key) > 1:", 
                "1945.              # if len == 1, then it becomes a \
SeriesGroupBy and this is actually", 
                "1946.              # valid syntax, so don't raise", 
                Item[
                "1947.              raise ValueError(", Background -> 
                 LightYellow], 
                "1948.                  \"Cannot subset columns with a tuple \
with more than one element. \"", 
                "1949.                  \"Use a list instead.\"", 
                "1950.              )", 
                "1951.          return super().__getitem__(key)", "1952.  ", 
                "1953.      def _gotitem(self, key, ndim: int, \
subset=None):"}, Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  "self", 
                   "<pandas.core.groupby.generic.DataFrameGroupBy object at \
0x168785850>"}, {"key", "((1, 2), (1, 2), (1, 2, 3))"}, {
                  "__class__", 
                   "<class 'pandas.core.groupby.generic.DataFrameGroupBy'>"}},
                  Background -> {Null, {LightGray}}, Alignment -> Left, Frame -> 
                 LightGray]}]}]}, True]}], FontFamily -> "Courier"]}, True]|>],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.924613532591219*^9},
 CellLabel->"Out[31]=",ExpressionUUID->"25f44cf2-c070-4355-a8f9-a1e1b9ddc886"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"obj", "=", 
  RowBox[{"ExternalEvaluate", "[", 
   RowBox[{"session", ",", "\[IndentingNewLine]", 
    RowBox[{"<|", 
     RowBox[{
      RowBox[{"\"\<Command\>\"", "->", 
       RowBox[{"\"\<hypernetx.Hypergraph\>\"", "->", 
        RowBox[{"{", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"1", ",", "2"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"1", ",", "2"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"1", ",", "2", ",", "3"}], "}"}]}], "}"}], "}"}]}]}], ",",
       "\[IndentingNewLine]", 
      RowBox[{"\"\<ReturnType\>\"", "->", "\"\<ExternalObject\>\""}]}], 
     "\[IndentingNewLine]", "|>"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.92461330089367*^9, 3.9246133104190474`*^9}, {
  3.924613656849456*^9, 3.924613698776073*^9}},
 CellLabel->"In[34]:=",ExpressionUUID->"631bfc01-ca7e-4a87-96aa-2dff102e324c"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["ExternalObject",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{
              Thickness[0.05], {
               FaceForm[{
                 RGBColor[1., 1., 1.], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 
                 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {
                 1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
                 3}, {0, 1, 0}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}}, {{1, 4, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                 0}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 
                 3}, {1, 3, 3}}}, {{{7.5718000000000005`, 17.7334}, {7.0998, 
                 17.7334}, {6.7168, 17.342399999999998`}, {6.7168, 16.8624}, {
                 6.7168, 16.3854}, {7.0998, 15.997399999999999`}, {
                 7.5718000000000005`, 15.997399999999999`}, {
                 8.043800000000001, 15.997399999999999`}, {8.4268, 16.3854}, {
                 8.4268, 16.8624}, {8.4268, 17.342399999999998`}, {
                 8.043800000000001, 17.7334}, {7.5718000000000005`, 
                 17.7334}}, CompressedData["
1:eJxTTMoPSmViYGBQAWIQvXD12hvxZbwODSxH+w2/izl86QsuUZnOAuezVHCr
aNT9se+5ncGQzyjl8EZ2+QsPve/2X6bfndzeKu/Qst2h6dHxD/ZfvSLbLMSU
4fz1U1I7kmVV4erNVtuFRxdqOCRs3P9mns0fe98WXv/1ItoOR9qWh58yYnP4
+AVowA4dh6z8D60nQwTg/EsTY/45/1KG87O1v02/K6zi8O7kYae1L3UdBLi3
Lqs8Lubw+zRQhEnPwdnuxc01v8QcGtQOtS2fbgDng2w5ctHQgc1E0MzGVsLB
+wS77exSIwfP/bWyFunyDs2BnnMbjhk5+CzjclP9quCwVMdZ5vUjI4cJhuW6
ivFKDqbvLVzdPxk5JIYEqS84qezgLyeW5fvZyGHaJp7CNacRfAOQAamqcD63
m2op0y01h3aQA54YOZx6ar/kvp0G3D4rZa/q5vVaEPMnQe0v1XG4bgIUWG4I
58P8A+M/mCO4dC+jJpy/M5vz54Llag73gLESNVkLEm/7VBwOWgItcNaA86PE
t19kiJOH80OmKfaVFkrC+ZbpLpn5BSIOx3JNGrY7KMH5UZf3PBaZKwfnw9IH
AO506oE=
                 "], {{12.401800000000001`, 4.1044}, {11.9298, 4.1044}, {
                 11.5458, 3.7164}, {11.5458, 3.2394}, {11.5458, 
                 2.7593999999999994`}, {11.9298, 2.369399999999999}, {
                 12.401800000000001`, 2.369399999999999}, {
                 12.872800000000002`, 2.369399999999999}, {13.2568, 
                 2.7593999999999994`}, {13.2568, 3.2394}, {13.2568, 3.7164}, {
                 12.872800000000002`, 4.1044}, {12.401800000000001`, 
                 4.1044}}, CompressedData["
1:eJxTTMoPSmViYGBQAWIQ/Uei+LrQJ2UHhUNty8NPfbBfaXrW2m+iEpyvdVrg
+C4LRYcC3899wSWf7M+tOn81LEfe4cBGvbzFjN/sb635FZPrKuPgUPST/+X2
n/bOdi9urvkl5sARP8NHtIfRAcY/smKJn4MwD5y/aIv5j0MpcnB+rknDdocm
RQepRxHi2y9KOeyeNoG/qkzZIQrIY4iTh/MPWip7VTtrwPkuv96+PmCpDedf
mhjzz3mXroPFtaO5JgxqcP6DOYJL9zJqwvldfU8+yV/ScWBbPMmKMdfA4eMX
r8i2HToOE/mrzFbXGcL5GnU9O7M1jRympHYkx8ZoO9z8AJIwcjBbbRceXajh
0Pzo+Izd34wc3p087LT2pQqcL7R070HxNCWH+TY6V2YB1SeEBKkv6JR3kKlJ
NAoVAKo/APTIb0kHkDMbphs6NLAc7Tf8LgZ3D4wPdu8vZTgfSJbrPlR2WNC5
4eHLqSIOz+yX3N/Xp+OQF1a7bluSiIPPMi431VIdeHjD+CLAYLzHxOQwi0N6
XpymlsMFzgylnIpf9lURK4AxrgGPT3B47lRzWNAU6Dm34ZP94ZRVQKerwtMD
enoBAPI7A7I=
                 "]}]}, {
               FaceForm[{
                 RGBColor[0.20800000000000002`, 0.514, 0.6859999999999999], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}}, {{1, 4, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                 0}, {1, 3, 3}, {1, 3, 3}}}, {{{7.5718000000000005`, 
                 17.6836}, {8.014800000000001, 17.6836}, {8.3778, 17.3156}, {
                 8.3778, 16.862599999999997`}, {8.3778, 16.4116}, {
                 8.014800000000001, 16.046599999999998`}, {
                 7.5718000000000005`, 16.046599999999998`}, {7.1268, 
                 16.046599999999998`}, {6.7658000000000005`, 16.4116}, {
                 6.7658000000000005`, 16.862599999999997`}, {
                 6.7658000000000005`, 17.3156}, {7.1268, 17.6836}, {
                 7.5718000000000005`, 17.6836}}, CompressedData["
1:eJxTTMoPSmViYGBQBWIQnRgSpL7gpLLDYxHZk0//GzmYnbX2uxio5NBvWK6r
COQ7nU+7+vyVgsOa7tsZDO+NHKLEt19kiJN3EPMI+CNx2cgh6fBl7VRJCYd/
zr/evm4wchDg3rqs8riYQ2vU5T2PrxjC+XxzjBdtmW4A59fKWqS7vNR1uDQx
BqhVGYMPVKRpdUkHrh7Gb5l3dtX5UAE4v+gn/8vt69ng/DOHndZm3vttD+YH
aTt8OAkS+Gb/aUNA9qxyDQeec5KBt6Q/2N/XnbDgh6GqgwTQ2/ZL3tt77Ae6
QF0Zrv6Nhat7UaW8wxWXGx++eP223xet4PgxWcqBJ0Mpp6KK2aFlefgpoyNi
DgtXr70RX8YL5wcBbZmzSASDP2llU6DnXDk4/4fhs3WqKkoOb/V3q/N3Szq0
nQw5uGKJCjx8YfyDlspe1c4acL5XdbO+zzItOP+Z/ZL7+/p0HJR2/mn/MlsN
zgfybl9n1ITzYeEP4wNjvXPDQUOHa8+ztL9N13IARW/+QiO4fbD4haQPNYfO
DQ9fTv1k5NADUueoColvBmMH9PQDAFGHDrQ=
                 "]}]}, {
               FaceForm[{
                 RGBColor[0.976, 0.8430000000000001, 0.353], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}}, {{0, 2, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {
                 0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}}}, {{{12.4014, 4.0552}, {12.846400000000001`, 4.0552}, {
                 13.2074, 3.6902}, {13.2074, 3.2392000000000003`}, {13.2074, 
                 2.7862}, {12.846400000000001`, 2.4182}, {12.4014, 2.4182}, {
                 11.958400000000001`, 2.4182}, {11.595400000000001`, 
                 2.7862}, {11.595400000000001`, 3.2392000000000003`}, {
                 11.595400000000001`, 3.6902}, {11.958400000000001`, 
                 4.0552}, {12.4014, 4.0552}}, CompressedData["
1:eJxTTMoPSmViYGBQBGIQ3bszm/PnAl2HgsWMe1gv6TjA+Ec26uUtZtSE819t
X8/8nEfNISJ64/43ctoOlq7uRT/7lR06k2PvuDlrwPkvs7S/TY+Vh/MvpF19
nrVaCs6fH6d5WuC4mMNLkHk9inB+1r3Crr4UOTi/LerynsciPAh5hvxGlqNM
Dr8OpaxKuCLlcO96Y7HblF/2MPtesZgImtl8tde5MuuZbLqSw52tLTUXNr+1
/3363cnDTKoOCo4fk8/EvraHuRem3j4c6KEcLQel5HdRTna/7Ndlghyi4zCL
Q3penCaTA4wPcw+Mn7H5VfHWqSIO6sGsiyf9UsbgG2itFL5wRAyuHsYH+zvH
AM6PATlsjSGcbwwKeGUjhzV2QIfZSzn8sSo41zHJyKGuBxgRlfIOGUo5FVWs
xg62s0Pnr85VcljVFOg5l8HYoX15+CkjFlW4+l23uv6mlms4/OIH2uhs5BAg
J5bl+1kLYj/QPlh8w9wD4wMA37PnHw==
                 "]}]}}, {
             ImageSize -> 
              Dynamic[{
                Automatic, 
                 3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                  Magnification])}], AspectRatio -> Automatic, 
              ImageSize -> {20., 20.}, PlotRange -> {{0., 20.}, {0., 20.}}}], 
            
            GridBox[{{
               RowBox[{
                 TagBox["\"System: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Python\"", "SummaryItem"]}], 
               RowBox[{
                 TagBox["\"IsModule: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["False", "SummaryItem"]}], ""}, {
               RowBox[{
                 TagBox["\"Module: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"hypernetx.classes.hypergraph\"", "SummaryItem"]}], 
               
               RowBox[{
                 TagBox["\"IsClass: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["False", "SummaryItem"]}], "\[SpanFromLeft]"}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{
              Thickness[0.05], {
               FaceForm[{
                 RGBColor[1., 1., 1.], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 
                 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {
                 1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
                 3}, {0, 1, 0}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}}, {{1, 4, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                 0}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 
                 3}, {1, 3, 3}}}, {{{7.5718000000000005`, 17.7334}, {7.0998, 
                 17.7334}, {6.7168, 17.342399999999998`}, {6.7168, 16.8624}, {
                 6.7168, 16.3854}, {7.0998, 15.997399999999999`}, {
                 7.5718000000000005`, 15.997399999999999`}, {
                 8.043800000000001, 15.997399999999999`}, {8.4268, 16.3854}, {
                 8.4268, 16.8624}, {8.4268, 17.342399999999998`}, {
                 8.043800000000001, 17.7334}, {7.5718000000000005`, 
                 17.7334}}, CompressedData["
1:eJxTTMoPSmViYGBQAWIQvXD12hvxZbwODSxH+w2/izl86QsuUZnOAuezVHCr
aNT9se+5ncGQzyjl8EZ2+QsPve/2X6bfndzeKu/Qst2h6dHxD/ZfvSLbLMSU
4fz1U1I7kmVV4erNVtuFRxdqOCRs3P9mns0fe98WXv/1ItoOR9qWh58yYnP4
+AVowA4dh6z8D60nQwTg/EsTY/45/1KG87O1v02/K6zi8O7kYae1L3UdBLi3
Lqs8Lubw+zRQhEnPwdnuxc01v8QcGtQOtS2fbgDng2w5ctHQgc1E0MzGVsLB
+wS77exSIwfP/bWyFunyDs2BnnMbjhk5+CzjclP9quCwVMdZ5vUjI4cJhuW6
ivFKDqbvLVzdPxk5JIYEqS84qezgLyeW5fvZyGHaJp7CNacRfAOQAamqcD63
m2op0y01h3aQA54YOZx6ar/kvp0G3D4rZa/q5vVaEPMnQe0v1XG4bgIUWG4I
58P8A+M/mCO4dC+jJpy/M5vz54Llag73gLESNVkLEm/7VBwOWgItcNaA86PE
t19kiJOH80OmKfaVFkrC+ZbpLpn5BSIOx3JNGrY7KMH5UZf3PBaZKwfnw9IH
AO506oE=
                 "], {{12.401800000000001`, 4.1044}, {11.9298, 4.1044}, {
                 11.5458, 3.7164}, {11.5458, 3.2394}, {11.5458, 
                 2.7593999999999994`}, {11.9298, 2.369399999999999}, {
                 12.401800000000001`, 2.369399999999999}, {
                 12.872800000000002`, 2.369399999999999}, {13.2568, 
                 2.7593999999999994`}, {13.2568, 3.2394}, {13.2568, 3.7164}, {
                 12.872800000000002`, 4.1044}, {12.401800000000001`, 
                 4.1044}}, CompressedData["
1:eJxTTMoPSmViYGBQAWIQ/Uei+LrQJ2UHhUNty8NPfbBfaXrW2m+iEpyvdVrg
+C4LRYcC3899wSWf7M+tOn81LEfe4cBGvbzFjN/sb635FZPrKuPgUPST/+X2
n/bOdi9urvkl5sARP8NHtIfRAcY/smKJn4MwD5y/aIv5j0MpcnB+rknDdocm
RQepRxHi2y9KOeyeNoG/qkzZIQrIY4iTh/MPWip7VTtrwPkuv96+PmCpDedf
mhjzz3mXroPFtaO5JgxqcP6DOYJL9zJqwvldfU8+yV/ScWBbPMmKMdfA4eMX
r8i2HToOE/mrzFbXGcL5GnU9O7M1jRympHYkx8ZoO9z8AJIwcjBbbRceXajh
0Pzo+Izd34wc3p087LT2pQqcL7R070HxNCWH+TY6V2YB1SeEBKkv6JR3kKlJ
NAoVAKo/APTIb0kHkDMbphs6NLAc7Tf8LgZ3D4wPdu8vZTgfSJbrPlR2WNC5
4eHLqSIOz+yX3N/Xp+OQF1a7bluSiIPPMi431VIdeHjD+CLAYLzHxOQwi0N6
XpymlsMFzgylnIpf9lURK4AxrgGPT3B47lRzWNAU6Dm34ZP94ZRVQKerwtMD
enoBAPI7A7I=
                 "]}]}, {
               FaceForm[{
                 RGBColor[0.20800000000000002`, 0.514, 0.6859999999999999], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}}, {{1, 4, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                 0}, {1, 3, 3}, {1, 3, 3}}}, {{{7.5718000000000005`, 
                 17.6836}, {8.014800000000001, 17.6836}, {8.3778, 17.3156}, {
                 8.3778, 16.862599999999997`}, {8.3778, 16.4116}, {
                 8.014800000000001, 16.046599999999998`}, {
                 7.5718000000000005`, 16.046599999999998`}, {7.1268, 
                 16.046599999999998`}, {6.7658000000000005`, 16.4116}, {
                 6.7658000000000005`, 16.862599999999997`}, {
                 6.7658000000000005`, 17.3156}, {7.1268, 17.6836}, {
                 7.5718000000000005`, 17.6836}}, CompressedData["
1:eJxTTMoPSmViYGBQBWIQnRgSpL7gpLLDYxHZk0//GzmYnbX2uxio5NBvWK6r
COQ7nU+7+vyVgsOa7tsZDO+NHKLEt19kiJN3EPMI+CNx2cgh6fBl7VRJCYd/
zr/evm4wchDg3rqs8riYQ2vU5T2PrxjC+XxzjBdtmW4A59fKWqS7vNR1uDQx
BqhVGYMPVKRpdUkHrh7Gb5l3dtX5UAE4v+gn/8vt69ng/DOHndZm3vttD+YH
aTt8OAkS+Gb/aUNA9qxyDQeec5KBt6Q/2N/XnbDgh6GqgwTQ2/ZL3tt77Ae6
QF0Zrv6Nhat7UaW8wxWXGx++eP223xet4PgxWcqBJ0Mpp6KK2aFlefgpoyNi
DgtXr70RX8YL5wcBbZmzSASDP2llU6DnXDk4/4fhs3WqKkoOb/V3q/N3Szq0
nQw5uGKJCjx8YfyDlspe1c4acL5XdbO+zzItOP+Z/ZL7+/p0HJR2/mn/MlsN
zgfybl9n1ITzYeEP4wNjvXPDQUOHa8+ztL9N13IARW/+QiO4fbD4haQPNYfO
DQ9fTv1k5NADUueoColvBmMH9PQDAFGHDrQ=
                 "]}]}, {
               FaceForm[{
                 RGBColor[0.976, 0.8430000000000001, 0.353], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}}, {{0, 2, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {
                 0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}}}, {{{12.4014, 4.0552}, {12.846400000000001`, 4.0552}, {
                 13.2074, 3.6902}, {13.2074, 3.2392000000000003`}, {13.2074, 
                 2.7862}, {12.846400000000001`, 2.4182}, {12.4014, 2.4182}, {
                 11.958400000000001`, 2.4182}, {11.595400000000001`, 
                 2.7862}, {11.595400000000001`, 3.2392000000000003`}, {
                 11.595400000000001`, 3.6902}, {11.958400000000001`, 
                 4.0552}, {12.4014, 4.0552}}, CompressedData["
1:eJxTTMoPSmViYGBQBGIQ3bszm/PnAl2HgsWMe1gv6TjA+Ec26uUtZtSE819t
X8/8nEfNISJ64/43ctoOlq7uRT/7lR06k2PvuDlrwPkvs7S/TY+Vh/MvpF19
nrVaCs6fH6d5WuC4mMNLkHk9inB+1r3Crr4UOTi/LerynsciPAh5hvxGlqNM
Dr8OpaxKuCLlcO96Y7HblF/2MPtesZgImtl8tde5MuuZbLqSw52tLTUXNr+1
/3363cnDTKoOCo4fk8/EvraHuRem3j4c6KEcLQel5HdRTna/7Ndlghyi4zCL
Q3penCaTA4wPcw+Mn7H5VfHWqSIO6sGsiyf9UsbgG2itFL5wRAyuHsYH+zvH
AM6PATlsjSGcbwwKeGUjhzV2QIfZSzn8sSo41zHJyKGuBxgRlfIOGUo5FVWs
xg62s0Pnr85VcljVFOg5l8HYoX15+CkjFlW4+l23uv6mlms4/OIH2uhs5BAg
J5bl+1kLYj/QPlh8w9wD4wMA37PnHw==
                 "]}]}}, {
             ImageSize -> 
              Dynamic[{
                Automatic, 
                 3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                  Magnification])}], AspectRatio -> Automatic, 
              ImageSize -> {20., 20.}, PlotRange -> {{0., 20.}, {0., 20.}}}], 
            
            GridBox[{{
               RowBox[{
                 TagBox["\"System: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Python\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"IsModule: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["False", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Module: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                 "\"hypernetx.classes.hypergraph\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"IsClass: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["False", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"IsFunction: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["False", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"IsMethod: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["False", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"IsCallable: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["False", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Status: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Evaluated\"", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  ExternalObject[
   ExternalSessionObject["992a9a23-afee-4ee0-83e7-42ab47bede4d"], 
   ExternalEvaluate`RPC["GetReference", 6059982032], <|
   "IsModule" -> False, "Module" -> "hypernetx.classes.hypergraph", "IsClass" -> 
    False, "IsFunction" -> False, "IsMethod" -> False, "IsCallable" -> 
    False|>],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{
  3.924613310943243*^9, 3.924613436061317*^9, {3.924613669666089*^9, 
   3.9246136991500387`*^9}},
 CellLabel->"Out[34]=",ExpressionUUID->"2ee1b4e5-cf27-4b5f-bbb2-5995101cd8f7"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"obj", "[", 
  RowBox[{"\"\<MethodCall\>\"", ",", "\"\<bipartite\>\"", ",", 
   RowBox[{"\"\<ReturnType\>\"", "->", "\"\<ExternalObject\>\""}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.9246138711861153`*^9, 3.924613885829309*^9}, {
  3.924614229270711*^9, 3.92461422940191*^9}, {3.924614820498807*^9, 
  3.9246148564904823`*^9}},
 CellLabel->"In[45]:=",ExpressionUUID->"4d68b2d8-7ef4-4d98-a4cc-f811410a8ad7"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["Failure",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            FrameBox[
             StyleBox["\"\[WarningSign]\"", 
              Directive["Message", 35], StripOnInput -> False], 
             ContentPadding -> False, FrameStyle -> None, 
             FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
            GridBox[{{
               TagBox[
                GridBox[{{
                   TagBox["\"Message: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                   "\"Hypergraph.bipartite() got an unexpected keyword \
argument 'ReturnType'\"", "SummaryItem"]}}, 
                 GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                 GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                 GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}, {
               TagBox[
                GridBox[{{
                   TagBox["\"Tag: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["\"PythonError\"", "SummaryItem"]}}, 
                 GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                 GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                 GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            FrameBox[
             StyleBox["\"\[WarningSign]\"", 
              Directive["Message", 35], StripOnInput -> False], 
             ContentPadding -> False, FrameStyle -> None, 
             FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
            GridBox[{{
               TagBox[
                GridBox[{{
                   TagBox["\"Message: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                   "\"Hypergraph.bipartite() got an unexpected keyword \
argument 'ReturnType'\"", "SummaryItem"]}}, 
                 GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                 GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                 GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}, {
               TagBox[
                GridBox[{{
                   TagBox["\"Tag: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["\"PythonError\"", "SummaryItem"]}}, 
                 GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                 GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                 GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}, {
               RowBox[{
                 TagBox[
                  TemplateBox[{"\"FailureCode\"", "\": \""}, "RowDefault"], 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox[
                  TagBox["\"TypeError\"", HoldForm], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                  TemplateBox[{"\"Traceback\"", "\": \""}, "RowDefault"], 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   TagBox[
                    DynamicModuleBox[{Typeset`var$$ = True}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    
                    TemplateBox[{
                    "\"TypeError\"", "\" \"", 
                    "\"Hypergraph.bipartite() got an unexpected keyword \
argument 'ReturnType'\""}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    
                    TemplateBox[{
                    "\"TypeError\"", "\" \"", 
                    "\"Hypergraph.bipartite() got an unexpected keyword \
argument 'ReturnType'\""}, "RowDefault"]}, {"", 
                    PaneBox[
                    StyleBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/language/\
decorators.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/language/\
decorators.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/language/\
decorators.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"safe_wl_execute\""}, 
                    "RowDefault"]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/language/\
decorators.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/language/\
decorators.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/language/\
decorators.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"safe_wl_execute\""}, 
                    "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{
                    "\"  14.      \\\"wl\\\": \
b'Failure[\\\"PythonFailure\\\", <|\\\"MessageTemplate\\\" -> \\\"Unexpected \
error occurred.\\\"|>]',\""}, {"\"  15.  }\""}, {"\"  16.  \""}, {
                    "\"  17.  \""}, {
                    "\"  18.  def safe_wl_execute(function, args=(), opts={}, \
export_opts={}, exception_class=None):\""}, {"\"  19.  \""}, {
                    "\"  20.      try:\""}, {
                    ItemBox[
                    "\"  21.          return export(function(*args, **opts), \
**export_opts)\"", Background -> RGBColor[1, 1, 0.85], StripOnInput -> 
                    False]}, {
                    "\"  22.      except Exception as export_exception:\""}, {
                    "\"  23.          try:\""}, {
                    "\"  24.              try:\""}, {"\"  25.  \""}, {
                    "\"  26.                  # The user can provide an \
exception class, and it can be broken, in which case we are running \
another\""}, {
                    "\"  27.                  # try / except to return errors \
that are happening during class serialization\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\"function\"", 
                    "\"<function handle_message at 0x1068b7560>\""}, {
                    "\"args\"", 
                    "\"(<zmq.Socket(zmq.PAIR) at 0x106891240>,)\""}, {
                    "\"opts\"", 
                    "\"{'consumer': <ExternalEvaluateConsumer globals=5 \
objects=4>}\""}, {"\"export_opts\"", 
                    "\"{'object_processor': <function \
start_zmq_loop.<locals>.<lambda> at 0x105b189a0>, 'target_format': \
'wxf'}\""}, {"\"exception_class\"", "\"None\""}, {"\"export_exception\"", 
                    "\"Hypergraph.bipartite() got an unexpected keyword \
argument 'ReturnType'\""}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {"Columns" -> {{
                    Null}}, "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"function", 
                    "<function handle_message at 0x1068b7560>"}, {
                    "args", "(<zmq.Socket(zmq.PAIR) at 0x106891240>,)"}, {
                    "opts", 
                    "{'consumer': <ExternalEvaluateConsumer globals=5 \
objects=4>}"}, {"export_opts", 
                    "{'object_processor': <function \
start_zmq_loop.<locals>.<lambda> at 0x105b189a0>, 'target_format': 'wxf'}"}, {
                    "exception_class", "None"}, {"export_exception", 
                    "Hypergraph.bipartite() got an unexpected keyword \
argument 'ReturnType'"}}, Background -> {Null, {LightGray}}, Alignment -> 
                    Left, Frame -> LightGray]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/language/\
decorators.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/language/\
decorators.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/language/\
decorators.py"]], Appearance -> "Frameless"], " in ", "safe_wl_execute"}], 
                    Column[{
                    
                    Column[{
                    "  14.      \"wl\": b'Failure[\"PythonFailure\", \
<|\"MessageTemplate\" -> \"Unexpected error occurred.\"|>]',", "  15.  }", 
                    "  16.  ", "  17.  ", 
                    "  18.  def safe_wl_execute(function, args=(), opts={}, \
export_opts={}, exception_class=None):", "  19.  ", "  20.      try:", 
                    Item[
                    "  21.          return export(function(*args, **opts), \
**export_opts)", Background -> LightYellow], 
                    "  22.      except Exception as export_exception:", 
                    "  23.          try:", "  24.              try:", 
                    "  25.  ", 
                    "  26.                  # The user can provide an \
exception class, and it can be broken, in which case we are running another", 
                    "  27.                  # try / except to return errors \
that are happening during class serialization"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"function", 
                    "<function handle_message at 0x1068b7560>"}, {
                    "args", "(<zmq.Socket(zmq.PAIR) at 0x106891240>,)"}, {
                    "opts", 
                    "{'consumer': <ExternalEvaluateConsumer globals=5 \
objects=4>}"}, {"export_opts", 
                    "{'object_processor': <function \
start_zmq_loop.<locals>.<lambda> at 0x105b189a0>, 'target_format': 'wxf'}"}, {
                    "exception_class", "None"}, {
                    "export_exception", 
                    "Hypergraph.bipartite() got an unexpected keyword \
argument 'ReturnType'"}}, Background -> {Null, {LightGray}}, Alignment -> 
                    Left, Frame -> LightGray]}]}]}, False]], 
                    DynamicModuleValues -> Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless", Evaluator -> Automatic, 
                    Method -> "Preemptive"], "\" in \"", 
                    "\"handle_message\""}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless", Evaluator -> Automatic, 
                    Method -> "Preemptive"], "\" in \"", 
                    "\"handle_message\""}, "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{
                    "\" 393.          self.socket.send(zmq.Frame(bytes))\""}, \
{"\" 394.  \""}, {"\" 395.      def send_side_effect(self, expr):\""}, {
                    "\" 396.          \
self.write(export(self.keep_listening(expr), target_format=\\\"wxf\\\"))\""}, \
{"\" 397.  \""}, {"\" 398.  \""}, {
                    "\" 399.  def handle_message(socket, consumer):\""}, {
                    ItemBox[
                    "\" 400.      result = \
binary_deserialize(socket.recv(copy=False).buffer, consumer=consumer)\"", 
                    Background -> RGBColor[1, 1, 0.85], StripOnInput -> 
                    False]}, {"\" 401.  \""}, {
                    "\" 402.      sys.stdout.flush()\""}, {
                    "\" 403.      return result\""}, {"\" 404.  \""}, {
                    "\" 405.  \""}, {
                    "\" 406.  def start_zmq_instance(port=None, \
write_to_stdout=True, **opts):\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\"socket\"", 
                    "\"<zmq.Socket(zmq.PAIR) at 0x106891240>\""}, {
                    "\"consumer\"", 
                    "\"<ExternalEvaluateConsumer globals=5 objects=4>\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Null}}, 
                    "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"socket", 
                    "<zmq.Socket(zmq.PAIR) at 0x106891240>"}, {
                    "consumer", 
                    "<ExternalEvaluateConsumer globals=5 objects=4>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless"], " in ", 
                    "handle_message"}], 
                    Column[{
                    
                    Column[{
                    " 393.          self.socket.send(zmq.Frame(bytes))", 
                    " 394.  ", " 395.      def send_side_effect(self, expr):",
                     " 396.          \
self.write(export(self.keep_listening(expr), target_format=\"wxf\"))", 
                    " 397.  ", " 398.  ", 
                    " 399.  def handle_message(socket, consumer):", 
                    Item[
                    " 400.      result = \
binary_deserialize(socket.recv(copy=False).buffer, consumer=consumer)", 
                    Background -> LightYellow], " 401.  ", 
                    " 402.      sys.stdout.flush()", 
                    " 403.      return result", " 404.  ", " 405.  ", 
                    " 406.  def start_zmq_instance(port=None, \
write_to_stdout=True, **opts):"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"socket", 
                    "<zmq.Socket(zmq.PAIR) at 0x106891240>"}, {
                    "consumer", 
                    "<ExternalEvaluateConsumer globals=5 objects=4>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
__init__.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
__init__.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
__init__.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"binary_deserialize\""}, 
                    "RowDefault"]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
__init__.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
__init__.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
__init__.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"binary_deserialize\""}, 
                    "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{"\"  33.  \""}, {
                    "\"  34.      \\\"\\\"\\\"\""}, {
                    "\"  35.      parser = WXFParser(wxf_input)\""}, {
                    "\"  36.      if consumer is None:\""}, {
                    "\"  37.          consumer = WXFConsumerNumpy()\""}, {
                    "\"  38.  \""}, {"\"  39.      try:\""}, {
                    ItemBox[
                    "\"  40.          o = \
consumer.next_expression(parser.tokens(), **kwargs)\"", Background -> 
                    RGBColor[1, 1, 0.85], StripOnInput -> False]}, {
                    "\"  41.      except StopIteration:\""}, {
                    "\"  42.          raise WolframParserException(\""}, {
                    "\"  43.              \\\"Input data does not represent a \
valid expression in WXF format. Expecting more input data.\\\"\""}, {
                    "\"  44.          )\""}, {
                    "\"  45.      if not \
parser.context.is_valid_final_state():\""}, {
                    "\"  46.          raise WolframParserException(\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\"wxf_input\"", 
                    "\"8:f\.03s0ExternalEvaluate`Private`\
ExternalEvaluateCommandS\\nReturnTypef\.04s0ExternalEvaluate`Private`\
ExternalEvaluateCommandS\\nMethodCallf\.02s0ExternalEvaluate`Private`\
ExternalEvaluateCommandS\\fGetReferenceL3i\.01\.00\.00\.00S\\tbipartitef\.02s\
\.04RuleS\\nReturnTypeS\.0eExternalObjectS\\nExpression\""}, {"\"consumer\"", 
                    "\"<ExternalEvaluateConsumer globals=5 objects=4>\""}, {
                    "\"kwargs\"", "\"{}\""}, {"\"parser\"", 
                    "\"<wolframclient.deserializers.wxf.wxfparser.WXFParser \
object at 0x168786810>\""}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {"Columns" -> {{
                    Null}}, "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"wxf_input", 
                    
                    "8:f\.03s0ExternalEvaluate`Private`\
ExternalEvaluateCommandS\n\
ReturnTypef\.04s0ExternalEvaluate`Private`ExternalEvaluateCommandS\n\
MethodCallf\.02s0ExternalEvaluate`Private`ExternalEvaluateCommandS\.0c\
GetReferenceL3i\.01\.00\.00\.00S\tbipartitef\.02s\.04RuleS\n\
ReturnTypeS\.0eExternalObjectS\nExpression"}, {"consumer", 
                    "<ExternalEvaluateConsumer globals=5 objects=4>"}, {
                    "kwargs", "{}"}, {"parser", 
                    "<wolframclient.deserializers.wxf.wxfparser.WXFParser \
object at 0x168786810>"}}, Background -> {Null, {LightGray}}, Alignment -> 
                    Left, Frame -> LightGray]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
__init__.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
__init__.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
__init__.py"]], Appearance -> "Frameless"], " in ", "binary_deserialize"}], 
                    Column[{
                    
                    Column[{"  33.  ", "  34.      \"\"\"", 
                    "  35.      parser = WXFParser(wxf_input)", 
                    "  36.      if consumer is None:", 
                    "  37.          consumer = WXFConsumerNumpy()", "  38.  ",
                     "  39.      try:", 
                    Item[
                    "  40.          o = \
consumer.next_expression(parser.tokens(), **kwargs)", Background -> 
                    LightYellow], "  41.      except StopIteration:", 
                    "  42.          raise WolframParserException(", 
                    "  43.              \"Input data does not represent a \
valid expression in WXF format. Expecting more input data.\"", 
                    "  44.          )", 
                    "  45.      if not \
parser.context.is_valid_final_state():", 
                    "  46.          raise WolframParserException("}, 
                    Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"wxf_input", 
                    "8:f\.03s0ExternalEvaluate`Private`\
ExternalEvaluateCommandS\n\
ReturnTypef\.04s0ExternalEvaluate`Private`ExternalEvaluateCommandS\n\
MethodCallf\.02s0ExternalEvaluate`Private`ExternalEvaluateCommandS\.0c\
GetReferenceL3i\.01\.00\.00\.00S\tbipartitef\.02s\.04RuleS\n\
ReturnTypeS\.0eExternalObjectS\nExpression"}, {
                    "consumer", 
                    "<ExternalEvaluateConsumer globals=5 objects=4>"}, {
                    "kwargs", "{}"}, {"parser", 
                    "<wolframclient.deserializers.wxf.wxfparser.WXFParser \
object at 0x168786810>"}}, Background -> {Null, {LightGray}}, Alignment -> 
                    Left, Frame -> LightGray]}]}]}, False]], 
                    DynamicModuleValues -> Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"next_expression\""}, 
                    "RowDefault"]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"next_expression\""}, 
                    "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{
                    "\"  69.          constants.WXF_CONSTANTS.RuleDelayed: \\\
\"consume_rule_delayed\\\",\""}, {"\"  70.      }\""}, {"\"  71.  \""}, {
                    "\"  72.      def next_expression(self, tokens, \
**kwargs):\""}, {
                    "\"  73.          \\\"\\\"\\\"Deserialize the next \
expression starting at the next token yield by `tokens`.\\\"\\\"\\\"\""}, {
                    "\"  74.          token = next(tokens)\""}, {
                    "\"  75.          consumer = \
self._consumer_from_type(token.wxf_type)\""}, {
                    ItemBox[
                    "\"  76.          return consumer(token, tokens, \
**kwargs)\"", Background -> RGBColor[1, 1, 0.85], StripOnInput -> False]}, {
                    "\"  77.  \""}, {
                    "\"  78.      def _consumer_from_type(self, \
wxf_type):\""}, {"\"  79.          try:\""}, {
                    "\"  80.              func = self._mapping[wxf_type]\""}, \
{"\"  81.          except KeyError:\""}, {
                    "\"  82.              raise WolframParserException(\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\"self\"", 
                    "\"<ExternalEvaluateConsumer globals=5 objects=4>\""}, {
                    "\"tokens\"", 
                    "\"<generator object WXFParser.tokens at \
0x168ecb040>\""}, {"\"kwargs\"", "\"{}\""}, {"\"token\"", 
                    "\"WXFToken<b'f', data=None, len=3>\""}, {"\"consumer\"", 
                    "\"<bound method \
ExternalEvaluateConsumer.consume_function of <ExternalEvaluateConsumer \
globals=5 objects=4>>\""}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {"Columns" -> {{
                    Null}}, "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<ExternalEvaluateConsumer globals=5 objects=4>"}, {
                    "tokens", 
                    "<generator object WXFParser.tokens at 0x168ecb040>"}, {
                    "kwargs", "{}"}, {"token", 
                    "WXFToken<b'f', data=None, len=3>"}, {
                    "consumer", 
                    "<bound method ExternalEvaluateConsumer.consume_function \
of <ExternalEvaluateConsumer globals=5 objects=4>>"}}, Background -> {
                    Null, {LightGray}}, Alignment -> Left, Frame -> 
                    LightGray]}, False]], DynamicModuleValues -> Automatic], 
                    Setting[#, {0}]& ]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless"], " in ", "next_expression"}], 
                    Column[{
                    
                    Column[{
                    "  69.          constants.WXF_CONSTANTS.RuleDelayed: \
\"consume_rule_delayed\",", "  70.      }", "  71.  ", 
                    "  72.      def next_expression(self, tokens, **kwargs):",
                     "  73.          \"\"\"Deserialize the next expression \
starting at the next token yield by `tokens`.\"\"\"", 
                    "  74.          token = next(tokens)", 
                    "  75.          consumer = \
self._consumer_from_type(token.wxf_type)", 
                    Item[
                    "  76.          return consumer(token, tokens, **kwargs)",
                     Background -> LightYellow], "  77.  ", 
                    "  78.      def _consumer_from_type(self, wxf_type):", 
                    "  79.          try:", 
                    "  80.              func = self._mapping[wxf_type]", 
                    "  81.          except KeyError:", 
                    "  82.              raise WolframParserException("}, 
                    Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<ExternalEvaluateConsumer globals=5 objects=4>"}, {
                    "tokens", 
                    "<generator object WXFParser.tokens at 0x168ecb040>"}, {
                    "kwargs", "{}"}, {"token", 
                    "WXFToken<b'f', data=None, len=3>"}, {
                    "consumer", 
                    "<bound method ExternalEvaluateConsumer.consume_function \
of <ExternalEvaluateConsumer globals=5 objects=4>>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless", Evaluator -> Automatic, 
                    Method -> "Preemptive"], "\" in \"", 
                    "\"consume_function\""}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless", Evaluator -> Automatic, 
                    Method -> "Preemptive"], "\" in \"", 
                    "\"consume_function\""}, "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{"\" 362.  \""}, {
                    "\" 363.      def __init__(self, routes_registry={}, \
objects_registry={}, globals_registry={}):\""}, {
                    "\" 364.          self.objects_registry = \
registry(objects_registry)\""}, {
                    "\" 365.          self.globals_registry = \
registry(globals_registry)\""}, {
                    "\" 366.          self.routes_registry = \
registry(self.builtin_routes, **routes_registry)\""}, {"\" 367.  \""}, {
                    "\" 368.      def consume_function(self, *args, \
**kwargs):\""}, {
                    ItemBox[
                    "\" 369.          expr = super().consume_function(*args, \
**kwargs)\"", Background -> RGBColor[1, 1, 0.85], StripOnInput -> False]}, {
                    "\" 370.  \""}, {
                    "\" 371.          if check_wl_symbol(expr, \
self.hook_symbol):\""}, {
                    "\" 372.              assert len(expr.args) >= 1\""}, {
                    "\" 373.              return \
self.dispatch_wl_object(*expr.args)\""}, {"\" 374.  \""}, {
                    "\" 375.          return expr\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\"self\"", 
                    "\"<ExternalEvaluateConsumer globals=5 objects=4>\""}, {
                    "\"args\"", 
                    "\"(<wolframclient.deserializers.wxf.wxfparser.WXFToken \
object at 0x168f06b10>, <generator object WXFParser.tokens at \
0x168ecb040>)\""}, {"\"kwargs\"", "\"{}\""}, {"\"__class__\"", 
                    "\"<class \
'wolframclient.utils.externalevaluate.ExternalEvaluateConsumer'>\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Null}}, 
                    "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<ExternalEvaluateConsumer globals=5 objects=4>"}, {
                    "args", 
                    "(<wolframclient.deserializers.wxf.wxfparser.WXFToken \
object at 0x168f06b10>, <generator object WXFParser.tokens at \
0x168ecb040>)"}, {"kwargs", "{}"}, {"__class__", 
                    "<class \
'wolframclient.utils.externalevaluate.ExternalEvaluateConsumer'>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless"], " in ", 
                    "consume_function"}], 
                    Column[{
                    
                    Column[{" 362.  ", 
                    " 363.      def __init__(self, routes_registry={}, \
objects_registry={}, globals_registry={}):", 
                    " 364.          self.objects_registry = \
registry(objects_registry)", 
                    " 365.          self.globals_registry = \
registry(globals_registry)", 
                    " 366.          self.routes_registry = \
registry(self.builtin_routes, **routes_registry)", " 367.  ", 
                    " 368.      def consume_function(self, *args, **kwargs):", 
                    Item[
                    " 369.          expr = super().consume_function(*args, \
**kwargs)", Background -> LightYellow], " 370.  ", 
                    " 371.          if check_wl_symbol(expr, \
self.hook_symbol):", " 372.              assert len(expr.args) >= 1", 
                    " 373.              return \
self.dispatch_wl_object(*expr.args)", " 374.  ", 
                    " 375.          return expr"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<ExternalEvaluateConsumer globals=5 objects=4>"}, {
                    "args", 
                    "(<wolframclient.deserializers.wxf.wxfparser.WXFToken \
object at 0x168f06b10>, <generator object WXFParser.tokens at \
0x168ecb040>)"}, {"kwargs", "{}"}, {"__class__", 
                    "<class \
'wolframclient.utils.externalevaluate.ExternalEvaluateConsumer'>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"consume_function\""}, 
                    "RowDefault"]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"consume_function\""}, 
                    "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{
                    "\"  94.          Return a :class:`list` if the head is \
symbol `List`, otherwise returns the result of \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`\""}, {"\"  95.          applied to the head and arguments.\""}, {
                    "\"  96.  \""}, {
                    "\"  97.          Usually custom parsing rules target \
Functions, but not List. To do so, it is recommended to override\""}, {
                    "\"  98.          \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`.\""}, {"\"  99.          \\\"\\\"\\\"\""}, {
                    "\" 100.          head = self.next_expression(tokens, \
**kwargs)\""}, {
                    ItemBox["\" 101.          args = tuple(\"", Background -> 
                    RGBColor[1, 1, 0.85], StripOnInput -> False]}, {
                    "\" 102.              self.next_expression(tokens, \
**kwargs) for i in range(current_token.length)\""}, {
                    "\" 103.          )\""}, {
                    "\" 104.          if head == self._LIST:\""}, {
                    "\" 105.              return args\""}, {
                    "\" 106.          else:\""}, {
                    "\" 107.              return self.build_function(head, \
args, **kwargs)\""}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\"self\"", 
                    "\"<ExternalEvaluateConsumer globals=5 objects=4>\""}, {
                    "\"current_token\"", 
                    "\"WXFToken<b'f', data=None, len=3>\""}, {"\"tokens\"", 
                    "\"<generator object WXFParser.tokens at \
0x168ecb040>\""}, {"\"kwargs\"", "\"{}\""}, {"\"head\"", 
                    "\"ExternalEvaluate`Private`ExternalEvaluateCommand\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Null}}, 
                    "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<ExternalEvaluateConsumer globals=5 objects=4>"}, {
                    "current_token", "WXFToken<b'f', data=None, len=3>"}, {
                    "tokens", 
                    "<generator object WXFParser.tokens at 0x168ecb040>"}, {
                    "kwargs", "{}"}, {"head", 
                    "ExternalEvaluate`Private`ExternalEvaluateCommand"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless"], " in ", "consume_function"}], 
                    Column[{
                    
                    Column[{
                    "  94.          Return a :class:`list` if the head is \
symbol `List`, otherwise returns the result of \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`", "  95.          applied to the head and arguments.", "  96.  ", 
                    "  97.          Usually custom parsing rules target \
Functions, but not List. To do so, it is recommended to override", 
                    "  98.          \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`.", "  99.          \"\"\"", 
                    " 100.          head = self.next_expression(tokens, \
**kwargs)", 
                    Item[" 101.          args = tuple(", Background -> 
                    LightYellow], 
                    " 102.              self.next_expression(tokens, \
**kwargs) for i in range(current_token.length)", " 103.          )", 
                    " 104.          if head == self._LIST:", 
                    " 105.              return args", " 106.          else:", 
                    " 107.              return self.build_function(head, \
args, **kwargs)"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<ExternalEvaluateConsumer globals=5 objects=4>"}, {
                    "current_token", "WXFToken<b'f', data=None, len=3>"}, {
                    "tokens", 
                    "<generator object WXFParser.tokens at 0x168ecb040>"}, {
                    "kwargs", "{}"}, {"head", 
                    "ExternalEvaluate`Private`ExternalEvaluateCommand"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"<genexpr>\""}, 
                    "RowDefault"]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"<genexpr>\""}, 
                    "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{
                    "\"  95.          applied to the head and arguments.\""}, \
{"\"  96.  \""}, {
                    "\"  97.          Usually custom parsing rules target \
Functions, but not List. To do so, it is recommended to override\""}, {
                    "\"  98.          \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`.\""}, {"\"  99.          \\\"\\\"\\\"\""}, {
                    "\" 100.          head = self.next_expression(tokens, \
**kwargs)\""}, {"\" 101.          args = tuple(\""}, {
                    ItemBox[
                    "\" 102.              self.next_expression(tokens, \
**kwargs) for i in range(current_token.length)\"", Background -> 
                    RGBColor[1, 1, 0.85], StripOnInput -> False]}, {
                    "\" 103.          )\""}, {
                    "\" 104.          if head == self._LIST:\""}, {
                    "\" 105.              return args\""}, {
                    "\" 106.          else:\""}, {
                    "\" 107.              return self.build_function(head, \
args, **kwargs)\""}, {"\" 108.  \""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\".0\"", 
                    "\"<range_iterator object at 0x1692f9200>\""}, {
                    "\"i\"", "\"1\""}, {"\"kwargs\"", "\"{}\""}, {
                    "\"self\"", 
                    "\"<ExternalEvaluateConsumer globals=5 objects=4>\""}, {
                    "\"tokens\"", 
                    "\"<generator object WXFParser.tokens at \
0x168ecb040>\""}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Null}}, 
                    "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {".0", 
                    "<range_iterator object at 0x1692f9200>"}, {"i", "1"}, {
                    "kwargs", "{}"}, {"self", 
                    "<ExternalEvaluateConsumer globals=5 objects=4>"}, {
                    "tokens", 
                    "<generator object WXFParser.tokens at 0x168ecb040>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless"], " in ", "<genexpr>"}], 
                    Column[{
                    
                    Column[{
                    "  95.          applied to the head and arguments.", 
                    "  96.  ", 
                    "  97.          Usually custom parsing rules target \
Functions, but not List. To do so, it is recommended to override", 
                    "  98.          \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`.", "  99.          \"\"\"", 
                    " 100.          head = self.next_expression(tokens, \
**kwargs)", " 101.          args = tuple(", 
                    Item[
                    " 102.              self.next_expression(tokens, \
**kwargs) for i in range(current_token.length)", Background -> LightYellow], 
                    " 103.          )", 
                    " 104.          if head == self._LIST:", 
                    " 105.              return args", " 106.          else:", 
                    " 107.              return self.build_function(head, \
args, **kwargs)", " 108.  "}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {".0", 
                    "<range_iterator object at 0x1692f9200>"}, {"i", "1"}, {
                    "kwargs", "{}"}, {"self", 
                    "<ExternalEvaluateConsumer globals=5 objects=4>"}, {
                    "tokens", 
                    "<generator object WXFParser.tokens at 0x168ecb040>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"next_expression\""}, 
                    "RowDefault"]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"next_expression\""}, 
                    "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{
                    "\"  69.          constants.WXF_CONSTANTS.RuleDelayed: \\\
\"consume_rule_delayed\\\",\""}, {"\"  70.      }\""}, {"\"  71.  \""}, {
                    "\"  72.      def next_expression(self, tokens, \
**kwargs):\""}, {
                    "\"  73.          \\\"\\\"\\\"Deserialize the next \
expression starting at the next token yield by `tokens`.\\\"\\\"\\\"\""}, {
                    "\"  74.          token = next(tokens)\""}, {
                    "\"  75.          consumer = \
self._consumer_from_type(token.wxf_type)\""}, {
                    ItemBox[
                    "\"  76.          return consumer(token, tokens, \
**kwargs)\"", Background -> RGBColor[1, 1, 0.85], StripOnInput -> False]}, {
                    "\"  77.  \""}, {
                    "\"  78.      def _consumer_from_type(self, \
wxf_type):\""}, {"\"  79.          try:\""}, {
                    "\"  80.              func = self._mapping[wxf_type]\""}, \
{"\"  81.          except KeyError:\""}, {
                    "\"  82.              raise WolframParserException(\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\"self\"", 
                    "\"<ExternalEvaluateConsumer globals=5 objects=4>\""}, {
                    "\"tokens\"", 
                    "\"<generator object WXFParser.tokens at \
0x168ecb040>\""}, {"\"kwargs\"", "\"{}\""}, {"\"token\"", 
                    "\"WXFToken<b'f', data=None, len=4>\""}, {"\"consumer\"", 
                    "\"<bound method \
ExternalEvaluateConsumer.consume_function of <ExternalEvaluateConsumer \
globals=5 objects=4>>\""}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {"Columns" -> {{
                    Null}}, "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<ExternalEvaluateConsumer globals=5 objects=4>"}, {
                    "tokens", 
                    "<generator object WXFParser.tokens at 0x168ecb040>"}, {
                    "kwargs", "{}"}, {"token", 
                    "WXFToken<b'f', data=None, len=4>"}, {
                    "consumer", 
                    "<bound method ExternalEvaluateConsumer.consume_function \
of <ExternalEvaluateConsumer globals=5 objects=4>>"}}, Background -> {
                    Null, {LightGray}}, Alignment -> Left, Frame -> 
                    LightGray]}, False]], DynamicModuleValues -> Automatic], 
                    Setting[#, {0}]& ]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless"], " in ", "next_expression"}], 
                    Column[{
                    
                    Column[{
                    "  69.          constants.WXF_CONSTANTS.RuleDelayed: \
\"consume_rule_delayed\",", "  70.      }", "  71.  ", 
                    "  72.      def next_expression(self, tokens, **kwargs):",
                     "  73.          \"\"\"Deserialize the next expression \
starting at the next token yield by `tokens`.\"\"\"", 
                    "  74.          token = next(tokens)", 
                    "  75.          consumer = \
self._consumer_from_type(token.wxf_type)", 
                    Item[
                    "  76.          return consumer(token, tokens, **kwargs)",
                     Background -> LightYellow], "  77.  ", 
                    "  78.      def _consumer_from_type(self, wxf_type):", 
                    "  79.          try:", 
                    "  80.              func = self._mapping[wxf_type]", 
                    "  81.          except KeyError:", 
                    "  82.              raise WolframParserException("}, 
                    Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<ExternalEvaluateConsumer globals=5 objects=4>"}, {
                    "tokens", 
                    "<generator object WXFParser.tokens at 0x168ecb040>"}, {
                    "kwargs", "{}"}, {"token", 
                    "WXFToken<b'f', data=None, len=4>"}, {
                    "consumer", 
                    "<bound method ExternalEvaluateConsumer.consume_function \
of <ExternalEvaluateConsumer globals=5 objects=4>>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless", Evaluator -> Automatic, 
                    Method -> "Preemptive"], "\" in \"", 
                    "\"consume_function\""}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless", Evaluator -> Automatic, 
                    Method -> "Preemptive"], "\" in \"", 
                    "\"consume_function\""}, "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{
                    "\" 366.          self.routes_registry = \
registry(self.builtin_routes, **routes_registry)\""}, {"\" 367.  \""}, {
                    "\" 368.      def consume_function(self, *args, \
**kwargs):\""}, {
                    "\" 369.          expr = super().consume_function(*args, \
**kwargs)\""}, {"\" 370.  \""}, {
                    "\" 371.          if check_wl_symbol(expr, \
self.hook_symbol):\""}, {
                    "\" 372.              assert len(expr.args) >= 1\""}, {
                    ItemBox[
                    "\" 373.              return \
self.dispatch_wl_object(*expr.args)\"", Background -> RGBColor[1, 1, 0.85], 
                    StripOnInput -> False]}, {"\" 374.  \""}, {
                    "\" 375.          return expr\""}, {"\" 376.  \""}, {
                    "\" 377.      def dispatch_wl_object(self, route, *args):\
\""}, {"\" 378.          return self.routes_registry[route](self, *args)\""}, \
{"\" 379.  \""}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\"self\"", 
                    "\"<ExternalEvaluateConsumer globals=5 objects=4>\""}, {
                    "\"args\"", 
                    "\"(<wolframclient.deserializers.wxf.wxfparser.WXFToken \
object at 0x168f06750>, <generator object WXFParser.tokens at \
0x168ecb040>)\""}, {"\"kwargs\"", "\"{}\""}, {"\"expr\"", 
                    "\"ExternalEvaluate`Private`ExternalEvaluateCommand['\
MethodCall', None, hypernetx.classes.hypergraph.Hypergraph, 'bipartite', \
Rule['ReturnType', 'ExternalObject']]\""}, {"\"__class__\"", 
                    
                    "\"<class \
'wolframclient.utils.externalevaluate.ExternalEvaluateConsumer'>\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Null}}, 
                    "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<ExternalEvaluateConsumer globals=5 objects=4>"}, {
                    "args", 
                    "(<wolframclient.deserializers.wxf.wxfparser.WXFToken \
object at 0x168f06750>, <generator object WXFParser.tokens at \
0x168ecb040>)"}, {"kwargs", "{}"}, {"expr", 
                    "ExternalEvaluate`Private`ExternalEvaluateCommand['\
MethodCall', None, hypernetx.classes.hypergraph.Hypergraph, 'bipartite', \
Rule['ReturnType', 'ExternalObject']]"}, {"__class__", 
                    "<class \
'wolframclient.utils.externalevaluate.ExternalEvaluateConsumer'>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless"], " in ", 
                    "consume_function"}], 
                    Column[{
                    
                    Column[{
                    " 366.          self.routes_registry = \
registry(self.builtin_routes, **routes_registry)", " 367.  ", 
                    " 368.      def consume_function(self, *args, **kwargs):",
                     " 369.          expr = super().consume_function(*args, \
**kwargs)", " 370.  ", 
                    " 371.          if check_wl_symbol(expr, \
self.hook_symbol):", " 372.              assert len(expr.args) >= 1", 
                    Item[
                    " 373.              return \
self.dispatch_wl_object(*expr.args)", Background -> LightYellow], " 374.  ", 
                    " 375.          return expr", " 376.  ", 
                    " 377.      def dispatch_wl_object(self, route, *args):", 
                    
                    " 378.          return self.routes_registry[route](self, \
*args)", " 379.  "}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<ExternalEvaluateConsumer globals=5 objects=4>"}, {
                    "args", 
                    "(<wolframclient.deserializers.wxf.wxfparser.WXFToken \
object at 0x168f06750>, <generator object WXFParser.tokens at \
0x168ecb040>)"}, {"kwargs", "{}"}, {"expr", 
                    "ExternalEvaluate`Private`ExternalEvaluateCommand['\
MethodCall', None, hypernetx.classes.hypergraph.Hypergraph, 'bipartite', \
Rule['ReturnType', 'ExternalObject']]"}, {"__class__", 
                    "<class \
'wolframclient.utils.externalevaluate.ExternalEvaluateConsumer'>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless", Evaluator -> Automatic, 
                    Method -> "Preemptive"], "\" in \"", 
                    "\"dispatch_wl_object\""}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless", Evaluator -> Automatic, 
                    Method -> "Preemptive"], "\" in \"", 
                    "\"dispatch_wl_object\""}, "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{
                    "\" 371.          if check_wl_symbol(expr, \
self.hook_symbol):\""}, {
                    "\" 372.              assert len(expr.args) >= 1\""}, {
                    "\" 373.              return \
self.dispatch_wl_object(*expr.args)\""}, {"\" 374.  \""}, {
                    "\" 375.          return expr\""}, {"\" 376.  \""}, {
                    "\" 377.      def dispatch_wl_object(self, route, *args):\
\""}, {
                    ItemBox[
                    "\" 378.          return \
self.routes_registry[route](self, *args)\"", Background -> 
                    RGBColor[1, 1, 0.85], StripOnInput -> False]}, {
                    "\" 379.  \""}, {"\" 380.      def __repr__(self):\""}, {
                    "\" 381.          return \\\"<{} globals={} objects={}>\\\
\".format(\""}, {
                    "\" 382.              self.__class__.__name__, \
len(self.globals_registry), len(self.objects_registry)\""}, {
                    "\" 383.          )\""}, {"\" 384.  \""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\"self\"", 
                    "\"<ExternalEvaluateConsumer globals=5 objects=4>\""}, {
                    "\"route\"", "\"MethodCall\""}, {"\"args\"", 
                    "\"(None, hypernetx.classes.hypergraph.Hypergraph, \
'bipartite', Rule['ReturnType', 'ExternalObject'])\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Null}}, "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<ExternalEvaluateConsumer globals=5 objects=4>"}, {
                    "route", "MethodCall"}, {"args", 
                    "(None, hypernetx.classes.hypergraph.Hypergraph, \
'bipartite', Rule['ReturnType', 'ExternalObject'])"}}, Background -> {
                    Null, {LightGray}}, Alignment -> Left, Frame -> 
                    LightGray]}, False]], DynamicModuleValues -> Automatic], 
                    Setting[#, {0}]& ]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless"], " in ", 
                    "dispatch_wl_object"}], 
                    Column[{
                    
                    Column[{
                    " 371.          if check_wl_symbol(expr, \
self.hook_symbol):", " 372.              assert len(expr.args) >= 1", 
                    " 373.              return \
self.dispatch_wl_object(*expr.args)", " 374.  ", " 375.          return expr",
                     " 376.  ", 
                    " 377.      def dispatch_wl_object(self, route, *args):", 
                    
                    Item[
                    " 378.          return self.routes_registry[route](self, \
*args)", Background -> LightYellow], " 379.  ", 
                    " 380.      def __repr__(self):", 
                    " 381.          return \"<{} globals={} \
objects={}>\".format(", 
                    " 382.              self.__class__.__name__, \
len(self.globals_registry), len(self.objects_registry)", " 383.          )", 
                    " 384.  "}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<ExternalEvaluateConsumer globals=5 objects=4>"}, {
                    "route", "MethodCall"}, {"args", 
                    "(None, hypernetx.classes.hypergraph.Hypergraph, \
'bipartite', Rule['ReturnType', 'ExternalObject'])"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = True}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless", Evaluator -> Automatic, 
                    Method -> "Preemptive"], "\" in \"", "\"MethodCall\""}, 
                    "RowDefault"]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless", Evaluator -> Automatic, 
                    Method -> "Preemptive"], "\" in \"", "\"MethodCall\""}, 
                    "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{"\" 288.  @routes.register_function\""}, {
                    "\" 289.  def FromComplex(consumer, a, b):\""}, {
                    "\" 290.      return complex(a, b)\""}, {"\" 291.  \""}, {
                    "\" 292.  \""}, {
                    "\" 293.  @routes.register_function\""}, {
                    "\" 294.  def MethodCall(consumer, result, names, *args):\
\""}, {
                    ItemBox[
                    "\" 295.      return Call(consumer, \
GetAttribute(consumer, result, names), *args)\"", Background -> 
                    RGBColor[1, 1, 0.85], StripOnInput -> False]}, {
                    "\" 296.  \""}, {"\" 297.  \""}, {
                    "\" 298.  @routes.register_function\""}, {
                    "\" 299.  def FromMissing(consumer):\""}, {
                    "\" 300.      return\""}, {"\" 301.  \""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\"consumer\"", 
                    "\"<ExternalEvaluateConsumer globals=5 objects=4>\""}, {
                    "\"result\"", 
                    "\"None, <class \
'hypernetx.classes.hypergraph.Hypergraph'>\""}, {"\"names\"", 
                    "\"bipartite\""}, {"\"args\"", 
                    "\"(Rule['ReturnType', 'ExternalObject'],)\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Null}}, 
                    "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"consumer", 
                    "<ExternalEvaluateConsumer globals=5 objects=4>"}, {
                    "result", 
                    "None, <class \
'hypernetx.classes.hypergraph.Hypergraph'>"}, {"names", "bipartite"}, {
                    "args", "(Rule['ReturnType', 'ExternalObject'],)"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless"], " in ", "MethodCall"}], 
                    Column[{
                    
                    Column[{" 288.  @routes.register_function", 
                    " 289.  def FromComplex(consumer, a, b):", 
                    " 290.      return complex(a, b)", " 291.  ", " 292.  ", 
                    " 293.  @routes.register_function", 
                    " 294.  def MethodCall(consumer, result, names, *args):", 
                    
                    Item[
                    " 295.      return Call(consumer, GetAttribute(consumer, \
result, names), *args)", Background -> LightYellow], " 296.  ", " 297.  ", 
                    " 298.  @routes.register_function", 
                    " 299.  def FromMissing(consumer):", " 300.      return", 
                    " 301.  "}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"consumer", 
                    "<ExternalEvaluateConsumer globals=5 objects=4>"}, {
                    "result", 
                    "None, <class \
'hypernetx.classes.hypergraph.Hypergraph'>"}, {"names", "bipartite"}, {
                    "args", "(Rule['ReturnType', 'ExternalObject'],)"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, True]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = True}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless", Evaluator -> Automatic, 
                    Method -> "Preemptive"], "\" in \"", "\"Call\""}, 
                    "RowDefault"]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless", Evaluator -> Automatic, 
                    Method -> "Preemptive"], "\" in \"", "\"Call\""}, 
                    "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{"\" 248.  \""}, {"\" 249.  \""}, {
                    "\" 250.  @routes.register_function\""}, {
                    "\" 251.  def Call(consumer, result, *args):\""}, {
                    "\" 252.  \""}, {
                    "\" 253.      pos, kwargs = unpack_optionals(args)\""}, {
                    "\" 254.  \""}, {
                    ItemBox[
                    "\" 255.      return result(*pos, **kwargs)\"", 
                    Background -> RGBColor[1, 1, 0.85], StripOnInput -> 
                    False]}, {"\" 256.  \""}, {
                    "\" 257.  @routes.register_function\""}, {
                    "\" 258.  def FromUnixTime(consumer, unixtime, timezone):\
\""}, {"\" 259.      if timezone is None:\""}, {"\" 260.          pass\""}, {
                    "\" 261.      elif isinstance(timezone, \
six.string_types):\""}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\"consumer\"", 
                    "\"<ExternalEvaluateConsumer globals=5 objects=4>\""}, {
                    "\"result\"", 
                    "\"<bound method Hypergraph.bipartite of None, \
hypernetx.classes.hypergraph.Hypergraph>\""}, {"\"args\"", 
                    "\"(Rule['ReturnType', 'ExternalObject'],)\""}, {
                    "\"pos\"", "\"[]\""}, {"\"kwargs\"", 
                    "\"{'ReturnType': 'ExternalObject'}\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Null}}, 
                    "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"consumer", 
                    "<ExternalEvaluateConsumer globals=5 objects=4>"}, {
                    "result", 
                    "<bound method Hypergraph.bipartite of None, \
hypernetx.classes.hypergraph.Hypergraph>"}, {"args", 
                    "(Rule['ReturnType', 'ExternalObject'],)"}, {
                    "pos", "[]"}, {"kwargs", 
                    "{'ReturnType': 'ExternalObject'}"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless"], " in ", "Call"}], 
                    Column[{
                    
                    Column[{" 248.  ", " 249.  ", 
                    " 250.  @routes.register_function", 
                    " 251.  def Call(consumer, result, *args):", " 252.  ", 
                    " 253.      pos, kwargs = unpack_optionals(args)", 
                    " 254.  ", 
                    Item[
                    " 255.      return result(*pos, **kwargs)", Background -> 
                    LightYellow], " 256.  ", 
                    " 257.  @routes.register_function", 
                    " 258.  def FromUnixTime(consumer, unixtime, timezone):", 
                    " 259.      if timezone is None:", " 260.          pass", 
                    " 261.      elif isinstance(timezone, \
six.string_types):"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"consumer", 
                    "<ExternalEvaluateConsumer globals=5 objects=4>"}, {
                    "result", 
                    "<bound method Hypergraph.bipartite of None, \
hypernetx.classes.hypergraph.Hypergraph>"}, {"args", 
                    "(Rule['ReturnType', 'ExternalObject'],)"}, {
                    "pos", "[]"}, {"kwargs", 
                    "{'ReturnType': 'ExternalObject'}"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, True]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], FontFamily -> "Courier", StripOnInput -> 
                    False], ImageMargins -> 0]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    
                    Row[{"TypeError", " ", 
                    "Hypergraph.bipartite() got an unexpected keyword \
argument 'ReturnType'"}], 
                    Style[
                    Column[{
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/language/\
decorators.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/language/\
decorators.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/language/\
decorators.py"]], Appearance -> "Frameless"], " in ", "safe_wl_execute"}], 
                    Column[{
                    
                    Column[{
                    "  14.      \"wl\": b'Failure[\"PythonFailure\", \
<|\"MessageTemplate\" -> \"Unexpected error occurred.\"|>]',", "  15.  }", 
                    "  16.  ", "  17.  ", 
                    "  18.  def safe_wl_execute(function, args=(), opts={}, \
export_opts={}, exception_class=None):", "  19.  ", "  20.      try:", 
                    Item[
                    "  21.          return export(function(*args, **opts), \
**export_opts)", Background -> LightYellow], 
                    "  22.      except Exception as export_exception:", 
                    "  23.          try:", "  24.              try:", 
                    "  25.  ", 
                    "  26.                  # The user can provide an \
exception class, and it can be broken, in which case we are running another", 
                    "  27.                  # try / except to return errors \
that are happening during class serialization"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "function", "<function handle_message at 0x1068b7560>"}, {
                    "args", "(<zmq.Socket(zmq.PAIR) at 0x106891240>,)"}, {
                    "opts", 
                    "{'consumer': <ExternalEvaluateConsumer globals=5 \
objects=4>}"}, {"export_opts", 
                    "{'object_processor': <function \
start_zmq_loop.<locals>.<lambda> at 0x105b189a0>, 'target_format': 'wxf'}"}, {
                    "exception_class", "None"}, {
                    "export_exception", 
                    "Hypergraph.bipartite() got an unexpected keyword \
argument 'ReturnType'"}}, Background -> {Null, {LightGray}}, Alignment -> 
                    Left, Frame -> LightGray]}]}]}, False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless"], " in ", 
                    "handle_message"}], 
                    Column[{
                    
                    Column[{
                    " 393.          self.socket.send(zmq.Frame(bytes))", 
                    " 394.  ", " 395.      def send_side_effect(self, expr):",
                     " 396.          \
self.write(export(self.keep_listening(expr), target_format=\"wxf\"))", 
                    " 397.  ", " 398.  ", 
                    " 399.  def handle_message(socket, consumer):", 
                    Item[
                    " 400.      result = \
binary_deserialize(socket.recv(copy=False).buffer, consumer=consumer)", 
                    Background -> LightYellow], " 401.  ", 
                    " 402.      sys.stdout.flush()", 
                    " 403.      return result", " 404.  ", " 405.  ", 
                    " 406.  def start_zmq_instance(port=None, \
write_to_stdout=True, **opts):"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "socket", "<zmq.Socket(zmq.PAIR) at 0x106891240>"}, {
                    "consumer", 
                    "<ExternalEvaluateConsumer globals=5 objects=4>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
__init__.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
__init__.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
__init__.py"]], Appearance -> "Frameless"], " in ", "binary_deserialize"}], 
                    Column[{
                    
                    Column[{"  33.  ", "  34.      \"\"\"", 
                    "  35.      parser = WXFParser(wxf_input)", 
                    "  36.      if consumer is None:", 
                    "  37.          consumer = WXFConsumerNumpy()", "  38.  ",
                     "  39.      try:", 
                    Item[
                    "  40.          o = \
consumer.next_expression(parser.tokens(), **kwargs)", Background -> 
                    LightYellow], "  41.      except StopIteration:", 
                    "  42.          raise WolframParserException(", 
                    "  43.              \"Input data does not represent a \
valid expression in WXF format. Expecting more input data.\"", 
                    "  44.          )", 
                    "  45.      if not \
parser.context.is_valid_final_state():", 
                    "  46.          raise WolframParserException("}, 
                    Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "wxf_input", 
                    "8:f\.03s0ExternalEvaluate`Private`\
ExternalEvaluateCommandS\n\
ReturnTypef\.04s0ExternalEvaluate`Private`ExternalEvaluateCommandS\n\
MethodCallf\.02s0ExternalEvaluate`Private`ExternalEvaluateCommandS\.0c\
GetReferenceL3i\.01\.00\.00\.00S\tbipartitef\.02s\.04RuleS\n\
ReturnTypeS\.0eExternalObjectS\nExpression"}, {
                    "consumer", 
                    "<ExternalEvaluateConsumer globals=5 objects=4>"}, {
                    "kwargs", "{}"}, {
                    "parser", 
                    "<wolframclient.deserializers.wxf.wxfparser.WXFParser \
object at 0x168786810>"}}, Background -> {Null, {LightGray}}, Alignment -> 
                    Left, Frame -> LightGray]}]}]}, False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless"], " in ", "next_expression"}], 
                    Column[{
                    
                    Column[{
                    "  69.          constants.WXF_CONSTANTS.RuleDelayed: \
\"consume_rule_delayed\",", "  70.      }", "  71.  ", 
                    "  72.      def next_expression(self, tokens, **kwargs):",
                     "  73.          \"\"\"Deserialize the next expression \
starting at the next token yield by `tokens`.\"\"\"", 
                    "  74.          token = next(tokens)", 
                    "  75.          consumer = \
self._consumer_from_type(token.wxf_type)", 
                    Item[
                    "  76.          return consumer(token, tokens, **kwargs)",
                     Background -> LightYellow], "  77.  ", 
                    "  78.      def _consumer_from_type(self, wxf_type):", 
                    "  79.          try:", 
                    "  80.              func = self._mapping[wxf_type]", 
                    "  81.          except KeyError:", 
                    "  82.              raise WolframParserException("}, 
                    Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "self", 
                    "<ExternalEvaluateConsumer globals=5 objects=4>"}, {
                    "tokens", 
                    "<generator object WXFParser.tokens at 0x168ecb040>"}, {
                    "kwargs", "{}"}, {
                    "token", "WXFToken<b'f', data=None, len=3>"}, {
                    "consumer", 
                    "<bound method ExternalEvaluateConsumer.consume_function \
of <ExternalEvaluateConsumer globals=5 objects=4>>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless"], " in ", 
                    "consume_function"}], 
                    Column[{
                    
                    Column[{" 362.  ", 
                    " 363.      def __init__(self, routes_registry={}, \
objects_registry={}, globals_registry={}):", 
                    " 364.          self.objects_registry = \
registry(objects_registry)", 
                    " 365.          self.globals_registry = \
registry(globals_registry)", 
                    " 366.          self.routes_registry = \
registry(self.builtin_routes, **routes_registry)", " 367.  ", 
                    " 368.      def consume_function(self, *args, **kwargs):", 
                    Item[
                    " 369.          expr = super().consume_function(*args, \
**kwargs)", Background -> LightYellow], " 370.  ", 
                    " 371.          if check_wl_symbol(expr, \
self.hook_symbol):", " 372.              assert len(expr.args) >= 1", 
                    " 373.              return \
self.dispatch_wl_object(*expr.args)", " 374.  ", 
                    " 375.          return expr"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "self", 
                    "<ExternalEvaluateConsumer globals=5 objects=4>"}, {
                    "args", 
                    "(<wolframclient.deserializers.wxf.wxfparser.WXFToken \
object at 0x168f06b10>, <generator object WXFParser.tokens at \
0x168ecb040>)"}, {"kwargs", "{}"}, {
                    "__class__", 
                    "<class \
'wolframclient.utils.externalevaluate.ExternalEvaluateConsumer'>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless"], " in ", "consume_function"}], 
                    Column[{
                    
                    Column[{
                    "  94.          Return a :class:`list` if the head is \
symbol `List`, otherwise returns the result of \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`", "  95.          applied to the head and arguments.", "  96.  ", 
                    "  97.          Usually custom parsing rules target \
Functions, but not List. To do so, it is recommended to override", 
                    "  98.          \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`.", "  99.          \"\"\"", 
                    " 100.          head = self.next_expression(tokens, \
**kwargs)", 
                    Item[
                    " 101.          args = tuple(", Background -> 
                    LightYellow], 
                    " 102.              self.next_expression(tokens, \
**kwargs) for i in range(current_token.length)", " 103.          )", 
                    " 104.          if head == self._LIST:", 
                    " 105.              return args", " 106.          else:", 
                    " 107.              return self.build_function(head, \
args, **kwargs)"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "self", 
                    "<ExternalEvaluateConsumer globals=5 objects=4>"}, {
                    "current_token", "WXFToken<b'f', data=None, len=3>"}, {
                    "tokens", 
                    "<generator object WXFParser.tokens at 0x168ecb040>"}, {
                    "kwargs", "{}"}, {
                    "head", 
                    "ExternalEvaluate`Private`ExternalEvaluateCommand"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless"], " in ", "<genexpr>"}], 
                    Column[{
                    
                    Column[{
                    "  95.          applied to the head and arguments.", 
                    "  96.  ", 
                    "  97.          Usually custom parsing rules target \
Functions, but not List. To do so, it is recommended to override", 
                    "  98.          \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`.", "  99.          \"\"\"", 
                    " 100.          head = self.next_expression(tokens, \
**kwargs)", " 101.          args = tuple(", 
                    Item[
                    " 102.              self.next_expression(tokens, \
**kwargs) for i in range(current_token.length)", Background -> LightYellow], 
                    " 103.          )", 
                    " 104.          if head == self._LIST:", 
                    " 105.              return args", " 106.          else:", 
                    " 107.              return self.build_function(head, \
args, **kwargs)", " 108.  "}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    ".0", "<range_iterator object at 0x1692f9200>"}, {
                    "i", "1"}, {"kwargs", "{}"}, {
                    "self", 
                    "<ExternalEvaluateConsumer globals=5 objects=4>"}, {
                    "tokens", 
                    "<generator object WXFParser.tokens at 0x168ecb040>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless"], " in ", "next_expression"}], 
                    Column[{
                    
                    Column[{
                    "  69.          constants.WXF_CONSTANTS.RuleDelayed: \
\"consume_rule_delayed\",", "  70.      }", "  71.  ", 
                    "  72.      def next_expression(self, tokens, **kwargs):",
                     "  73.          \"\"\"Deserialize the next expression \
starting at the next token yield by `tokens`.\"\"\"", 
                    "  74.          token = next(tokens)", 
                    "  75.          consumer = \
self._consumer_from_type(token.wxf_type)", 
                    Item[
                    "  76.          return consumer(token, tokens, **kwargs)",
                     Background -> LightYellow], "  77.  ", 
                    "  78.      def _consumer_from_type(self, wxf_type):", 
                    "  79.          try:", 
                    "  80.              func = self._mapping[wxf_type]", 
                    "  81.          except KeyError:", 
                    "  82.              raise WolframParserException("}, 
                    Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "self", 
                    "<ExternalEvaluateConsumer globals=5 objects=4>"}, {
                    "tokens", 
                    "<generator object WXFParser.tokens at 0x168ecb040>"}, {
                    "kwargs", "{}"}, {
                    "token", "WXFToken<b'f', data=None, len=4>"}, {
                    "consumer", 
                    "<bound method ExternalEvaluateConsumer.consume_function \
of <ExternalEvaluateConsumer globals=5 objects=4>>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless"], " in ", 
                    "consume_function"}], 
                    Column[{
                    
                    Column[{
                    " 366.          self.routes_registry = \
registry(self.builtin_routes, **routes_registry)", " 367.  ", 
                    " 368.      def consume_function(self, *args, **kwargs):",
                     " 369.          expr = super().consume_function(*args, \
**kwargs)", " 370.  ", 
                    " 371.          if check_wl_symbol(expr, \
self.hook_symbol):", " 372.              assert len(expr.args) >= 1", 
                    Item[
                    " 373.              return \
self.dispatch_wl_object(*expr.args)", Background -> LightYellow], " 374.  ", 
                    " 375.          return expr", " 376.  ", 
                    " 377.      def dispatch_wl_object(self, route, *args):", 
                    " 378.          return self.routes_registry[route](self, \
*args)", " 379.  "}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "self", 
                    "<ExternalEvaluateConsumer globals=5 objects=4>"}, {
                    "args", 
                    "(<wolframclient.deserializers.wxf.wxfparser.WXFToken \
object at 0x168f06750>, <generator object WXFParser.tokens at \
0x168ecb040>)"}, {"kwargs", "{}"}, {
                    "expr", 
                    "ExternalEvaluate`Private`ExternalEvaluateCommand['\
MethodCall', None, hypernetx.classes.hypergraph.Hypergraph, 'bipartite', \
Rule['ReturnType', 'ExternalObject']]"}, {
                    "__class__", 
                    "<class \
'wolframclient.utils.externalevaluate.ExternalEvaluateConsumer'>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless"], " in ", 
                    "dispatch_wl_object"}], 
                    Column[{
                    
                    Column[{
                    " 371.          if check_wl_symbol(expr, \
self.hook_symbol):", " 372.              assert len(expr.args) >= 1", 
                    " 373.              return \
self.dispatch_wl_object(*expr.args)", " 374.  ", " 375.          return expr",
                     " 376.  ", 
                    " 377.      def dispatch_wl_object(self, route, *args):", 
                    
                    Item[
                    " 378.          return self.routes_registry[route](self, \
*args)", Background -> LightYellow], " 379.  ", 
                    " 380.      def __repr__(self):", 
                    " 381.          return \"<{} globals={} \
objects={}>\".format(", 
                    " 382.              self.__class__.__name__, \
len(self.globals_registry), len(self.objects_registry)", " 383.          )", 
                    " 384.  "}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "self", 
                    "<ExternalEvaluateConsumer globals=5 objects=4>"}, {
                    "route", "MethodCall"}, {
                    "args", 
                    "(None, hypernetx.classes.hypergraph.Hypergraph, \
'bipartite', Rule['ReturnType', 'ExternalObject'])"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless"], " in ", "MethodCall"}], 
                    Column[{
                    
                    Column[{" 288.  @routes.register_function", 
                    " 289.  def FromComplex(consumer, a, b):", 
                    " 290.      return complex(a, b)", " 291.  ", " 292.  ", 
                    " 293.  @routes.register_function", 
                    " 294.  def MethodCall(consumer, result, names, *args):", 
                    
                    Item[
                    " 295.      return Call(consumer, GetAttribute(consumer, \
result, names), *args)", Background -> LightYellow], " 296.  ", " 297.  ", 
                    " 298.  @routes.register_function", 
                    " 299.  def FromMissing(consumer):", " 300.      return", 
                    " 301.  "}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "consumer", 
                    "<ExternalEvaluateConsumer globals=5 objects=4>"}, {
                    "result", 
                    "None, <class \
'hypernetx.classes.hypergraph.Hypergraph'>"}, {"names", "bipartite"}, {
                    "args", "(Rule['ReturnType', 'ExternalObject'],)"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, True], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless"], " in ", "Call"}], 
                    Column[{
                    
                    Column[{" 248.  ", " 249.  ", 
                    " 250.  @routes.register_function", 
                    " 251.  def Call(consumer, result, *args):", " 252.  ", 
                    " 253.      pos, kwargs = unpack_optionals(args)", 
                    " 254.  ", 
                    Item[
                    " 255.      return result(*pos, **kwargs)", Background -> 
                    LightYellow], " 256.  ", 
                    " 257.  @routes.register_function", 
                    " 258.  def FromUnixTime(consumer, unixtime, timezone):", 
                    " 259.      if timezone is None:", " 260.          pass", 
                    " 261.      elif isinstance(timezone, \
six.string_types):"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "consumer", 
                    "<ExternalEvaluateConsumer globals=5 objects=4>"}, {
                    "result", 
                    "<bound method Hypergraph.bipartite of None, \
hypernetx.classes.hypergraph.Hypergraph>"}, {
                    "args", "(Rule['ReturnType', 'ExternalObject'],)"}, {
                    "pos", "[]"}, {"kwargs", 
                    "{'ReturnType': 'ExternalObject'}"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, True]}], FontFamily -> 
                    "Courier"]}, True]], DynamicModuleValues -> Automatic], 
                    Setting[#, {0}]& ], HoldForm], "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  Failure[
  "PythonError", <|
   "MessageTemplate" :> 
    "Hypergraph.bipartite() got an unexpected keyword argument 'ReturnType'", 
    "MessageParameters" :> <||>, "FailureCode" :> "TypeError", "Traceback" :> 
    OpenerView[{
       Row[{
        "TypeError", " ", 
         "Hypergraph.bipartite() got an unexpected keyword argument \
'ReturnType'"}], 
       Style[
        Column[{
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/language/\
decorators.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/language/\
decorators.py"], 
                SystemOpen[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/language/\
decorators.py"]], Appearance -> "Frameless"], " in ", "safe_wl_execute"}], 
            Column[{
              
              Column[{"  14.      \"wl\": b'Failure[\"PythonFailure\", \
<|\"MessageTemplate\" -> \"Unexpected error occurred.\"|>]',", "  15.  }", 
                "  16.  ", "  17.  ", 
                "  18.  def safe_wl_execute(function, args=(), opts={}, \
export_opts={}, exception_class=None):", "  19.  ", "  20.      try:", 
                Item[
                "  21.          return export(function(*args, **opts), \
**export_opts)", Background -> LightYellow], 
                "  22.      except Exception as export_exception:", 
                "  23.          try:", "  24.              try:", "  25.  ", 
                "  26.                  # The user can provide an exception \
class, and it can be broken, in which case we are running another", 
                "  27.                  # try / except to return errors that \
are happening during class serialization"}, Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  "function", "<function handle_message at 0x1068b7560>"}, {
                  "args", "(<zmq.Socket(zmq.PAIR) at 0x106891240>,)"}, {
                  "opts", 
                   "{'consumer': <ExternalEvaluateConsumer globals=5 \
objects=4>}"}, {"export_opts", 
                   "{'object_processor': <function \
start_zmq_loop.<locals>.<lambda> at 0x105b189a0>, 'target_format': 'wxf'}"}, {
                  "exception_class", "None"}, {
                  "export_exception", 
                   "Hypergraph.bipartite() got an unexpected keyword argument \
'ReturnType'"}}, Background -> {Null, {LightGray}}, Alignment -> Left, Frame -> 
                 LightGray]}]}]}, False], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                SystemOpen[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless"], " in ", 
              "handle_message"}], 
            Column[{
              
              Column[{" 393.          self.socket.send(zmq.Frame(bytes))", 
                " 394.  ", " 395.      def send_side_effect(self, expr):", 
                " 396.          self.write(export(self.keep_listening(expr), \
target_format=\"wxf\"))", " 397.  ", " 398.  ", 
                " 399.  def handle_message(socket, consumer):", 
                Item[
                " 400.      result = \
binary_deserialize(socket.recv(copy=False).buffer, consumer=consumer)", 
                 Background -> LightYellow], " 401.  ", 
                " 402.      sys.stdout.flush()", " 403.      return result", 
                " 404.  ", " 405.  ", 
                " 406.  def start_zmq_instance(port=None, \
write_to_stdout=True, **opts):"}, Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  "socket", "<zmq.Socket(zmq.PAIR) at 0x106891240>"}, {
                  "consumer", 
                   "<ExternalEvaluateConsumer globals=5 objects=4>"}}, 
                 Background -> {Null, {LightGray}}, Alignment -> Left, Frame -> 
                 LightGray]}]}]}, False], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
__init__.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
__init__.py"], 
                SystemOpen[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
__init__.py"]], Appearance -> "Frameless"], " in ", "binary_deserialize"}], 
            Column[{
              
              Column[{"  33.  ", "  34.      \"\"\"", 
                "  35.      parser = WXFParser(wxf_input)", 
                "  36.      if consumer is None:", 
                "  37.          consumer = WXFConsumerNumpy()", "  38.  ", 
                "  39.      try:", 
                Item[
                "  40.          o = consumer.next_expression(parser.tokens(), \
**kwargs)", Background -> LightYellow], "  41.      except StopIteration:", 
                "  42.          raise WolframParserException(", 
                "  43.              \"Input data does not represent a valid \
expression in WXF format. Expecting more input data.\"", "  44.          )", 
                "  45.      if not parser.context.is_valid_final_state():", 
                "  46.          raise WolframParserException("}, 
               Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  "wxf_input", 
                   "8:f\.03s0ExternalEvaluate`Private`\
ExternalEvaluateCommandS\n\
ReturnTypef\.04s0ExternalEvaluate`Private`ExternalEvaluateCommandS\n\
MethodCallf\.02s0ExternalEvaluate`Private`ExternalEvaluateCommandS\.0c\
GetReferenceL3i\.01\.00\.00\.00S\tbipartitef\.02s\.04RuleS\n\
ReturnTypeS\.0eExternalObjectS\nExpression"}, {
                  "consumer", 
                   "<ExternalEvaluateConsumer globals=5 objects=4>"}, {
                  "kwargs", "{}"}, {
                  "parser", 
                   "<wolframclient.deserializers.wxf.wxfparser.WXFParser \
object at 0x168786810>"}}, Background -> {Null, {LightGray}}, Alignment -> 
                 Left, Frame -> LightGray]}]}]}, False], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                SystemOpen[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless"], " in ", "next_expression"}], 
            Column[{
              
              Column[{"  69.          constants.WXF_CONSTANTS.RuleDelayed: \
\"consume_rule_delayed\",", "  70.      }", "  71.  ", 
                "  72.      def next_expression(self, tokens, **kwargs):", 
                "  73.          \"\"\"Deserialize the next expression \
starting at the next token yield by `tokens`.\"\"\"", 
                "  74.          token = next(tokens)", 
                "  75.          consumer = \
self._consumer_from_type(token.wxf_type)", 
                Item[
                "  76.          return consumer(token, tokens, **kwargs)", 
                 Background -> LightYellow], "  77.  ", 
                "  78.      def _consumer_from_type(self, wxf_type):", 
                "  79.          try:", 
                "  80.              func = self._mapping[wxf_type]", 
                "  81.          except KeyError:", 
                "  82.              raise WolframParserException("}, 
               Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  "self", "<ExternalEvaluateConsumer globals=5 objects=4>"}, {
                  "tokens", 
                   "<generator object WXFParser.tokens at 0x168ecb040>"}, {
                  "kwargs", "{}"}, {
                  "token", "WXFToken<b'f', data=None, len=3>"}, {
                  "consumer", 
                   "<bound method ExternalEvaluateConsumer.consume_function \
of <ExternalEvaluateConsumer globals=5 objects=4>>"}}, 
                 Background -> {Null, {LightGray}}, Alignment -> Left, Frame -> 
                 LightGray]}]}]}, False], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                SystemOpen[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless"], " in ", 
              "consume_function"}], 
            Column[{
              
              Column[{" 362.  ", 
                " 363.      def __init__(self, routes_registry={}, \
objects_registry={}, globals_registry={}):", 
                " 364.          self.objects_registry = \
registry(objects_registry)", 
                " 365.          self.globals_registry = \
registry(globals_registry)", 
                " 366.          self.routes_registry = \
registry(self.builtin_routes, **routes_registry)", " 367.  ", 
                " 368.      def consume_function(self, *args, **kwargs):", 
                Item[
                " 369.          expr = super().consume_function(*args, \
**kwargs)", Background -> LightYellow], " 370.  ", 
                " 371.          if check_wl_symbol(expr, self.hook_symbol):", 
                " 372.              assert len(expr.args) >= 1", 
                " 373.              return \
self.dispatch_wl_object(*expr.args)", " 374.  ", 
                " 375.          return expr"}, Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  "self", "<ExternalEvaluateConsumer globals=5 objects=4>"}, {
                  "args", 
                   "(<wolframclient.deserializers.wxf.wxfparser.WXFToken \
object at 0x168f06b10>, <generator object WXFParser.tokens at \
0x168ecb040>)"}, {"kwargs", "{}"}, {
                  "__class__", 
                   "<class \
'wolframclient.utils.externalevaluate.ExternalEvaluateConsumer'>"}}, 
                 Background -> {Null, {LightGray}}, Alignment -> Left, Frame -> 
                 LightGray]}]}]}, False], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                SystemOpen[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless"], " in ", "consume_function"}], 
            Column[{
              
              Column[{"  94.          Return a :class:`list` if the head is \
symbol `List`, otherwise returns the result of \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`", "  95.          applied to the head and arguments.", "  96.  ", 
                "  97.          Usually custom parsing rules target \
Functions, but not List. To do so, it is recommended to override", 
                "  98.          \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`.", "  99.          \"\"\"", 
                " 100.          head = self.next_expression(tokens, \
**kwargs)", 
                Item[
                " 101.          args = tuple(", Background -> LightYellow], 
                " 102.              self.next_expression(tokens, **kwargs) \
for i in range(current_token.length)", " 103.          )", 
                " 104.          if head == self._LIST:", 
                " 105.              return args", " 106.          else:", 
                " 107.              return self.build_function(head, args, \
**kwargs)"}, Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  "self", "<ExternalEvaluateConsumer globals=5 objects=4>"}, {
                  "current_token", "WXFToken<b'f', data=None, len=3>"}, {
                  "tokens", 
                   "<generator object WXFParser.tokens at 0x168ecb040>"}, {
                  "kwargs", "{}"}, {
                  "head", 
                   "ExternalEvaluate`Private`ExternalEvaluateCommand"}}, 
                 Background -> {Null, {LightGray}}, Alignment -> Left, Frame -> 
                 LightGray]}]}]}, False], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                SystemOpen[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless"], " in ", "<genexpr>"}], 
            Column[{
              
              Column[{"  95.          applied to the head and arguments.", 
                "  96.  ", 
                "  97.          Usually custom parsing rules target \
Functions, but not List. To do so, it is recommended to override", 
                "  98.          \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`.", "  99.          \"\"\"", 
                " 100.          head = self.next_expression(tokens, \
**kwargs)", " 101.          args = tuple(", 
                Item[
                " 102.              self.next_expression(tokens, **kwargs) \
for i in range(current_token.length)", Background -> LightYellow], 
                " 103.          )", " 104.          if head == self._LIST:", 
                " 105.              return args", " 106.          else:", 
                " 107.              return self.build_function(head, args, \
**kwargs)", " 108.  "}, Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  ".0", "<range_iterator object at 0x1692f9200>"}, {
                  "i", "1"}, {"kwargs", "{}"}, {
                  "self", "<ExternalEvaluateConsumer globals=5 objects=4>"}, {
                  "tokens", 
                   "<generator object WXFParser.tokens at 0x168ecb040>"}}, 
                 Background -> {Null, {LightGray}}, Alignment -> Left, Frame -> 
                 LightGray]}]}]}, False], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"], 
                SystemOpen[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/deserializers/wxf/\
wxfconsumer.py"]], Appearance -> "Frameless"], " in ", "next_expression"}], 
            Column[{
              
              Column[{"  69.          constants.WXF_CONSTANTS.RuleDelayed: \
\"consume_rule_delayed\",", "  70.      }", "  71.  ", 
                "  72.      def next_expression(self, tokens, **kwargs):", 
                "  73.          \"\"\"Deserialize the next expression \
starting at the next token yield by `tokens`.\"\"\"", 
                "  74.          token = next(tokens)", 
                "  75.          consumer = \
self._consumer_from_type(token.wxf_type)", 
                Item[
                "  76.          return consumer(token, tokens, **kwargs)", 
                 Background -> LightYellow], "  77.  ", 
                "  78.      def _consumer_from_type(self, wxf_type):", 
                "  79.          try:", 
                "  80.              func = self._mapping[wxf_type]", 
                "  81.          except KeyError:", 
                "  82.              raise WolframParserException("}, 
               Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  "self", "<ExternalEvaluateConsumer globals=5 objects=4>"}, {
                  "tokens", 
                   "<generator object WXFParser.tokens at 0x168ecb040>"}, {
                  "kwargs", "{}"}, {
                  "token", "WXFToken<b'f', data=None, len=4>"}, {
                  "consumer", 
                   "<bound method ExternalEvaluateConsumer.consume_function \
of <ExternalEvaluateConsumer globals=5 objects=4>>"}}, 
                 Background -> {Null, {LightGray}}, Alignment -> Left, Frame -> 
                 LightGray]}]}]}, False], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                SystemOpen[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless"], " in ", 
              "consume_function"}], 
            Column[{
              
              Column[{" 366.          self.routes_registry = \
registry(self.builtin_routes, **routes_registry)", " 367.  ", 
                " 368.      def consume_function(self, *args, **kwargs):", 
                " 369.          expr = super().consume_function(*args, \
**kwargs)", " 370.  ", 
                " 371.          if check_wl_symbol(expr, self.hook_symbol):", 
                " 372.              assert len(expr.args) >= 1", 
                Item[
                " 373.              return \
self.dispatch_wl_object(*expr.args)", Background -> LightYellow], " 374.  ", 
                " 375.          return expr", " 376.  ", 
                " 377.      def dispatch_wl_object(self, route, *args):", 
                " 378.          return self.routes_registry[route](self, \
*args)", " 379.  "}, Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  "self", "<ExternalEvaluateConsumer globals=5 objects=4>"}, {
                  "args", 
                   "(<wolframclient.deserializers.wxf.wxfparser.WXFToken \
object at 0x168f06750>, <generator object WXFParser.tokens at \
0x168ecb040>)"}, {"kwargs", "{}"}, {
                  "expr", 
                   "ExternalEvaluate`Private`ExternalEvaluateCommand['\
MethodCall', None, hypernetx.classes.hypergraph.Hypergraph, 'bipartite', \
Rule['ReturnType', 'ExternalObject']]"}, {
                  "__class__", 
                   "<class \
'wolframclient.utils.externalevaluate.ExternalEvaluateConsumer'>"}}, 
                 Background -> {Null, {LightGray}}, Alignment -> Left, Frame -> 
                 LightGray]}]}]}, False], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                SystemOpen[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless"], " in ", 
              "dispatch_wl_object"}], 
            Column[{
              
              Column[{" 371.          if check_wl_symbol(expr, \
self.hook_symbol):", " 372.              assert len(expr.args) >= 1", 
                " 373.              return \
self.dispatch_wl_object(*expr.args)", " 374.  ", " 375.          return expr",
                 " 376.  ", 
                " 377.      def dispatch_wl_object(self, route, *args):", 
                Item[
                " 378.          return self.routes_registry[route](self, \
*args)", Background -> LightYellow], " 379.  ", 
                " 380.      def __repr__(self):", 
                " 381.          return \"<{} globals={} \
objects={}>\".format(", 
                " 382.              self.__class__.__name__, \
len(self.globals_registry), len(self.objects_registry)", " 383.          )", 
                " 384.  "}, Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  "self", "<ExternalEvaluateConsumer globals=5 objects=4>"}, {
                  "route", "MethodCall"}, {
                  "args", 
                   "(None, hypernetx.classes.hypergraph.Hypergraph, \
'bipartite', Rule['ReturnType', 'ExternalObject'])"}}, 
                 Background -> {Null, {LightGray}}, Alignment -> Left, Frame -> 
                 LightGray]}]}]}, False], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                SystemOpen[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless"], " in ", "MethodCall"}], 
            Column[{
              
              Column[{" 288.  @routes.register_function", 
                " 289.  def FromComplex(consumer, a, b):", 
                " 290.      return complex(a, b)", " 291.  ", " 292.  ", 
                " 293.  @routes.register_function", 
                " 294.  def MethodCall(consumer, result, names, *args):", 
                Item[
                " 295.      return Call(consumer, GetAttribute(consumer, \
result, names), *args)", Background -> LightYellow], " 296.  ", " 297.  ", 
                " 298.  @routes.register_function", 
                " 299.  def FromMissing(consumer):", " 300.      return", 
                " 301.  "}, Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  "consumer", 
                   "<ExternalEvaluateConsumer globals=5 objects=4>"}, {
                  "result", 
                   "None, <class \
'hypernetx.classes.hypergraph.Hypergraph'>"}, {"names", "bipartite"}, {
                  "args", "(Rule['ReturnType', 'ExternalObject'],)"}}, 
                 Background -> {Null, {LightGray}}, Alignment -> Left, Frame -> 
                 LightGray]}]}]}, True], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                SystemOpen[
                "/Applications/Wolfram/Prototype/Wolfram.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless"], " in ", "Call"}], 
            Column[{
              
              Column[{" 248.  ", " 249.  ", 
                " 250.  @routes.register_function", 
                " 251.  def Call(consumer, result, *args):", " 252.  ", 
                " 253.      pos, kwargs = unpack_optionals(args)", " 254.  ", 
                
                Item[
                " 255.      return result(*pos, **kwargs)", Background -> 
                 LightYellow], " 256.  ", " 257.  @routes.register_function", 
                " 258.  def FromUnixTime(consumer, unixtime, timezone):", 
                " 259.      if timezone is None:", " 260.          pass", 
                " 261.      elif isinstance(timezone, six.string_types):"}, 
               Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  "consumer", 
                   "<ExternalEvaluateConsumer globals=5 objects=4>"}, {
                  "result", 
                   "<bound method Hypergraph.bipartite of None, \
hypernetx.classes.hypergraph.Hypergraph>"}, {
                  "args", "(Rule['ReturnType', 'ExternalObject'],)"}, {
                  "pos", "[]"}, {
                  "kwargs", "{'ReturnType': 'ExternalObject'}"}}, 
                 Background -> {Null, {LightGray}}, Alignment -> Left, Frame -> 
                 LightGray]}]}]}, True]}], FontFamily -> "Courier"]}, True]|>],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.924613879646758*^9, 3.924613886420574*^9}, 
   3.924614229906496*^9, {3.924614823682707*^9, 3.924614856876055*^9}},
 CellLabel->"Out[45]=",ExpressionUUID->"a7485754-ea3d-4d9d-825b-89a268c2294d"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ExternalEvaluate", "[", 
  RowBox[{"session", ",", 
   RowBox[{"<|", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"\"\<Command\>\"", "->", 
      RowBox[{"\"\<lambda obj: obj.bipartite()\>\"", "->", "obj"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<ReturnType\>\"", "->", "\"\<ExternalObject\>\""}]}], 
    "\[IndentingNewLine]", "|>"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.924613907452525*^9, 3.924613962826131*^9}},
 CellLabel->"In[39]:=",ExpressionUUID->"7ddf01c1-c141-45c0-a438-5033492a2390"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["ExternalObject",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{
              Thickness[0.05], {
               FaceForm[{
                 RGBColor[1., 1., 1.], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 
                 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {
                 1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
                 3}, {0, 1, 0}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}}, {{1, 4, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                 0}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 
                 3}, {1, 3, 3}}}, {{{7.5718000000000005`, 17.7334}, {7.0998, 
                 17.7334}, {6.7168, 17.342399999999998`}, {6.7168, 16.8624}, {
                 6.7168, 16.3854}, {7.0998, 15.997399999999999`}, {
                 7.5718000000000005`, 15.997399999999999`}, {
                 8.043800000000001, 15.997399999999999`}, {8.4268, 16.3854}, {
                 8.4268, 16.8624}, {8.4268, 17.342399999999998`}, {
                 8.043800000000001, 17.7334}, {7.5718000000000005`, 
                 17.7334}}, CompressedData["
1:eJxTTMoPSmViYGBQAWIQvXD12hvxZbwODSxH+w2/izl86QsuUZnOAuezVHCr
aNT9se+5ncGQzyjl8EZ2+QsPve/2X6bfndzeKu/Qst2h6dHxD/ZfvSLbLMSU
4fz1U1I7kmVV4erNVtuFRxdqOCRs3P9mns0fe98WXv/1ItoOR9qWh58yYnP4
+AVowA4dh6z8D60nQwTg/EsTY/45/1KG87O1v02/K6zi8O7kYae1L3UdBLi3
Lqs8Lubw+zRQhEnPwdnuxc01v8QcGtQOtS2fbgDng2w5ctHQgc1E0MzGVsLB
+wS77exSIwfP/bWyFunyDs2BnnMbjhk5+CzjclP9quCwVMdZ5vUjI4cJhuW6
ivFKDqbvLVzdPxk5JIYEqS84qezgLyeW5fvZyGHaJp7CNacRfAOQAamqcD63
m2op0y01h3aQA54YOZx6ar/kvp0G3D4rZa/q5vVaEPMnQe0v1XG4bgIUWG4I
58P8A+M/mCO4dC+jJpy/M5vz54Llag73gLESNVkLEm/7VBwOWgItcNaA86PE
t19kiJOH80OmKfaVFkrC+ZbpLpn5BSIOx3JNGrY7KMH5UZf3PBaZKwfnw9IH
AO506oE=
                 "], {{12.401800000000001`, 4.1044}, {11.9298, 4.1044}, {
                 11.5458, 3.7164}, {11.5458, 3.2394}, {11.5458, 
                 2.7593999999999994`}, {11.9298, 2.369399999999999}, {
                 12.401800000000001`, 2.369399999999999}, {
                 12.872800000000002`, 2.369399999999999}, {13.2568, 
                 2.7593999999999994`}, {13.2568, 3.2394}, {13.2568, 3.7164}, {
                 12.872800000000002`, 4.1044}, {12.401800000000001`, 
                 4.1044}}, CompressedData["
1:eJxTTMoPSmViYGBQAWIQ/Uei+LrQJ2UHhUNty8NPfbBfaXrW2m+iEpyvdVrg
+C4LRYcC3899wSWf7M+tOn81LEfe4cBGvbzFjN/sb635FZPrKuPgUPST/+X2
n/bOdi9urvkl5sARP8NHtIfRAcY/smKJn4MwD5y/aIv5j0MpcnB+rknDdocm
RQepRxHi2y9KOeyeNoG/qkzZIQrIY4iTh/MPWip7VTtrwPkuv96+PmCpDedf
mhjzz3mXroPFtaO5JgxqcP6DOYJL9zJqwvldfU8+yV/ScWBbPMmKMdfA4eMX
r8i2HToOE/mrzFbXGcL5GnU9O7M1jRympHYkx8ZoO9z8AJIwcjBbbRceXajh
0Pzo+Izd34wc3p087LT2pQqcL7R070HxNCWH+TY6V2YB1SeEBKkv6JR3kKlJ
NAoVAKo/APTIb0kHkDMbphs6NLAc7Tf8LgZ3D4wPdu8vZTgfSJbrPlR2WNC5
4eHLqSIOz+yX3N/Xp+OQF1a7bluSiIPPMi431VIdeHjD+CLAYLzHxOQwi0N6
XpymlsMFzgylnIpf9lURK4AxrgGPT3B47lRzWNAU6Dm34ZP94ZRVQKerwtMD
enoBAPI7A7I=
                 "]}]}, {
               FaceForm[{
                 RGBColor[0.20800000000000002`, 0.514, 0.6859999999999999], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}}, {{1, 4, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                 0}, {1, 3, 3}, {1, 3, 3}}}, {{{7.5718000000000005`, 
                 17.6836}, {8.014800000000001, 17.6836}, {8.3778, 17.3156}, {
                 8.3778, 16.862599999999997`}, {8.3778, 16.4116}, {
                 8.014800000000001, 16.046599999999998`}, {
                 7.5718000000000005`, 16.046599999999998`}, {7.1268, 
                 16.046599999999998`}, {6.7658000000000005`, 16.4116}, {
                 6.7658000000000005`, 16.862599999999997`}, {
                 6.7658000000000005`, 17.3156}, {7.1268, 17.6836}, {
                 7.5718000000000005`, 17.6836}}, CompressedData["
1:eJxTTMoPSmViYGBQBWIQnRgSpL7gpLLDYxHZk0//GzmYnbX2uxio5NBvWK6r
COQ7nU+7+vyVgsOa7tsZDO+NHKLEt19kiJN3EPMI+CNx2cgh6fBl7VRJCYd/
zr/evm4wchDg3rqs8riYQ2vU5T2PrxjC+XxzjBdtmW4A59fKWqS7vNR1uDQx
BqhVGYMPVKRpdUkHrh7Gb5l3dtX5UAE4v+gn/8vt69ng/DOHndZm3vttD+YH
aTt8OAkS+Gb/aUNA9qxyDQeec5KBt6Q/2N/XnbDgh6GqgwTQ2/ZL3tt77Ae6
QF0Zrv6Nhat7UaW8wxWXGx++eP223xet4PgxWcqBJ0Mpp6KK2aFlefgpoyNi
DgtXr70RX8YL5wcBbZmzSASDP2llU6DnXDk4/4fhs3WqKkoOb/V3q/N3Szq0
nQw5uGKJCjx8YfyDlspe1c4acL5XdbO+zzItOP+Z/ZL7+/p0HJR2/mn/MlsN
zgfybl9n1ITzYeEP4wNjvXPDQUOHa8+ztL9N13IARW/+QiO4fbD4haQPNYfO
DQ9fTv1k5NADUueoColvBmMH9PQDAFGHDrQ=
                 "]}]}, {
               FaceForm[{
                 RGBColor[0.976, 0.8430000000000001, 0.353], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}}, {{0, 2, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {
                 0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}}}, {{{12.4014, 4.0552}, {12.846400000000001`, 4.0552}, {
                 13.2074, 3.6902}, {13.2074, 3.2392000000000003`}, {13.2074, 
                 2.7862}, {12.846400000000001`, 2.4182}, {12.4014, 2.4182}, {
                 11.958400000000001`, 2.4182}, {11.595400000000001`, 
                 2.7862}, {11.595400000000001`, 3.2392000000000003`}, {
                 11.595400000000001`, 3.6902}, {11.958400000000001`, 
                 4.0552}, {12.4014, 4.0552}}, CompressedData["
1:eJxTTMoPSmViYGBQBGIQ3bszm/PnAl2HgsWMe1gv6TjA+Ec26uUtZtSE819t
X8/8nEfNISJ64/43ctoOlq7uRT/7lR06k2PvuDlrwPkvs7S/TY+Vh/MvpF19
nrVaCs6fH6d5WuC4mMNLkHk9inB+1r3Crr4UOTi/LerynsciPAh5hvxGlqNM
Dr8OpaxKuCLlcO96Y7HblF/2MPtesZgImtl8tde5MuuZbLqSw52tLTUXNr+1
/3363cnDTKoOCo4fk8/EvraHuRem3j4c6KEcLQel5HdRTna/7Ndlghyi4zCL
Q3penCaTA4wPcw+Mn7H5VfHWqSIO6sGsiyf9UsbgG2itFL5wRAyuHsYH+zvH
AM6PATlsjSGcbwwKeGUjhzV2QIfZSzn8sSo41zHJyKGuBxgRlfIOGUo5FVWs
xg62s0Pnr85VcljVFOg5l8HYoX15+CkjFlW4+l23uv6mlms4/OIH2uhs5BAg
J5bl+1kLYj/QPlh8w9wD4wMA37PnHw==
                 "]}]}}, {
             ImageSize -> 
              Dynamic[{
                Automatic, 
                 3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                  Magnification])}], AspectRatio -> Automatic, 
              ImageSize -> {20., 20.}, PlotRange -> {{0., 20.}, {0., 20.}}}], 
            
            GridBox[{{
               RowBox[{
                 TagBox["\"System: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Python\"", "SummaryItem"]}], 
               RowBox[{
                 TagBox["\"IsModule: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["False", "SummaryItem"]}], ""}, {
               RowBox[{
                 TagBox["\"Module: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"networkx.classes.graph\"", "SummaryItem"]}], 
               RowBox[{
                 TagBox["\"IsClass: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["False", "SummaryItem"]}], "\[SpanFromLeft]"}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{
              Thickness[0.05], {
               FaceForm[{
                 RGBColor[1., 1., 1.], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 
                 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {
                 1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
                 3}, {0, 1, 0}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}}, {{1, 4, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                 0}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 
                 3}, {1, 3, 3}}}, {{{7.5718000000000005`, 17.7334}, {7.0998, 
                 17.7334}, {6.7168, 17.342399999999998`}, {6.7168, 16.8624}, {
                 6.7168, 16.3854}, {7.0998, 15.997399999999999`}, {
                 7.5718000000000005`, 15.997399999999999`}, {
                 8.043800000000001, 15.997399999999999`}, {8.4268, 16.3854}, {
                 8.4268, 16.8624}, {8.4268, 17.342399999999998`}, {
                 8.043800000000001, 17.7334}, {7.5718000000000005`, 
                 17.7334}}, CompressedData["
1:eJxTTMoPSmViYGBQAWIQvXD12hvxZbwODSxH+w2/izl86QsuUZnOAuezVHCr
aNT9se+5ncGQzyjl8EZ2+QsPve/2X6bfndzeKu/Qst2h6dHxD/ZfvSLbLMSU
4fz1U1I7kmVV4erNVtuFRxdqOCRs3P9mns0fe98WXv/1ItoOR9qWh58yYnP4
+AVowA4dh6z8D60nQwTg/EsTY/45/1KG87O1v02/K6zi8O7kYae1L3UdBLi3
Lqs8Lubw+zRQhEnPwdnuxc01v8QcGtQOtS2fbgDng2w5ctHQgc1E0MzGVsLB
+wS77exSIwfP/bWyFunyDs2BnnMbjhk5+CzjclP9quCwVMdZ5vUjI4cJhuW6
ivFKDqbvLVzdPxk5JIYEqS84qezgLyeW5fvZyGHaJp7CNacRfAOQAamqcD63
m2op0y01h3aQA54YOZx6ar/kvp0G3D4rZa/q5vVaEPMnQe0v1XG4bgIUWG4I
58P8A+M/mCO4dC+jJpy/M5vz54Llag73gLESNVkLEm/7VBwOWgItcNaA86PE
t19kiJOH80OmKfaVFkrC+ZbpLpn5BSIOx3JNGrY7KMH5UZf3PBaZKwfnw9IH
AO506oE=
                 "], {{12.401800000000001`, 4.1044}, {11.9298, 4.1044}, {
                 11.5458, 3.7164}, {11.5458, 3.2394}, {11.5458, 
                 2.7593999999999994`}, {11.9298, 2.369399999999999}, {
                 12.401800000000001`, 2.369399999999999}, {
                 12.872800000000002`, 2.369399999999999}, {13.2568, 
                 2.7593999999999994`}, {13.2568, 3.2394}, {13.2568, 3.7164}, {
                 12.872800000000002`, 4.1044}, {12.401800000000001`, 
                 4.1044}}, CompressedData["
1:eJxTTMoPSmViYGBQAWIQ/Uei+LrQJ2UHhUNty8NPfbBfaXrW2m+iEpyvdVrg
+C4LRYcC3899wSWf7M+tOn81LEfe4cBGvbzFjN/sb635FZPrKuPgUPST/+X2
n/bOdi9urvkl5sARP8NHtIfRAcY/smKJn4MwD5y/aIv5j0MpcnB+rknDdocm
RQepRxHi2y9KOeyeNoG/qkzZIQrIY4iTh/MPWip7VTtrwPkuv96+PmCpDedf
mhjzz3mXroPFtaO5JgxqcP6DOYJL9zJqwvldfU8+yV/ScWBbPMmKMdfA4eMX
r8i2HToOE/mrzFbXGcL5GnU9O7M1jRympHYkx8ZoO9z8AJIwcjBbbRceXajh
0Pzo+Izd34wc3p087LT2pQqcL7R070HxNCWH+TY6V2YB1SeEBKkv6JR3kKlJ
NAoVAKo/APTIb0kHkDMbphs6NLAc7Tf8LgZ3D4wPdu8vZTgfSJbrPlR2WNC5
4eHLqSIOz+yX3N/Xp+OQF1a7bluSiIPPMi431VIdeHjD+CLAYLzHxOQwi0N6
XpymlsMFzgylnIpf9lURK4AxrgGPT3B47lRzWNAU6Dm34ZP94ZRVQKerwtMD
enoBAPI7A7I=
                 "]}]}, {
               FaceForm[{
                 RGBColor[0.20800000000000002`, 0.514, 0.6859999999999999], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}}, {{1, 4, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                 0}, {1, 3, 3}, {1, 3, 3}}}, {{{7.5718000000000005`, 
                 17.6836}, {8.014800000000001, 17.6836}, {8.3778, 17.3156}, {
                 8.3778, 16.862599999999997`}, {8.3778, 16.4116}, {
                 8.014800000000001, 16.046599999999998`}, {
                 7.5718000000000005`, 16.046599999999998`}, {7.1268, 
                 16.046599999999998`}, {6.7658000000000005`, 16.4116}, {
                 6.7658000000000005`, 16.862599999999997`}, {
                 6.7658000000000005`, 17.3156}, {7.1268, 17.6836}, {
                 7.5718000000000005`, 17.6836}}, CompressedData["
1:eJxTTMoPSmViYGBQBWIQnRgSpL7gpLLDYxHZk0//GzmYnbX2uxio5NBvWK6r
COQ7nU+7+vyVgsOa7tsZDO+NHKLEt19kiJN3EPMI+CNx2cgh6fBl7VRJCYd/
zr/evm4wchDg3rqs8riYQ2vU5T2PrxjC+XxzjBdtmW4A59fKWqS7vNR1uDQx
BqhVGYMPVKRpdUkHrh7Gb5l3dtX5UAE4v+gn/8vt69ng/DOHndZm3vttD+YH
aTt8OAkS+Gb/aUNA9qxyDQeec5KBt6Q/2N/XnbDgh6GqgwTQ2/ZL3tt77Ae6
QF0Zrv6Nhat7UaW8wxWXGx++eP223xet4PgxWcqBJ0Mpp6KK2aFlefgpoyNi
DgtXr70RX8YL5wcBbZmzSASDP2llU6DnXDk4/4fhs3WqKkoOb/V3q/N3Szq0
nQw5uGKJCjx8YfyDlspe1c4acL5XdbO+zzItOP+Z/ZL7+/p0HJR2/mn/MlsN
zgfybl9n1ITzYeEP4wNjvXPDQUOHa8+ztL9N13IARW/+QiO4fbD4haQPNYfO
DQ9fTv1k5NADUueoColvBmMH9PQDAFGHDrQ=
                 "]}]}, {
               FaceForm[{
                 RGBColor[0.976, 0.8430000000000001, 0.353], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}}, {{0, 2, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {
                 0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}}}, {{{12.4014, 4.0552}, {12.846400000000001`, 4.0552}, {
                 13.2074, 3.6902}, {13.2074, 3.2392000000000003`}, {13.2074, 
                 2.7862}, {12.846400000000001`, 2.4182}, {12.4014, 2.4182}, {
                 11.958400000000001`, 2.4182}, {11.595400000000001`, 
                 2.7862}, {11.595400000000001`, 3.2392000000000003`}, {
                 11.595400000000001`, 3.6902}, {11.958400000000001`, 
                 4.0552}, {12.4014, 4.0552}}, CompressedData["
1:eJxTTMoPSmViYGBQBGIQ3bszm/PnAl2HgsWMe1gv6TjA+Ec26uUtZtSE819t
X8/8nEfNISJ64/43ctoOlq7uRT/7lR06k2PvuDlrwPkvs7S/TY+Vh/MvpF19
nrVaCs6fH6d5WuC4mMNLkHk9inB+1r3Crr4UOTi/LerynsciPAh5hvxGlqNM
Dr8OpaxKuCLlcO96Y7HblF/2MPtesZgImtl8tde5MuuZbLqSw52tLTUXNr+1
/3363cnDTKoOCo4fk8/EvraHuRem3j4c6KEcLQel5HdRTna/7Ndlghyi4zCL
Q3penCaTA4wPcw+Mn7H5VfHWqSIO6sGsiyf9UsbgG2itFL5wRAyuHsYH+zvH
AM6PATlsjSGcbwwKeGUjhzV2QIfZSzn8sSo41zHJyKGuBxgRlfIOGUo5FVWs
xg62s0Pnr85VcljVFOg5l8HYoX15+CkjFlW4+l23uv6mlms4/OIH2uhs5BAg
J5bl+1kLYj/QPlh8w9wD4wMA37PnHw==
                 "]}]}}, {
             ImageSize -> 
              Dynamic[{
                Automatic, 
                 3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                  Magnification])}], AspectRatio -> Automatic, 
              ImageSize -> {20., 20.}, PlotRange -> {{0., 20.}, {0., 20.}}}], 
            
            GridBox[{{
               RowBox[{
                 TagBox["\"System: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Python\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"IsModule: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["False", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Module: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"networkx.classes.graph\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"IsClass: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["False", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"IsFunction: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["False", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"IsMethod: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["False", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"IsCallable: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["False", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Status: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Evaluated\"", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  ExternalObject[
   ExternalSessionObject["992a9a23-afee-4ee0-83e7-42ab47bede4d"], 
   ExternalEvaluate`RPC["GetReference", 6059809040], <|
   "IsModule" -> False, "Module" -> "networkx.classes.graph", "IsClass" -> 
    False, "IsFunction" -> False, "IsMethod" -> False, "IsCallable" -> 
    False|>],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.924613924658774*^9, 3.9246139632618237`*^9},
 CellLabel->"Out[39]=",ExpressionUUID->"7ea209df-61cf-45f9-a352-885da0832410"]
}, Open  ]]
}, Open  ]]
},
WindowSize->{1440, 847},
WindowMargins->{{0, Automatic}, {Automatic, 0}},
FrontEndVersion->"14.1 for Mac OS X ARM (64-bit) (May 13, 2024)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"47b05e0e-840e-4926-846b-c99212f26420"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[576, 22, 386, 8, 30, "Item",ExpressionUUID->"b8f07751-38e2-4e13-88cc-d8c8383ac2d6"],
Cell[965, 32, 174, 2, 29, "Input",ExpressionUUID->"31331d01-1d8b-4051-ae28-c3b4c0d6d5c5"],
Cell[CellGroupData[{
Cell[1164, 38, 1102, 21, 172, "Input",ExpressionUUID->"56c64ba7-d7f5-4299-914c-6a3b2452c64d"],
Cell[2269, 61, 44869, 863, 58, "Output",ExpressionUUID->"ba497a5e-caf3-4333-9bee-f2903f6501d8"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[47187, 930, 177, 3, 30, "Item",ExpressionUUID->"7bae5f90-cbe1-423b-b212-fd324b6cea2d"],
Cell[47367, 935, 367, 7, 29, "Input",ExpressionUUID->"6ada687a-ed17-4a1c-865c-33826b74081f"],
Cell[47737, 944, 348, 7, 29, "Input",ExpressionUUID->"a9a49a82-3286-4e15-9979-b396df2de222"]
}, Open  ]],
Cell[CellGroupData[{
Cell[48122, 956, 170, 3, 30, "Item",ExpressionUUID->"d78434e9-8820-47a7-bd31-779dcc096376"],
Cell[CellGroupData[{
Cell[48317, 963, 327, 8, 29, "Input",ExpressionUUID->"994b0121-00e0-4a60-b6b0-850b2806a159"],
Cell[48647, 973, 19538, 359, 58, "Output",ExpressionUUID->"f4736767-056f-4f0c-b50a-270a1090aba5"]
}, Open  ]],
Cell[CellGroupData[{
Cell[68222, 1337, 420, 11, 29, "Input",ExpressionUUID->"06c5f7d3-335e-4563-bb88-5117036da00c"],
Cell[68645, 1350, 204, 4, 33, "Output",ExpressionUUID->"224c896e-9cd9-4f02-9309-c2942b1268ea"]
}, Open  ]],
Cell[CellGroupData[{
Cell[68886, 1359, 518, 12, 29, "Input",ExpressionUUID->"1589b5d1-f902-4e2e-978d-6f75543a3c14"],
Cell[69407, 1373, 19352, 354, 58, "Output",ExpressionUUID->"87fed426-69f0-4033-b3aa-d37c433a962a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[88796, 1732, 354, 10, 29, "Input",ExpressionUUID->"5744c66e-1c52-4443-8ced-efbb6b7da125"],
Cell[89153, 1744, 19812, 364, 58, "Output",ExpressionUUID->"a5c17cf6-e38b-48c7-b17d-c1f6b879e0f8"]
}, Open  ]],
Cell[108980, 2111, 344, 8, 29, "Input",ExpressionUUID->"af92d578-9a5d-4fd0-9825-d347554c6a3b"],
Cell[CellGroupData[{
Cell[109349, 2123, 517, 14, 29, "Input",ExpressionUUID->"4a7b43e3-6e9c-468a-a51c-7cfeff531b4f"],
Cell[109869, 2139, 204, 4, 33, "Output",ExpressionUUID->"bfe458b5-a93e-4a42-b316-22026470117e"]
}, Open  ]],
Cell[CellGroupData[{
Cell[110110, 2148, 466, 12, 29, "Input",ExpressionUUID->"a31698f2-2a22-4f93-be0f-b59014229abc"],
Cell[110579, 2162, 341828, 6269, 60, "Output",ExpressionUUID->"25f44cf2-c070-4355-a8f9-a1e1b9ddc886"]
}, Open  ]],
Cell[CellGroupData[{
Cell[452444, 8436, 923, 22, 90, "Input",ExpressionUUID->"631bfc01-ca7e-4a87-96aa-2dff102e324c"],
Cell[453370, 8460, 19108, 350, 58, "Output",ExpressionUUID->"2ee1b4e5-cf27-4b5f-bbb2-5995101cd8f7"]
}, Open  ]],
Cell[CellGroupData[{
Cell[472515, 8815, 434, 8, 29, "Input",ExpressionUUID->"4d68b2d8-7ef4-4d98-a4cc-f811410a8ad7"],
Cell[472952, 8825, 217492, 4019, 60, "Output",ExpressionUUID->"a7485754-ea3d-4d9d-825b-89a268c2294d"]
}, Open  ]],
Cell[CellGroupData[{
Cell[690481, 12849, 544, 11, 90, "Input",ExpressionUUID->"7ddf01c1-c141-45c0-a438-5033492a2390"],
Cell[691028, 12862, 19003, 346, 58, "Output",ExpressionUUID->"7ea209df-61cf-45f9-a352-885da0832410"]
}, Open  ]]
}, Open  ]]
}
]
*)

